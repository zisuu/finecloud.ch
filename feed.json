{
    "version": "https://jsonfeed.org/version/1",
    "title": "Finecloud",
    "description": "",
    "home_page_url": "https://www.finecloud.ch",
    "feed_url": "https://www.finecloud.ch/feed.json",
    "user_comment": "",
    "author": {
        "name": "Finecloud"
    },
    "items": [
        {
            "id": "https://www.finecloud.ch/data-validation-overview.html",
            "url": "https://www.finecloud.ch/data-validation-overview.html",
            "title": "Data Validation Overview",
            "summary": "What is Validation? Validation is a process of making assertions against data to ensure data integrity Is a value required? How long is a phone number? Is it a good date? What is the maximum length of a string? Some refer to data validation as&hellip;",
            "content_html": "<h2>What is Validation?</h2>\n<ul>\n<li>Validation is a process of making assertions against data to ensure data integrity</li>\n<li>Is a value required? How long is a phone number?</li>\n<li>Is it a good date? What is the maximum length of a string?</li>\n<li>Some refer to data validation as defensive programming</li>\n<li>Or a process of trust but verify</li>\n<li>Validation is an important step, but easily overlooked</li>\n</ul>\n<h2>When to Validate?</h2>\n<ul>\n<li>Validate data early and often!</li>\n<li>Validation should occur with every exchange</li>\n<li>User input data should be validated in the UI with rich user feedback</li>\n<li>RESTful API data should be validated early in the controller, before the service layer</li>\n<li>Data should be validated before persistence to the database</li>\n<li>Database constraints will also enforce data validation</li>\n<li>Best to validate early - Handling persistence errors is ugly</li>\n</ul>\n<h2>Java Bean Validation</h2>\n<ul>\n<li>Java Bean Validation is a Java API standard</li>\n<li>Provides for a standard way of performing validation and handling errors</li>\n<li>Much more graceful than custom code blocks of if… then… throw Exception</li>\n<li>Bean Validation is an API, like JPA or JDBC you need an implementation</li>\n<li>Fun Fact - Gunnar Morling, founder of MapStruct is the spec lead for the Bean Validation API and contributor of the Hibernate Implementation of the Bean Validation API</li>\n</ul>\n<h2>Jakarta Bean Validation 3.0</h2>\n<ul>\n<li>Released July of 2020</li>\n<li>Name changed from Bean Validation to Jakarta Bean Validation</li>\n<li>Only change from 2.0 to 3.0 is the API package changes</li>\n<li>2.0 - javax.validation</li>\n<li>3.0 - jakarta.validaton</li>\n<li>Used in Spring Framework 6.x+</li>\n<li>Hibernate Validator 7.x+ is the implementation</li>\n</ul>\n<h2>Built In Constraint Definitions</h2>\n<ul>\n<li>@Null - Checks value is null</li>\n<li>@NotNull - Checks value is not null</li>\n<li>@AssertTrue - Value is true</li>\n<li>@AssertFalse - Value is false</li>\n<li>@Min - Number is equal or higher</li>\n<li>@Max - Number is equal or less</li>\n<li>@DecimalMin - Value is larger</li>\n<li>@DecimalMax - Value is less than</li>\n<li>@Negative - Value is less than zero. Zero invalid.</li>\n<li>@NegativeOrZero - Value is zero or less than zero</li>\n<li>@Positive - Value is greater than zero. Zero invalid.</li>\n<li>@PositiveOrZero - Value is zero or greater than zero.</li>\n<li>@Size - checks if string or collection is between a min and max</li>\n<li>@Digits - check for integer digits and fraction digits</li>\n<li>@Past - Checks if date is in past</li>\n<li>@PastOrPresent - Checks if date is in past or present</li>\n<li>@Future - Checks if date is in future</li>\n<li>@FutureOrPresent - Checks if date is present or in future</li>\n<li>@Pattern - checks against RegEx pattern</li>\n<li>@NotEmpty - Checks if value is not null nor empty (whitespace characters or empty collection)</li>\n<li>@NonBlank - Checks string is not null or not whitespace characters</li>\n<li>@Email - Checks if string value is an email address</li>\n</ul>\n<h2>Hiberate Validator Constraints</h2>\n<ul>\n<li>@ScriptAssert - Class level annotation, checks class against script</li>\n<li>@CreditCardNumber - Verifies value is a credit card number</li>\n<li>@Currency - Valid currency amount</li>\n<li>@DurationMax - Duration less than given value</li>\n<li>@DurationMin - Duration greater than given value</li>\n<li>@EAN - Valid EAN barcode</li>\n<li>@ISBN - Valid ISBN value</li>\n<li>@Length - String length between given min and max</li>\n<li>@CodePointLength - Validates that code point length of the annotated character sequence is between min and max included.</li>\n<li>@LuhnCheck - Luhn check sum</li>\n<li>@Mod10Check - Mod 10 check sum</li>\n<li>@Mod11Check - Mod 11 check sum</li>\n<li>@Range - checks if number is between given min and max (inclusive)</li>\n<li>@SafeHtml - Checks for safe HTML</li>\n<li>@UniqueElements - Checks if collection has unique elements</li>\n<li>@Url - checks for valid URL</li>\n<li>@CNPJ - Brazilian Corporate Tax Payer Registry Number</li>\n<li>@CPF - Brazilian Individual Taxpayer Registry Number</li>\n<li>@TituloEleitoral - Brazilian voter ID</li>\n<li>@NIP - Polish VAR ID</li>\n<li>@PESEL - Polish National Validation Number</li>\n<li>@REGON - Polish Taxpayer ID</li>\n</ul>\n<h2>Validation and Spring Framework</h2>\n<ul>\n<li>Spring Framework has robust support for bean validation</li>\n<li>Validation support can be used in controllers, and services, and other Spring managed components</li>\n<li>Spring MVC will return a 400 Bad Request Error for validation failures</li>\n<li>Spring Data JPA with throw an exception for JPA constraint violations</li>\n</ul>\n<h2>Spring Boot and Validation</h2>\n<ul>\n<li>Spring Boot will auto-configure validation when the validation implementation is found on classpath</li>\n<li>If API is only on classpath (with no implementation) you can use the annotations, BUT validation will NOT occur</li>\n<li>Prior to Spring Boot 2.3, validation was included in starter dependencies</li>\n<li>After Spring Boot 2.3, you must include the Spring Boot validation starter</li>\n</ul>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "java",
                   "dev"
            ],
            "date_published": "2023-05-02T20:07:36+02:00",
            "date_modified": "2023-05-02T20:07:36+02:00"
        },
        {
            "id": "https://www.finecloud.ch/data-transfer-objects.html",
            "url": "https://www.finecloud.ch/data-transfer-objects.html",
            "title": "Data Transfer Objects",
            "summary": "Data Transfer Objects DTOs - Data Transfer Objects DTOs are simple Java POJOs DTOs are data structures, generally should NOT have behavior DTOs are objects used to transfer data between producers and consumers Controller models are typically DTOs Why Not Entities? Database Entities are also&hellip;",
            "content_html": "<h2>Data Transfer Objects</h2>\n<ul>\n<li>DTOs - Data Transfer Objects</li>\n<li>DTOs are simple Java POJOs</li>\n<li>DTOs are data structures, generally should NOT have behavior</li>\n<li>DTOs are objects used to transfer data between producers and consumers</li>\n<li>Controller models are typically DTOs</li>\n</ul>\n<h2>Why Not Entities?</h2>\n<ul>\n<li>Database Entities are also POJOs, why can’t we use those?</li>\n<li>For simple applications you can</li>\n<li>Spring Data REST exposes database entities directly</li>\n<li>Database entities can “leak” data to client tier</li>\n<li>As applications become more complex, having the separation becomes more  important</li>\n<li>The needs of the consumers are different than the needs of persistence</li>\n<li>DTOs can be optimized for JSON serialization and deserialization</li>\n</ul>\n<h2>Type Conversions</h2>\n<ul>\n<li>Type Conversions are often done within methods</li>\n<li>Best practice is to use dedicated converters</li>\n<li>Single Responsibility Principle</li>\n<li>Spring Framework provides an Interface called “Converter” with generics</li>\n<li>Can be used with conjunction with Conversion service</li>\n<li>MapStruct is a code generator which automates generation of type converters</li>\n</ul>\n<h2>MapStruct</h2>\n<ul>\n<li>MapStruct is a code generator</li>\n<li>You provide the interface, MapStruct generates the implementation</li>\n<li>Works like Lombok via annotation processing during code compile</li>\n<li>Has good Spring integration - can generate Spring Converters or Spring Components</li>\n<li>You can use Mapstruct Components for injection into services<br><br><br></li>\n</ul>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "java",
                   "dev"
            ],
            "date_published": "2023-04-10T08:46:26+02:00",
            "date_modified": "2023-04-11T19:53:59+02:00"
        },
        {
            "id": "https://www.finecloud.ch/spring-exception-handling.html",
            "url": "https://www.finecloud.ch/spring-exception-handling.html",
            "title": "Spring Exception Handling",
            "summary": "HTTP Status Codes 100 Series - Informational Responses • 200 Series - Successful Responses 300 Series - Redirection Responses 400 Series - Client Error Responses 500 Series - Server Error Responses Use of HTTP Status Codes 200 Series are used when the request completes as&hellip;",
            "content_html": "<h3>HTTP Status Codes</h3>\n<div class=\"page\" title=\"Page 2\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>100 Series - Informational Responses • 200 Series - Successful Responses</li>\n<li>300 Series - Redirection Responses</li>\n<li>400 Series - Client Error Responses</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">500 Series - Server Error Responses</span></li>\n</ul>\n<h4>Use of HTTP Status Codes</h4>\n<div class=\"page\" title=\"Page 2\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<div class=\"page\" title=\"Page 3\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>200 Series are used when the request completes as expected\n<ul>\n<li>Common codes used: 200 Ok, 201 Created, 202 Accepted, 204 No Content</li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">400 Series are used when the request is understood but fails an expected condition</span>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">400 Bad Request - Invalid data received</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">401 Unauthorized - User authentication required</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">403 Forbidden - User authenticated, not authorized</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">404 Not Found - Requested Resource Not Found</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">405 Method Not Allowed - Method Not Supported</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">500 Series are used when there is a server side error</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Typically from unexpected runtime errors</span></li>\n<li>Null Pointer Errors, parse errors, database connection errors, etc</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Code should log relevant information</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Do not return stack trace to client</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Be careful to not “leak” information to internet</span></li>\n</ul>\n</li>\n</ul>\n<h3>Standard Spiring MVC Exceptions</h3>\n<ul>\n<li>Spring MVC does support a number of standard exceptions</li>\n<li>Standard Exceptions are handled by the DefaultHandlerExceptionResolver</li>\n<li>The DefaultHandlerExceptionResolver sets the appropriate HTTP status code</li>\n<li>BUT does not write content to the body of the response</li>\n<li>Spring MVC does have robust support for customizing error responses</li>\n<li>BindException - 400 Bad Request</li>\n<li>ConversionNotSupportedException - 500 Internal Server Error</li>\n<li>HttpMediaTypeNotAcceptableException - 406 Not Acceptable</li>\n<li>HttpMediaTypeNotSupportedException - 415 Unsupported Media Type</li>\n<li>HttpMessageNotReadableException - 400 Bad Request</li>\n<li>HttpMessageNotWritableException - 500 Internal Server Error</li>\n<li>HttpRequestMethodNotSupportedException - 405 Method Not Allowed</li>\n<li>MethodArgumentNotValidException - 400 Bad Request</li>\n<li>MissingServletRequestParameterException - 400 Bad Request</li>\n<li>MissingServletRequestPartException - 400 Bad Request</li>\n<li>NoSuchRequestHandlingMethodException - 404 Not Found</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">TypeMismatchException - 400 Bad Request</span></li>\n</ul>\n</div>\n<div class=\"column\">\n<h3>Spring Exception Handling</h3>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@ExceptionHandler on controller method to handle specific Exception types</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@ReponseStatus - annotation for custom exception classes to set desired HTTP status</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Implement AbstractHandlerException Resolver - full control over response (including body)</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@ControllerAdvice - used to implement a global exception handler</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">ResponseStatusException.class - (Spring 5+) Exception which can be thrown which allows setting the HTTP status and message in the constructor</span></li>\n</ul>\n<h3>Spring Boot ErrorController</h3>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Provides Whitelabel Error Page for HTML requests, or JSON response for RESTful requests</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Properties:</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">server.error.include-binding-errors - default: never</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">server.error.include-exception - default: false</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">server.error.include-message - default: never</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">server.error.include-stacktrace - default: never</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">server.error.path - default: /error</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">server.error.whitelabel.enabled - default: true</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Spring Boot includes a BasicError Controller</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">This class can be extended for additional error response customization</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Allows for wide support of the needs of various clients and situations</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Rarely used, but important to know it is available for use when needed</span></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "java",
                   "exceptions",
                   "dev"
            ],
            "date_published": "2023-04-10T08:36:13+02:00",
            "date_modified": "2023-04-10T08:45:10+02:00"
        },
        {
            "id": "https://www.finecloud.ch/mockmvc.html",
            "url": "https://www.finecloud.ch/mockmvc.html",
            "title": "Testing with MockMVC",
            "summary": "Why use Spring MockMVC? Spring MockMVC allows you to test the controller interactions in a servlet context without the application running in an application server. Mockito is the most popular mocking framework for testing Java Mocks (aka Test Doubles) are alternate implementations of objects to&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gtc0a48v1bq\">Why use Spring MockMVC?</a></li>\n<li><a href=\"#mcetoc_1gtbugt571b8\">Types of Tests</a>\n<ul>\n<li><a href=\"#mcetoc_1gtbugt571b9\">Unit Tests / Unit Testing</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1gtbugt571ba\">Integration Tests</a></li>\n<li><a href=\"#mcetoc_1gtbugt571bb\">Functional Tests</a></li>\n<li><a href=\"#mcetoc_1gtbugt571bc\">The major challenge with testing Servlets and Controllers</a></li>\n<li><a href=\"#mcetoc_1gtbugt571bd\">Spring Boot Test Splices</a></li>\n<li><a href=\"#mcetoc_1gtbugt571be\">Using Mocks</a></li>\n<li><a href=\"#mcetoc_1gtbugt571bf\">What is Mockito?</a></li>\n<li><a href=\"#mcetoc_1gtbugt571bg\">Types of Mocks</a></li>\n<li><a href=\"#mcetoc_1gtbugt571bh\">Testing Controllers</a></li>\n</ul>\n</div>\n<div class=\"question--question--152Yi\">\n<div class=\"ud-text-bold question--title--2FD-U\">\n<div class=\"question--title-text--2kBEO rt-scaffolding\" data-purpose=\"safely-set-inner-html:rich-text-viewer:html\">\n<h3 id=\"mcetoc_1gtc0a48v1bq\">Why use Spring MockMVC?</h3>\n</div>\n</div>\n<div class=\"question--answer--2ASXa\">\n<div data-purpose=\"safely-set-inner-html:submission:user-answer-body\">\n<p>Spring MockMVC allows you to test the controller interactions in a servlet context without the application running in an application server.</p>\n</div>\n</div>\n</div>\n<h3 id=\"mcetoc_1gtbugt571b8\">Types of Tests</h3>\n<div class=\"page\" title=\"Page 2\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<h4 id=\"mcetoc_1gtbugt571b9\">Unit Tests / Unit Testing</h4>\n<ul>\n<li>Code written to test code under test</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Designed to test specific sections of code</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Percentage of lines of code tested is code coverage</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Ideal coverage is in the 70-80% range</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Should be ‘unity’ and execute very fast</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Should have no external dependencies </span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">ie no database, no Spring context, etc</span></li>\n</ul>\n<div class=\"page\" title=\"Page 3\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<h3 id=\"mcetoc_1gtbugt571ba\">Integration Tests</h3>\n<ul>\n<li>Designed to test behaviors between objects and parts of the overall system</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Much larger scope</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Can include the Spring Context, database, and message brokers</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Will run much slower than unit tests</span></li>\n</ul>\n<h3 id=\"mcetoc_1gtbugt571bb\">Functional Tests</h3>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Typically means you are testing the running application</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Application is live, likely deployed in a known environment</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Functional touch points are tested - (i.e. Using a web driver, calling web services, sending / receiving messages, etc)</span></li>\n</ul>\n<h3 id=\"mcetoc_1gtbugt571bc\">The major challenge with testing Servlets and Controllers</h3>\n<div class=\"page\" title=\"Page 5\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>Spring MVC Controllers are tricky to test property</li>\n<li>Controllers have a high degree of integration with the Spring MVC Framework</li>\n<li>Request path and HTTP Method decides which method to invoke</li>\n<li>Path variables are parsed from path</li>\n<li>JSON is bound to POJOs</li>\n<li>Response is expressed as a HTTP Response</li>\n<li>JUnit tests are NOT sufficient to test the framework interaction</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Spring Mock MVC is a testing environment for the testing of Spring MVC controllers</span>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Provides mocks of the Servlet runtime environment</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">HTTP Request / Response, Dispatcher Servlet, etc</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Simulates the execution of controller as if it was running under Spring within Tomcat</span></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Can be run with or without the Spring Context</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">True unit test when run without the Spring Context</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Technically an Integration Test when used in conjunction with Spring Context</span></li>\n</ul>\n<div class=\"page\" title=\"Page 7\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<h3 id=\"mcetoc_1gtbugt571bd\">Spring Boot Test Splices</h3>\n<div class=\"page\" title=\"Page 7\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>Spring Boot supports a concept of what is called Test Splices</li>\n<li>Test Splices bring up a targeted segment of the Auto-Configured Spring Boot Environment\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">ie - Just the Database components; or just the web components</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">User defined Spring beans typically are NOT initialized</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@WebMvcTest - is a Spring Boot test splice which creates a MockMVC environment for </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">the controller (or controllers) under test</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Dependencies of controllers are NOT included</span></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mcetoc_1gtbugt571be\">Using Mocks</h3>\n<div class=\"page\" title=\"Page 8\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>Controller dependencies must be added to the Spring Context in the test environment</li>\n<li>Dependencies can be any proper implementation\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Example of why we code to an interface, any implementation will work</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">We could easily use the hash map implementation we’ve been using in the course </span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">For testing, it is common to use mock objects</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Mocks allow you to supply a specific response for a given input</span>\n<ul>\n<li>ie - when method abcd is called, return foo...</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<p> </p>\n<h3 id=\"mcetoc_1gtbugt571bf\">What is Mockito?</h3>\n<div class=\"page\" title=\"Page 9\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>\n<p>Mockito is the most popular mocking framework for testing Java</p>\n</li>\n<li>Mocks (aka Test Doubles) are alternate implementations of objects to replace real objects in tests</li>\n<li>Works well with Dependency Injection</li>\n<li>For the class under test, injected dependencies can be mocks</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<h3 id=\"mcetoc_1gtbugt571bg\">Types of Mocks</h3>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Dummy - Object used just to get the code to compile</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Fake - An object that has an implementation, but not production ready</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Stub - An object with pre-defined answers to method calls</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Mock - An object with pre-defined answers to method calls, and has expectations of executions. Can throw an exception if an unexpected invocation is detected</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Spy - In Mockito Spies are Mock like wrappers around the actual object</span></li>\n</ul>\n<h3 id=\"mcetoc_1gtbugt571bh\">Testing Controllers</h3>\n<div class=\"page\" title=\"Page 12\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>Argument captors can be used to verify request data is properly being parsed and passed to service layer</li>\n<li>Verify interactions can be used Mocked object was called</li>\n<li>Mock return values supply data back to controller\n<ul>\n<li>ie - object returned when getById is called on service</li>\n</ul>\n</li>\n<li>Mocks can also be instructed to throw exceptions to test exception handling</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "java",
                   "dev"
            ],
            "date_published": "2023-04-06T15:31:30+02:00",
            "date_modified": "2023-04-06T21:22:21+02:00"
        },
        {
            "id": "https://www.finecloud.ch/project-lombok.html",
            "url": "https://www.finecloud.ch/project-lombok.html",
            "title": "Project Lombok",
            "summary": "Intro Project Lombok is a Java library that provides a set of annotations and utility classes that help to reduce boilerplate code in Java projects. It offers features such as automatic generation of getters, setters, equals, hashCode, toString, and constructors, as well as support for&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gt6q7uargb\">Intro</a></li>\n<li><a href=\"#mcetoc_1gt6q7uargc\">How does it work?</a></li>\n<li><a href=\"#mcetoc_1gt6q7uargd\">Features</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1gt6q7uargb\">Intro</h3>\n<div class=\"flex flex-grow flex-col gap-3\">\n<div class=\"min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap\">\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\n<p>Project Lombok is a Java library that provides a set of annotations and utility classes that help to reduce boilerplate code in Java projects. It offers features such as automatic generation of getters, setters, equals, hashCode, toString, and constructors, as well as support for logging, fluent API creation, and more.</p>\n<p>By using Lombok annotations, developers can focus on writing the core business logic of their code and let Lombok generate the repetitive, boilerplate code for them. This reduces code verbosity and can lead to improved code readability and maintainability.</p>\n<p>Lombok is widely used in the Java community and can be integrated into popular IDEs such as Eclipse, IntelliJ, and NetBeans. It is also compatible with popular build tools such as Maven and Gradle.</p>\n<p>Overall, Lombok is a powerful tool for Java developers who want to increase productivity and reduce the amount of repetitive code in their projects.</p>\n<h3 id=\"mcetoc_1gt6q7uargc\">How does it work?</h3>\n<div class=\"page\" title=\"Page 4\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>\n<p>Hooks in via the Annotation processor API</p>\n</li>\n<li>The AST (raw source code) is passed to Lombok for code generation before java continues.</li>\n<li>Thus, produces properly compiled Java code in conjunction with the Java compiler</li>\n<li>NOTE: Code is generated and complied. No run-time performance penalty.</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">If you write an implantation of a method Project Lombok would generate, your code is used</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Make it easy to override Lombok generated code</span></li>\n</ul>\n<h3 id=\"mcetoc_1gt6q7uargd\">Features</h3>\n<ul>\n<li>val - declares final local variable</li>\n<li>var - declares mutable local variable</li>\n<li>@Getter\n<ul>\n<li>Creates getter methods for all properties</li>\n</ul>\n</li>\n<li>@Setter\n<ul>\n<li>Creates setter for all non-final properties</li>\n</ul>\n</li>\n<li>@ToString\n<ul>\n<li>Generates String of classname, and each field separated by commas</li>\n<li>Optional parameter to include field names</li>\n<li>Optional parameter to include call to the super toString method</li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@EqualsAndHashCode</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Generates implementations of ‘equals(Object other) and hashCode()</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">By default will use all non-static, non-transient properties</span></li>\n<li>Can optionally exclude specific properties</li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@NoArgsConstructor</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Generates no args constructor</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Will cause compiler error if there are final fields</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Can optionally force, which will initialize final fields with 0 / false / null</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@RequiredArgsContructor</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Generates a constructor for all fields that are final or marked @NonNull</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Constructor will throw a NullPointerException if any @NonNull fields are null</span></li>\n</ul>\n</li>\n<li>@Data\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Generates typical boilerplate code for POJOs</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Combines - @Getter, @Setter, @ToString, @EqualsAndHashCode, @RequiredArgsConstructor</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">No constructor is generated if constructors have been explicitly declared</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@Value</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">The immutable variant of @Data</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">All fields are made private and final by default</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@NonNull</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Set on parameter of method or constructor and a NullPointerException will be thrown if parameter is null</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@Builder</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Implements the ‘builder’ pattern for object creation</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Person.builder().name(\"Adam Savage\").city(\"San Francisco\").job(\"Mythbusters\").job(\"Unchained Reaction\").build();</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@SneakyThrows</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Throw checked exceptions without declaring in calling method’s throws clause</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@Syncronized</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">A safer implementation of Java’s synchronized</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@Log</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Creates a Java util logger • Java util loggers are awful</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@Slf4j</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Creates a SLF4J logger.</span></li>\n<li>Recommended - SLF4J is a generic logging facade</li>\n<li>Spring Boot’s default logger is LogBack</li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"column\"> </div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "lombok",
                   "java",
                   "dev"
            ],
            "date_published": "2023-04-05T21:00:00+02:00",
            "date_modified": "2023-04-05T21:00:00+02:00"
        },
        {
            "id": "https://www.finecloud.ch/spring-bean-lifecycle.html",
            "url": "https://www.finecloud.ch/spring-bean-lifecycle.html",
            "title": "Spring Bean Lifecycle",
            "summary": "Part 1 Of course, instantiating the class will come first. The class will populate properties after it has been created. It will therefore set up any properties you may have. Then, if they exist, we do have some interfaces that we can implement. These methods&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gt66f14j8k\">Part 1</a></li>\n<li><a href=\"#mcetoc_1gt66f14j8l\">Part 2</a></li>\n<li><a href=\"#mcetoc_1gt66f14j8m\">Callback Interfaces</a></li>\n<li><a href=\"#mcetoc_1gt66f14j8n\">Lifecycle Annotations</a></li>\n<li><a href=\"#mcetoc_1gt66f14j8o\">Bean Post Processors</a></li>\n<li><a href=\"#mcetoc_1gt66f14j8p\">Aware Interfaces</a></li>\n</ul>\n</div>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/83/lifecycle.png\" alt=\"\" width=\"1303\" height=\"562\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/83/responsive/lifecycle-xs.png 300w ,https://www.finecloud.ch/media/posts/83/responsive/lifecycle-sm.png 480w ,https://www.finecloud.ch/media/posts/83/responsive/lifecycle-md.png 768w ,https://www.finecloud.ch/media/posts/83/responsive/lifecycle-lg.png 1024w ,https://www.finecloud.ch/media/posts/83/responsive/lifecycle-xl.png 1360w ,https://www.finecloud.ch/media/posts/83/responsive/lifecycle-2xl.png 1600w\"></figure>\n<h2 id=\"mcetoc_1gt66f14j8k\">Part 1</h2>\n<div id=\"ct-sidebar-scroll-container\" class=\"sidebar--content---4z0-\" data-purpose=\"sidebar-content\">\n<div class=\"transcript--transcript-panel--kfMxM\" dir=\"auto\" data-purpose=\"transcript-panel\">\n<div class=\"transcript--cue-container--wu3UY\"><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Of course, instantiating the class will come first. The class will populate properties after it has been created. It will therefore set up any properties you may have. Then, if they exist, we do have some interfaces that we can implement. These methods will be executed by Spring if you've implemented these interfaces. As you can see, BeanNameAware's setBeanName method is called. Following that are BeanFactoryAware, ApplicationContextAware, and PreInitialization, which will be carried out using a post bean processor. As a result, we can hook into these callbacks before moving on to the initializing beans' afterPropertiesSetet. Additionally, we can offer special initialization techniques.  </span><span class=\"\" style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\" data-purpose=\"cue-text\">And then one of the last things is the post initialization. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">So these are all steps that the bean goes through before it is ready to use.</span></div>\n<div class=\"transcript--cue-container--wu3UY\">\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\"><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Before the application is deemed ready for use, Spring will go through and carry out all these actions on each bean in the context.</span></p>\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\"><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">This provides you with a variety of connections. You do have a great deal of flexibility and control over this. Sincerely speaking, you hardly ever need to hook into this. There are use cases that you encounter, but it's rare that you require this much control over the production of the beans. You're typically doing something a little complicated when you do it. But I believe that awareness is the most important lesson to learn. Use this when you need it; it is there and available for you.  </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">So here this is just the bean becoming ready for use.</span></p>\n</div>\n<div class=\"transcript--cue-container--wu3UY\">\n<h2 id=\"mcetoc_1gt66f14j8l\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Part 2</h2>\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\"><span class=\"\" data-purpose=\"cue-text\">There is also a lifecycle for the beans to be terminated. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">So when the container is being shut down, the application receives some type of shutdown event. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">There is a lifecycle for the shutdown. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">So you can annotate a bean method with the annotation PreDestroy that will get annotated. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">And then you can also implement a disposable bean interface that provides a destroy method so that the </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">annotation will come first and then the destroy method. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">And at that point we call the bean terminated.</span></p>\n<h2 id=\"mcetoc_1gt66f14j8m\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Callback Interfaces</h2>\n</div>\n<div class=\"transcript--cue-container--wu3UY\">\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Consequently, we did discuss a few of the interfaces. There are two interfaces in Spring that you can use to implement callback events. You have the afterPropertiesSet from the InitializingBean. So if you implement that interface, that method will be called. Finally, there is the DisposalBean. We discussed the fact that that is one of the last functions called before the bean is terminated. </p>\n<h2 id=\"mcetoc_1gt66f14j8n\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Lifecycle Annotations</h2>\n</div>\n<div class=\"transcript--cue-container--wu3UY\">\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\"><span class=\"\" data-purpose=\"cue-text\">You do also have a couple annotations, and these were in that flowchart as well. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">We have <strong>PostConstruct</strong>, so the bean has been constructed, but it has not been returned to the requesting </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">object. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">And then we also have <strong>PreDestroy</strong>. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">So if you remember in the termination workflow, this was called just before the interface method is </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">called.</span></p>\n<h2 id=\"mcetoc_1gt66f14j8o\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Bean Post Processors</h2>\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">These can be useful if you're working with a third-party object of some kind that you need to create, put into your context, and update in some way. like configuring a component that is typically not managed by Spring. So, you now have some capabilities. The main point you should take away from this post is that bean processors are referred to as such internationally. In essence, you receive this event, and it will be examined. If you implement it, this will be called 100 times in the case where you have 100 beans and every object or bean. In order to implement this typically, you're probably searching for a particular bean, a kind of bean that </p>\n</div>\n<div class=\"transcript--cue-container--wu3UY\">\n<h2 id=\"mcetoc_1gt66f14j8p\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Aware Interfaces</h2>\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Finally, Spring has over 14 aware interfaces as well. Therefore, these extend interface are also known as aware. Thus, they are a continuation of that. They number fourteen. The Spring framework largely makes use of these. Therefore, if you're creating Spring applications, you should be aware that you use these. Therefore, if you have a use case, you may encounter situations where you must use these. These might be very useful.</p>\n</div>\n<div class=\"transcript--cue-container--wu3UY\">\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\"><span class=\"\" data-purpose=\"cue-text\">These are some of the current ones:</span></p>\n</div>\n<div class=\"transcript--cue-container--wu3UY\">\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 49.9288%;\"><strong>Aware Interface</strong></td>\n<td style=\"width: 49.9288%;\"><strong>Description</strong></td>\n</tr>\n<tr>\n<td style=\"width: 49.9288%;\">ApplicationContextAware</td>\n<td style=\"width: 49.9288%;\">Interface to be implemented by any object that wishes to be notified of the ApplicationContext that it runs in.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9288%;\">ApplicationEventPublisherAware</td>\n<td style=\"width: 49.9288%;\">Set the ApplicationEventPublisher that this object runs in.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9288%;\">BeanClassLoaderAware</td>\n<td style=\"width: 49.9288%;\">Callback that supplies the bean class loader to a bean instance.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9288%;\">BeanFactoryAware</td>\n<td style=\"width: 49.9288%;\">Callback that supplies the owning factory to a bean instance.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9288%;\">BeanNameAware</td>\n<td style=\"width: 49.9288%;\">Set the name of the bean in the bean factory that created this bean.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9288%;\">BootstrapContextAware</td>\n<td style=\"width: 49.9288%;\">Set the BootstrapContext that this object runs in.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "java",
                   "dev"
            ],
            "date_published": "2023-04-04T15:29:20+02:00",
            "date_modified": "2023-04-28T22:33:45+02:00"
        },
        {
            "id": "https://www.finecloud.ch/spring-annotations.html",
            "url": "https://www.finecloud.ch/spring-annotations.html",
            "title": "Spring Annotations",
            "summary": "If you want to develop a Spring Application you need to know when to use which Annotation. Spring’s dependency injection capability includes the following annotations:",
            "content_html": "<p>If you want to develop a Spring Application you need to know when to use which Annotation.</p>\n<h2>Dependency Injection</h2>\n<p>Spring’s dependency injection capability includes the following annotations:</p>\n<table style=\"border-collapse: collapse; width: 100%; height: 417.344px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"><strong>Annotation</strong></td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"><strong>Explanation</strong></td>\n</tr>\n<tr style=\"height: 136.75px;\">\n<td style=\"width: 49.9288%; height: 136.75px;\"><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-stereotype-annotations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Component</a></td>\n<td style=\"width: 49.9288%; height: 136.75px;\">Generic stereotype for any Spring-managed component.</td>\n</tr>\n<tr style=\"height: 79.1562px;\">\n<td style=\"width: 49.9288%; height: 79.1562px;\"><a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Service.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Service </a></td>\n<td style=\"width: 49.9288%; height: 79.1562px;\">Indicates that an annotated class is a service.</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"><a href=\"https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Value.html\" rel=\"nofollow\">@Value</a></td>\n<td style=\"width: 49.9288%; height: 50.3594px;\">Injection mechanism for fields and methods that indicates a default value. Often used to get values from property files.</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n</tr>\n</tbody>\n</table>\n<h2><br>Configuration</h2>\n<table style=\"border-collapse: collapse; width: 100%; height: 417.344px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"><strong>Annotation</strong></td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"><strong>Explanation</strong></td>\n</tr>\n<tr style=\"height: 136.75px;\">\n<td style=\"width: 49.9288%; height: 136.75px;\"><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-autowired-annotation-qualifiers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Qualifier</a></td>\n<td style=\"width: 49.9288%; height: 136.75px;\">Associates a value with a particular argument. More finely tuned way than @Order and @Priority to control selection.</td>\n</tr>\n<tr style=\"height: 79.1562px;\">\n<td style=\"width: 49.9288%; height: 79.1562px;\"><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-definition-profiles\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Profile</a></td>\n<td style=\"width: 49.9288%; height: 79.1562px;\">Indicates that a component is eligible for registration when one or more specified profiles are active. You can also use @Profile({\"default\"}) to define a default profile, if no Profile is actively selected.</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n</tr>\n</tbody>\n</table>\n<p><br><br></p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "java",
                   "dev"
            ],
            "date_published": "2023-04-04T14:57:57+02:00",
            "date_modified": "2023-04-04T16:15:16+02:00"
        },
        {
            "id": "https://www.finecloud.ch/conventional-commits.html",
            "url": "https://www.finecloud.ch/conventional-commits.html",
            "title": "Conventional commits",
            "summary": "What are Conventional commits Conventional Commits is a convention for writing commit messages that provides structure and consistency to a project's version control history. It's based on the idea of defining a standard format for commit messages that makes it easier for developers to understand&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gp7g3b0bbq\">What are Conventional commits</a></li>\n<li><a href=\"#mcetoc_1gp7g3b0bbr\">Why should you use Conventional commits</a></li>\n<li><a href=\"#mcetoc_1gp7g3b0bbs\">Example</a>\n<ul>\n<li><a href=\"#mcetoc_1gp7g3b0bbt\">multiline commit messages</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1gp7g3b0bbq\">What are Conventional commits</h2>\n<p>Conventional Commits is a convention for writing commit messages that provides structure and consistency to a project's version control history. It's based on the idea of defining a standard format for commit messages that makes it easier for developers to understand the changes made to a codebase over time.</p>\n<p><a href=\"https://www.conventionalcommits.org/en/v1.0.0/#specification\">https://www.conventionalcommits.org/en/v1.0.0/#specification</a></p>\n<h2 id=\"mcetoc_1gp7g3b0bbr\">Why should you use Conventional commits</h2>\n<ul>\n<li>Improving collaboration: Having a clear, concise and standardized way of writing commit messages helps everyone on the team understand what changes were made and why. This can improve collaboration and reduce the time spent discussing changes.</li>\n<li>Better automated versioning: Conventional Commits provides a way to automate versioning and release management by using the commit messages to determine the type and scope of changes. This can save time and improve accuracy compared to manually managing versions.</li>\n<li>Improved documentation: Commit messages can serve as a form of documentation, providing insight into the motivations and thought process behind changes. By using Conventional Commits, this documentation is more consistent and easier to understand.</li>\n</ul>\n<h2 id=\"mcetoc_1gp7g3b0bbs\">Example</h2>\n<p>Here's an example of a Conventional Commit message:<br><br><code>feat(parser): add ability to parse hexadecimal numbers</code><br><br><code>This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options.</code><br><br>In this example, \"feat\" is the type of change being made (a new feature), \"parser\" is the scope of the change (the parser component), and the rest of the message provides a brief description of the change. The Conventional Commits specification defines a number of different types (e.g. \"feat\", \"fix\", \"docs\") and provides guidelines for how to use them.</p>\n<h3 id=\"mcetoc_1gp7g3b0bbt\">multiline commit messages</h3>\n<p>how do you make multiline commit messages like these? how do you add an optional body or optional footer in a conventional Commit message?<br><br>Multiline commit messages are written by adding a blank line between the subject (first line) and the body (or footer). The subject should be a single line of text that summarizes the change and should not exceed 50 characters. If a more detailed explanation is needed, it can be added in the body.<br><br>Here's an example of a multiline Conventional Commit message:<br><br><code>feat(parser): add ability to parse hexadecimal numbers</code><br><br><code>This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options. The new feature has been thoroughly tested and is now ready for use.</code><br><br>An optional footer can also be added to Conventional Commit messages for extra information, such as breaking changes, references to related issues, or other meta-information. The footer should start with a new line and should be separated from the body by a double line break. Here's an example with a footer:<br><br><code>feat(parser): add ability to parse hexadecimal numbers</code><br><br><code>This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options. The new feature has been thoroughly tested and is now ready for use.</code><br><br><code>BREAKING CHANGE: The previous version of the parser only supported decimal numbers, so this change may break compatibility with existing code that uses the parser.</code><br><br>It's worth noting that not all Conventional Commit tools and systems require or make use of the body or footer. The most important aspect is the subject line, as it provides a concise summary of the change. The body and footer are optional and should be used as needed to provide additional context and information.<br><br>Here's an example of a Conventional Commit message with a body and footer, using the git commit command with the -m option:<br><br><code>$ git commit -m \"feat(parser): add ability to parse hexadecimal numbers</code><br><br><code>This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options. The new feature has been thoroughly tested and is now ready for use.</code><br><br><code>BREAKING CHANGE: The previous version of the parser only supported decimal numbers, so this change may break compatibility with existing code that uses the parser.</code><br><br><code>Closes #123\"</code><br><br>In this example, the subject is \"feat(parser): add ability to parse hexadecimal numbers\", the body is \"This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options. The new feature has been thoroughly tested and is now ready for use.\", and the footer is \"BREAKING CHANGE: The previous version of the parser only supported decimal numbers, so this change may break compatibility with existing code that uses the parser. Closes #123\". The \"Closes #123\" part of the footer is an example of a reference to a related issue, indicating that this commit resolves the issue with the given number.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "git",
                   "dev"
            ],
            "date_published": "2023-02-14T09:20:08+01:00",
            "date_modified": "2023-02-14T09:20:08+01:00"
        },
        {
            "id": "https://www.finecloud.ch/cleancode.html",
            "url": "https://www.finecloud.ch/cleancode.html",
            "title": "CleanCode",
            "summary": "Summary of 'Clean code' by Robert C. Martin: https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29 Code is clean if it can be understood easily – by everyone on the team. Clean code can be read and enhanced by a developer other than its original author. With understandability comes readability, changeability, extensibility&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gore4e2o9\">General rules</a></li>\n<li><a href=\"#mcetoc_1gore4e2oa\">Design rules</a></li>\n<li><a href=\"#mcetoc_1gore6rj763\">Understandability tips</a></li>\n<li><a href=\"#mcetoc_1gore6rj764\">Names rules</a></li>\n<li><a href=\"#mcetoc_1gore6rj765\">Functions rules</a></li>\n<li><a href=\"#mcetoc_1gore6rj766\">Comments rules</a></li>\n<li><a href=\"#mcetoc_1gore6rj767\">Source code structure</a></li>\n<li><a href=\"#mcetoc_1gore6rj768\">Objects and data structures</a></li>\n<li><a href=\"#mcetoc_1gore6rj769\">Tests</a></li>\n<li><a href=\"#mcetoc_1gore6rj76a\">Code smells</a></li>\n</ul>\n</div>\n<p>Summary of 'Clean code' by Robert C. Martin:<br>https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29<br><br>Code is clean if it can be understood easily – by everyone on the team. Clean code can be read and enhanced by a developer other than its original author. With understandability comes readability, changeability, extensibility and maintainability.</p>\n<hr>\n<h2 id=\"mcetoc_1gore4e2o9\">General rules</h2>\n<p>1. Follow standard conventions.<br>2. Keep it simple stupid. Simpler is always better. Reduce complexity as much as possible.<br>3. Boy scout rule. Leave the campground cleaner than you found it.<br>4. Always find root cause. Always look for the root cause of a problem.</p>\n<h2 id=\"mcetoc_1gore4e2oa\">Design rules</h2>\n<p>1. Keep configurable data at high levels.<br>2. Prefer polymorphism to if/else or switch/case.<br>3. Separate multi-threading code.<br>4. Prevent over-configurability.<br>5. Use dependency injection.<br>6. Follow Law of Demeter. A class should know only its direct dependencies.</p>\n<h2 id=\"mcetoc_1gore6rj763\">Understandability tips</h2>\n<p>1. Be consistent. If you do something a certain way, do all similar things in the same way.<br>2. Use explanatory variables.<br>3. Encapsulate boundary conditions. Boundary conditions are hard to keep track of. Put the processing for them in one place.<br>4. Prefer dedicated value objects to primitive type.<br>5. Avoid logical dependency. Don't write methods which works correctly depending on something else in the same class.<br>6. Avoid negative conditionals.</p>\n<h2 id=\"mcetoc_1gore6rj764\">Names rules</h2>\n<p>1. Choose descriptive and unambiguous names.<br>2. Make meaningful distinction.<br>3. Use pronounceable names.<br>4. Use searchable names.<br>5. Replace magic numbers with named constants.<br>6. Avoid encodings. Don't append prefixes or type information.</p>\n<h2 id=\"mcetoc_1gore6rj765\">Functions rules</h2>\n<p>1. Small.<br>2. Do one thing.<br>3. Use descriptive names.<br>4. Prefer fewer arguments.<br>5. Have no side effects.<br>6. Don't use flag arguments. Split method into several independent methods that can be called from the client without the flag.</p>\n<h2 id=\"mcetoc_1gore6rj766\">Comments rules</h2>\n<p>1. Always try to explain yourself in code.<br>2. Don't be redundant.<br>3. Don't add obvious noise.<br>4. Don't use closing brace comments.<br>5. Don't comment out code. Just remove.<br>6. Use as explanation of intent.<br>7. Use as clarification of code.<br>8. Use as warning of consequences.</p>\n<h2 id=\"mcetoc_1gore6rj767\">Source code structure</h2>\n<p>1. Separate concepts vertically.<br>2. Related code should appear vertically dense.<br>3. Declare variables close to their usage.<br>4. Dependent functions should be close.<br>5. Similar functions should be close.<br>6. Place functions in the downward direction.<br>7. Keep lines short.<br>8. Don't use horizontal alignment.<br>9. Use white space to associate related things and disassociate weakly related.<br>10. Don't break indentation.</p>\n<h2 id=\"mcetoc_1gore6rj768\">Objects and data structures</h2>\n<p>1. Hide internal structure.<br>2. Prefer data structures.<br>3. Avoid hybrids structures (half object and half data).<br>4. Should be small.<br>5. Do one thing.<br>6. Small number of instance variables.<br>7. Base class should know nothing about their derivatives.<br>8. Better to have many functions than to pass some code into a function to select a behavior.<br>9. Prefer non-static methods to static methods.</p>\n<h2 id=\"mcetoc_1gore6rj769\">Tests</h2>\n<p>1. One assert per test.<br>2. Readable.<br>3. Fast.<br>4. Independent.<br>5. Repeatable.</p>\n<h2 id=\"mcetoc_1gore6rj76a\">Code smells</h2>\n<p>1. Rigidity. The software is difficult to change. A small change causes a cascade of subsequent changes.<br>2. Fragility. The software breaks in many places due to a single change.<br>3. Immobility. You cannot reuse parts of the code in other projects because of involved risks and high effort.<br>4. Needless Complexity.<br>5. Needless Repetition.<br>6. Opacity. The code is hard to understand.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "dev"
            ],
            "date_published": "2023-02-09T16:55:40+01:00",
            "date_modified": "2023-02-09T16:55:54+01:00"
        },
        {
            "id": "https://www.finecloud.ch/javascript-advanced-features.html",
            "url": "https://www.finecloud.ch/javascript-advanced-features.html",
            "title": "JavaScript advanced features",
            "summary": "New Features New versions of JavaScript, such as ES6, ES2016, 2017, etc., come with many new features, however it is still ECMAScript Many of the new features are syntactic sugar or extend the functionality only marginal Template Literals Template literals are string literals with support&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1go3akel62sa\">New Features</a>\n<ul>\n<li><a href=\"#mcetoc_1go3akel62sb\">Template Literals</a></li>\n<li><a href=\"#mcetoc_1go3akel62sc\">Spread Operator</a></li>\n<li><a href=\"#mcetoc_1go3akel62sd\">Array and Object Destructuring</a></li>\n<li><a href=\"#mcetoc_1go3akel62se\">Arraw functions</a></li>\n<li><a href=\"#mcetoc_1go3akel62sf\">Classes</a></li>\n<li><a href=\"#mcetoc_1go3akel62sg\">Class Inheritance</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1go3akel62sh\">Modules</a>\n<ul>\n<li><a href=\"#mcetoc_1go3akel62si\">Global Scope</a></li>\n<li><a href=\"#mcetoc_1go3akel62sj\">IIFE</a></li>\n<li><a href=\"#mcetoc_1go3akel62sk\">Example jQuery Plugin</a></li>\n<li><a href=\"#mcetoc_1go3r9h51351\">Module Systems</a></li>\n<li><a href=\"#mcetoc_1go3r9h51352\">ES Modules</a></li>\n<li><a href=\"#mcetoc_1go3r9h51353\">Export Examples</a></li>\n<li><a href=\"#mcetoc_1go3r9h51354\">Import Examples</a></li>\n<li><a href=\"#mcetoc_1go3r9h51355\">Default Export</a></li>\n<li><a href=\"#mcetoc_1go3r9h51356\">Usage in the Browser</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1go3akel62sl\">Promises</a>\n<ul>\n<li><a href=\"#mcetoc_1go41qk9o3km\">Asynchronous Programming</a></li>\n<li><a href=\"#mcetoc_1go41qk9o3kn\">Promises Are State Machines</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1go41qk9o3ko\">Creating Promises</a>\n<ul>\n<li><a href=\"#mcetoc_1go41qk9o3kp\">Promise Example</a></li>\n<li><a href=\"#mcetoc_1go41qk9o3kq\">Chaining</a></li>\n<li><a href=\"#mcetoc_1go41qk9o3kr\">Chaining and Combining Examples</a></li>\n<li><a href=\"#mcetoc_1go41qk9o3ks\">async and await</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1go3akel62sm\">Fetch API</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1go3akel62sa\">New Features</h2>\n<ul>\n<li>New versions of JavaScript, such as ES6, ES2016, 2017, etc., come with many new features, however it is still ECMAScript</li>\n<li>Many of the new features are syntactic sugar or extend the functionality only marginal</li>\n</ul>\n<h3 id=\"mcetoc_1go3akel62sb\">Template Literals</h3>\n<ul>\n<li>Template literals are string literals with support for text interpolation and multiple lines</li>\n<li>Template literals are enclosed by backticks</li>\n<li>Expressions in placeholders (marked by the dollar sign and curly braces) are evaluated and replaced by their value at runtime</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">getYear</span>() </span>{\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> (<span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> <span class=\"hljs-built_in\">Date</span>()).getFullYear();\n}\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> student = {\n    name: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bob\"</span>,\n    age: <span class=\"hljs-number\" style=\"color: #6897bb;\">25</span>,\n    university: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"BFH\"</span>\n};\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> message = <span class=\"hljs-string\" style=\"color: #6a8759;\">`<span class=\"hljs-subst\">${student.name}</span> is a student at <span class=\"hljs-subst\">${student.university}</span>.\n<span class=\"hljs-subst\">${student.name}</span> was born in <span class=\"hljs-subst\">${getYear() - student.age}</span>.`</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(message);    <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Bob is a student at BFH.</span>\n                         <span class=\"hljs-comment\" style=\"color: grey;\">//    Bob was born in 1996.</span>\n</pre>\n<h3 id=\"mcetoc_1go3akel62sc\">Spread Operator</h3>\n<ul>\n<li>Using the spread operator new arrays and objects can be created based on the values of other arrays or objects</li>\n<li>The spread operator is especially useful to shallow-clone and merge or extend objects</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> a = [<span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>];\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> b = [<span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">5</span>];\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> clonedA = [...a];\nclonedA[<span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>] = <span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>;                         <span class=\"hljs-comment\" style=\"color: grey;\">// a remains unaffected</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> mergedArr = [<span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>, ...a, ...b, <span class=\"hljs-number\" style=\"color: #6897bb;\">6</span>];   <span class=\"hljs-comment\" style=\"color: grey;\">// [0, 1, 2, 3, 4, 5, 6]</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> x = {a: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"foo\"</span>, b: <span class=\"hljs-number\" style=\"color: #6897bb;\">7</span>};\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> y = {a: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"bar\"</span>, c: <span class=\"hljs-number\" style=\"color: #6897bb;\">8</span>};\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> clonedX = {...x};\nclonedX.a = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"bar\"</span>;                      <span class=\"hljs-comment\" style=\"color: grey;\">// x remains unaffected</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> mergedObj = {...x, ...y, c: <span class=\"hljs-number\" style=\"color: #6897bb;\">9</span>};   <span class=\"hljs-comment\" style=\"color: grey;\">// \\{a: \"bar\", b: 7, c: 9\\}</span>\n</pre>\n<h3 id=\"mcetoc_1go3akel62sd\">Array and Object Destructuring</h3>\n<ul>\n<li>The destructuring assignment unpacks values from arrays and objects into distinct variables</li>\n<li>Destructuring can also be used in function parameter deﬁnitions to unpack ﬁelds from objects passed as argument</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> a = [<span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>];\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> [first, second] = a;\n<span class=\"hljs-built_in\">console</span>.log(first);             <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 1</span>\n<span class=\"hljs-built_in\">console</span>.log(second);            <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 2</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> x = {a: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"foo\"</span>, b: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"bar\"</span>, c: <span class=\"hljs-number\" style=\"color: #6897bb;\">12</span>};\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> {b, c} = x;\n<span class=\"hljs-built_in\">console</span>.log(b);                 <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; bar</span>\n<span class=\"hljs-built_in\">console</span>.log(c);                 <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 12</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">f</span>(<span class=\"hljs-params\">{a, b}</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(a+<span class=\"hljs-string\" style=\"color: #6a8759;\">\", \"</span>+b);\n}\nf(x);                          <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; foo, bar</span>\n</pre>\n<h3 id=\"mcetoc_1go3akel62se\">Arraw functions</h3>\n<ul>\n<li>Arrow functions are a compact alternative to function expressions</li>\n<li>If the body consists of a single expression, then the curly braces can be omitted and the return is implied</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> f = (a, b) =&gt; {\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> c = a * a;\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> c+b;\n};\n<span class=\"hljs-built_in\">console</span>.log(f(<span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>));         <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 13</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> g = a =&gt; a * a;\n<span class=\"hljs-built_in\">console</span>.log(g(<span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>));            <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 9</span>\n</pre>\n<ul>\n<li>Arrow functions cannot be bound to objects</li>\n<li>The this reference is lexically scoped</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> alice = {\n  name: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Alice\"</span>,\n  friends: [<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bob\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Eve\"</span>],\n  sayHi: <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.friends.forEach(friend =&gt; {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" says hi to \"</span>+friend);  <span class=\"hljs-comment\" style=\"color: grey;\">// this is lexically scoped</span>\n    });\n  }\n};\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> speak = phrase =&gt; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" says \"</span>+phrase);\nspeak.call(alice, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Hello World!\"</span>);   <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; undefined says Hello World!</span>\n</pre>\n<h3 id=\"mcetoc_1go3akel62sf\">Classes</h3>\n<ul>\n<li>The class keyword is syntactic sugar for constructor functions and prototype inheritance</li>\n<li>A class may contain a constructor, the actual constructor function, which will be bound to the class name, and any number of methods</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Person</span> </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">constructor</span>(name, age) {\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name = name;\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.age = age;\n  }\n  speak(phrase) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">`<span class=\"hljs-subst\">${this.name}</span> says: <span class=\"hljs-subst\">${phrase}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> alice = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Person(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Alice\"</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">19</span>);\nalice.speak(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"It's just syntactic sugar!\"</span>);\n</pre>\n<h3 id=\"mcetoc_1go3akel62sg\">Class Inheritance</h3>\n<ul>\n<li>Classes support inheritance</li>\n<li>The super keyword is used to reference the constructor and methods deﬁned in the base class</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Student</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">extends</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Person</span> </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">constructor</span>(name, age, university) {\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">super</span>(name, age);\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.university = university;\n  }\n  speak(phrase) {\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">super</span>.speak(phrase);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"And I'm a student at the \"</span>+<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.university);\n  }\n}\n</pre>\n<h2 id=\"mcetoc_1go3akel62sh\">Modules</h2>\n<h3 id=\"mcetoc_1go3akel62si\">Global Scope</h3>\n<ul>\n<li>JavaScript has one global scope</li>\n<li>Different JavaScript ﬁles share the same global scope and have not their own private scope</li>\n</ul>\n<p><code>let counter = 0;</code><br><code>function count() { return ++counter; }</code><br><br><code>function logCounter() { console.log(counter); }</code><br><br><code>&lt;html&gt;</code><br><code>&lt;head&gt;</code><br><code>&lt;script src=\"listing_11a.js\"&gt;&lt;/script&gt;</code><br><code>&lt;script src=\"listing_11b.js\"&gt;&lt;/script&gt;</code><br><code>&lt;/head&gt;</code><br><code>&lt;body&gt;</code><br><code>&lt;script&gt;</code><br><code>count();</code><br><code>logCounter(); // &gt;&gt; 1</code><br><code>&lt;/script&gt;</code><br><code>&lt;/body&gt;</code><br><code>&lt;/html&gt;</code></p>\n<h3 id=\"mcetoc_1go3akel62sj\">IIFE</h3>\n<ul>\n<li>An immediately-invoked function expression (IIFE, pronounced ”iffy”) is an unnamed function which is immediately invoked</li>\n<li>An IIFE takes advantage of the concept of closures and the local scope produced by functions</li>\n<li>IIFEs can be used to implement a simple module pattern, in which each module binds only a single global variable</li>\n</ul>\n<p>counter-service.js:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> counterService = (<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n    <span class=\"hljs-comment\" style=\"color: grey;\">// Private scope</span>\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> counter = <span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">count</span>() </span>{ <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> ++counter; }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">logCounter</span>() </span>{ <span class=\"hljs-built_in\">console</span>.log(counter); }\n\n    <span class=\"hljs-comment\" style=\"color: grey;\">// Export public features</span>\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> {count, logCounter};\n})();\n</pre>\n<p><code>&lt;script src=\"counter-service.js\"&gt;&lt;/script&gt;</code><br><code>&lt;script&gt;</code><br><code>counterService.count();</code><br><code>counterService.logCounter(); // 1</code><br><code>&lt;/script&gt;</code></p>\n<h3 id=\"mcetoc_1go3akel62sk\">Example jQuery Plugin</h3>\n<ul>\n<li>A jQuery plugin is implemented as an IIFE</li>\n<li>New features are added to the prototype of jQuery objects (which is the $.fn object)</li>\n<li>See How to Create a Basic Plugin for more details</li>\n</ul>\n<p>jquery-identify.js;</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">$</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> counter = <span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>;\n\n  $.fn.identify = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n      <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.id = <span class=\"hljs-string\" style=\"color: #6a8759;\">'id-'</span>+(++counter);\n    });\n  }\n})(jQuery);\n</pre>\n<p><code>&lt;script src=\"jquery.js\"&gt;&lt;/script&gt;</code><br><code>&lt;script src=\"jquery-identify.js\"&gt;&lt;/script&gt;</code><br><code>&lt;script&gt;</code><br><code>$('p, img').identify();</code><br><code>&lt;/script&gt;</code></p>\n<h3 id=\"mcetoc_1go3r9h51351\">Module Systems</h3>\n<ul>\n<li>Module Systems provide a private scope on a ﬁle basis with the possibility to export functionality and to import functionality from other modules</li>\n<li>Before ES6, JavaScript had no built-in module system and proprietary module systems, such as CommonJS (which is still used by Node.js), were needed</li>\n<li>ES6 introduced its own module system (often called ES modules) with the new keywords import and export</li>\n<li>In larger applications, module dependencies are resolved during the build and bundling process</li>\n<li>ES modules are natively supported by all modern browsers</li>\n</ul>\n<h3 id=\"mcetoc_1go3r9h51352\">ES Modules</h3>\n<ul>\n<li>Features are exported from a module using the export keyword</li>\n<li>The export keyword is placed in front of the item to export</li>\n<li>Functions, classes and variables deﬁned with let or const can be exported</li>\n<li>Multiple features can be exported in a single statement by wrapping the comma-separated list of items in curly braces</li>\n<li>Items which are not exported are local to the module</li>\n<li>Features are imported from other modules using the import keyword</li>\n<li>Speciﬁc features are imported by their names (comma-separated list in curly braces)</li>\n<li>All features of a module can be important using the *-notation</li>\n</ul>\n<h3 id=\"mcetoc_1go3r9h51353\">Export Examples</h3>\n<p>math.js:</p>\n<p><code>export const PI = computePI();</code><br><code>export function square(x) { return x * x; }</code><br><code>export function sum(x, y) { return x + y; }</code><br><code>// Local to math.js</code><br><code>function computePI() { return 3.14; }</code></p>\n<p>colors.js:</p>\n<p><code>const white = '#ffffff', black = '#000000';</code><br><code>function rgbToHex(r, g, b) { return '#' + toHex(r) + toHex(g) + toHex(b); }</code><br><code>function toHex(c) { return ('0' + c.toString(16)).slice(m2); }</code><br><code>// Export multiple features in a single statement</code><br><code>export {white, black, rgbToHex};</code></p>\n<h3 id=\"mcetoc_1go3r9h51354\">Import Examples</h3>\n<p>file1.js:</p>\n<p><code>// Import specific features from another module</code><br><code>import {square, PI} from 'math';</code><br><code>console.log(PI); // &gt;&gt; 3.14</code><br><code>console.log(square(4)); // &gt;&gt; 16</code><br><br>file2.js</p>\n<p><code>// Import all features from another module</code><br><code>import * as math from 'math';</code><br><code>console.log(math.PI); // &gt;&gt; 3.14</code><br><code>console.log(math.sum(4, 5)); // &gt;&gt; 9</code></p>\n<h3 id=\"mcetoc_1go3r9h51355\">Default Export</h3>\n<ul>\n<li>One single export per module can be marked as default using the default keyword</li>\n<li>The default feature is imported without curly braces and any name can be given</li>\n<li>Especially convenient if only one feature is exported per module</li>\n</ul>\n<p>hello-world.js:</p>\n<p><code>export default function() {</code><br><code>console.log(\"Hello World!\");</code><br><code>}</code></p>\n<p>any-class.js:</p>\n<p><code>export default class {</code><br><code>// ...</code><br><code>}</code></p>\n<p>main.js:</p>\n<p><code>import logHelloWorld from 'hello-world';</code><br><code>import AnyClass from 'any-class';</code><br><code>logHelloWorld();</code><br><code>let obj = new AnyClass();</code></p>\n<h3 id=\"mcetoc_1go3r9h51356\">Usage in the Browser</h3>\n<ul>\n<li>The type of the script must be module</li>\n<li>Modules are loaded deferred (after the browser ﬁnished parsing the HTML and building the DOM)</li>\n<li>Modules are running in strict mode by default</li>\n<li>The module name must be the ﬁle path relative to the site root or, using the dot-syntax, relative to the current location, e.g.: import ... from './lib/my-module.js';</li>\n</ul>\n<p><code>&lt;html&gt;</code><br><code>&lt;head&gt;</code><br><code>&lt;title&gt;ES Modules&lt;/title&gt;</code><br><code>&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;</code><br><code>&lt;script type=\"module\"&gt;</code><br><code>import {PI} from './math.js';</code><br><code>// ...</code><br><code>&lt;/script&gt;</code><br><code>&lt;/head&gt;</code><br><code>&lt;body&gt; ... &lt;/body&gt;</code><br><code>&lt;/html&gt;</code></p>\n<h2 id=\"mcetoc_1go3akel62sl\">Promises</h2>\n<h3 id=\"mcetoc_1go41qk9o3km\">Asynchronous Programming</h3>\n<ul>\n<li>JavaScript is single-threaded, hence time-consuming tasks must be implemented asynchronously to not block the thread</li>\n<li>Promises are helpers for asynchronous programming</li>\n<li>A promise is a proxy for a value possibly known in the future</li>\n<li>Instead of passing callback functions to the asynchronous function, the  synchronous function returns a promise on which success and error handlers can be registered</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Traditional approach with callbacks passed to the asynchronous function</span>\ncomputeAsync(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Foo\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">result</span>) </span>{\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Process result</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">error</span>) </span>{\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Handle error</span>\n});\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Promise based approach where the asynchronous function returns a promise</span>\ncomputeAsync(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Foo\"</span>)\n  .then(result =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* Process result */</span> })\n  .catch(error =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* Handle error */</span> });\n</pre>\n<h3 id=\"mcetoc_1go41qk9o3kn\">Promises Are State Machines</h3>\n<ul>\n<li>Newly created promises are in the state pending</li>\n<li>A promise remains pending as long as the value is unknown and no error has occurred</li>\n<li>As soon as the value is available, the state changes to fullﬁled and registered success handlers are called</li>\n<li>If an error occurs, the state changes to rejected and registered error handlers are called</li>\n<li>Once the state is fullﬁled or rejected, the promise remains in this state for ever</li>\n</ul>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/79/Screenshot-2023-01-31-at-14.42.22.png\" alt=\"\" width=\"882\" height=\"734\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.42.22-xs.png 300w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.42.22-sm.png 480w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.42.22-md.png 768w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.42.22-lg.png 1024w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.42.22-xl.png 1360w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.42.22-2xl.png 1600w\"></figure>\n<h2 id=\"mcetoc_1go41qk9o3ko\">Creating Promises</h2>\n<ul>\n<li>Promises are created using the Promise constructor</li>\n<li>A function is passed to the constructor implementing the asynchronous task</li>\n<li>The function is called by the promise, passing two functions to resolve or reject the promise</li>\n<li>Either the resolve or reject function must be ﬁnally called by the asynchronous task</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">computeAsync</span>() </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {\n\n    <span class=\"hljs-comment\" style=\"color: grey;\">// ... Perform the asynchronous task (Promise is pending)</span>\n\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (success) resolve(result);  <span class=\"hljs-comment\" style=\"color: grey;\">// Promise will be fulfilled</span>\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">else</span> reject(error);            <span class=\"hljs-comment\" style=\"color: grey;\">// Promise will be rejected</span>\n  });\n}\n</pre>\n<h3 id=\"mcetoc_1go41qk9o3kp\">Promise Example</h3>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">computePI</span>() </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {\n    <span class=\"hljs-comment\" style=\"color: grey;\">// Computing PI is hard work...</span>\n    setTimeout(() =&gt; {\n      <span class=\"hljs-comment\" style=\"color: grey;\">// Computing PI fails with a certain probability...</span>\n      <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (<span class=\"hljs-built_in\">Math</span>.random() &lt; <span class=\"hljs-number\" style=\"color: #6897bb;\">0.2</span>) {\n        reject(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Sorry, computation failed!\"</span>);     <span class=\"hljs-comment\" style=\"color: grey;\">// Reject the promise</span>\n      } <span class=\"hljs-keyword\" style=\"color: #cc7832;\">else</span> {\n        resolve(<span class=\"hljs-number\" style=\"color: #6897bb;\">3.14</span>);       <span class=\"hljs-comment\" style=\"color: grey;\">// Resolve the promise to the value of PI</span>\n      }\n    }, <span class=\"hljs-number\" style=\"color: #6897bb;\">300</span>);\n  });\n}\n\ncomputePI()\n  .then(result =&gt; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"PI: \"</span>+result))\n  .catch(error =&gt; <span class=\"hljs-built_in\">console</span>.log(error));\n</pre>\n<h3 id=\"mcetoc_1go41qk9o3kq\">Chaining</h3>\n<ul>\n<li>The then and catch functions return a promise, hence they can<br>be chained</li>\n<li>The promise returned by then and catch resolves to the return value of the handler or to its original settled value if the handler was not called (e.g. a catch-handler is not called on a fullﬁled promise)</li>\n<li>If the handler returns a promise, the promise returned by then and catch resolves to the same value as the returned promise</li>\n</ul>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/79/Screenshot-2023-01-31-at-14.49.16.png\" alt=\"\" width=\"2062\" height=\"734\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.49.16-xs.png 300w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.49.16-sm.png 480w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.49.16-md.png 768w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.49.16-lg.png 1024w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.49.16-xl.png 1360w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.49.16-2xl.png 1600w\"></figure>\n<h3 id=\"mcetoc_1go41qk9o3kr\">Chaining and Combining Examples</h3>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Chaining</span>\ndoAsync()\n  .then(resultA =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> })\n  .then(resultB =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> })\n  .catch(error =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> })\n  .then(resultC =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> })\n  .catch(error =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> });\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Add multiple handlers to the same promise</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> promise = doAsync();\npromise.then(result =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> });\npromise.then(result =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> });\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// 'Wait' until all promises are fulfilled or one rejected</span>\n<span class=\"hljs-built_in\">Promise</span>.all([doAsync(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"A\"</span>), doAsync(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"B\"</span>), doAsync2()])\n  .then(results =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> })\n  .catch(error =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> });\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// 'Wait' until the first promise is fulfilled or rejected</span>\n<span class=\"hljs-built_in\">Promise</span>.race([doAsync(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"A\"</span>), doAsync(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"B\"</span>), doAsync2()])\n  .then(result =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> })\n  .catch(error =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> });\n</pre>\n<h3 id=\"mcetoc_1go41qk9o3ks\">async and await</h3>\n<ul>\n<li>async and await allow asynchronous code to be written synchronously</li>\n<li>An async function implicitly returns a promise, which resolves to the return value of the function or is rejected on exception</li>\n<li>async functions can await other promises (written synchronously)</li>\n<li>await interrupts the synchronous execution and waits until the returned promise is resolved or rejected</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">computeDiskArea</span>(<span class=\"hljs-params\">radius</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> PI = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">await</span> computePI();\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> radius * radius * PI;\n}\n\ncomputeDiskArea(<span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>)\n  .then(area =&gt; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"The area of a disk with r=2 is \"</span>+area))\n  .catch(error =&gt; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"An error occurred: \"</span>+error))\n</pre>\n<h2 id=\"mcetoc_1go3akel62sm\">Fetch API</h2>\n<ul>\n<li>The Fetch API provides an interface for fetching resources</li>\n<li>This includes resources across the network</li>\n<li>It is similar to the XMLHttpRequest but it is more powerful and more ﬂexible</li>\n<li>It provides a generic deﬁnition of Request and Response objects</li>\n<li>The global fetch function takes the URL of a resource as parameter and returns a promise which resolves to a Response object once the response is available</li>\n</ul>\n<p><code>fetch('http://quotes.org')</code><br><code>  .then(response =&gt; response.text())</code><br><code>  .then(quote =&gt; console.log(quote));</code></p>\n<h3>Response Object</h3>\n<ul>\n<li>A Response object has the following properties:\n<ul>\n<li>ok - true if the status code is 2xx, false otherwise</li>\n<li>status - the response status code</li>\n<li>statusText - the status code message</li>\n<li>headers - the response headers</li>\n</ul>\n</li>\n<li>In addition, Response provides the following methods:\n<ul>\n<li>text() returns a promise resolving to the body as string</li>\n<li>json() returns a promise resolving to the result of parsing the body as JSON</li>\n<li>blob() returns a promise resolving the body as Blob object</li>\n</ul>\n</li>\n</ul>\n<p><code>fetch('http://news.org')</code><br><code>  .then(response =&gt; response.json())</code><br><code>  .then(data =&gt; data.articles.forEach(article =&gt; console.log(article.title)));</code></p>\n<h3>Request Options</h3>\n<p>The fetch function has as a second optional parameter that allows setting the HTTP method, headers and request body:</p>\n<p><code>fetch('http://news.org', {</code><br><code>method: 'POST',</code><br><code>headers: {</code><br><code>'Authorization:': 'Basic amRAZXhhbXBsZS5vcmc6MTIzNDU=',</code><br><code>'Content-Type': 'application/json'</code><br><code>},</code><br><code>body: JSON.stringify(article)</code><br><code>});</code></p>\n<p>Advanced settings include:</p>\n<ul>\n<li>the interaction with the browser cache</li>\n<li>the following of redirect responses</li>\n<li>sending credentials</li>\n<li>aborting requests</li>\n</ul>\n<h3>Error Handling</h3>\n<ul>\n<li>The promise returned by fetch does only reject on network errors but not on HTTP errors such as 404 or 500 (in contrast to many AJAX libraries)</li>\n<li>An accurate error handling should check if the promise was resolved and if its  status is OK</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\">fetch(<span class=\"hljs-string\" style=\"color: #6a8759;\">'http://news.org'</span>)\n  .then(response =&gt; {\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (!response.ok)\n      <span class=\"hljs-comment\" style=\"color: grey;\">// Error handling based on HTTP status</span>\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> response.json();\n  })\n  .then(data =&gt; {\n    ...\n  })\n  .catch(error =&gt; {\n    <span class=\"hljs-comment\" style=\"color: grey;\">// Error handling (network error, JSON syntax error, etc.)</span>\n  });\n</pre>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "javascript",
                   "dev"
            ],
            "date_published": "2023-01-31T07:15:51+01:00",
            "date_modified": "2023-03-29T20:14:17+02:00"
        }
    ]
}
