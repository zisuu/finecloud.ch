{
    "version": "https://jsonfeed.org/version/1",
    "title": "Finecloud",
    "description": "",
    "home_page_url": "https://www.finecloud.ch",
    "feed_url": "https://www.finecloud.ch/feed.json",
    "user_comment": "",
    "icon": "https://www.finecloud.ch/media/website/cloud.png",
    "author": {
        "name": "Finecloud"
    },
    "items": [
        {
            "id": "https://www.finecloud.ch/java-genereische-methoden-und-beschraenkte-typen.html",
            "url": "https://www.finecloud.ch/java-genereische-methoden-und-beschraenkte-typen.html",
            "title": "Java Genereische Methoden und beschränkte Typen",
            "summary": "Eine Methode kann einen typisierten Parameter erzwingen und einen typisierten Wert zurückgeben: public List&lt;Integer&gt; parseAlleInts(List&lt;String&gt; strings){ List&lt;Integer&gt; ergebnis = new ArrayList&lt;&gt;(); for (String s : strings){ ergebnis.add(Integer.parseInt(s)); } return ergebnis; } So ist es möglich eine Liste von Strings als Paramter in eine Liste von&hellip;",
            "content_html": "<p>Eine Methode kann einen typisierten Parameter erzwingen und einen typisierten Wert zurückgeben:</p>\n<p><code>public List&lt;Integer&gt; parseAlleInts(List&lt;String&gt; strings){        </code><br><code>    List&lt;Integer&gt; ergebnis = new ArrayList&lt;&gt;();</code><br><code>    for (String s : strings){</code><br><code>        ergebnis.add(Integer.parseInt(s));</code><br><code>    }</code><br><code>    return ergebnis;</code><br><code>}</code></p>\n<p>So ist es möglich eine Liste von Strings als Paramter in eine Liste von Zahlen (Integern) umzuwandeln.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "parameterlisten",
                   "java",
                   "dev",
                   "collectionlist",
                   "collection"
            ],
            "date_published": "2022-05-28T14:39:55+02:00",
            "date_modified": "2022-05-28T14:47:31+02:00"
        },
        {
            "id": "https://www.finecloud.ch/java-collection-iteratoren.html",
            "url": "https://www.finecloud.ch/java-collection-iteratoren.html",
            "title": "Java Collection Iteratoren",
            "summary": "Diese Collection Methode kann dazu verwendet werden, über alle Werte einer Collection zu iterieren: die Methode iterator, gibt ein Objekt vom Typ Iterator zurück. Mit der Methode hasNext wird geprüft, ob es noch ein weiteres Element in der Collection gibt, next gibt das nächste Element&hellip;",
            "content_html": "<p>Diese Collection Methode kann dazu verwendet werden, über alle Werte einer Collection zu iterieren: die Methode <em>iterator</em>, gibt ein Objekt vom Typ <em>Iterator</em> zurück.</p>\n<p>Mit der Methode <em>hasNext</em> wird geprüft, ob es noch ein weiteres Element in der Collection gibt, <em>next</em> gibt das nächste Element zurück:</p>\n<p><code>List&lt;Book&gt; books = …;</code><br><code>Iterator&lt;Book&gt; it = books.iterator();</code><br><code>while (it.hasNext){</code><br><code>    Book book = it.next();</code><br><code>    …</code><br><code>}</code></p>\n<p>Seit Java 5 und der Einführung der for-each-Schleife ist es nur noch selten nötig, selbst mit dem Interator zu arbeiten. Ein wesentlicher Vorteil ist, dass es keine Sprachkonstrukte, sondern Objekte sind und können als solche in Feldern gespeichert und als Parameter an Methoden übergeben und aus Methoden zurückgegeben werden. Beispielsweise kann damit ein einzelnen Element ausgelesen werden und zu einem späteren Zeitpunkt an derselben Stelle fortgesetzt werden:</p>\n<p><code>public boolean spieleHoerbuch(Iterator&lt;Book&gt; books, int zeit) {</code><br><code>    int gesamtzeit = 0;</code><br><code>    while (gesamtzeit &lt; zeit) {</code><br><code>        if (books.hasNext()) {</code><br><code>            Book book = books.next();</code><br><code>            gesamtzeit += book.getLaenge();</code><br><code>            spieleBook(book);</code><br><code>        } else {</code><br><code>            return false;</code><br><code>        }</code><br><code>    }</code><br><code>    return books.hasNext();</code><br><code>}</code></p>\n<p>In diesem Beispiel werden solange Hörbücher abgespielt, bis eine Gesamtzeit erreicht ist, dann wird das aktuelle Hörbuch zu ende gespielt. Wenn Sie die Methode das nächste Mal aktivieren, dann übergeben Sie denselben Iterator und es geht mit dem nächsten Hörbuch weiter.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "java",
                   "dev",
                   "collectioniterator",
                   "collection",
                   "array"
            ],
            "date_published": "2022-05-26T14:07:33+02:00",
            "date_modified": "2022-05-26T14:18:44+02:00"
        },
        {
            "id": "https://www.finecloud.ch/java-collection-sets.html",
            "url": "https://www.finecloud.ch/java-collection-sets.html",
            "title": "Java Collection Sets",
            "summary": "Sets eignen sich für die Bearbeitung einer mathematischen Menge. Set kann somit keine identische Elemente enthalten und kann keine interneReihenfolge haben. Deshalb gibt es für Set auch keine Methoden die den direkten Zugriff auf ein Element ermöglichen. Um auf ein Element eines Set zuzugreifen muss&hellip;",
            "content_html": "<p>Sets eignen sich für die Bearbeitung einer mathematischen Menge. Set kann somit keine identische Elemente enthalten und kann keine interneReihenfolge haben. Deshalb gibt es für Set auch keine Methoden die den direkten Zugriff auf ein Element ermöglichen. Um auf ein Element eines Set zuzugreifen muss darüber iteriert werden:</p>\n<p><code>Set&lt;String&gt; besuchteOrte = new HashSet&lt;&gt;();</code><br><code>besuchteOrte.add(\"Bern\");</code><br><code>besuchteOrte.add(\"Basel\");</code><br><code>besuchteOrte.add(\"Bern\");</code><br><code>besuchteOrte.add(\"Bellinzona\");</code><br><code>for (String ort : besuchteOrte){</code><br><code>    System.out.println(ort);</code><br><code>}</code></p>\n<p>Im Beispiel wird Bern nur einmal ausgegeben, auch wenn Bern zweimal hinzugefügt wurde, zählt es nur einmal. Beim Hinzufügen ein neuen Elementen mit der add-Methode, gibt die Collection einen boolean-Wert zurück: Wenn das Element hinzugefügt wurde, ist der return true, wenn der Wert bereits vorhanden war, false. So kann festgestellt werden, ob ein neues Element hinzugefügt wurde, oder nicht. Wichtig zu beachten ist zudem, dass die Ausgabe eines Collection Sets nicht in einer festgelegen Reihenfolge erfolgt und es auch keine konstante Reihenfolge der Werte in einem Collection Set gibt.</p>\n<p>Die Hauptverwendung von Set, ist HashSet, das die Einmaligkeit der enthaltenen Elemente durch deren Hashcode sicherstellt. Wenn man also eine Set Collection verwenden, sollte man unbedingt in der Klasse die Methoden hashCode und equals überschreiben:</p>\n<p><code>Set&lt;Book&gt; meineBuecher = new HashSet&lt;&gt;();</code><br><code>meineBuecher.add(new Book(\"Bretonische Nächte\", \"Jean-Luc Bannalec\", 298));</code><br><code>meineBuecher.add(new Book(\"Bretonische Nächte\", \"Jean-Luc Bannalec\", 316));</code></p>\n<p>Wenn die Klasse Book die hashCode Methode nicht überschreibt, dann ist \"Bretonische Nächte\" zweimal im Set enthalten, denn die von Object geerbte bashCode-Implementierung gibt für verschiedene Objekte verschiedene Werte zurück, auch wenn die Objekte Inhaltsgleich sind. Deshalb muss eine eigene hashCode-Methode geschrieben werden, die den Code aus Titel, Autor und Seitenzahl berechnet, dann wird das zweite Buch nicht hinzugefügt, weil das Buch jetzt als identisch erkannt wird.</p>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "java",
                   "dev",
                   "collectionset",
                   "collection",
                   "array"
            ],
            "date_published": "2022-05-26T13:28:00+02:00",
            "date_modified": "2022-05-26T14:03:21+02:00"
        },
        {
            "id": "https://www.finecloud.ch/java-collection-listen.html",
            "url": "https://www.finecloud.ch/java-collection-listen.html",
            "title": "Java Collection Listen",
            "summary": "Listen sind Collections, die am ehesten einem Array entsprechen. Die Elemente bleiben in der Reihenfolge wie sie hinzugefügt werden und sie können auf einzelne Positionen im Index der Liste zugreifen: lesen mit get(index) und schreiben mit set(index, element). Damit ist mit Listen alles möglich, was&hellip;",
            "content_html": "<p>Listen sind Collections, die am ehesten einem Array entsprechen. Die Elemente bleiben in der Reihenfolge wie sie hinzugefügt werden und sie können auf einzelne Positionen im Index der Liste zugreifen: lesen mit <em>get(index) </em>und schreiben mit <em>set(index, element).</em></p>\n<p>Damit ist mit Listen alles möglich, was man mit Arrays auch kann, einfach mit mehr Komfort. Die Liste wächst bei neuen Elementen automatisch an und wenn ein Element mit remove entfernt wird, wird die Lücke geschlossen, indem alle nachfolgenden Elemente nachrutschen:</p>\n<p><code>List&lt;Book&gt; booklist = new ArrayList&lt;&gt;();</code><br><code>//Der Booklist zwei Books hinzufügen</code><br><code>booklist.add(new Book(…));</code><br><code>booklist.add(new Book(…));</code><br><code>//Das zweite Buch durch ein anderes ersetzen</code><br><code>booklist.set(1, new Book(…));</code><br><code>//Alle Buecher anzeigen</code><br><code>for (Book book : booklist){</code><br><code>    System.out.println(book.getTitel());</code><code></code><br><code>}</code></p>\n<p>Für die meisten Fälle ist die ArrayList die performanteste aller List-Implementierungen.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "java",
                   "dev",
                   "collectionlist",
                   "collection",
                   "arraylist",
                   "array"
            ],
            "date_published": "2022-05-26T13:19:01+02:00",
            "date_modified": "2022-05-26T14:44:15+02:00"
        },
        {
            "id": "https://www.finecloud.ch/java-collections.html",
            "url": "https://www.finecloud.ch/java-collections.html",
            "title": "Java Collections",
            "summary": "Collections sind ganz alltägliche Java Objekte. Im Gegensatz zu Arrays sind Collections nicht durch native Methoden und einem zusammenhängenden Speicherbereich optimiert, sie haben auch keine eigene Syntax. Die Vorteile von Collections sind der Benutzerkomfort, da sie über eine umfangreichere und komfortablere API verfügen. Zudem können&hellip;",
            "content_html": "<p>Collections sind ganz alltägliche Java Objekte. Im Gegensatz zu Arrays sind Collections nicht durch native Methoden und einem zusammenhängenden Speicherbereich optimiert, sie haben auch keine eigene Syntax. </p>\n<p>Die <strong>Vorteile von Collections</strong> sind der <strong>Benutzerkomfort</strong>, da sie über eine <strong>umfangreichere und komfortablere API</strong> verfügen. Zudem können verschiedene Implementierungen des Interface Collection, je nach Anwendungsfall verwendet werden. Der wohl grösste Vorteil, ist das Collections <strong>keine Grösse Vorgeben, Collections wachsen bei Bedarf.</strong></p>\n<blockquote>\n<p>Arrays eignen sich deshalb besondern für Performance getrimmte und Systemnahe Applikationen, während Collections eher für Anwendungen geeignet sind, bei denen es nicht auf jede Nanosekunde ankommt und der Vorteil des Komforts überwiegt.</p>\n</blockquote>\n<p>Standardmässig arbeiten Collections einfach mit dem Typ Object. Wenn man will, kann man einer Collection einen bestimmten Typ mitgeben:</p>\n<p><code> Collection&lt;Buch&gt; playlist = new ArrayList&lt;&gt;();</code></p>\n<p>Es gibt bei Collections keine Methoden für den Zugriff auf ein bestimmtes Element. Der allgemeine Ansatz, an den Inhalt einer Collection heranzukommen, ist der, sie in einer for-each-Schleife zu durchlaufen oder mit der Methode iterator ein Iterator-Objekt zu erzeugen. Nachfolgend sind die wichtigsten Methoden aufgelistet:</p>\n<table style=\"border-collapse: collapse; width: 100%; height: 287.828px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 30.5463%; height: 50.3594px;\"><strong>Methoden von <em>java.util.Collection</em></strong></td>\n<td style=\"width: 69.4537%; height: 50.3594px;\"><strong>Beschreibung</strong></td>\n</tr>\n<tr style=\"height: 107.953px;\">\n<td style=\"width: 30.5463%; height: 107.953px;\">add / addAll</td>\n<td style=\"width: 69.4537%; height: 107.953px;\">Fügen einer Collection ein Objekt, bzw. alle Objekte einer anderen Collection hinzu.</td>\n</tr>\n<tr style=\"height: 79.1562px;\">\n<td style=\"width: 30.5463%; height: 79.1562px;\">contains / containsAll</td>\n<td style=\"width: 69.4537%; height: 79.1562px;\">Prüfen, ob ein oder mehrere Objekte in der Collection enthalten sind.</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 30.5463%; height: 50.3594px;\">remove / removeAll</td>\n<td style=\"width: 69.4537%; height: 50.3594px;\">Entfernt Objekte aus der Collection</td>\n</tr>\n</tbody>\n</table>\n<p>Was wenn ich nun aber doch ein Array will? Dann kann ich mit der toArray-Methode jede Collection in ein Array umwandeln. Die parameterlose toArray-Methode liefert aber immer ein Object[], auch wenn ein Typ für die Collection angeben wurde. Es ist nicht möglich ein solches Object[] Array einfach in den gewünschten Typ zu casten. Wenn ich aber aus einer Collection von Buecher ein Buch[] machen will, dann muss ich die toArray-Methode mit Parameter übergeben:</p>\n<p><code>Collection&lt;Double&gt; liste = new ArrayList&lt;&gt;();</code><br><code>Double[] alsDoubles = liste.toArray(new Double[liste.size()]);</code><br><code>Number[] alsNumber = liste.toArray(new Number[liste.size()]);</code><br><code>Object[] alsObject = liste.toArray(new Object[liste.size()]);</code><br><code>Object[] auchAlsObject = liste.toArray();</code></p>\n<p>Wichtig ist, dass die Grösse des Arrays passt. Wenn das Array zu klein ist, dann ist der Rückgabewert ein neues Array des gleichen Typs mit der Grösse der Collection.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "java",
                   "dev",
                   "collection",
                   "array"
            ],
            "date_published": "2022-05-26T12:49:28+02:00",
            "date_modified": "2022-05-26T13:27:11+02:00"
        },
        {
            "id": "https://www.finecloud.ch/java-varargs.html",
            "url": "https://www.finecloud.ch/java-varargs.html",
            "title": "Java Varargs",
            "summary": "Varargs, auch Parameter-Listen genannt können in Java Arrays verwendet werden, um eine dynamische Anzahl von Parametern entgegenzunehmen. public static int max(int… numbers){ int result = Integer.MIN_VALUE; for (int number : numbers){ if (number &gt; result){ result = number; } } return result; } Diese Methode&hellip;",
            "content_html": "<p>Varargs, auch Parameter-Listen genannt können in Java Arrays verwendet werden, um eine dynamische Anzahl von Parametern entgegenzunehmen.</p>\n<p><code>public static int max(int… numbers){</code><br><code>    int result = Integer.MIN_VALUE;</code><br><code>    for (int number : numbers){</code><br><code>        if (number &gt; result){</code><br><code>            result = number;</code><br><code>        }</code><br><code>    }</code><br><code>    return result;</code><br><code>}</code></p>\n<p>Diese Methode kann verwendet werden, um mit einer beliebigen Anzahl von int-Zahlen aufgerufen zu werden, um dir grösste aller Zahlen unter den Parametern zu finden. Innerhalb der Methode sind alle Parameter aus der Vararg-Liste als Array zu sehen.</p>\n<p>Die Methode kann wie folgt aufgerufen werden:</p>\n<p><code>public static void main(String[] args) {</code><br><code>    System.out.println(max(5, 10, 0));</code><br><code>}</code></p>\n<p>Entsprechend wird die grösste Zahl ausgegeben: 10</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "varargs",
                   "softwareentwicklung",
                   "parameterlisten",
                   "java",
                   "dev",
                   "array"
            ],
            "date_published": "2022-05-25T20:17:32+02:00",
            "date_modified": "2022-05-25T20:38:17+02:00"
        },
        {
            "id": "https://www.finecloud.ch/die-for-each-schleife-2.html",
            "url": "https://www.finecloud.ch/die-for-each-schleife-2.html",
            "title": "Die for-each Schleife",
            "summary": "Die for-each Schleife ist speziell für Arrays und Collections gedacht, denn diese Schleife enthält keine Zählvariable, enthält aber nacheinander alle Einträge des Arrays oder der Collection. Buch[] buecher = …; for (Buch buch : buecher){ System.out.println(buch.getTitel()); } Dabei wird in den Klammern der Schleife eine&hellip;",
            "content_html": "<p>Die <em>for-each</em> Schleife ist speziell für Arrays und Collections gedacht, denn diese Schleife enthält keine Zählvariable, enthält aber nacheinander alle Einträge des Arrays oder der Collection.<br><br><code>Buch[] buecher = …;</code><br><code>for (Buch buch : buecher){</code><br><code>    System.out.println(buch.getTitel());</code><br><code>}</code></p>\n<p>Dabei wird in den Klammern der Schleife eine Variable vom Typ des Arrays und davor, mit einem Doppelpunkt getrennt, das Array welchem die Werte genommen werden.</p>\n<p>Der Hauptvorteil dieser Schleife ist, das sofort klar ist was ihre Aufgabe ist: durch alle Werte des Arrays zu iterieren. Damit vermeidet man auf potenzielle Fehler der for-Schleife wie zum Beispiel dass in der Abbruchbedingung i &lt;= array.length angegeben wird, was zu einer <em>IndexOutOfBoundsException</em> führt.</p>\n<p>Die Limitierung der <em>for-each</em> Schleife ist, dass keine neuen Objekte ins Array geschrieben oder durch andere ersetzt werden können. Da keine Zählvariable vorhanden ist, kann auch die Position im Array nicht beeinflusst werden.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "schleife",
                   "java",
                   "for-each",
                   "dev",
                   "array"
            ],
            "date_published": "2022-05-25T20:06:13+02:00",
            "date_modified": "2022-05-25T20:14:33+02:00"
        },
        {
            "id": "https://www.finecloud.ch/vaultwarden-backup.html",
            "url": "https://www.finecloud.ch/vaultwarden-backup.html",
            "title": "Vaultwarden Backup mit Rclone",
            "summary": "Vaultwarden ist eine alternative Implementation der Bitwarden Server API entwickelt in Rust, kompatibel mit allen Bitwarden clients. Vaultwarden eignet sich daher perfekt für self-hosted deployments, oder überall dort wo der offizielle Bitwarden Service nicht ideal geeignet ist. Dazu gibt es einmal das Vaultwarden Docker Image&hellip;",
            "content_html": "<p>Vaultwarden ist eine alternative Implementation der Bitwarden Server API entwickelt in Rust, kompatibel mit allen Bitwarden clients. Vaultwarden eignet sich daher perfekt für self-hosted deployments, oder überall dort wo der offizielle Bitwarden Service nicht ideal geeignet ist. Dazu gibt es einmal das <a href=\"https://hub.docker.com/r/vaultwarden/server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vaultwarden Docker Image</a> und den dazu gehörenden SourceCode auf <a href=\"https://github.com/dani-garcia/vaultwarden\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a>.</p>\n<p>Doch wie kann ich nun meine Vaultwarden Docker Instanz sichern? Dazu kann ich das Docker Image von <a href=\"https://github.com/ttionya/vaultwarden-backup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ttionya/vaultwarden-backup</a> empfehlen, das folgende Möglichkeiten bringt:</p>\n<p>Backup der folgenden Dateien und Verzeichnisse:</p>\n<ul>\n<li>db.sqlite3</li>\n<li>config.json</li>\n<li>rsa_key* (mehrere Dateien)</li>\n<li>attachments (Verzeichnis)</li>\n<li>sends (Verzeichnis)</li>\n</ul>\n<p>Weiter ist es möglich über den Backup-Status notifiziert zu werden mittels:</p>\n<ul>\n<li>Ping (sendet nur bei erfolgreichem Backup)</li>\n<li>Mail (SMTP basiert, sendet bei Backup Erfolg und Fehler)</li>\n</ul>\n<p>Nun stellt sich die Frage wohin sichern mit valtwarden-backup? Dazu habe ich an einem anderen Gerät in meinem Netzwerk eine externe USB Disk, auf welche ich die Backups mittels <a href=\"https://rclone.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rclone</a> senden kann. Rclone lässt sich in vaultwarden-backup wie folgt einrichten:</p>\n<pre>docker run --rm -it \\<br>    --mount type=volume,source=vaultwarden-rclone-data,target=/config/ \\<br>    ttionya/vaultwarden-backup:latest \\<br>    rclone config</pre>\n<p>Mit diesem Aufruf lässt sich innerhalb von vaultwarden-backup Rclone konfigurieren:</p>\n<pre>2022/05/24 05:50:00 NOTICE: Config file \"/config/rclone/rclone.conf\" not found - using defaults<br>No remotes found, make a new one?<br>n) New remote<br>s) Set configuration password<br>q) Quit config<br>n/s/q&gt; </pre>\n<p>Wir geben \"n\" an für eine neue Konfiguration:</p>\n<pre>n/s/q&gt;n</pre>\n<p>Anschliessend eine passende Bezeichnung für die Rclone Konfiguriation:</p>\n<pre class=\"p1\"><span class=\"s1\">name&gt; rclone-backup</span></pre>\n<p>Nun werden alle Rclone Backup Optionen aufgelistet:</p>\n<pre>Option Storage.<br>Type of storage to configure.<br>Choose a number from below, or type in your own value.<br> 1 / 1Fichier<br>   \\ (fichier)<br> 2 / Akamai NetStorage<br>   \\ (netstorage)<br> 3 / Alias for an existing remote<br>   \\ (alias)<br> 4 / Amazon Drive<br>   \\ (amazon cloud drive)<br> 5 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, China Mobile, Digital Ocean, Dreamhost, IBM COS, Lyve Cloud, Minio, Netease, RackCorp, Scaleway, SeaweedFS, StackPath, Storj, Tencent COS and Wasabi<br>   \\ (s3)<br> 6 / Backblaze B2<br>   \\ (b2)<br> 7 / Better checksums for other remotes<br>   \\ (hasher)<br> 8 / Box<br>   \\ (box)<br> 9 / Cache a remote<br>   \\ (cache)<br>10 / Citrix Sharefile<br>   \\ (sharefile)<br>11 / Compress a remote<br>   \\ (compress)<br>12 / Dropbox<br>   \\ (dropbox)<br>13 / Encrypt/Decrypt a remote<br>   \\ (crypt)<br>14 / Enterprise File Fabric<br>   \\ (filefabric)<br>15 / FTP Connection<br>   \\ (ftp)<br>16 / Google Cloud Storage (this is not Google Drive)<br>   \\ (google cloud storage)<br>17 / Google Drive<br>   \\ (drive)<br>18 / Google Photos<br>   \\ (google photos)<br>19 / Hadoop distributed file system<br>   \\ (hdfs)<br>20 / Hubic<br>   \\ (hubic)<br>21 / In memory object storage system.<br>   \\ (memory)<br>22 / Jottacloud<br>   \\ (jottacloud)<br>23 / Koofr, Digi Storage and other Koofr-compatible storage providers<br>   \\ (koofr)<br>24 / Local Disk<br>   \\ (local)<br>25 / Mail.ru Cloud<br>   \\ (mailru)<br>26 / Mega<br>   \\ (mega)<br>27 / Microsoft Azure Blob Storage<br>   \\ (azureblob)<br>28 / Microsoft OneDrive<br>   \\ (onedrive)<br>29 / OpenDrive<br>   \\ (opendrive)<br>30 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)<br>   \\ (swift)<br>31 / Pcloud<br>   \\ (pcloud)<br>32 / Put.io<br>   \\ (putio)<br>33 / QingCloud Object Storage<br>   \\ (qingstor)<br>34 / SSH/SFTP Connection<br>   \\ (sftp)<br>35 / Sia Decentralized Cloud<br>   \\ (sia)<br>36 / Storj Decentralized Cloud Storage<br>   \\ (storj)<br>37 / Sugarsync<br>   \\ (sugarsync)<br>38 / Transparently chunk/split large files<br>   \\ (chunker)<br>39 / Union merges the contents of several upstream fs<br>   \\ (union)<br>40 / Uptobox<br>   \\ (uptobox)<br>41 / Webdav<br>   \\ (webdav)<br>42 / Yandex Disk<br>   \\ (yandex)<br>43 / Zoho<br>   \\ (zoho)<br>44 / http Connection<br>   \\ (http)<br>45 / premiumize.me<br>   \\ (premiumizeme)<br>46 / seafile<br>   \\ (seafile)</pre>\n<p>Ich verwende Option 34 (34 / SSH/SFTP Connection):</p>\n<pre>  Storage&gt; 34</pre>\n<p>Jetzt muss ich den Host, auf welchem ich die externe USB Disk bereitgestellt habe angeben:</p>\n<pre>  Option host.<br>  SSH host to connect to.<br>  E.g. \"example.com\".<br>  Enter a string value. Press Enter for the default (\"\").<br>  host&gt; backup-nas.local</pre>\n<p>Der Benutzername mit welchem sich Rclone am Zielsystem authentifizieren kann:</p>\n<pre>Option user.<br>SSH username.<br>Enter a string value. Press Enter for the default (root).<br>user&gt; backup-service-account</pre>\n<p>Als nächstes kann man den SSH Port angeben (falls man nicht 22 verwendet), weiter möchte ich ein Kennwort angeben (noch besser ist die Kennwortlose Authentifizierung nur mit SSH-Keys):</p>\n<pre>Option port.<br>SSH port number.<br>Enter a signed integer. Press Enter for the default (22).<br>port&gt; <br>Option pass.<br>SSH password, leave blank to use ssh-agent.<br>Choose an alternative below. Press Enter for the default (n).<br>y) Yes, type in my own password<br>g) Generate random password<br>n) No, leave this optional password blank (default)<br>y/g/n&gt; y</pre>\n<p>Es folgt ein Marathon von weiteren Optionen, welche ich zur Zeit nicht verwenden will und deshalb mit den default Werten (Enter) bestätige:</p>\n<pre>Option key_pem.<br>Raw PEM-encoded private key.<br>If specified, will override key_file parameter.<br>Enter a value. Press Enter to leave empty.<br>key_pem&gt; <br>Option key_file.<br>Path to PEM-encoded private key file.<br>Leave blank or set key-use-agent to use ssh-agent.<br>Leading `~` will be expanded in the file name as will environment variables such as `${RCLONE_CONFIG_DIR}`.<br>Enter a value. Press Enter to leave empty.<br>key_file&gt; <br>Option key_file_pass.<br>The passphrase to decrypt the PEM-encoded private key file.<br>Only PEM encrypted key files (old OpenSSH format) are supported. Encrypted keys<br>in the new OpenSSH format can't be used.<br>Choose an alternative below. Press Enter for the default (n).<br>y) Yes, type in my own password<br>g) Generate random password<br>n) No, leave this optional password blank (default)<br>y/g/n&gt; <br>Option pubkey_file.<br>Optional path to public key file.<br>Set this if you have a signed certificate you want to use for authentication.<br>Leading `~` will be expanded in the file name as will environment variables such as `${RCLONE_CONFIG_DIR}`.<br>Enter a value. Press Enter to leave empty.<br>pubkey_file&gt; <br>Option key_use_agent.<br>When set forces the usage of the ssh-agent.<br>When key-file is also set, the \".pub\" file of the specified key-file is read and only the associated key is<br>requested from the ssh-agent. This allows to avoid `Too many authentication failures for *username*` errors<br>when the ssh-agent contains many keys.<br>Enter a boolean value (true or false). Press Enter for the default (false).<br>key_use_agent&gt; <br>Option use_insecure_cipher.<br>Enable the use of insecure ciphers and key exchange methods. <br>This enables the use of the following insecure ciphers and key exchange methods:<br>- aes128-cbc<br>- aes192-cbc<br>- aes256-cbc<br>- 3des-cbc<br>- diffie-hellman-group-exchange-sha256<br>- diffie-hellman-group-exchange-sha1<br>Those algorithms are insecure and may allow plaintext data to be recovered by an attacker.<br>Choose a number from below, or type in your own boolean value (true or false).<br>Press Enter for the default (false).<br> 1 / Use default Cipher list.<br>   \\ (false)<br> 2 / Enables the use of the aes128-cbc cipher and diffie-hellman-group-exchange-sha256, diffie-hellman-group-exchange-sha1 key exchange.<br>   \\ (true)<br>use_insecure_cipher&gt; <br>Option disable_hashcheck.<br>Disable the execution of SSH commands to determine if remote file hashing is available.<br>Leave blank or set to false to enable hashing (recommended), set to true to disable hashing.<br>Enter a boolean value (true or false). Press Enter for the default (false).<br>disable_hashcheck&gt; <br>Edit advanced config?<br>y) Yes<br>n) No (default)<br>y/n&gt; <br>--------------------<br>[rclone-backup]<br>type = sftp<br>host = backup-nas.local<br>user = backup-service-account<br>pass = *** ENCRYPTED ***<br>--------------------<br>y) Yes this is OK (default)<br>e) Edit this remote<br>d) Delete this remote<br>y/e/d&gt; y<br>Current remotes:<br><br>Name                 Type<br>====                 ====<br>rclone-backup        sftp<br><br>e) Edit existing remote<br>n) New remote<br>d) Delete remote<br>r) Rename remote<br>c) Copy remote<br>s) Set configuration password<br>q) Quit config<br>e/n/d/r/c/s/q&gt; q</pre>\n<p>Mit dem folgenden Befehl sollten wir nun das Docker Volume dieses Containers sehen:</p>\n<pre>user@myhost:~ $ docker volume ls<br>DRIVER    VOLUME NAME<br>local     vaultwarden-rclone-data</pre>\n<p>Auch können wir nun prüfen, ob darin die Rclone Konfiguration korrekt gespeichert ist, indem wir diese aufrufen, dieser Befehl sollte unsere vorherige Konfiguration ausgeben:</p>\n<pre>user@myhost:~ $ docker run --rm -it   --mount type=volume,source=vaultwarden-rclone-data,target=/config/   ttionya/vaultwarden-backup:latest   rclone config show</pre>\n<p>Ich habe zudem eine Mail Notifizierung via Gmail konfiguriert, damit sieht das docker-compose File letztendlich wie folgt aus:</p>\n<pre>  backup:<br>    image: ttionya/vaultwarden-backup:latest<br>    restart: always<br>    volumes:<br>      - /var/docker/vaultwarden:/bitwarden/data/:ro<br>      - /var/docker/vaultwarden-rclone-data:/config/:ro<br>    environment:<br>      RCLONE_REMOTE_NAME: 'remote'<br>      RCLONE_REMOTE_DIR: '/Backup/'<br>      CRON: '0 18 * * *'<br>      ZIP_ENABLE: 'TRUE'<br>      ZIP_PASSWORD: 'yourpasswordhere'<br>      ZIP_TYPE: 'zip'<br>      #BACKUP_FILE_DATE_SUFFIX: ''<br>      BACKUP_KEEP_DAYS: 7<br>      #PING_URL: ''<br>      MAIL_SMTP_ENABLE: 'TRUE'<br>      MAIL_SMTP_VARIABLES: '-S smtp-use-starttls -S ssl-verify=true -S smtp-auth=login -S smtp=smtp://smtp.gmail.com:587 -S from=yourmailhere -S smtp-auth-user=yourmailhere -S smtp-auth-password=yourpasswordhere -S ssl-verify=true'<br>      MAIL_TO: 'yourmailhere'<br>      MAIL_WHEN_SUCCESS: 'TRUE'<br>      MAIL_WHEN_FAILURE: 'TRUE'<br>      TIMEZONE: 'Europe/Zurich'</pre>\n<p>Der Mailversand lässt sich mit diesem Befehl testen, natürlich müssen zuerst noch die Variabeln von vorhin eingetragen werden:</p>\n<pre>user@myhost:~ $ docker run --rm -it -e MAIL_SMTP_VARIABLES='-S smtp-use-starttls  ....' -e MAIL_TO='yourmailhere' ttionya/vaultwarden-backup:latest mail</pre>\n<p>Ob der Mailversand funktioniert zeigt sich damit, ob dieser Befehlt zuletzt </p>\n<blockquote>\n<p>mail send was successfully</p>\n</blockquote>\n<p>ausgibt und ob nun eine EMail im Postfach landet mit dem Inhalt:</p>\n<blockquote>\n<p>Your SMTP looks configured correctly.</p>\n</blockquote>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "vaultwarden",
                   "smtp",
                   "rclone",
                   "docker",
                   "backup",
                   "ansible"
            ],
            "date_published": "2022-05-24T07:23:03+02:00",
            "date_modified": "2022-05-24T09:21:32+02:00"
        },
        {
            "id": "https://www.finecloud.ch/utility-methoden-von-java-arrays.html",
            "url": "https://www.finecloud.ch/utility-methoden-von-java-arrays.html",
            "title": "Utility-Methoden von Java Arrays",
            "summary": "Nachfolgend eine Auswahl an Werkzeugen von Arrays. Die Auswahl ist nicht abschliessend. Mit der Methode sort können Arrays sortiert werden, und mit der Methode binarySeach kann in Arrays gesucht werden. Es gilt zu beachten, dass binarySearch nur auf bereits sortierten Arrays funktioniert. Auf einem unsortierten&hellip;",
            "content_html": "<p>Nachfolgend eine Auswahl an Werkzeugen von Arrays. Die Auswahl ist nicht abschliessend.</p>\n<h3>Suchen und sortieren</h3>\n<p>Mit der Methode <code>sort</code> können Arrays sortiert werden, und mit der Methode <code>binarySeach</code> kann in Arrays gesucht werden. Es gilt zu beachten, dass <code>binarySearch</code> nur auf bereits sortierten Arrays funktioniert. Auf einem unsortierten Array ist das Suchresultat nicht definiert.</p>\n<p>Das Sortieren von primitiven Arrays ist einfach, 1 ist immer kleiner als 41, a ist immer kleiner als z.</p>\n<p>Bei Objekt-Arrays gibt es keine natürliche Ordnung und deshalb auch keine Möglichkeit auf einen Sortieralgorithmus zurückzugreifen. Um dennoch Objekt-Arrays sortieren zu können, kann der <em>Comparator</em> verwendet werden.</p>\n<h3>Comparator</h3>\n<p>Eine Implementierung des Interface Comparator muss eine compare-Methode enthalten. Diese muss zwei Objekte entgegennehmen und einen int-Wert zurückgeben. Die Bedeutung des int-Werts der zurück kommt ist gemäss <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaDocs</a> wie folgt definiert:</p>\n<blockquote>\n<p><span class=\"returnLabel\">Returns:<br></span>a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.</p>\n</blockquote>\n<p>Im nachfolgenden Beispiel, wird ein Array von Büchern nach Namen des Autors sortiert. Die compareTo-Methode der Klasse String hat Rückgabewerte mit derselben Bedeutung wie Comparator.compare, deshalb kann der Rückgabewert nach aussen weitergereicht werden:<br><code>Buch[] buecher = …;</code><br><code>Arrays.sort(buecher, new Comparator(){</code><br><code>    public void compare(Object o1, Object o2){</code><br><code>        Buch b1 = (Buch) o1;</code><br><code>        Buch b2 = (Buch) o2;</code><br><code>        return b1.getAutor().compareTo(b2.getAutor());</code><br><code>    }</code><br><code>});</code></p>\n<p>Es gibt auch die besser lesbare Möglichkeit, sortieren mit der Methodenreferenz:</p>\n<p><code>Arrays.sort(buecher, Comparator.comparing(Buch::getAutor));</code></p>\n<p>Nun kann nach einem Buch gesucht werden:</p>\n<p><code>Buch[] buecher = …;</code><br><code>Comparator c = Comparator.comparing(Buch::getAutor);</code><br><code>Arrays.sort(buecher, c);</code><br><code>Arrays.binarySearch(buecher, suchBuch, c);</code></p>\n<p><code>binarySearch</code> nimmt als Parameter das zu durchsuchende Array, den gesuchten Wert und – nur bei Objekt-Arrays – auch noch einen Comparator. Die Bedeutung des index Werts der zurück kommt ist gemäss <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Arrays.html#binarySearch(T%5B%5D,T,java.util.Comparator)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaDocs</a> wie folgt definiert:</p>\n<blockquote>\n<p><span class=\"returnLabel\">Returns:<br></span>index of the search key, if it is contained in the array; otherwise, <code>(-(<i>insertion point</i>) - 1)</code>. The <i>insertion point</i> is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or <code>a.length</code> if all elements in the array are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found.</p>\n</blockquote>\n<p>Wird der <em>search key</em> im Array nicht gefunden, bedeutet ein Rückgabewert von –1, dass das Objekt am Anfang des Arrays eingefügt werden müsste, –2 bedeutet zwischen dem ersten und zweiten Element usw.</p>\n<h3>Comperable</h3>\n<p>Eine weitere Möglichkeit zum Sortieren mit Comparator besteht darin, auch bei Objekten eine natürliche Ordnung zu etablieren. Das ist aber nicht bei allen Klassen sinnvoll. Bücher sind keine guten Kandidaten für eine natürliche Ordnung. Besser geeignet wäre eine Klasse Person. Für Personen ist es in den meisten Programmen üblich alphabetisch nach Namen zu sortieren. Dazu muss eine Klasse das Interface Comperable und seine Methode <code>compareTo</code> implementieren:</p>\n<p><code>public class Person implements Comparable {</code><br><code>    private String vorname, nachname;</code><br><code>    public int compareTo(Object o){</code><br><code>        Person other = (Person) o;</code><br><code>        int vergleichNachname = nachname.compareTo(other.nachname);</code><br><code>        if (vergleichNachname == 0){</code><br><code>            return vorname.compareTo(other.vorname);</code><br><code>        } else {</code><br><code>            return vergleichNachname;</code><br><code>        }</code><br><code>    }</code><br><code>}</code></p>\n<p>Eine negative Zahl bedeutet, dass this kleiner ist, eine positive, dass this grösser ist, eine 0, dass beide gleich sind. Ein Array von solchen Objekten können Sie nun vergleichen, ohne einen Comparator zu verwenden:<br><br><code>Person[] leute = …;</code><br><code>Arrays.sort(leute);</code></p>\n<h3>Parallel sortieren</h3>\n<p>Mit der Methode <code>Arrays.parallelSort</code> kann die Sortierung in mehreren Threads gleichzeitig verarbeitet werden. Das bringt bei den heutigen Multi-Prozessorkern Geräten einen wesentlichen Performance unterschied und ist deutlich schneller.</p>\n<h3>Füllen und kopieren</h3>\n<p>Weil Arrays zusammenhängende Speicherbereiche belegen kann man mit den Methoden <code>Arrays.copyOf</code> und <code>Arrays.fill</code> wesentlich effizienter kopieren und füllen, als mit einer Schleife im Java-Code:</p>\n<p><code>int[] zahlen = …;</code><br><code>int[] kopie = Arrays.copyOf(zahlen, zahlen.length);</code></p>\n<p>Parameter zwei und drei von fill geben den Bereich an, der vierte Parameter <br>den Füllwert: <br><code>Arrays.fill(zahlen, 0, 1000, 1);</code></p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "utility-methoden",
                   "sort",
                   "softwareentwicklung",
                   "parallel sortieren",
                   "java",
                   "füllen und kopieren",
                   "dev",
                   "comperable",
                   "comparator",
                   "array"
            ],
            "date_published": "2022-05-23T16:55:29+02:00",
            "date_modified": "2022-05-23T18:07:59+02:00"
        },
        {
            "id": "https://www.finecloud.ch/mehrdimensionale-java-arrays.html",
            "url": "https://www.finecloud.ch/mehrdimensionale-java-arrays.html",
            "title": "Mehrdimensionale Java Arrays",
            "summary": "Eindimensionales Array Nebst den eindimensionalen Java Arrays gibt es auch mehrdimensionale Arrays. Hier ein Beispiel eines eindimensionalen Java Arrays: int[] zahlen = new int[]{1, 2, 3, 4}; Ein mehrdimensionales Array könnte beispielsweise ein Schachfeld sein: Schachfigur[][] schachbrett = new Schachfigur[8][8]; Mehrdimensionale Arrays sind nicht auf&hellip;",
            "content_html": "<h3>Eindimensionales Array</h3>\n<p>Nebst den eindimensionalen Java Arrays gibt es auch mehrdimensionale Arrays. Hier ein Beispiel eines eindimensionalen Java Arrays:</p>\n<p><code>int[] zahlen = new int[]{1, 2, 3, 4};</code></p>\n<h3>Mehrdimensionales Array</h3>\n<p>Ein mehrdimensionales Array könnte beispielsweise ein Schachfeld sein:</p>\n<p><code>Schachfigur[][] schachbrett = new Schachfigur[8][8];</code></p>\n<p>Mehrdimensionale Arrays sind nicht auf zwei Dimensionen limitiert, die Limite ist bei 255 Dimensionen, aber das wird wohl eher selten benötigt.</p>\n<h3>Zugriff auf ein mehrdimensionales Array </h3>\n<p>Auf den Wert eines mehrdimensionale Arrays kann man genau so einfach zugreifen wie auf den eines eindimensionalen, dazu muss man nur die Koordinaten angeben:</p>\n<p><code>schachbrett[2][1] = new Schachfigur(Figur.BAUER, Farbe.WEISS);</code></p>\n<p>Es ist zudem möglich auf eine ganze Zeile eines eindimensionalen Arrays zuzugreifen, so erhält man ein eindimensionales Array desselben Typs zurück:</p>\n<p><code>int[] grundreiheWeiss = schachbrett[1];</code><br><code>int[] grundreiheSchwarz = schachbrett[6];</code></p>\n<p>Die einfachste Hilfe um das zu veranschaulichen ist die Visualisierung eines solchen Arrays:</p>\n<p><code>int[][] a = new int[3][3];</code></p>\n<table style=\"border-collapse: collapse; width: 100%; height: 201.438px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 16.5478%; height: 50.3594px;\"> </td>\n<td class=\"align-center\" style=\"width: 16.6904%; height: 50.3594px;\"><strong>Column1</strong></td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\"><strong>Column2</strong></td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\"><strong>Column3</strong></td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 16.5478%; height: 50.3594px;\"><strong>Row1</strong></td>\n<td class=\"align-center\" style=\"width: 16.6904%; height: 50.3594px;\">a[0][0]</td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\">a[0][1]</td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\">a[0][2]</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 16.5478%; height: 50.3594px;\"><strong>Row2</strong></td>\n<td class=\"align-center\" style=\"width: 16.6904%; height: 50.3594px;\">a[1][0]</td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\">a[1][1]</td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\">a[1][2]</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 16.5478%; height: 50.3594px;\"><strong>Row3</strong></td>\n<td class=\"align-center\" style=\"width: 16.6904%; height: 50.3594px;\">a[2][0]</td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\">a[2][1]</td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\">a[2][2]</td>\n</tr>\n</tbody>\n</table>\n<h3>Nicht rechteckige, zweidimensionale Arrays</h3>\n<p>Solche Arrays müssen nicht rechteckig sein, es ist möglich ein ungleichmässig Dimensionales Array zu erstellen:</p>\n<p><code>int[][] b = new int[3][];</code><br><code>b[0] = new int[1];</code><br><code>b[1] = new int[2];</code><br><code>b[2] = new int[3];</code></p>\n<p>Das würde dann wie folgt aussehen:</p>\n<table style=\"border-collapse: collapse; width: 100%; height: 201.438px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 16.5478%; height: 50.3594px;\"> </td>\n<td class=\"align-center\" style=\"width: 16.6904%; height: 50.3594px;\"><strong>Column1</strong></td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\"><strong>Column2</strong></td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\"><strong>Column3</strong></td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 16.5478%; height: 50.3594px;\"><strong>Row1</strong></td>\n<td class=\"align-center\" style=\"width: 16.6904%; height: 50.3594px;\">b[0][0]</td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\"> </td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\"> </td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 16.5478%; height: 50.3594px;\"><strong>Row2</strong></td>\n<td class=\"align-center\" style=\"width: 16.6904%; height: 50.3594px;\">b[1][0]</td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\">b[1][1]</td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\"> </td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 16.5478%; height: 50.3594px;\"><strong>Row3</strong></td>\n<td class=\"align-center\" style=\"width: 16.6904%; height: 50.3594px;\">b[2][0]</td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\">b[2][1]</td>\n<td class=\"align-center\" style=\"width: 33.3809%; height: 50.3594px;\">b[2][2]</td>\n</tr>\n</tbody>\n</table>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "mehrdimensionales array",
                   "java",
                   "dev",
                   "array"
            ],
            "date_published": "2022-05-23T11:03:14+02:00",
            "date_modified": "2022-05-23T18:02:25+02:00"
        }
    ]
}
