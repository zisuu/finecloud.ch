{
    "version": "https://jsonfeed.org/version/1",
    "title": "Finecloud",
    "description": "",
    "home_page_url": "https://www.finecloud.ch",
    "feed_url": "https://www.finecloud.ch/feed.json",
    "user_comment": "",
    "author": {
        "name": "Finecloud"
    },
    "items": [
        {
            "id": "https://www.finecloud.ch/microservices.html",
            "url": "https://www.finecloud.ch/microservices.html",
            "title": "Microservices",
            "summary": "This Post is a summary of the famous Article about Microservices: https://martinfowler.com/articles/microservices.html The text discusses the concept of \"Microservice Architecture,\" which is an approach to designing software applications as a suite of independently deployable services. It highlights that there is no precise definition but outlines&hellip;",
            "content_html": "\n  <p>\n    This Post is a summary of the famous Article about Microservices: https://martinfowler.com/articles/microservices.html<br>\n  </p>\n\n    <h2 id=\"a-definition-of-this-new-architectural-termlessbrgreater\">\n      a definition of this new architectural term<br>\n    </h2>\n\n  <p>\n    The text discusses the concept of \"Microservice Architecture,\" which is an approach to designing software applications as a suite of independently deployable services. It highlights that there is no precise definition but outlines common characteristics such as organization around business capabilities, automated deployment, decentralized control of languages and data, and the use of lightweight communication mechanisms like HTTP. Microservices are contrasted with monolithic architecture, where applications are built as a single unit. The text emphasizes that microservices provide advantages like independent deployment, scalability, and modular structure, making it increasingly appealing for building enterprise applications. The microservice style is not claimed to be innovative but is considered beneficial for software development.<br>\n  </p>\n\n    <h2 id=\"componentization-via-services\">\n      Componentization via Services\n    </h2>\n\n  <p>\n    The text discusses the evolution of component-based software development in the software industry. It highlights the distinction between libraries and services as components, with a focus on microservice architectures. The main point is that components, in this context, are units of software that are independently replaceable and upgradeable. The text also explains that services, as out-of-process components, offer advantages in terms of independent deployability and explicit component interfaces. However, it acknowledges that using services can have downsides, such as increased overhead for remote calls and challenges in changing the allocation of responsibilities between components. The text concludes by noting that services can consist of multiple processes that are developed and deployed together.\n  </p>\n\n    <h2 id=\"organized-around-business-capabilities\">\n      Organized around Business Capabilities\n    </h2>\n\n  <p>\n    The text mentions how companies like comparethemarket.com organize themselves using cross-functional teams responsible for building and operating individual services. The text also touches upon Conway's Law, emphasizing that an organization's system design mirrors its communication structure.\n  </p>\n\n  <p>\n    The key point is the contrast between the traditional approach of splitting teams based on technology layers (UI, server-side, database) and the microservices approach, which focuses on dividing services around business capabilities. Microservices encourage cross-functional teams with expertise in user experience, database, and project management. The text suggests that large monolithic applications can also benefit from modularization based on business capabilities but cautions against excessive complexity and recommends maintaining clear team boundaries, which is facilitated by the more explicit separation in service components.\n  </p>\n\n    <h2 id=\"products-not-projects\">\n      Products not Projects\n    </h2>\n\n  <p>\n    The text discusses the difference in development approaches between traditional project-based models and the microservices approach. In the traditional model, software development is seen as a project with a defined end, after which it's handed over to a maintenance organization. Microservice proponents advocate for teams to own a product throughout its entire lifecycle, emphasizing the \"you build, you run it\" philosophy popularized by Amazon.<br><br>This approach encourages developers to be responsible for their software in production, fostering closer interaction with how it behaves and its users. The text highlights that this product-oriented mentality aligns with the focus on business capabilities, emphasizing an ongoing relationship where software continuously enhances business capabilities.<br><br>It also notes that while this approach can be applied to monolithic applications, the smaller granularity of services in microservices makes it easier to establish personal relationships between service developers and their users.\n  </p>\n\n    <h2 id=\"smart-endpoints-and-dumb-pipes\">\n      Smart endpoints and dumb pipes\n    </h2>\n\n  <p>\n    The text starts by mentioning the traditional approach, exemplified by Enterprise Service Bus (ESB), where significant intelligence is embedded in the communication mechanism itself, allowing for sophisticated message routing, choreography, and transformation.<br><br>In contrast, the microservices community prefers a different approach: \"smart endpoints and dumb pipes.\" Microservices are designed to be highly decoupled and cohesive, with each service owning its domain logic. These services act as filters, receiving requests, applying logic, and producing responses. They utilize simple RESTish protocols and emphasize two common protocols: HTTP request-response with resource APIs and lightweight messaging. The principles of the World Wide Web and Unix underlie these protocols.<br><br>The text also highlights that, in microservices, the infrastructure used for messaging is typically simple and serves as a message router only, with the intelligence residing in the end points. The key challenge in transitioning from a monolithic architecture to microservices is changing the communication pattern. The text advises against a naive conversion to remote procedure calls (RPC) as it can lead to inefficient and \"chatty\" communications, advocating for a coarser-grained approach instead.\n  </p>\n\n    <h2 id=\"decentralized-governance\">\n      Decentralized Governance\n    </h2>\n\n  <p>\n    The text highlights the limitations of centralized governance, such as the tendency to standardize on single technology platforms. In contrast, microservices allow for a more flexible approach, enabling teams to choose the right tools and technologies for specific components.<br><br>Microservice teams focus on producing practical tools and sharing them with other developers, often following open-source practices. This approach encourages flexibility in solving similar problems while still valuing service contracts. The text mentions patterns like Tolerant Reader and Consumer-Driven Contracts that help service contracts evolve independently, with tools enabling automated contract verification during the build process.<br><br>Furthermore, the text discusses the \"build it / run it\" ethos popularized by Amazon, where development teams are responsible for operating the software they build, emphasizing the decentralization of responsibility. This approach, exemplified by companies like Netflix, fosters a focus on code quality and contrasts sharply with traditional centralized governance models.\n  </p>\n\n    <h2 id=\"decentralized-data-management\">\n      Decentralized Data Management\n    </h2>\n\n  <p>\n    The text points out that decentralized data management leads to differences in the conceptual models of systems, particularly when integrating across a large enterprise. This divergence in views can even occur within applications, especially when they are divided into separate components, which can be understood using the concept of Bounded Context from Domain-Driven Design.\n  </p>\n\n  <p>\n    Microservices further decentralize data storage decisions by allowing each service to manage its own database, known as Polyglot Persistence. This contrasts with the monolithic approach of a single logical database for persistent data.<br><br>In terms of data updates, traditional monolithic applications often use transactions to guarantee consistency when updating multiple resources. However, microservices prioritize transactionless coordination between services due to the challenges of implementing distributed transactions. This approach acknowledges that consistency may be eventual and addresses problems with compensating operations.<br><br>The text also highlights that managing inconsistencies aligns with business practices where businesses often tolerate a degree of inconsistency to respond quickly to demand, with the ability to reverse processes to address mistakes. This trade-off is considered worthwhile as long as the cost of fixing errors is lower than the cost of lost business under greater consistency.\n  </p>\n\n    <h2 id=\"infrastructure-automation\">\n      Infrastructure Automation\n    </h2>\n\n  <p>\n    The text points out that teams building microservices often have experience with Continuous Delivery and Continuous Integration, both of which heavily rely on infrastructure automation.<br><br>The text highlights that infrastructure automation plays a crucial role in building confidence in software by running automated tests and automating deployment to different environments. It mentions that once the path to production for a monolithic application is automated, deploying more applications becomes less daunting. The goal of Continuous Delivery is to make deployment a routine and uneventful process.\n  </p>\n\n  <p>\n    The text also acknowledges that while the deployment process may not differ significantly between monolithic applications and microservices, the operational landscape for each can be notably distinct, suggesting that infrastructure automation is key to managing microservices effectively in production.\n  </p>\n\n    <h2 id=\"design-for-failure\">\n      Design for failure\n    </h2>\n\n  <p>\n    The text points out that using services as components means applications need to be resilient and capable of handling service failures. Unlike monolithic designs, microservices introduce complexity in managing failures gracefully. To address this, microservice teams place a strong emphasis on monitoring and detecting failures in real-time.<br><br>The text mentions Netflix's \"Simian Army,\" which intentionally induces service and datacenter failures during the working day to test the application's resilience and monitoring capabilities. While monolithic architectures can also have sophisticated monitoring, it's less common.<br><br>Microservices require the ability to quickly detect and, if possible, automatically restore service. They rely on real-time monitoring, checking both architectural and business-relevant metrics. Semantic monitoring helps spot issues, especially in a microservices architecture where choreography and event collaboration can lead to emergent behavior, which may not always be desirable.<br><br>The text concludes that microservice teams expect to have sophisticated monitoring and logging setups for each individual service, including dashboards for status, operational and business metrics, and details on circuit breaker status, throughput, and latency. Transparency and quick detection of failures are critical in a microservices environment.\n  </p>\n\n    <h2 id=\"evolutionary-design\">\n      Evolutionary Design\n    </h2>\n\n  <p>\n    Microservice practitioners often come from an evolutionary design background and view service decomposition as a tool to enable application developers to control changes without slowing down the development process.<br><br>The key principle behind microservices is the notion of independent replacement and upgradeability. This means looking for points in the application where components can be rewritten without affecting their collaborators. Some microservice groups take this a step further by expecting that many services will be replaced rather than evolved in the long term.<br><br>The text provides examples of applications that started as monoliths but evolved in a microservice direction. These microservices are particularly useful for adding temporary features or services that are discarded after a short period, such as specialized pages for sporting events.<br><br>It emphasizes the importance of modular design based on the pattern of change, where components that change together should be in the same module. Microservices allow for more granular release planning, as changes only require redeploying the specific service(s) that were modified. However, this introduces the challenge of ensuring that changes to one service do not break its consumers, and the text suggests that versioning should be a last resort, with services designed to be tolerant of changes in their suppliers.\n  </p>\n\n    <h2 id=\"are-microservices-the-future\">\n      Are Microservices the Future?\n    </h2>\n\n  <p>\n    The concept of microservices is a promising architectural style for enterprise applications but the text emphasizes that it's still too early to make definitive judgments about its long-term impact. Several well-known companies, including Amazon, Netflix, The Guardian, and others, have adopted microservices. However, the text acknowledges that the full consequences of architectural decisions may take several years to become evident.<br><br>It highlights some challenges and potential concerns associated with microservices, such as the difficulty of defining service boundaries, the increased complexity in coordinating interface changes, and the risk of moving complexity from within a component to the connections between components. Additionally, the success of microservices can be influenced by team skill, and it remains to be seen how less skillful teams would fare with this approach.<br><br>The text suggests a reasonable argument of starting with a monolith and splitting it into microservices when necessary, while maintaining modularity from the beginning. It concludes with cautious optimism, acknowledging that the microservices style holds promise, but the ultimate outcomes will depend on how well it addresses these challenges in practice.\n  </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "microservices",
                   "dev"
            ],
            "date_published": "2023-10-28T14:08:02+02:00",
            "date_modified": "2023-10-28T14:08:12+02:00"
        },
        {
            "id": "https://www.finecloud.ch/the-concept-of-api-contracts.html",
            "url": "https://www.finecloud.ch/the-concept-of-api-contracts.html",
            "title": "The Concept of API Contracts",
            "summary": "What is it about? We define an API contract as a formal agreement between a software provider and a consumer that abstractly communicates how to interact with each other. This contract defines how API providers and consumers interact, what data exchanges looks like, and how&hellip;",
            "content_html": "\n    <h2 id=\"what-is-it-about\">\n      What is it about?\n    </h2>\n\n  <p>\n    We define an API contract as a formal agreement between a software provider and a consumer that abstractly communicates how to interact with each other. This contract defines how API providers and consumers interact, what data exchanges looks like, and how to communicate success and failure cases.<br><br>The provider and consumers do not have to share the same programming language, only the same API contracts. Lets imagine that we need to design a API for a Family Cash Card Web Application. Let’s assume that currently there's one contract between the Cash Card service and all services using it. Below is an example of that first API contract.\n  </p>\n<pre class=\" language-json\"><code>Request\n  URI: /cashcards/{id}\n  HTTP Verb: GET\n  Body: None\n\nResponse:\n  HTTP Status:\n    200 OK if the user is authorized and the Cash Card was successfully retrieved\n    403 UNAUTHORIZED if the user is unauthenticated or unauthorized\n    404 NOT FOUND if the user is authenticated and authorized but the Cash Card cannot be found\n  Response Body Type: JSON\n  Example Response Body:\n    {\n      \"id\": 99,\n      \"amount\": 123.45\n    }</code></pre>\n\n    <h2 id=\"why-are-api-contracts-important\">\n      Why Are API Contracts Important?\n    </h2>\n\n  <p>\n    API contracts are important because they communicate the behavior of a REST API. They provide specific details about the data being serialized (or deserialized) for each command and parameter being exchanged. The API contracts are written in such a way that can be easily translated into API provider and consumer functionality, and corresponding automated tests.\n  </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "dev",
                   "api"
            ],
            "date_published": "2023-09-23T13:52:33+02:00",
            "date_modified": "2023-09-23T13:54:08+02:00"
        },
        {
            "id": "https://www.finecloud.ch/terraform-tips-and-tricks-2.html",
            "url": "https://www.finecloud.ch/terraform-tips-and-tricks-2.html",
            "title": "Terraform Tips and Tricks",
            "summary": "module \"zland\" { source = \"git::ssh//git@gitlab.com/zland/module.git\" version = \"1.0.5\" servers = 3 } Module Output Values resource \"aws_instance\" \"appserver\" { #... instance = module.servers.instance_ids } Since the resources defined in a module are encapsulated, a calling module cannot access their attributes directly. Instead, the child&hellip;",
            "content_html": "\n  <p>\n    <br>\n  </p>\n\n  <div class=\"post__toc\">\n    <h3>Table of contents</h3>\n    <ul>\n      <li><a href=\"#facts-about-remote-state\">Facts about Remote State</a></li><li><a href=\"#remote-state-storage-support\">Remote State Storage support</a></li><li><a href=\"#separate-environments\">Separate Environments</a></li><li><a href=\"#use-modules\">Use Modules</a></li><li><a href=\"#arguments-to-use-with-modules\">Arguments to use with Modules</a></li><li><a href=\"#module-output-valueslessbrgreater\">Module Output Values<br></a><ul><li><a href=\"#create-a-custom-module-example\">Create a custom Module (Example)</a></li></ul></li><li><a href=\"#dont-repeat-yourself\">Don’t Repeat Yourself</a></li><li><a href=\"#3-things-to-use-to-keep-it-dry\">3 Things to Use to Keep It DRY</a><ul><li><a href=\"#conditional-example\">Conditional Example</a><ul><li><a href=\"#the-create_bucketfalse-conditional\">The create_bucket=false Conditional</a></li><li><a href=\"#the-create_buckettrue-conditional\">The create_bucket=true Conditional</a></li></ul></li></ul></li><li><a href=\"#use-null_resource\">Use null_resource</a><ul><li><a href=\"#example-null_resource\">Example null_resource</a></li></ul></li><li><a href=\"#use-functions\">Use Functions</a><ul><li><a href=\"#the-format-function\">The format Function</a></li><li><a href=\"#the-matchkeys-function\">The matchkeys Function</a></li><li><a href=\"#the-element-function\">The element Function</a></li></ul></li><li><a href=\"#test-your-code\">Test Your Code</a><ul><li><a href=\"#other-testing-tools\">Other Testing Tools</a></li></ul></li>\n    </ul>\n  </div>\n  \n\n    <h2 id=\"facts-about-remote-state\">\n      Facts about Remote State\n    </h2>\n\n  <ul>\n    <li>Remote state is not the default; you must specify which backend to use and configure it to be used.</li><li>Remote state can be used by multiple team members. Terraform will write state data to a remote data store that users with access can use so there aren’t multiple state files.</li><li>Remote state uses a backend, which is configured in your configuration’s root module.</li><li>Remote state allows you to share output values with other configurations. Those configurations can then consume the exposed outputs in additional configurations.</li>\n  </ul>\n\n    <h2 id=\"remote-state-storage-support\">\n      Remote State Storage support\n    </h2>\n\n  <ul>\n    <li>Terraform Cloud</li><li>HashiCorp Consul</li><li>Amazon S3</li><li>Azure Blob Storage</li><li>Google Cloud Storage</li><li>Alibaba Cloud OSS</li><li>...and more</li>\n  </ul>\n\n    <h2 id=\"separate-environments\">\n      Separate Environments\n    </h2>\n\n  <ol>\n    <li>It is good practice to separate your Terraform configurations per environment.</li><li>Separate environments help with code organization, as well as allowing for better and easier CI and automation integration.</li><li>Implementing a one-folder-per-environment pattern lets you copy and paste Terraform code from one folder to another. This, used with variables, allows you to quickly change only what is needed per environment.</li>\n  </ol>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://www.finecloud.ch/media/posts/92/Screenshot-2023-09-15-at-21.25.59.png\" height=\"620\" width=\"1432\" alt=\"\"  sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-15-at-21.25.59-xs.png 300w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-15-at-21.25.59-sm.png 480w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-15-at-21.25.59-md.png 768w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-15-at-21.25.59-lg.png 1024w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-15-at-21.25.59-xl.png 1360w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-15-at-21.25.59-2xl.png 1600w\">\n      \n    </figure>\n\n    <h2 id=\"use-modules\">\n      Use Modules\n    </h2>\n\n  <ol>\n    <li>Modules are containers for multiple resources that are used together.</li><li>Every Terraform configuration contains at least one module.</li><li>Modules can call other modules. This lets you include a module’s resources in a configuration in a concise way.</li><li>Modules can be called multiple times, either in the same Terraform configuration or in separate ones. This allows for resource configurations to be packaged and reused.</li>\n  </ol>\n\n    <h2 id=\"arguments-to-use-with-modules\">\n      Arguments to use with Modules\n    </h2>\n\n  <ul>\n    <li>source: This argument is mandatory for all modules.</li><li>version: This argument is recommended for modules from a registry.</li><li>meta-arguments: Arguments like for_each and count.</li><li>input variables: Most other arguments correspond to input variables.</li>\n  </ul>\n<pre class=\" language-go\"><code>module \"zland\" {\n  source = \"git::ssh//git@gitlab.com/zland/module.git\"\n  version = \"1.0.5\"\n  servers = 3\n}</code></pre>\n\n    <h2 id=\"module-output-valueslessbrgreater\">\n      Module Output Values<br>\n    </h2>\n<pre class=\" language-go\"><code>resource \"aws_instance\" \"appserver\" {\n    #...\n    instance = module.servers.instance_ids\n}</code></pre>\n\n  <p>\n    Since the resources defined in a module are encapsulated, a calling module cannot access their attributes directly. Instead, the child module can declare output values.\n  </p>\n\n    <h3 id=\"create-a-custom-module-example\">\n      Create a custom Module (Example)\n    </h3>\n\n  <p>\n    Create those files in the folder modules/ec2:<br><br>main.tf\n  </p>\n<pre class=\" language-go\"><code>resource \"aws_instance\" \"app_server\" {\n  ami           = \"DUMMY_VALUE_AMI\"\n  instance_type = \"t3.micro\"\n  subnet_id     = \"DUMMY_VALUE_SUBNET_ID\"\n  tags = {\n    Name = \"WayneCorp\"\n  }\n}\n</code></pre>\n\n  <p>\n    outputs.tf\n  </p>\n<pre class=\" language-go\"><code>output \"instance_id\" {\n  description = \"ID of the EC2 instance\"\n  value       = aws_instance.app_server.id\n}\n\noutput \"instance_public_ip\" {\n  description = \"Public IP address of the EC2 instance\"\n  value       = aws_instance.app_server.public_ip\n}</code></pre>\n\n  <p>\n    to use your module, add this snippet at the end of you existing ec2.tf file:<br><br>existing ec2.tf:\n  </p>\n<pre class=\" language-go\"><code>terraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 3.27\"\n    }\n  }\n  required_version = \"&gt;= 0.14.9\"\n}\nprovider \"aws\" {\n  profile = \"default\"\n  region  = \"us-east-1\"\n}</code></pre>\n\n  <p>\n    new content to add:\n  </p>\n<pre class=\" language-go\"><code>module \"ec2-module\" {\n  source = \"./modules/ec2/\"\n}\n</code></pre>\n\n  <p>\n    now you can run a <code>terraform fmt </code>to format your code.<br><br>Now run a <code>terraform init</code>&nbsp;to initialize your terraform backend<br><br>run a <code>terraform validate</code>&nbsp;to make sure syntax is correct<br><br>finally run a <code>terraform plan</code>&nbsp;and if your happy with the output a terraform apply<br><br>To check your state you can now run <code>terraform show</code>&nbsp;or <code>aws ec2 describe-instances</code>\n  </p>\n\n    <h2 id=\"dont-repeat-yourself\">\n      Don’t Repeat Yourself\n    </h2>\n\n  <ul>\n    <li>DRY is a principle that promotes modularization, abstraction, and code reuse and discourages repetition.</li><li>    This principle states that “every piece of knowledge must have a single, unambiguous, authoritative representation within a system”.</li><li>    This principle can be applied to not only programming, but to database schemas, test plans, the build system, and even documentation.</li><li>    If applied successfully, a modification of a single piece of the system will not require a change in other logic or unrelated elements of the system.</li>\n  </ul>\n\n  <p>\n    Not Keeping It DRY looks like this:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://www.finecloud.ch/media/posts/92/Screenshot-2023-09-18-at-13.40.41.png\" height=\"482\" width=\"1958\" alt=\"\"  sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-18-at-13.40.41-xs.png 300w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-18-at-13.40.41-sm.png 480w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-18-at-13.40.41-md.png 768w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-18-at-13.40.41-lg.png 1024w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-18-at-13.40.41-xl.png 1360w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-18-at-13.40.41-2xl.png 1600w\">\n      \n    </figure>\n\n  <p>\n    Keeping it DRY on the oder hand look like this:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://www.finecloud.ch/media/posts/92/Screenshot-2023-09-18-at-13.43.16.png\" height=\"590\" width=\"2216\" alt=\"\"  sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-18-at-13.43.16-xs.png 300w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-18-at-13.43.16-sm.png 480w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-18-at-13.43.16-md.png 768w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-18-at-13.43.16-lg.png 1024w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-18-at-13.43.16-xl.png 1360w ,https://www.finecloud.ch/media/posts/92/responsive/Screenshot-2023-09-18-at-13.43.16-2xl.png 1600w\">\n      \n    </figure>\n\n  <p>\n    the configurations are symlinked here, this allows us to share the same configurations between those environments\n  </p>\n\n    <h2 id=\"3-things-to-use-to-keep-it-dry\">\n      3 Things to Use to Keep It DRY\n    </h2>\n\n  <ul>\n    <li>Terraform supports conditionals through the syntax of a ternary operator.</li><li>    The most common use case for conditionals is to create a conditional resource based on an input variable and the meta-parameter count.</li>\n  </ul>\n\n    <h3 id=\"conditional-example\">\n      Conditional Example\n    </h3>\n<pre class=\" language-go\"><code>locals {\n  make_bucket = \"${var.create_bucket == \"true\" ? True : false}\"\n}\nresource \"google_storage_bucket” “twinkiebucket\" {\n  count = \"${local.make_bucket ? 1 : 0}\"\n  name = \"${var.bucket_name}\"\n  project = \"${var.project_name}\"\n}</code></pre>\n\n    <h4 id=\"the-create_bucketfalse-conditional\">\n      The create_bucket=false Conditional\n    </h4>\n\n  <p>\n    output:\n  </p>\n\n  <p>\n    —&gt; test-bucket terraform plan -var=‘create_bucket=false’<br>Refreshing Terraform state in-memory prior to plan...<br>The refreshed state will be used to calculate this plan, but will not be Persisted to local or remote state storage.\n  </p>\n\n  <p>\n    No changes. Infrastructure is up-to-date.<br><br>This means that Terraform did not detect any differences between your configuration and real physical resources that exist. As a result, no actions need to be performed.\n  </p>\n\n    <h4 id=\"the-create_buckettrue-conditional\">\n      The create_bucket=true Conditional\n    </h4>\n\n  <p>\n    output:\n  </p>\n\n  <p>\n    —&gt; test-bucket terraform plan -var=‘create_bucket=true’<br>Refreshing Terraform state in-memory prior to plan...<br>The refreshed state will be used to calculate this plan, but will not be Persisted to local or remote state storage.<br><br>An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols:<br><br>+ create<br>Terraform will perform the following actions:<br><br>+ google_storage_bucket.twinkiebucket ...\n  </p>\n\n    <h2 id=\"use-null_resource\">\n      Use null_resource\n    </h2>\n\n  <ul>\n    <li>The null_resource is useful when you need to do something that is not directly associated with the lifecycle of an actual resource.</li><li>    Within a null_resource, you can configure provisioners to run scripts to do pretty much whatever you want.</li><li>    Just like with provisioners, it is a good idea to use null_resource sparingly since it adds to the complexity of your Terraform usage.</li><li>    Make sure, when you do use it, that you vet the scripts being called thoroughly.</li>\n  </ul>\n\n    <h3 id=\"example-null_resource\">\n      Example null_resource\n    </h3>\n<pre class=\" language-go\"><code>resource \"aws_instance\" \"prod_cluster\" {\n    count = 4\n    #...\n}\nresource \"null_resource\" \"prod_cluster\" {\n    triggers = {\n        cluster_instance_ids = join(\",\" aws_instance.prod_cluster.*.id)\n    }\n    connection {\n        host = element(aws_instance.prod_cluster.*.public_ip, 0)\n    }\n    provisioner \"remote-exec\" {\n        inline = [\n            \"prod_cluster.sh ${join(\" \", aws_instance.prod_cluster.*.private_ip)}\",\n        ]\n    }\n}\n</code></pre>\n\n  <p class=\"msg msg--highlight\">\n    Actions that are done inside a null_resource are not managed by Terraform. If you decide to call a command to create resources in your null_resource, Terraform will not know about the resource creation, and therefore can’t manage its lifecycle and state.\n  </p>\n\n  <p>\n    you could for example add those lines to your main.tf:\n  </p>\n<pre class=\" language-go\"><code>resource \"null_resource\" \"ec2_status\" {\n  provisioner \"local-exec\" {\n    command = \"./scripts/health.sh\"\n  }\n}\n</code></pre>\n\n  <p>\n    and add the health.sh script to your repository:\n  </p>\n<pre class=\" language-bash\"><code>#!/bin/bash\necho \"   -------------------------------- \"\necho \"  --&gt; Fetching Instance status.\"\nsleep 25\ninstance_id=$(aws ec2 describe-instances --filters \"Name=tag:Name,Values=TheFastestManAlive\" \"Name=instance-state-name,Values=running\" --query 'Reservations[*].Instances[*].InstanceId' --output text)\nsize=${#instance_id}\necho \"  --&gt; Instance ID: $instance_id\"\nsleep 2\ninstance_state=$(aws ec2 describe-instance-status --instance-ids $instance_id --query 'InstanceStatuses[*].InstanceState.Name' --output text)\nsize=${#instance_state}\necho \"  --&gt; Instance Status: $instance_state\"\nsleep 2\ninstance_zone=$(aws ec2 describe-instance-status --instance-ids $instance_id --query 'InstanceStatuses[*].AvailabilityZone' --output text)\nsize=${#instance_zone}\necho \"  --&gt; Availability Zone: $instance_zone\"\nsleep 2\nfetch_instance_health=$(aws ec2 describe-instance-status --instance-ids $instance_id --query 'InstanceStatuses[*].InstanceStatus.Status' --output text)\necho \"  --&gt; Instance health check : $fetch_instance_health\"\necho \"  -------------------------------------------\"</code></pre>\n\n  <p>\n    do run some trivial heal check after the deployment of our EC2 instance.\n  </p>\n\n    <h2 id=\"use-functions\">\n      Use Functions\n    </h2>\n\n  <ul>\n    <li>Terraform has built-in interpolation functions that allow you to use interpolation syntax embedded within strings to interpolate other values.</li><li>Interpolationfunctionsarecalledwiththesyntax${name(arg, arg2, ...)}.</li><li>The interpolation syntax allows you to call a large list of built-in functions.</li>\n  </ul>\n\n    <h3 id=\"the-format-function\">\n      The format Function\n    </h3>\n<pre class=\" language-bash\"><code>#format.tf\nlocals {\nhostname = \"${format(\"%s-%s-%s-%s-%04d-%s\", var.region, var.env, var.app,\nvar.type, var.cluster_id, var.id)}\" }</code></pre>\n\n  <p>\n    this Terraform code defines a local variable named <em>hostname</em>&nbsp;using the locals block. This variable is computed using the `format` function and a string template. Let's break down the components of this function:<br><br>1. `${format(...)}:` This part of the code is using Terraform's interpolation syntax `${...}` to execute the `format` function. The `format` function is used to create formatted strings by substituting values into placeholders within a template string.<br><br>2. `\"${format(\"%s-%s-%s-%s-%04d-%s\", var.region, var.env, var.app, var.type, var.cluster_id, var.id)}\"`: This is the template string used in the `format` function. It consists of several placeholders, each represented by `%s` or `%04d`, which are replaced by the values provided after the template string.\n  </p>\n\n  <ul>\n    <li>`%s`: This is a placeholder for a string value.</li><li>`%04d`: This is a placeholder for a decimal integer value, formatted with leading zeros to ensure a total width of 4 characters.</li>\n  </ul>\n\n  <p>\n    The values to be substituted into these placeholders come from various Terraform variables:\n  </p>\n\n  <ul>\n    <li>`var.region`: This variable is expected to contain a string representing a region.</li><li>`var.env`: This variable is expected to contain a string representing an environment.</li><li>`var.app`: This variable is expected to contain a string representing an application name.</li><li>`var.type`: This variable is expected to contain a string representing a type.</li><li>`var.cluster_id`: This variable is expected to contain a numeric cluster identifier.</li><li>`var.id`: This variable is expected to contain a string or value that is used in the formatted hostname.</li>\n  </ul>\n\n  <p>\n    The `format` function combines these values using the specified template to generate a formatted hostname. The resulting hostname will be a string that includes the region, environment, application, type, cluster identifier (with leading zeros if necessary), and the additional identifier provided by `var.id`.<br><br>For example, if you have the following values for your variables:\n  </p>\n\n  <ul>\n    <li>`var.region` = \"us-west\"</li><li>`var.env` = \"prod\"</li><li>`var.app` = \"web\"</li><li>`var.type` = \"frontend\"</li><li>`var.cluster_id` = 42</li><li>`var.id` = \"abc123\"</li>\n  </ul>\n\n  <p>\n    The `hostname` variable will be computed as follows:<br>\n  </p>\n<pre class=\" language-bash\"><code>us-west-prod-web-frontend-0042-abc123</code></pre>\n\n  <p>\n    This computed hostname can then be used in your Terraform configuration as needed, such as for provisioning cloud resources with this specific hostname format.\n  </p>\n\n    <h3 id=\"the-matchkeys-function\">\n      The matchkeys Function\n    </h3>\n\n  <p>\n    matchkeys constructs a new list by taking a subset of elements from one list whose indexes match the corresponding indexes of values in another list.<br><br>matchkeys identifies the indexes in keyslist that are equal to elements of searchset, and then constructs a new list by taking those same indexes from valueslist. Both valueslist and keyslist must be the same length.<br><br>The ordering of the values in valueslist is preserved in the result.\n  </p>\n<pre class=\" language-bash\"><code>#matchkeys.tf\ninstances = [ \"${matchkeys(\n  google_compute_instance.compute_instance.*.self_link,\n  google_compute_instance.compute_instance.*.zone,\n  data.google_compute_zones.available.names[0])\n}\" ]</code></pre>\n\n    <h3 id=\"the-element-function\">\n      The element Function\n    </h3>\n\n  <p>\n    The `element` function in Terraform is primarily used for accessing elements within a list or an array. It's a versatile function that can be used for various purposes, including:\n  </p>\n\n  <ol>\n    <li>Retrieving Values: You can use `element` to retrieve specific values from a list or array. For example, you might use it to access the nth element of a list.</li><li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: 1em; font-weight: var(--font-weight-normal);\">Looping and Iteration: When combined with other Terraform constructs like `count` or `for_each`, `element` can be used to iterate over a list or array, applying the same resource configuration or operation to each element.</span></li><li>Dynamic Resource Creation: In Terraform, you can use `element` to dynamically create multiple instances of a resource by specifying different configurations for each instance based on the elements of a list or array.</li><li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: 1em; font-weight: var(--font-weight-normal);\">Conditional Behavior: It can be used to conditionally set values or attributes in resources or variables based on the index of an element in a list.</span></li>\n  </ol>\n\n  <p>\n    Here's an example of how you might use the `element` function in a Terraform configuration:\n  </p>\n<pre class=\" language-bash\"><code>variable \"server_names\" {\n  type    = list(string)\n  default = [\"web-server-1\", \"web-server-2\", \"web-server-3\"]\n}\n\nresource \"aws_instance\" \"example\" {\n  count = length(var.server_names)\n  ami   = \"ami-12345678\"\n  instance_type = \"t2.micro\"\n  tags = {\n    Name = element(var.server_names, count.index)\n  }\n}\n</code></pre>\n\n  <p>\n    In this example, the `element` function is used to assign a unique name tag to each AWS EC2 instance being created based on the elements of the \"server_names\" list. It demonstrates how `element` can be used for dynamic resource creation and conditional behavior.<br><br>Overall, the `element` function is a fundamental tool in Terraform for working with lists and arrays, enabling you to make your configurations more dynamic and flexible.\n  </p>\n\n    <h2 id=\"test-your-code\">\n      Test Your Code\n    </h2>\n\n  <ul>\n    <li>Testing code leads to greater confidence that the code will perform as expected.</li><li>Terraform has built-in tools to help test your code before deployment.</li><li>Due to Terraform’s usefulness and popularity, there are many tools which expand upon the built-in tools.</li>\n  </ul>\n\n  <p>\n    there are a few built-in commands to test your TF code:\n  </p>\n\n  <ol>\n    <li>terraform fmt</li><li>terraform init</li><li>terraform validate</li><li>terraform plan</li>\n  </ol>\n\n    <h3 id=\"other-testing-tools\">\n      Other Testing Tools\n    </h3>\n\n  <ul>\n    <li>Terratest:&nbsp;A great, comprehensive tool by Gruntwork. This tool does not do unit testing.</li><li>Kitchen-Terraform:&nbsp;Spins up, tests, and spins down various Terraform resources.</li><li>Terraform-compliance:&nbsp;A simple tool for testing and enforcing Terraform compliance rules.</li>\n  </ul>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "terraform",
                   "iac",
                   "devops",
                   "dev"
            ],
            "date_published": "2023-09-17T14:14:00+02:00",
            "date_modified": "2023-09-18T17:11:41+02:00"
        },
        {
            "id": "https://www.finecloud.ch/spring-boot-on-kubernetes.html",
            "url": "https://www.finecloud.ch/spring-boot-on-kubernetes.html",
            "title": "Spring Boot on Kubernetes",
            "summary": "Enable Kubernetes in Docker Desktop We will use Docker Desktop to provide us a Test Kubernetes Environment. Open Docker Desktop Settings, go to Tab \"Kubernetes\". Select \"Enable Kubernetes\", then \"Apply &amp; Restart\". Now you should be able to see docker-desktop listed, if you run kubectl&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gvimt7cd1et\">Enable Kubernetes in Docker Desktop</a></li>\n<li><a href=\"#mcetoc_1gvimt7cd1eu\">Create Deployment</a></li>\n<li><a href=\"#mcetoc_1gvimt7cd1ev\">Create Service</a></li>\n<li><a href=\"#mcetoc_1gvimt7cd1f0\">Port Forwarding</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1gvimt7cd1et\">Enable Kubernetes in Docker Desktop</h2>\n<p>We will use Docker Desktop to provide us a Test Kubernetes Environment.</p>\n<p>Open Docker Desktop Settings, go to Tab \"Kubernetes\". Select \"Enable Kubernetes\", then \"Apply &amp; Restart\".</p>\n<p>Now you should be able to see docker-desktop listed, if you run <code>kubectl get nodes</code></p>\n<h2 id=\"mcetoc_1gvimt7cd1eu\">Create Deployment</h2>\n<p>We will use the Docker Image we created in the last Post. Instead of directly deploying the Application we want to create a deployment.yml file:</p>\n<p><code>kubectl create deployment myapp --image name/myapp --dry-run=client -o=yaml &gt; deployment.yml</code></p>\n<p>the content looks like this:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-attr\">apiVersion:</span> apps/v1\n<span class=\"hljs-attr\">kind:</span> Deployment\n<span class=\"hljs-attr\">metadata:</span>\n<span class=\"hljs-attr\">  creationTimestamp:</span> <span class=\"hljs-literal\" style=\"color: #6897bb;\">null</span>\n<span class=\"hljs-attr\">  labels:</span>\n<span class=\"hljs-attr\">    app:</span> myapp\n<span class=\"hljs-attr\">  name:</span> myapp\n<span class=\"hljs-attr\">spec:</span>\n<span class=\"hljs-attr\">  replicas:</span> <span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>\n<span class=\"hljs-attr\">  selector:</span>\n<span class=\"hljs-attr\">    matchLabels:</span>\n<span class=\"hljs-attr\">      app:</span> myapp\n<span class=\"hljs-attr\">  strategy:</span> {}\n<span class=\"hljs-attr\">  template:</span>\n<span class=\"hljs-attr\">    metadata:</span>\n<span class=\"hljs-attr\">      creationTimestamp:</span> <span class=\"hljs-literal\" style=\"color: #6897bb;\">null</span>\n<span class=\"hljs-attr\">      labels:</span>\n<span class=\"hljs-attr\">        app:</span> myapp\n<span class=\"hljs-attr\">    spec:</span>\n<span class=\"hljs-attr\">      containers:</span>\n<span class=\"hljs-attr\">      - image:</span> name/myapp\n<span class=\"hljs-attr\">        name:</span> myapp\n<span class=\"hljs-attr\">        resources:</span> {}\n<span class=\"hljs-attr\">status:</span> {}</pre>\n<p>now we can apply this deployment with: <code>kubectl apply -f deployment.yml</code></p>\n<h2 id=\"mcetoc_1gvimt7cd1ev\">Create Service</h2>\n<p>With the command </p>\n<p><code>kubectl create service clusterip myapp --tcp=8080:8080 --dry-run=client -o=yaml &gt; service.yml</code></p>\n<p>we can create the service definition file. And then apply it with: </p>\n<p><code>kubectl apply -f service.yml</code></p>\n<p>the content of the file:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-attr\">apiVersion:</span> v1\n<span class=\"hljs-attr\">kind:</span> Service\n<span class=\"hljs-attr\">metadata:</span>\n<span class=\"hljs-attr\">  creationTimestamp:</span> <span class=\"hljs-literal\" style=\"color: #6897bb;\">null</span>\n<span class=\"hljs-attr\">  labels:</span>\n<span class=\"hljs-attr\">    app:</span> myapp\n<span class=\"hljs-attr\">  name:</span> myapp\n<span class=\"hljs-attr\">spec:</span>\n<span class=\"hljs-attr\">  ports:</span>\n<span class=\"hljs-attr\">  - name:</span> <span class=\"hljs-number\" style=\"color: #6897bb;\">8080</span><span class=\"hljs-bullet\" style=\"color: #6897bb;\">-8080</span>\n<span class=\"hljs-attr\">    port:</span> <span class=\"hljs-number\" style=\"color: #6897bb;\">8080</span>\n<span class=\"hljs-attr\">    protocol:</span> TCP\n<span class=\"hljs-attr\">    targetPort:</span> <span class=\"hljs-number\" style=\"color: #6897bb;\">8080</span>\n<span class=\"hljs-attr\">  selector:</span>\n<span class=\"hljs-attr\">    app:</span> myapp\n<span class=\"hljs-attr\">  type:</span> ClusterIP\n<span class=\"hljs-attr\">status:</span>\n<span class=\"hljs-attr\">  loadBalancer:</span> {}</pre>\n<p>with <code>kubectl get all</code> we can now see that the service has been created.</p>\n<h2 id=\"mcetoc_1gvimt7cd1f0\">Port Forwarding</h2>\n<p>To be able to access the App, we need to create a Port Forwarding like so:</p>\n<ol>\n<li>get your local ip address, e.g.: <code>ipconfig getifaddr en0</code></li>\n<li>configure port forwarding with: <code>kubectl port-forward service/myapp 8080:8080</code></li>\n<li>Check if it works with: <code>curl localhost:8080/actuator/health</code></li>\n<li>this should return: <code>{\"status\":\"UP\",\"groups\":[\"liveness\",\"readiness\"]}</code></li>\n</ol>\n<h2>Terminate Service and Deployment</h2>\n<p>If you want to stop a Service or a Deployment you can use these cmds:</p>\n<p><code>kubectl delete service myapp</code></p>\n<p><code>kubectl delete deployment myapp</code></p>\n<h2>Exposing Services</h2>\n<p>If you want to expose a Service permanent and not only with Port Forwarding you can go with this: </p>\n<ol>\n<li>Replace <em><span class=\"hljs-attr\">type:</span> ClusterIP </em>in the service.yml file with <em><span class=\"hljs-attr\">type:</span> NodePort</em></li>\n<li>Reapply the deployment and service</li>\n<li>Check what dynamic Port the service has been exposed on: <code>kubectl get all</code></li>\n<li>Check access with curl: <code>curl localhost:31610/actuator/health</code></li>\n</ol>\n<h2>Accessing Logs</h2>\n<p>One option is to check the logs on the docker containers directly with:</p>\n<ol>\n<li>docker ps -a</li>\n<li>docker logs -f &lt;containername&gt;</li>\n</ol>\n<p>but in a Kubernetes context you probably cant access the docker logs directly, or docker is not used at all, thats why you need to go with this:</p>\n<ol>\n<li>kubectl get all</li>\n<li>kubectl logs -f &lt;podname&gt;</li>\n</ol>\n<h2>Setting Environment Variables</h2>\n<p>Example use case: overwrite log levels.</p>\n<ol>\n<li>Change your deployment.yml and add the env part to it:</li>\n<li>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-attr\">apiVersion:</span> apps/v1\n<span class=\"hljs-attr\">kind:</span> Deployment\n<span class=\"hljs-attr\">metadata:</span>\n<span class=\"hljs-attr\">  creationTimestamp:</span> <span class=\"hljs-literal\" style=\"color: #6897bb;\">null</span>\n<span class=\"hljs-attr\">  labels:</span>\n<span class=\"hljs-attr\">    app:</span> myapp\n<span class=\"hljs-attr\">  name:</span> myapp\n<span class=\"hljs-attr\">spec:</span>\n<span class=\"hljs-attr\">  replicas:</span> <span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>\n<span class=\"hljs-attr\">  selector:</span>\n<span class=\"hljs-attr\">    matchLabels:</span>\n<span class=\"hljs-attr\">      app:</span> myapp\n<span class=\"hljs-attr\">  strategy:</span> {}\n<span class=\"hljs-attr\">  template:</span>\n<span class=\"hljs-attr\">    metadata:</span>\n<span class=\"hljs-attr\">      creationTimestamp:</span> <span class=\"hljs-literal\" style=\"color: #6897bb;\">null</span>\n<span class=\"hljs-attr\">      labels:</span>\n<span class=\"hljs-attr\">        app:</span> myapp\n<span class=\"hljs-attr\">    spec:</span>\n<span class=\"hljs-attr\">      containers:</span>\n<span class=\"hljs-attr\">      - image:</span> jhyyhpp/kbe-rest-brewery\n<span class=\"hljs-attr\">        name:</span> kbe-rest-brewery\n<span class=\"hljs-attr\">        resources:</span> {}\n<span class=\"hljs-attr\">        env:</span>\n<span class=\"hljs-attr\">        - name:</span> LOGGING_LEVEL_MYAPP\n<span class=\"hljs-attr\">          value:</span> INFO\n<span class=\"hljs-attr\">status:</span> {}\n</pre>\n</li>\n<li>kubectl apply -f deployment.yml</li>\n<li>kubectl get all</li>\n<li>kubectl logs -f &lt;podname&gt;</li>\n</ol>\n<h2>Readiness Probe</h2>\n<div class=\"flex flex-grow flex-col gap-3\">\n<div class=\"min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap break-words\">\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\n<p>A readiness probe is an essential feature in Kubernetes that ensures the proper functioning of a deployed application. Here are some reasons why you should use a readiness probe:</p>\n<ol>\n<li>\n<p>Prevents traffic to unhealthy pods: Kubernetes uses readiness probes to determine if a pod is ready to receive traffic or not. If a pod is not ready, Kubernetes will not route traffic to that pod. This ensures that traffic is only sent to healthy pods, preventing downtime and improving the overall availability of the application.</p>\n</li>\n<li>\n<p>Allows for graceful scaling: When new pods are added to a deployment or replica set, Kubernetes uses readiness probes to determine when the new pods are ready to receive traffic. This allows for a more graceful scaling experience, as traffic is only routed to new pods once they are ready to handle it.</p>\n</li>\n<li>\n<p>Helps with rolling updates: Kubernetes uses readiness probes to determine when a new version of an application is ready to receive traffic. This allows for rolling updates to be performed without causing downtime or disruption to users.</p>\n</li>\n<li>\n<p>Provides insight into application health: Readiness probes can be used to provide insight into the health of an application. By monitoring the results of readiness probes, you can determine if your application is healthy and identify any issues that need to be addressed.</p>\n</li>\n</ol>\n<p>Overall, readiness probes are a crucial feature in Kubernetes that help ensure the proper functioning of your application and improve its availability.</p>\n</div>\n</div>\n</div>\n<h2>Liveness Probe</h2>\n<div class=\"flex flex-grow flex-col gap-3\">\n<div class=\"min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap break-words\">\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\n<p>A liveness probe is another important feature in Kubernetes that ensures the health of a deployed application. Here are some reasons why you should use a liveness probe:</p>\n<ol>\n<li>\n<p>Restarts unhealthy pods: Kubernetes uses liveness probes to determine if a pod is healthy or not. If a pod fails the liveness probe, Kubernetes will automatically restart the pod, ensuring that the application remains available.</p>\n</li>\n<li>\n<p>Prevents failed requests: Liveness probes help prevent failed requests by ensuring that only healthy pods are serving traffic. If a pod is not healthy, Kubernetes will not route traffic to that pod, preventing failed requests and improving the overall availability of the application.</p>\n</li>\n<li>\n<p>Identifies application failures: Liveness probes can be used to identify application failures and help diagnose issues. By monitoring the results of liveness probes, you can determine if your application is healthy and identify any issues that need to be addressed.</p>\n</li>\n<li>\n<p>Supports self-healing: By automatically restarting unhealthy pods, liveness probes support self-healing in Kubernetes. This ensures that your application remains available even in the face of failures.</p>\n</li>\n</ol>\n<p>Overall, liveness probes are a crucial feature in Kubernetes that help ensure the health of your application and improve its availability. By using liveness probes, you can ensure that your application remains available, even in the face of failures, and identify and address any issues that may arise.</p>\n<p>To add the readiness and liveness probles we need to add the following content to our deployment.yml file:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-attr\">apiVersion:</span> apps/v1\n<span class=\"hljs-attr\">kind:</span> Deployment\n<span class=\"hljs-attr\">metadata:</span>\n<span class=\"hljs-attr\">  creationTimestamp:</span> <span class=\"hljs-literal\" style=\"color: #6897bb;\">null</span>\n<span class=\"hljs-attr\">  labels:</span>\n<span class=\"hljs-attr\">    app:</span> myapp\n<span class=\"hljs-attr\">  name:</span> myapp\n<span class=\"hljs-attr\">spec:</span>\n<span class=\"hljs-attr\">  replicas:</span> <span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>\n<span class=\"hljs-attr\">  selector:</span>\n<span class=\"hljs-attr\">    matchLabels:</span>\n<span class=\"hljs-attr\">      app:</span> myapp\n<span class=\"hljs-attr\">  strategy:</span> {}\n<span class=\"hljs-attr\">  template:</span>\n<span class=\"hljs-attr\">    metadata:</span>\n<span class=\"hljs-attr\">      creationTimestamp:</span> <span class=\"hljs-literal\" style=\"color: #6897bb;\">null</span>\n<span class=\"hljs-attr\">      labels:</span>\n<span class=\"hljs-attr\">        app:</span> myapp\n<span class=\"hljs-attr\">    spec:</span>\n<span class=\"hljs-attr\">      containers:</span>\n<span class=\"hljs-attr\">      - image:</span> jhyyhpp/kbe-rest-brewery\n<span class=\"hljs-attr\">        name:</span> kbe-rest-brewery\n<span class=\"hljs-attr\">        resources:</span> {}\n<span class=\"hljs-attr\">        env:</span>\n<span class=\"hljs-attr\">        - name:</span> LOGGING_LEVEL_CH_FINECLOUD_SFGRESTBREWERY\n<span class=\"hljs-attr\">          value:</span> INFO\n<span class=\"hljs-attr\">        - name:</span> MANAGEMENT_ENDPOINTS_HEALTH_PROBES_ENABLED\n<span class=\"hljs-attr\">          value:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"true\"</span>\n<span class=\"hljs-attr\">        - name:</span> MANAGEMENT_HEALTH_READINESSSTATE_ENABLED\n<span class=\"hljs-attr\">          value:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"true\"</span>\n<span class=\"hljs-attr\">        - name:</span> MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED\n<span class=\"hljs-attr\">          value:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"true\"</span>\n<span class=\"hljs-attr\">        livenessProbe:</span>\n<span class=\"hljs-attr\">            httpGet:</span>\n<span class=\"hljs-attr\">                path:</span> /actuator/health/liveness\n<span class=\"hljs-attr\">                port:</span> <span class=\"hljs-number\" style=\"color: #6897bb;\">8080</span>\n<span class=\"hljs-attr\">        readinessProbe:</span>\n<span class=\"hljs-attr\">          httpGet:</span>\n<span class=\"hljs-attr\">            path:</span> /actuator/health/readiness\n<span class=\"hljs-attr\">            port:</span> <span class=\"hljs-number\" style=\"color: #6897bb;\">8080</span>\n<span class=\"hljs-attr\">status:</span> {}\n</pre>\n</div>\n</div>\n</div>\n<h2>Graceful Shutdown</h2>\n<div class=\"flex flex-grow flex-col gap-3\">\n<div class=\"min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap break-words\">\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\n<p>Graceful shutdown is an important feature to consider when deploying an application on Kubernetes. Here are some reasons why you should use a graceful shutdown:</p>\n<ol>\n<li>\n<p>Minimizes downtime: Graceful shutdown allows your application to shut down in a controlled manner, ensuring that any in-flight requests are completed before the application is terminated. This helps to minimize downtime and improve the overall availability of the application.</p>\n</li>\n<li>\n<p>Avoids data loss: During a graceful shutdown, your application has the opportunity to save any data that needs to be persisted before shutting down. This helps to avoid data loss and ensures that your application can be restarted without losing any important data.</p>\n</li>\n<li>\n<p>Prevents disruption to users: A graceful shutdown ensures that your application is shut down in a way that is transparent to users. By completing any in-flight requests and avoiding abrupt terminations, you can prevent disruption to users and provide a better user experience.</p>\n</li>\n<li>\n<p>Supports scaling: When scaling down your application, a graceful shutdown ensures that any remaining requests are completed before the pod is terminated. This allows for more efficient scaling and helps to prevent any lost or interrupted requests.</p>\n</li>\n</ol>\n<p>Overall, a graceful shutdown is an important feature to consider when deploying an application on Kubernetes. It helps to minimize downtime, avoid data loss, prevent disruption to users, and support efficient scaling. By using a graceful shutdown, you can ensure that your application is shut down in a way that is safe, controlled, and reliable.</p>\n</div>\n</div>\n</div>\n<p>To configure graceful shutdown we need to add the following content to our deployment.yml file:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-attr\">        - name:</span> SERVER_SHUTDOWN\n<span class=\"hljs-attr\">          value:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"graceful\"</span>\n<span class=\"hljs-attr\">        lifecycle:</span>\n<span class=\"hljs-attr\">          preStop:</span>\n<span class=\"hljs-attr\">            exec:</span>\n<span class=\"hljs-attr\">              command:</span> [<span class=\"hljs-string\" style=\"color: #6a8759;\">\"/bin/sh\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"-c\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"sleep 10\"</span>]</pre>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "kubernetes",
                   "java",
                   "docker",
                   "dev",
                   "container"
            ],
            "date_published": "2023-05-03T20:46:16+02:00",
            "date_modified": "2023-05-05T19:16:26+02:00"
        },
        {
            "id": "https://www.finecloud.ch/building-spring-boot-docker-images.html",
            "url": "https://www.finecloud.ch/building-spring-boot-docker-images.html",
            "title": "Building Spring Boot Docker Images",
            "summary": "Pre-Requirements Developer Environment ready with Docker, JDK, IDE A Java Spring Boot Project with a h2 in-memory DB Docker Hub account Create Docker File Create a Dockerfile with the following content: FROM openjdk:11-jre-slim ENV JAVA_OPTS \" -Xms512m -Xmx512m -Djava.security.egd=file:///dev/./urandom\" WORKDIR application COPY target/myapp-0.0.1-SNAPSHOT.jar ./ ENTRYPOINT&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gvhe7lit17h\">Pre-Requirements</a></li>\n<li><a href=\"#mcetoc_1gvhe7lit17i\">Create Docker File</a></li>\n<li><a href=\"#mcetoc_1gvhe7lit17j\">Build and Run the Docker Image</a></li>\n<li><a href=\"#mcetoc_1gvhe7lit17k\">Add Layer Tool in Maven</a></li>\n<li><a href=\"#mcetoc_1gvhe7lit17l\">Enable Multi-Stage Dockerfile</a></li>\n<li><a href=\"#mcetoc_1gvhe7lit17m\">Build the Docker Image with Maven</a></li>\n<li><a href=\"#mcetoc_1gvhe7lit17n\">Push your Docker Image to Docker Hub</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1gvhe7lit17h\">Pre-Requirements</h2>\n<ul>\n<li>Developer Environment ready with Docker, JDK, IDE</li>\n<li>A Java Spring Boot Project with a h2 in-memory DB</li>\n<li>Docker Hub account</li>\n</ul>\n<h2 id=\"mcetoc_1gvhe7lit17i\">Create Docker File</h2>\n<p>Create a Dockerfile with the following content:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">FROM</span> openjdk:<span class=\"hljs-number\" style=\"color: #6897bb;\">11</span>-jre-slim\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">ENV</span> JAVA_OPTS <span class=\"hljs-string\" style=\"color: #6a8759;\">\" -Xms512m -Xmx512m -Djava.security.egd=file:///dev/./urandom\"</span>\nWORKDIR application\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">COPY</span> <span class=\"bash\">target/myapp-0.0.1-SNAPSHOT.jar ./\n</span><span class=\"hljs-keyword\" style=\"color: #cc7832;\">ENTRYPOINT</span> <span class=\"bash\">[<span class=\"hljs-string\" style=\"color: #6a8759;\">\"java\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"-jar\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"myapp-0.0.1-SNAPSHOT.jar\"</span>]</span></pre>\n<div>make sure the Paths where the .jar files are stored matches with your environment.</div>\n<h2 id=\"mcetoc_1gvhe7lit17j\">Build and Run the Docker Image</h2>\n<p>Build the image with this command:</p>\n<p><code><span class=\"blob-code-inner blob-code-marker js-code-nav-pass \" data-code-marker=\"+\"><span class=\"pl-c1\">docker build -f ./src/main/Dockerfile -t myapp .</span></span></code></p>\n<p>Run the image with this command:</p>\n<p><code><span class=\"blob-code-inner blob-code-marker js-code-nav-pass \" data-code-marker=\"+\"><span class=\"pl-c1\">docker run -p 8080:8080 -d myapp</span></span></code></p>\n<p>The Spring Application-Context should now be loaded and started inside the Container. You can verify this with the <code>docker ps -a</code> and <code>docker logs -f &lt;containername&gt;</code> commands.</p>\n<h2 id=\"mcetoc_1gvhe7lit17k\">Add Layer Tool in Maven</h2>\n<p>Make sure that you have enabled the Layer Tool with having this content in the pom.xml file:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">plugin</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">configuration</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">layers</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">enabled</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">includeLayerTools</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">includeLayerTools</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">layers</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">excludes</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">exclude</span>&gt;</span>\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">groupId</span>&gt;</span>\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">artifactId</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">exclude</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">excludes</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">configuration</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">plugin</span>&gt;</span></pre>\n<div class=\"flex flex-grow flex-col gap-3\">\n<div class=\"min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap break-words\">\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\n<p>Enabling the layer tool in a Java Spring project that runs in a Docker container can help reduce the size of the Docker image, which can be especially important in a production environment. The layer tool feature allows the Spring Boot application to be broken down into layers, where each layer contains a subset of the application's dependencies and resources. This makes it possible to separate the application's core functionality from its dependencies, such as external libraries and resources.</p>\n<p>By separating the application's dependencies into separate layers, Docker can cache each layer independently, making it easier to reuse existing layers when building new Docker images. This can significantly reduce the amount of time it takes to build and deploy new versions of the application.</p>\n<p>Enabling the layer tool also allows you to take advantage of other features, such as layer analysis, which can help you optimize your Docker image even further by identifying potential areas for improvement.</p>\n<p>In summary, enabling the layer tool in a Java Spring project that runs in a Docker container can help reduce the size of the Docker image, improve the speed of deployment, and optimize resource usage.</p>\n<h2 id=\"mcetoc_1gvhe7lit17l\">Enable Multi-Stage Dockerfile</h2>\n<p>Now we want to create a example of a Multi-Stage Dockerfile, like so:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">FROM</span> openjdk:<span class=\"hljs-number\" style=\"color: #6897bb;\">11</span>-jre-slim as builder\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">WORKDIR</span> <span class=\"bash\">application\n</span><span class=\"hljs-keyword\" style=\"color: #cc7832;\">ADD</span> <span class=\"bash\">target/myapp-0.0.1-SNAPSHOT.jar ./\n</span><span class=\"hljs-keyword\" style=\"color: #cc7832;\">RUN</span> <span class=\"bash\">java -Djarmode=layertools -jar myapp-0.0.1-SNAPSHOT.jar extract\n</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">FROM</span> openjdk:<span class=\"hljs-number\" style=\"color: #6897bb;\">11</span>-jre-slim\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">WORKDIR</span> <span class=\"bash\">application\n</span><span class=\"hljs-keyword\" style=\"color: #cc7832;\">COPY</span> <span class=\"bash\">--from=builder application/dependencies/ ./\n</span><span class=\"hljs-keyword\" style=\"color: #cc7832;\">COPY</span> <span class=\"bash\">--from=builder application/spring-boot-loader/ ./\n</span><span class=\"hljs-keyword\" style=\"color: #cc7832;\">COPY</span> <span class=\"bash\">--from=builder application/snapshot-dependencies/ ./\n</span><span class=\"hljs-keyword\" style=\"color: #cc7832;\">COPY</span> <span class=\"bash\">--from=builder application/application/ ./\n</span><span class=\"hljs-keyword\" style=\"color: #cc7832;\">ENTRYPOINT</span> <span class=\"bash\">[<span class=\"hljs-string\" style=\"color: #6a8759;\">\"java\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"-Djava.security.egd=file:///dev/./urandom\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"org.springframework.boot.loader.JarLauncher\"</span>]</span></pre>\n<p>now we can recreate the image like so: <code><span class=\"blob-code-inner blob-code-marker js-code-nav-pass \" data-code-marker=\"+\"><span class=\"pl-c1\">docker build -f ./src/main/docker/Dockerfile -t myapp .</span></span></code></p>\n<h2 id=\"mcetoc_1gvhe7lit17m\">Build the Docker Image with Maven</h2>\n<p>So far it's very uncomfortable to have the Version of the .jar Artifact in the Dockerfile. This way we would need to change this after every new release. There is a better way: we can use the Docker Maven plugin. Add this dependency to your pom.xml:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">plugin</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">groupId</span>&gt;</span>io.fabric8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">artifactId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">version</span>&gt;0.42.1</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">version</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">configuration</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">verbose</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">verbose</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">images</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">image</span>&gt;</span>\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">name</span>&gt;</span>yourdockeraccount/myapp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">name</span>&gt;</span>\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">build</span>&gt;</span>\n                                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">assembly</span>&gt;</span>\n                                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">descriptorRef</span>&gt;</span>artifact<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">descriptorRef</span>&gt;</span>\n                                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">assembly</span>&gt;</span>\n                                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">dockerFile</span>&gt;</span>Dockerfile<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">dockerFile</span>&gt;</span>\n                                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">tags</span>&gt;</span>\n                                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">tag</span>&gt;</span>latest<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">tag</span>&gt;</span>\n                                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">tag</span>&gt;</span>${project.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">tag</span>&gt;</span>\n                                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">tags</span>&gt;</span>\n                            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">build</span>&gt;</span>\n                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">image</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">images</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">configuration</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">plugin</span>&gt;</span></pre>\n<p>make sure you add your image name!</p>\n<p>Also you need to replace the Artifact Name of \"<span class=\"bash\">myapp-0.0.1-SNAPSHOT.jar</span>\" with </p>\n<div>\"${project.build.finalName}.jar\" in the Dockerfile.</div>\n<div> </div>\n<div>Now you can build the docker image with the maven plugin using a dynamic version.</div>\n<h2 id=\"mcetoc_1gvhe7lit17n\">Push your Docker Image to Docker Hub</h2>\n<p>Last step is to push your Application to the docker hub. But first lets build the image with:</p>\n<p><code>mvn clean package docker:build docker:push</code></p>\n<p> </p>\n</div>\n</div>\n</div>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "java",
                   "docker",
                   "dev",
                   "container"
            ],
            "date_published": "2023-05-02T21:45:09+02:00",
            "date_modified": "2023-05-03T20:34:47+02:00"
        },
        {
            "id": "https://www.finecloud.ch/data-validation-overview.html",
            "url": "https://www.finecloud.ch/data-validation-overview.html",
            "title": "Data Validation Overview",
            "summary": "What is Validation? Validation is a process of making assertions against data to ensure data integrity Is a value required? How long is a phone number? Is it a good date? What is the maximum length of a string? Some refer to data validation as&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gvevuu5v9p\">What is Validation?</a></li>\n<li><a href=\"#mcetoc_1gvevuu5v9q\">When to Validate?</a></li>\n<li><a href=\"#mcetoc_1gvevuu5v9r\">Java Bean Validation</a></li>\n<li><a href=\"#mcetoc_1gvevuu5v9s\">Jakarta Bean Validation 3.0</a></li>\n<li><a href=\"#mcetoc_1gvevuu5v9t\">Built In Constraint Definitions</a></li>\n<li><a href=\"#mcetoc_1gvevuu5v9u\">Hiberate Validator Constraints</a></li>\n<li><a href=\"#mcetoc_1gvevuu5v9v\">Validation and Spring Framework</a></li>\n<li><a href=\"#mcetoc_1gvevuu5va0\">Spring Boot and Validation</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1gvevuu5v9p\">What is Validation?</h2>\n<ul>\n<li>Validation is a process of making assertions against data to ensure data integrity</li>\n<li>Is a value required? How long is a phone number?</li>\n<li>Is it a good date? What is the maximum length of a string?</li>\n<li>Some refer to data validation as defensive programming</li>\n<li>Or a process of trust but verify</li>\n<li>Validation is an important step, but easily overlooked</li>\n</ul>\n<h2 id=\"mcetoc_1gvevuu5v9q\">When to Validate?</h2>\n<ul>\n<li>Validate data early and often!</li>\n<li>Validation should occur with every exchange</li>\n<li>User input data should be validated in the UI with rich user feedback</li>\n<li>RESTful API data should be validated early in the controller, before the service layer</li>\n<li>Data should be validated before persistence to the database</li>\n<li>Database constraints will also enforce data validation</li>\n<li>Best to validate early - Handling persistence errors is ugly</li>\n</ul>\n<h2 id=\"mcetoc_1gvevuu5v9r\">Java Bean Validation</h2>\n<ul>\n<li>Java Bean Validation is a Java API standard</li>\n<li>Provides for a standard way of performing validation and handling errors</li>\n<li>Much more graceful than custom code blocks of if… then… throw Exception</li>\n<li>Bean Validation is an API, like JPA or JDBC you need an implementation</li>\n<li>Fun Fact - Gunnar Morling, founder of MapStruct is the spec lead for the Bean Validation API and contributor of the Hibernate Implementation of the Bean Validation API</li>\n</ul>\n<h2 id=\"mcetoc_1gvevuu5v9s\">Jakarta Bean Validation 3.0</h2>\n<ul>\n<li>Released July of 2020</li>\n<li>Name changed from Bean Validation to Jakarta Bean Validation</li>\n<li>Only change from 2.0 to 3.0 is the API package changes</li>\n<li>2.0 - javax.validation</li>\n<li>3.0 - jakarta.validaton</li>\n<li>Used in Spring Framework 6.x+</li>\n<li>Hibernate Validator 7.x+ is the implementation</li>\n</ul>\n<h2 id=\"mcetoc_1gvevuu5v9t\">Built In Constraint Definitions</h2>\n<ul>\n<li>@Null - Checks value is null</li>\n<li>@NotNull - Checks value is not null</li>\n<li>@AssertTrue - Value is true</li>\n<li>@AssertFalse - Value is false</li>\n<li>@Min - Number is equal or higher</li>\n<li>@Max - Number is equal or less</li>\n<li>@DecimalMin - Value is larger</li>\n<li>@DecimalMax - Value is less than</li>\n<li>@Negative - Value is less than zero. Zero invalid.</li>\n<li>@NegativeOrZero - Value is zero or less than zero</li>\n<li>@Positive - Value is greater than zero. Zero invalid.</li>\n<li>@PositiveOrZero - Value is zero or greater than zero.</li>\n<li>@Size - checks if string or collection is between a min and max</li>\n<li>@Digits - check for integer digits and fraction digits</li>\n<li>@Past - Checks if date is in past</li>\n<li>@PastOrPresent - Checks if date is in past or present</li>\n<li>@Future - Checks if date is in future</li>\n<li>@FutureOrPresent - Checks if date is present or in future</li>\n<li>@Pattern - checks against RegEx pattern</li>\n<li>@NotEmpty - Checks if value is not null nor empty (whitespace characters or empty collection)</li>\n<li>@NonBlank - Checks string is not null or not whitespace characters</li>\n<li>@Email - Checks if string value is an email address</li>\n</ul>\n<h2 id=\"mcetoc_1gvevuu5v9u\">Hiberate Validator Constraints</h2>\n<ul>\n<li>@ScriptAssert - Class level annotation, checks class against script</li>\n<li>@CreditCardNumber - Verifies value is a credit card number</li>\n<li>@Currency - Valid currency amount</li>\n<li>@DurationMax - Duration less than given value</li>\n<li>@DurationMin - Duration greater than given value</li>\n<li>@EAN - Valid EAN barcode</li>\n<li>@ISBN - Valid ISBN value</li>\n<li>@Length - String length between given min and max</li>\n<li>@CodePointLength - Validates that code point length of the annotated character sequence is between min and max included.</li>\n<li>@LuhnCheck - Luhn check sum</li>\n<li>@Mod10Check - Mod 10 check sum</li>\n<li>@Mod11Check - Mod 11 check sum</li>\n<li>@Range - checks if number is between given min and max (inclusive)</li>\n<li>@SafeHtml - Checks for safe HTML</li>\n<li>@UniqueElements - Checks if collection has unique elements</li>\n<li>@Url - checks for valid URL</li>\n<li>@CNPJ - Brazilian Corporate Tax Payer Registry Number</li>\n<li>@CPF - Brazilian Individual Taxpayer Registry Number</li>\n<li>@TituloEleitoral - Brazilian voter ID</li>\n<li>@NIP - Polish VAR ID</li>\n<li>@PESEL - Polish National Validation Number</li>\n<li>@REGON - Polish Taxpayer ID</li>\n</ul>\n<h2 id=\"mcetoc_1gvevuu5v9v\">Validation and Spring Framework</h2>\n<ul>\n<li>Spring Framework has robust support for bean validation</li>\n<li>Validation support can be used in controllers, and services, and other Spring managed components</li>\n<li>Spring MVC will return a 400 Bad Request Error for validation failures</li>\n<li>Spring Data JPA with throw an exception for JPA constraint violations</li>\n</ul>\n<h2 id=\"mcetoc_1gvevuu5va0\">Spring Boot and Validation</h2>\n<ul>\n<li>Spring Boot will auto-configure validation when the validation implementation is found on classpath</li>\n<li>If API is only on classpath (with no implementation) you can use the annotations, BUT validation will NOT occur</li>\n<li>Prior to Spring Boot 2.3, validation was included in starter dependencies</li>\n<li>After Spring Boot 2.3, you must include the Spring Boot validation starter</li>\n</ul>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "java",
                   "dev"
            ],
            "date_published": "2023-05-02T20:07:36+02:00",
            "date_modified": "2023-05-02T21:45:22+02:00"
        },
        {
            "id": "https://www.finecloud.ch/data-transfer-objects.html",
            "url": "https://www.finecloud.ch/data-transfer-objects.html",
            "title": "Data Transfer Objects",
            "summary": "Data Transfer Objects DTOs - Data Transfer Objects DTOs are simple Java POJOs DTOs are data structures, generally should NOT have behavior DTOs are objects used to transfer data between producers and consumers Controller models are typically DTOs Why Not Entities? Database Entities are also&hellip;",
            "content_html": "<h2>Data Transfer Objects</h2>\n<ul>\n<li>DTOs - Data Transfer Objects</li>\n<li>DTOs are simple Java POJOs</li>\n<li>DTOs are data structures, generally should NOT have behavior</li>\n<li>DTOs are objects used to transfer data between producers and consumers</li>\n<li>Controller models are typically DTOs</li>\n</ul>\n<h2>Why Not Entities?</h2>\n<ul>\n<li>Database Entities are also POJOs, why can’t we use those?</li>\n<li>For simple applications you can</li>\n<li>Spring Data REST exposes database entities directly</li>\n<li>Database entities can “leak” data to client tier</li>\n<li>As applications become more complex, having the separation becomes more  important</li>\n<li>The needs of the consumers are different than the needs of persistence</li>\n<li>DTOs can be optimized for JSON serialization and deserialization</li>\n</ul>\n<h2>Type Conversions</h2>\n<ul>\n<li>Type Conversions are often done within methods</li>\n<li>Best practice is to use dedicated converters</li>\n<li>Single Responsibility Principle</li>\n<li>Spring Framework provides an Interface called “Converter” with generics</li>\n<li>Can be used with conjunction with Conversion service</li>\n<li>MapStruct is a code generator which automates generation of type converters</li>\n</ul>\n<h2>MapStruct</h2>\n<ul>\n<li>MapStruct is a code generator</li>\n<li>You provide the interface, MapStruct generates the implementation</li>\n<li>Works like Lombok via annotation processing during code compile</li>\n<li>Has good Spring integration - can generate Spring Converters or Spring Components</li>\n<li>You can use Mapstruct Components for injection into services<br><br><br></li>\n</ul>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "java",
                   "dev"
            ],
            "date_published": "2023-04-10T08:46:26+02:00",
            "date_modified": "2023-04-11T19:53:59+02:00"
        },
        {
            "id": "https://www.finecloud.ch/spring-exception-handling.html",
            "url": "https://www.finecloud.ch/spring-exception-handling.html",
            "title": "Spring Exception Handling",
            "summary": "HTTP Status Codes 100 Series - Informational Responses • 200 Series - Successful Responses 300 Series - Redirection Responses 400 Series - Client Error Responses 500 Series - Server Error Responses Use of HTTP Status Codes 200 Series are used when the request completes as&hellip;",
            "content_html": "<h3>HTTP Status Codes</h3>\n<div class=\"page\" title=\"Page 2\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>100 Series - Informational Responses • 200 Series - Successful Responses</li>\n<li>300 Series - Redirection Responses</li>\n<li>400 Series - Client Error Responses</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">500 Series - Server Error Responses</span></li>\n</ul>\n<h4>Use of HTTP Status Codes</h4>\n<div class=\"page\" title=\"Page 2\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<div class=\"page\" title=\"Page 3\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>200 Series are used when the request completes as expected\n<ul>\n<li>Common codes used: 200 Ok, 201 Created, 202 Accepted, 204 No Content</li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">400 Series are used when the request is understood but fails an expected condition</span>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">400 Bad Request - Invalid data received</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">401 Unauthorized - User authentication required</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">403 Forbidden - User authenticated, not authorized</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">404 Not Found - Requested Resource Not Found</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">405 Method Not Allowed - Method Not Supported</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">500 Series are used when there is a server side error</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Typically from unexpected runtime errors</span></li>\n<li>Null Pointer Errors, parse errors, database connection errors, etc</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Code should log relevant information</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Do not return stack trace to client</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Be careful to not “leak” information to internet</span></li>\n</ul>\n</li>\n</ul>\n<h3>Standard Spiring MVC Exceptions</h3>\n<ul>\n<li>Spring MVC does support a number of standard exceptions</li>\n<li>Standard Exceptions are handled by the DefaultHandlerExceptionResolver</li>\n<li>The DefaultHandlerExceptionResolver sets the appropriate HTTP status code</li>\n<li>BUT does not write content to the body of the response</li>\n<li>Spring MVC does have robust support for customizing error responses</li>\n<li>BindException - 400 Bad Request</li>\n<li>ConversionNotSupportedException - 500 Internal Server Error</li>\n<li>HttpMediaTypeNotAcceptableException - 406 Not Acceptable</li>\n<li>HttpMediaTypeNotSupportedException - 415 Unsupported Media Type</li>\n<li>HttpMessageNotReadableException - 400 Bad Request</li>\n<li>HttpMessageNotWritableException - 500 Internal Server Error</li>\n<li>HttpRequestMethodNotSupportedException - 405 Method Not Allowed</li>\n<li>MethodArgumentNotValidException - 400 Bad Request</li>\n<li>MissingServletRequestParameterException - 400 Bad Request</li>\n<li>MissingServletRequestPartException - 400 Bad Request</li>\n<li>NoSuchRequestHandlingMethodException - 404 Not Found</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">TypeMismatchException - 400 Bad Request</span></li>\n</ul>\n</div>\n<div class=\"column\">\n<h3>Spring Exception Handling</h3>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@ExceptionHandler on controller method to handle specific Exception types</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@ReponseStatus - annotation for custom exception classes to set desired HTTP status</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Implement AbstractHandlerException Resolver - full control over response (including body)</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@ControllerAdvice - used to implement a global exception handler</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">ResponseStatusException.class - (Spring 5+) Exception which can be thrown which allows setting the HTTP status and message in the constructor</span></li>\n</ul>\n<h3>Spring Boot ErrorController</h3>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Provides Whitelabel Error Page for HTML requests, or JSON response for RESTful requests</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Properties:</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">server.error.include-binding-errors - default: never</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">server.error.include-exception - default: false</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">server.error.include-message - default: never</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">server.error.include-stacktrace - default: never</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">server.error.path - default: /error</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">server.error.whitelabel.enabled - default: true</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Spring Boot includes a BasicError Controller</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">This class can be extended for additional error response customization</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Allows for wide support of the needs of various clients and situations</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Rarely used, but important to know it is available for use when needed</span></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "java",
                   "exceptions",
                   "dev"
            ],
            "date_published": "2023-04-10T08:36:13+02:00",
            "date_modified": "2023-04-10T08:45:10+02:00"
        },
        {
            "id": "https://www.finecloud.ch/mockmvc.html",
            "url": "https://www.finecloud.ch/mockmvc.html",
            "title": "Testing with MockMVC",
            "summary": "Why use Spring MockMVC? Spring MockMVC allows you to test the controller interactions in a servlet context without the application running in an application server. Mockito is the most popular mocking framework for testing Java Mocks (aka Test Doubles) are alternate implementations of objects to&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gtc0a48v1bq\">Why use Spring MockMVC?</a></li>\n<li><a href=\"#mcetoc_1gtbugt571b8\">Types of Tests</a>\n<ul>\n<li><a href=\"#mcetoc_1gtbugt571b9\">Unit Tests / Unit Testing</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1gtbugt571ba\">Integration Tests</a></li>\n<li><a href=\"#mcetoc_1gtbugt571bb\">Functional Tests</a></li>\n<li><a href=\"#mcetoc_1gtbugt571bc\">The major challenge with testing Servlets and Controllers</a></li>\n<li><a href=\"#mcetoc_1gtbugt571bd\">Spring Boot Test Splices</a></li>\n<li><a href=\"#mcetoc_1gtbugt571be\">Using Mocks</a></li>\n<li><a href=\"#mcetoc_1gtbugt571bf\">What is Mockito?</a></li>\n<li><a href=\"#mcetoc_1gtbugt571bg\">Types of Mocks</a></li>\n<li><a href=\"#mcetoc_1gtbugt571bh\">Testing Controllers</a></li>\n</ul>\n</div>\n<div class=\"question--question--152Yi\">\n<div class=\"ud-text-bold question--title--2FD-U\">\n<div class=\"question--title-text--2kBEO rt-scaffolding\" data-purpose=\"safely-set-inner-html:rich-text-viewer:html\">\n<h3 id=\"mcetoc_1gtc0a48v1bq\">Why use Spring MockMVC?</h3>\n</div>\n</div>\n<div class=\"question--answer--2ASXa\">\n<div data-purpose=\"safely-set-inner-html:submission:user-answer-body\">\n<p>Spring MockMVC allows you to test the controller interactions in a servlet context without the application running in an application server.</p>\n</div>\n</div>\n</div>\n<h3 id=\"mcetoc_1gtbugt571b8\">Types of Tests</h3>\n<div class=\"page\" title=\"Page 2\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<h4 id=\"mcetoc_1gtbugt571b9\">Unit Tests / Unit Testing</h4>\n<ul>\n<li>Code written to test code under test</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Designed to test specific sections of code</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Percentage of lines of code tested is code coverage</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Ideal coverage is in the 70-80% range</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Should be ‘unity’ and execute very fast</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Should have no external dependencies </span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">ie no database, no Spring context, etc</span></li>\n</ul>\n<div class=\"page\" title=\"Page 3\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<h3 id=\"mcetoc_1gtbugt571ba\">Integration Tests</h3>\n<ul>\n<li>Designed to test behaviors between objects and parts of the overall system</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Much larger scope</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Can include the Spring Context, database, and message brokers</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Will run much slower than unit tests</span></li>\n</ul>\n<h3 id=\"mcetoc_1gtbugt571bb\">Functional Tests</h3>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Typically means you are testing the running application</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Application is live, likely deployed in a known environment</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Functional touch points are tested - (i.e. Using a web driver, calling web services, sending / receiving messages, etc)</span></li>\n</ul>\n<h3 id=\"mcetoc_1gtbugt571bc\">The major challenge with testing Servlets and Controllers</h3>\n<div class=\"page\" title=\"Page 5\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>Spring MVC Controllers are tricky to test property</li>\n<li>Controllers have a high degree of integration with the Spring MVC Framework</li>\n<li>Request path and HTTP Method decides which method to invoke</li>\n<li>Path variables are parsed from path</li>\n<li>JSON is bound to POJOs</li>\n<li>Response is expressed as a HTTP Response</li>\n<li>JUnit tests are NOT sufficient to test the framework interaction</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Spring Mock MVC is a testing environment for the testing of Spring MVC controllers</span>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Provides mocks of the Servlet runtime environment</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">HTTP Request / Response, Dispatcher Servlet, etc</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Simulates the execution of controller as if it was running under Spring within Tomcat</span></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Can be run with or without the Spring Context</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">True unit test when run without the Spring Context</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Technically an Integration Test when used in conjunction with Spring Context</span></li>\n</ul>\n<div class=\"page\" title=\"Page 7\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<h3 id=\"mcetoc_1gtbugt571bd\">Spring Boot Test Splices</h3>\n<div class=\"page\" title=\"Page 7\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>Spring Boot supports a concept of what is called Test Splices</li>\n<li>Test Splices bring up a targeted segment of the Auto-Configured Spring Boot Environment\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">ie - Just the Database components; or just the web components</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">User defined Spring beans typically are NOT initialized</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@WebMvcTest - is a Spring Boot test splice which creates a MockMVC environment for </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">the controller (or controllers) under test</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Dependencies of controllers are NOT included</span></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mcetoc_1gtbugt571be\">Using Mocks</h3>\n<div class=\"page\" title=\"Page 8\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>Controller dependencies must be added to the Spring Context in the test environment</li>\n<li>Dependencies can be any proper implementation\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Example of why we code to an interface, any implementation will work</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">We could easily use the hash map implementation we’ve been using in the course </span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">For testing, it is common to use mock objects</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Mocks allow you to supply a specific response for a given input</span>\n<ul>\n<li>ie - when method abcd is called, return foo...</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<p> </p>\n<h3 id=\"mcetoc_1gtbugt571bf\">What is Mockito?</h3>\n<div class=\"page\" title=\"Page 9\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>\n<p>Mockito is the most popular mocking framework for testing Java</p>\n</li>\n<li>Mocks (aka Test Doubles) are alternate implementations of objects to replace real objects in tests</li>\n<li>Works well with Dependency Injection</li>\n<li>For the class under test, injected dependencies can be mocks</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<h3 id=\"mcetoc_1gtbugt571bg\">Types of Mocks</h3>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Dummy - Object used just to get the code to compile</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Fake - An object that has an implementation, but not production ready</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Stub - An object with pre-defined answers to method calls</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Mock - An object with pre-defined answers to method calls, and has expectations of executions. Can throw an exception if an unexpected invocation is detected</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Spy - In Mockito Spies are Mock like wrappers around the actual object</span></li>\n</ul>\n<h3 id=\"mcetoc_1gtbugt571bh\">Testing Controllers</h3>\n<div class=\"page\" title=\"Page 12\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>Argument captors can be used to verify request data is properly being parsed and passed to service layer</li>\n<li>Verify interactions can be used Mocked object was called</li>\n<li>Mock return values supply data back to controller\n<ul>\n<li>ie - object returned when getById is called on service</li>\n</ul>\n</li>\n<li>Mocks can also be instructed to throw exceptions to test exception handling</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "java",
                   "dev"
            ],
            "date_published": "2023-04-06T15:31:30+02:00",
            "date_modified": "2023-04-06T21:22:21+02:00"
        },
        {
            "id": "https://www.finecloud.ch/project-lombok.html",
            "url": "https://www.finecloud.ch/project-lombok.html",
            "title": "Project Lombok",
            "summary": "Intro Project Lombok is a Java library that provides a set of annotations and utility classes that help to reduce boilerplate code in Java projects. It offers features such as automatic generation of getters, setters, equals, hashCode, toString, and constructors, as well as support for&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gt6q7uargb\">Intro</a></li>\n<li><a href=\"#mcetoc_1gt6q7uargc\">How does it work?</a></li>\n<li><a href=\"#mcetoc_1gt6q7uargd\">Features</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1gt6q7uargb\">Intro</h3>\n<div class=\"flex flex-grow flex-col gap-3\">\n<div class=\"min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap\">\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\n<p>Project Lombok is a Java library that provides a set of annotations and utility classes that help to reduce boilerplate code in Java projects. It offers features such as automatic generation of getters, setters, equals, hashCode, toString, and constructors, as well as support for logging, fluent API creation, and more.</p>\n<p>By using Lombok annotations, developers can focus on writing the core business logic of their code and let Lombok generate the repetitive, boilerplate code for them. This reduces code verbosity and can lead to improved code readability and maintainability.</p>\n<p>Lombok is widely used in the Java community and can be integrated into popular IDEs such as Eclipse, IntelliJ, and NetBeans. It is also compatible with popular build tools such as Maven and Gradle.</p>\n<p>Overall, Lombok is a powerful tool for Java developers who want to increase productivity and reduce the amount of repetitive code in their projects.</p>\n<h3 id=\"mcetoc_1gt6q7uargc\">How does it work?</h3>\n<div class=\"page\" title=\"Page 4\">\n<div class=\"section\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<ul>\n<li>\n<p>Hooks in via the Annotation processor API</p>\n</li>\n<li>The AST (raw source code) is passed to Lombok for code generation before java continues.</li>\n<li>Thus, produces properly compiled Java code in conjunction with the Java compiler</li>\n<li>NOTE: Code is generated and complied. No run-time performance penalty.</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">If you write an implantation of a method Project Lombok would generate, your code is used</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Make it easy to override Lombok generated code</span></li>\n</ul>\n<h3 id=\"mcetoc_1gt6q7uargd\">Features</h3>\n<ul>\n<li>val - declares final local variable</li>\n<li>var - declares mutable local variable</li>\n<li>@Getter\n<ul>\n<li>Creates getter methods for all properties</li>\n</ul>\n</li>\n<li>@Setter\n<ul>\n<li>Creates setter for all non-final properties</li>\n</ul>\n</li>\n<li>@ToString\n<ul>\n<li>Generates String of classname, and each field separated by commas</li>\n<li>Optional parameter to include field names</li>\n<li>Optional parameter to include call to the super toString method</li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@EqualsAndHashCode</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Generates implementations of ‘equals(Object other) and hashCode()</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">By default will use all non-static, non-transient properties</span></li>\n<li>Can optionally exclude specific properties</li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@NoArgsConstructor</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Generates no args constructor</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Will cause compiler error if there are final fields</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Can optionally force, which will initialize final fields with 0 / false / null</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@RequiredArgsContructor</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Generates a constructor for all fields that are final or marked @NonNull</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Constructor will throw a NullPointerException if any @NonNull fields are null</span></li>\n</ul>\n</li>\n<li>@Data\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Generates typical boilerplate code for POJOs</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Combines - @Getter, @Setter, @ToString, @EqualsAndHashCode, @RequiredArgsConstructor</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">No constructor is generated if constructors have been explicitly declared</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@Value</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">The immutable variant of @Data</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">All fields are made private and final by default</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@NonNull</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Set on parameter of method or constructor and a NullPointerException will be thrown if parameter is null</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@Builder</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Implements the ‘builder’ pattern for object creation</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Person.builder().name(\"Adam Savage\").city(\"San Francisco\").job(\"Mythbusters\").job(\"Unchained Reaction\").build();</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@SneakyThrows</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Throw checked exceptions without declaring in calling method’s throws clause</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@Syncronized</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">A safer implementation of Java’s synchronized</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@Log</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Creates a Java util logger • Java util loggers are awful</span></li>\n</ul>\n</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">@Slf4j</span><br>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Creates a SLF4J logger.</span></li>\n<li>Recommended - SLF4J is a generic logging facade</li>\n<li>Spring Boot’s default logger is LogBack</li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"column\"> </div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "lombok",
                   "java",
                   "dev"
            ],
            "date_published": "2023-04-05T21:00:00+02:00",
            "date_modified": "2023-04-05T21:00:00+02:00"
        }
    ]
}
