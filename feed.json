{
    "version": "https://jsonfeed.org/version/1",
    "title": "Finecloud",
    "description": "",
    "home_page_url": "https://www.finecloud.ch",
    "feed_url": "https://www.finecloud.ch/feed.json",
    "user_comment": "",
    "icon": "https://www.finecloud.ch/media/website/cloud.png",
    "author": {
        "name": "Finecloud"
    },
    "items": [
        {
            "id": "https://www.finecloud.ch/capture-groups-in-java.html",
            "url": "https://www.finecloud.ch/capture-groups-in-java.html",
            "title": "Capture Groups in Java",
            "summary": "Capture Groups Im letzten Post haben wir einen kleinen Einstieg in Regex mit Java gemacht. Nun sehen wir uns an, wie man Regex Pattern in Java mittels Capture Groups anwenden kann: String regex = \"(1[-.\\\\s])?(\\\\d{3}[-.\\\\s]?)(\\\\d{3}[-.\\\\s]?)\\\\d{4}\"; String phoneNumber = \"12.523.231.4234\"; Pattern pat = Pattern.compile(regex); Matcher mat =&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g7tfqiu92l\">Capture Groups</a></li>\n<li><a href=\"#mcetoc_1g7tfr24a2o\">Not Capture Groups</a></li>\n<li><a href=\"#mcetoc_1g7tfqiu92m\">Named Capture Groups</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g7tfqiu92l\">Capture Groups</h2>\n<p><a href=\"https://www.finecloud.ch/einstieg-in-regex-mit-java.html\" rel=\"nofollow\">Im letzten Post</a> haben wir einen kleinen Einstieg in Regex mit Java gemacht. Nun sehen wir uns an, wie man Regex Pattern in Java mittels Capture Groups anwenden kann:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">        String regex = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"(1[-.\\\\s])?(\\\\d{3}[-.\\\\s]?)(\\\\d{3}[-.\\\\s]?)\\\\d{4}\"</span>;\n        String phoneNumber = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"12.523.231.4234\"</span>;\n        Pattern pat = Pattern.compile(regex);\n        Matcher mat = pat.matcher(phoneNumber);\n\n        <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (mat.matches()){\n            //System.out.format(\"entire String: %s\\n\", mat.group(0));\n            System.out.format(\"Country Code: %s\\n\", mat.group(2));\n            System.out.format(\"Area Code: %s\\n\", mat.group(4));\n            System.out.format(\"Exchange Code: %s\\n\", mat.group(6));\n            System.out.format(\"Line number Code: %s\\n\", mat.group(7));\n        }</pre>\n<p>Damit können wir nun die einzelnen Nummern-Teile extrahieren und separat behandeln:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">Country Code: 12\nArea Code: 523\nExchange Code: 231\nLine number Code: 4234</pre>\n<h2 id=\"mcetoc_1g7tfr24a2o\">Not Capture Groups</h2>\n<p>Im Beispiel oben werden die Klammern fortlaufend nummeriert, jede Klammer wird von links nach rechts aufsteigend nummeriert, dabei werden auch die embeded Gruppen mitgezählt. Das hat den Nachteil das es etwas unübersichtlich wird, welche Nummer hat nun die Klammer in der Mitte. Dabei interessieren uns ja eigentlich immer nur die embeded Gruppen. Das können wir optimieren, indem wir bei den Klammern welche uns nicht interessieren ein '?:' direkt nach dem Öffnen der Klammer angeben. Das bedeutet dann soviel wir <em>not Capture Group</em>. Damit wird für die Klammern keine Gruppennummer vergeben:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">        String regex = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"(?:(\\\\d{1,2})[-.\\\\s])?(?:(\\\\d{3})[-.\\\\s]?)(?:(\\\\d{3})[-.\\\\s]?)(\\\\d{4})\"</span>;\n        String phoneNumber = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"12.523.231.4234\"</span>;\n\n        Pattern pat = Pattern.compile(regex);\n        Matcher mat = pat.matcher(phoneNumber);\n\n        <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (mat.matches()){\n            <span class=\"hljs-comment\" style=\"color: grey;\">//System.out.format(\"entire String: %s\\n\", mat.group(0));</span>\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Country Code: %s\\n\"</span>, mat.group(<span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>));\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Area Code: %s\\n\"</span>, mat.group(<span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>));\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Exchange Code: %s\\n\"</span>, mat.group(<span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>));\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Line number Code: %s\\n\"</span>, mat.group(<span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>));\n        }</pre>\n<h2 id=\"mcetoc_1g7tfqiu92m\">Named Capture Groups</h2>\n<p>Noch mehr Optimieren können wir das mit Named Capture Groups:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">        String regex = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"(?:(?&lt;countryCode&gt;\\\\d{1,2})[-.\\\\s])?(?:(?&lt;areaCode&gt;\\\\d{3})[-.\\\\s]?)(?:(?&lt;exchangeCode&gt;\\\\d{3})[-.\\\\s]?)(?&lt;lineNumber&gt;\\\\d{4})\"</span>;\n        String phoneNumber = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"12.523.231.4234\"</span>;\n\n        Pattern pat = Pattern.compile(regex);\n        Matcher mat = pat.matcher(phoneNumber);\n\n        <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (mat.matches()){\n            <span class=\"hljs-comment\" style=\"color: grey;\">//System.out.format(\"entire String: %s\\n\", mat.group(0));</span>\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Country Code: %s\\n\"</span>, mat.group(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"countryCode\"</span>));\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Area Code: %s\\n\"</span>, mat.group(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"areaCode\"</span>));\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Exchange Code: %s\\n\"</span>, mat.group(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"exchangeCode\"</span>));\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Line number Code: %s\\n\"</span>, mat.group(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"lineNumber\"</span>));\n        }</pre>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "regex",
                   "java basics",
                   "java",
                   "dev"
            ],
            "date_published": "2022-07-14T06:02:10+02:00",
            "date_modified": "2022-07-14T06:35:45+02:00"
        },
        {
            "id": "https://www.finecloud.ch/einstieg-in-regex-mit-java.html",
            "url": "https://www.finecloud.ch/einstieg-in-regex-mit-java.html",
            "title": "Einstieg in Regex mit Java",
            "summary": "Was ist Regex? Regex steht für Regular expressions und ist eine Technik, Technologie und Sprache an und für sich, die verwendet werden kann zum Ausdrücken von Textmustern mit Symbolen. Und diese Symbole sind selbst Text. Damit lassen wir verschiedene Textteile und Zeichen andere Textfolgen darstellen. In&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g7qsl72t8a\">Was ist Regex?</a></li>\n<li><a href=\"#mcetoc_1g7qsl72t8b\">Einfaches Beispiel</a></li>\n<li><a href=\"#mcetoc_1g7qsl72t8c\">Negieren</a></li>\n<li><a href=\"#mcetoc_1g7qsl72t8d\">Anzahl Buchstaben</a></li>\n<li><a href=\"#mcetoc_1g7tdih5q2e\">Anzahl Zahlen</a></li>\n<li><a href=\"#mcetoc_1g7tdih5q2f\">Buchstaben und Zahlenfolge</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g7qsl72t8a\">Was ist Regex?</h2>\n<p>Regex steht für Regular expressions und  ist eine Technik, Technologie und Sprache an und für sich, die verwendet werden kann zum Ausdrücken von Textmustern mit Symbolen. Und diese Symbole sind selbst Text. Damit lassen wir verschiedene Textteile und Zeichen andere Textfolgen darstellen.</p>\n<h2 id=\"mcetoc_1g7qsl72t8b\">Einfaches Beispiel</h2>\n<p>In Java kann Regex Beispielsweise bei Strings angewendet werden, dazu verwenden wir die Methode <em>String.matches. </em>Das einfachste Beispiel, ist wenn wir mit Regex in einem String nach einem String suchen:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"cat\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"cat\"</span>));\n    }\n}</pre>\n<p>Der Output ist ein Boolean Wert, in diesem Fall <em>true. </em>Was aber wenn wir nun eines der beiden cat gross schreiben? Der Boolean wird <em>false</em> sein, ausser wir passen den Regex Pattern so an, dass er Gross- und Kleinbuchstaben berücksichtigt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Cat\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"[Cc]at\"</span>));\n    }\n}\n</pre>\n<p>mit den eckigen Klammern [ ] kann eine OR Verknüpfung zwischen Zeichen definiert werden.</p>\n<p>Wenn wir ein Pattern wollen, um zu prüfen ob das Wort mit einem Buchstaben von a bis f startet könnten wir entweder alle Buchstaben in der eckigen Klammer ausschreiben. Dafür gibt es glücklicherweise eine schönere Möglichkeit, wir können Ranges angeben:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Fat\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"[a-fA-F]at\"</span>));\n    }\n}</pre>\n<h2 id=\"mcetoc_1g7qsl72t8c\">Negieren</h2>\n<p>Was wenn wir einen Pattern wollen der prüft ob etwas <strong>nicht</strong> zutrifft. Zum Beispiel ob der Erste Buchstaben des Wortes nicht ein Buchstabe von a bis f ist:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Fat\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"[^a-fA-F]at\"</span>));\n    }\n}</pre>\n<p>Das Ergebnis ist nun <em>false</em>. Das Zeichen am Anfang nennt sich \"Caret\".</p>\n<h2 id=\"mcetoc_1g7qsl72t8d\">Anzahl Buchstaben</h2>\n<p>Wenn wir nun ein Pattern suchen, der prüft ob unser String aus nur drei latinischen Buchstaben besteht: </p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Fat\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\w\\\\w\\\\w\"</span>));\n    }\n}</pre>\n<p>Der reine Regex Pattern besteht nur aus einem \\ (Backslash). Damit wir diesen in Java nutzen können, müssen wir jedoch den Backslash mit einem zweiten Backslash escapen, damit Java den Backslash nicht als Java, sondern als Regex Pattern erkennen kann.</p>\n<p class=\"msg msg--highlight \">Der Regex-Pattern für Buchstaben (\\w) wertet nicht nur Buchstaben von a bis z als Valid, sondern auch Zahlen und '_' (underscore).</p>\n<h2 id=\"mcetoc_1g7tdih5q2e\">Anzahl Zahlen</h2>\n<p>Dasselbe geht auch, wenn wir einen Pattern für die Anzahl Zahlen definieren:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"521\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\d\\\\d\\\\d\"</span>));\n    }\n}</pre>\n<h2 id=\"mcetoc_1g7tdih5q2f\">Buchstaben und Zahlenfolge</h2>\n<p>Was wenn wir nun eine Sammlung von Nummern auf das folgende Format prüfen müssen: <em>523-231-4444</em> (alle Zahlen sind erlaubt). Wir könnten dazu einfach aus Faulheit folgenden Pattern definieren:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523-231-4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d\"</span>));\n    }\n}</pre>\n<p>Das ist ein Valider Pattern der die Problemstellung löst. Allerdings geht das schöner und einfacher mit dem Quantifier { }:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523-231-4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\d{3}-\\d{3}-\\d{4}\"</span>));\n    }\n}</pre>\n<p>Viel besser oder? Was wenn wir nun nicht nur die Bindestriche, sondern auch z.B. Punkte als Trennzeichen akzeptieren wollen? Dann können wir eine Or Verknüpfung machen anhand des oberen Beispiels:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523-231.4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\d{3}[-.]\\d{3}[-.]\\d{4}\"</span>));\n    }\n}</pre>\n<p>Was ist nun wenn wir Leerzeichen (523-231.4444) zwischen den Nummern als Valid behandeln wollen? Theoretisch können wir nun in der Or Verknüpfung (in den eckigen Klammern) einfach ein Leerzeichen einfügen. Das funktioniert, ist aber Optisch nicht ideal, da das Leerzeichen schnell übersehen wird. Expliziter geht das mit \\s als Regex Zeichen für einen Leerschlag:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523 231.4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\d{3}[-.\\\\s]\\\\d{3}[-.\\\\s]\\\\d{4}\"</span>));\n    }\n}</pre>\n<p>Wenn mehr als ein Leerschlag, Bindestrich oder Punkt erlaubt ist, kann hinter der \"Or\"-Klammer einfach ein Plus angefügt werden:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523 ..231  4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\d{3}[-.\\\\s]+\\\\d{3}[-.\\\\s]+\\\\d{4}\"</span>));\n    }\n}</pre>\n<p>Was wenn keines, eines oder mehrere dieser \"Or\"-Verknüpften Zeichen erlaubt sein sollen? Wir verwenden '*' anstelle von '+':</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523231 .4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\d{3}[-.\\\\s]*\\\\d{3}[-.\\\\s]*\\\\d{4}\"</span>));\n    }\n}</pre>\n<p>Was ist nun wenn wir genau nur eines oder keines dieser Zeichen erlauben wollen? Wir verwenden '?' anstelle von '*':</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523231-4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\d{3}[-.\\\\s]?\\\\d{3}[-.\\\\s]?\\\\d{4}\"</span>));\n    }\n}</pre>\n<p>Was, wenn wir in der letzten Zahlenfolge nur 3 oder 4 Zeichen erlauben wollen? </p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523231-4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\d{3}[-.\\\\s]?\\\\d{3}[-.\\\\s]?\\\\d{3,4}\"</span>));\n    }\n}</pre>\n<p>Wenn wir mindestens drei Stellen brauchen, aber es auch unbeschränkt mehr sein dürfen, können wir die zweite Zahl nach dem Komma einfach weglassen. Was wir weiter optimieren können ist, dass wir die Wiederholungen von Regex Statements zusammenfassen und nur einmal deklarieren. Dazu löschen wir eines der beiden \"\\d{3}[-.\\s]?\" Statements und setzen es im runde Klammern, gefolgt von Spitzen klammern, in der wir die Anzahl Wiederholungen angeben, in diesem Fall 2:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523 231 4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"(\\\\d{3}[-.\\\\s]?){2}\\\\d{3,}\"</span>));\n    }\n}</pre>\n<p>Genial, oder?</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "regex",
                   "java basics",
                   "java",
                   "dev"
            ],
            "date_published": "2022-07-13T05:50:09+02:00",
            "date_modified": "2022-07-14T05:55:53+02:00"
        },
        {
            "id": "https://www.finecloud.ch/java-access-modifier.html",
            "url": "https://www.finecloud.ch/java-access-modifier.html",
            "title": "Java Access-Modifier",
            "summary": "Sobald ein Feld sichtbar ist, bedeutet das auch, das es gelesen und beschrieben werden kann. Die Access-Modifier steuern, von wo auf Felder und Methoden eines Objekts zugegriffen werden kann: Modifier Wer darf zugreifen? public Auf public-Objekte/Felder und Methoden darf ohne Einschränkungen von überall aus zugegriffen&hellip;",
            "content_html": "<p>Sobald ein Feld sichtbar ist, bedeutet das auch, das es gelesen und beschrieben werden kann. Die Access-Modifier steuern, von wo auf Felder und Methoden eines Objekts zugegriffen werden kann:</p>\n<table style=\"border-collapse: collapse; width: 100%; height: 309.391px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 24.4301%; height: 50.3594px;\"><strong>Modifier</strong></td>\n<td style=\"width: 75.5699%; height: 50.3594px;\"><strong>Wer darf zugreifen?</strong></td>\n</tr>\n<tr style=\"height: 107.953px;\">\n<td style=\"width: 24.4301%; height: 107.953px;\">public</td>\n<td style=\"width: 75.5699%; height: 107.953px;\">Auf <em>public-Objekte/Felder und Methoden </em>darf ohne Einschränkungen von überall aus zugegriffen werden.</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 24.4301%; height: 50.3594px;\">protected</td>\n<td style=\"width: 75.5699%; height: 50.3594px;\">Zugriff ist erlaubt für Klassen, die im gleichen Package liegen, sowie für Klassen, die von dieser Klasse erben.</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 24.4301%; height: 50.3594px;\">- (nur Package)</td>\n<td style=\"width: 75.5699%; height: 50.3594px;\">Wenn keinen Access-Modifier definiert wird, dann ist das Feld oder die Methode für alle Klassen sichtbar, die im gleichen Package liegen.<br>Dies ist aber kein Schutz gegen Zugriffe von ausserhalb auf Ihre Klasse: Packages in Java sind offen, d. h. jeder kann eine weitere Klasse in Ihrem Package deklarieren und von dort auf diese Felder zugreifen.</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 24.4301%; height: 50.3594px;\">private</td>\n<td style=\"width: 75.5699%; height: 50.3594px;\">Nur die Klasse selbst darf auf <em>private</em>-Felder zugreifen. Wie alle Access-Modifier wirkt auch <em>private</em> auf Klassenebene. Das bedeutet, dass ein Objekt auf <em>private</em>-Member eines anderen Objekts des gleichen Typs zugreifen kann.</td>\n</tr>\n</tbody>\n</table>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "java basics",
                   "java",
                   "dev",
                   "access modifier"
            ],
            "date_published": "2022-07-10T06:30:41+02:00",
            "date_modified": "2022-07-10T06:31:08+02:00"
        },
        {
            "id": "https://www.finecloud.ch/java-namenskonventionen.html",
            "url": "https://www.finecloud.ch/java-namenskonventionen.html",
            "title": "Java Namenskonventionen",
            "summary": "In diesem Blog fasse ich die Java Namenskonventionen kurz zusammen: Typ Namenskonvention Beispiele Class Sollte mit Grossbuchstaben beginnen und sollte ein Substantiv wie Farbe, Knopf, System, Faden usw. sein. Verwenden Sie geeignete Wörter anstelle von Akronymen. public class Employee { //code snippet } Interface Sollte&hellip;",
            "content_html": "<p>In diesem Blog fasse ich die Java Namenskonventionen kurz zusammen:</p>\n<table class=\"alt\" style=\"border-collapse: collapse; border-color: #000000; border-style: solid; width: 100%; height: 1446.8px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 79.1562px;\">\n<th style=\"width: 17.4037%; height: 79.1562px;\"><strong>Typ</strong></th>\n<th style=\"width: 55.3495%; height: 79.1562px;\"><strong>Namenskonvention</strong></th>\n<th style=\"width: 27.2468%; height: 79.1562px;\"><strong>Beispiele</strong></th>\n</tr>\n<tr style=\"height: 165.547px;\">\n<td style=\"width: 17.4037%; height: 165.547px;\">Class</td>\n<td style=\"width: 55.3495%; height: 165.547px;\">Sollte mit Grossbuchstaben beginnen und<br>sollte ein Substantiv wie Farbe, Knopf, System, Faden usw. sein. Verwenden Sie geeignete Wörter anstelle von Akronymen.</td>\n<td style=\"width: 27.2468%; height: 165.547px;\"><code>public class <strong>Employee</strong></code><br><code>{</code><br><code>//code snippet</code><br><code>}</code></td>\n</tr>\n<tr style=\"height: 165.547px;\">\n<td style=\"width: 17.4037%; height: 165.547px;\">Interface</td>\n<td style=\"width: 55.3495%; height: 165.547px;\">Sollte mit dem Grossbuchstaben beginnen und sollte ein Adjektiv wie Runnable, Remote, ActionListener sein. Verwenden Sie geeignete Wörter anstelle von Akronymen.</td>\n<td style=\"width: 27.2468%; height: 165.547px;\"><code>interface <strong>Printable</strong>{//code snippet}</code></td>\n</tr>\n<tr style=\"height: 251.938px;\">\n<td style=\"width: 17.4037%; height: 251.938px;\">Method</td>\n<td style=\"width: 55.3495%; height: 251.938px;\">Sollte mit Kleinbuchstaben beginnen und sollte ein Verb wie main(), print(), println() sein. Wenn der Name mehrere Wörter enthält, beginnen Sie ihn mit einem Kleinbuchstaben, gefolgt von einem Grossbuchstaben, z. B. actionPerformed().</td>\n<td style=\"width: 27.2468%; height: 251.938px;\"><code>class Employee</code><br><code>{</code><br><code>// method</code><br><code>void <strong>draw()</strong></code><br><code>{</code><br><code>//code snippet</code><br><code>}</code><br><code>}</code></td>\n</tr>\n<tr style=\"height: 338.328px;\">\n<td style=\"width: 17.4037%; height: 338.328px;\">Variable</td>\n<td style=\"width: 55.3495%; height: 338.328px;\">Sollte mit einem Kleinbuchstaben beginnen, z. B. ID, Name und sollte nicht mit Sonderzeichen wie &amp; (kaufmännisches Und), $ (Dollar), _ (Unterstrich) beginnen. Wenn der Name mehrere Wörter enthält, beginnen Sie ihn mit dem Kleinbuchstaben, gefolgt von einem Grossbuchstaben, z. B. Vorname, Nachname. Vermeiden Sie die Verwendung von Ein-Zeichen-Variablen wie x, y, z.</td>\n<td style=\"width: 27.2468%; height: 338.328px;\"><code>class Employee</code><br><code>{</code><br><code>// variable</code><br><code>int <strong>id</strong>;</code><br><code>//code snippet</code><br><code>}</code></td>\n</tr>\n<tr style=\"height: 223.141px;\">\n<td style=\"width: 17.4037%; height: 223.141px;\">Package</td>\n<td style=\"width: 55.3495%; height: 223.141px;\">Sollte ein Kleinbuchstabe sein, z. B. java, lang. Wenn der Name mehrere Wörter enthält, sollten sie durch Punkte (.) getrennt werden, z. B. java.util, java.lang.</td>\n<td style=\"width: 27.2468%; height: 223.141px;\"><code>//package</code><br><code>package <strong>com.javatpoint;</strong></code><br><code>class Employee</code><br><code>{</code><br><code>//code snippet</code><br><code>}</code></td>\n</tr>\n<tr style=\"height: 223.141px;\">\n<td style=\"width: 17.4037%; height: 223.141px;\">Constant</td>\n<td style=\"width: 55.3495%; height: 223.141px;\">Sollte in Großbuchstaben wie ROT, GELB sein. Wenn der Name mehrere Wörter enthält, sollten sie durch einen Unterstrich (_) getrennt werden, z. B. MAX_PRIORITY.<br>Es darf Ziffern enthalten, jedoch nicht als erster Buchstabe.</td>\n<td style=\"width: 27.2468%; height: 223.141px;\"><code>class Employee</code><br><code>{</code><br><code>//constant</code><br><code>static final int <strong>MIN_AGE</strong> = 18;</code><br><code>//code snippet</code><br><code>}</code></td>\n</tr>\n</tbody>\n</table>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "java basics",
                   "java",
                   "dev"
            ],
            "date_published": "2022-07-09T15:51:07+02:00",
            "date_modified": "2022-07-09T15:53:17+02:00"
        },
        {
            "id": "https://www.finecloud.ch/unterschiede-zwischen-proxmox-containers-und-docker.html",
            "url": "https://www.finecloud.ch/unterschiede-zwischen-proxmox-containers-und-docker.html",
            "title": "Unterschiede zwischen Proxmox Containers und Docker",
            "summary": "LXC LXC ist ein Userspace Interface zur Eindämmung des Linux-Kernels und kann verwendet werden für Systemvirtualisierung. Durch eine mächtige API und einfache Tools ermöglicht es Linux Benutzern einfache Erstellung und Verwaltung von System Container. LXC ermöglicht ein komplettes OS in einem Container zu betreiben. LXD&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g7f40muo25\">LXC</a></li>\n<li><a href=\"#mcetoc_1g7f40muo26\">LXD</a></li>\n<li><a href=\"#mcetoc_1g7f40muo27\">Proxmox Containers</a></li>\n<li><a href=\"#mcetoc_1g7f40muo28\">Docker</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g7f40muo25\">LXC</h2>\n<p>LXC ist ein Userspace Interface zur Eindämmung des Linux-Kernels und kann verwendet werden für Systemvirtualisierung. Durch eine mächtige API und einfache Tools ermöglicht es Linux Benutzern einfache Erstellung und Verwaltung von System Container. LXC ermöglicht ein komplettes OS in einem Container zu betreiben.</p>\n<h2 id=\"mcetoc_1g7f40muo26\">LXD</h2>\n<p>LXD ist auf LXC Aufgebaut und bietet neue und bessere Benutzererfahrung. Unter der Haube verwendet LXD LXC durch liblxc und dessen Go binding für das Erstellen und Verwalten von Container. Es ist im Grunde eine Alternative zu den Tools und dem Verteilungsvorlagensystem von LXC mit den zusätzlichen Funktionen, die sich aus der Steuerbarkeit über das Netzwerk ergeben.</p>\n<h2 id=\"mcetoc_1g7f40muo27\">Proxmox Containers</h2>\n<p>Als Proxmox Container werden Container bezeichnet, die mit dem Proxmox Container Toolkit (pct) erstellt und verwaltet werden. Sie zielen auch auf die Systemvirtualisierung ab und verwenden LXC als Grundlage des Containerangebots. Das Proxmox Container Toolkit (pct) ist eng mit Proxmox VE gekoppelt. Das bedeutet, dass es Cluster-Setups kennt und dieselben Netzwerk- und Speicherressourcen wie virtuelle QEMU-Maschinen (VMs) verwenden kann. Sie können sogar die Proxmox VE-Firewall verwenden, Backups erstellen und wiederherstellen oder Container mit dem HA-Framework verwalten. Mit der Proxmox VE API lässt sich alles über das Netzwerk steuern.</p>\n<h2 id=\"mcetoc_1g7f40muo28\">Docker</h2>\n<p>Docker zielt darauf ab, eine einzelne Anwendung in einer isolierten, in sich geschlossenen Umgebung zu laufen. Diese werden im Allgemeinen als „Anwendungscontainer“ und nicht als „Systemcontainer“ bezeichnet. Sie verwalten eine Docker-Instanz über den Host mithilfe der Docker Engine-Befehlszeilenschnittstelle. Es wird nicht empfohlen, Docker direkt auf Ihrem Proxmox VE-Host auszuführen. <strong>Wenn man also einen Anwendungscontainer ausführen möchte mit z.B. Docker-Images, sollte man diese am besten in einer Proxmox Qemu-VM ausführen.</strong></p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "virtualisierung",
                   "proxmox",
                   "lxd",
                   "lxc",
                   "linux",
                   "kvm",
                   "docker",
                   "container"
            ],
            "date_published": "2022-07-08T16:43:20+02:00",
            "date_modified": "2022-07-08T16:43:37+02:00"
        },
        {
            "id": "https://www.finecloud.ch/citrix-adc-backup-mit-ansible.html",
            "url": "https://www.finecloud.ch/citrix-adc-backup-mit-ansible.html",
            "title": "Citrix ADC (NetScaler) Backup mit Ansible",
            "summary": "Beschreibung Citrix ADC, bis vor einer Weile noch als Citrix NetScaler bekannt ist eine Netzwerk Appliance welche als Access Gateway und Proxy verwendet werden kann. In diesem Artikel werden wir ein kleines Ansible Playbook schreiben, mit welchem man einen Citrix ADC sichern kann. Als erster&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g7f244jrl8\">Beschreibung</a></li>\n<li><a href=\"#mcetoc_1g7f244jrl9\">Ansible Config</a></li>\n<li><a href=\"#mcetoc_1g7f244jrla\">Inventar</a></li>\n<li><a href=\"#mcetoc_1g7f244jrlb\">Playbook</a></li>\n<li><a href=\"#mcetoc_1g7f244jrlc\">Rolle citrix_adc</a></li>\n<li><a href=\"#mcetoc_1g7f244jrld\">Secrets</a></li>\n<li><a href=\"#mcetoc_1g7f244jrle\">Run</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g7f244jrl8\">Beschreibung</h2>\n<p>Citrix ADC, bis vor einer Weile noch als Citrix NetScaler bekannt ist eine Netzwerk Appliance welche als Access Gateway und Proxy verwendet werden kann. In diesem Artikel werden wir ein kleines Ansible Playbook schreiben, mit welchem man einen Citrix ADC sichern kann.</p>\n<h2 id=\"mcetoc_1g7f244jrl9\">Ansible Config</h2>\n<p>Als erster Schritt definieren wir die Ansible Konfiguration: <code>ansible.cfg</code></p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-section\" style=\"color: #ffc66d;\">[defaults]</span>\n<span class=\"hljs-attr\">interpreter_python</span>=auto_silent\n<span class=\"hljs-section\" style=\"color: #ffc66d;\">\n[ssh_connection]</span>\n<span class=\"hljs-comment\" style=\"color: grey;\"># allows new host keys once</span>\n<span class=\"hljs-attr\">ssh_args</span> = -o StrictHostKeyChecking=accept-new</pre>\n<p>Dabei ist wichtig das du deine Secrets mit dem <span class=\"hljs-attr\"><code>vault_password_file</code> verschlüsselst.</span></p>\n<h2 id=\"mcetoc_1g7f244jrla\">Inventar</h2>\n<p>Nun erstellen wir uns eine Datei <code>inventory.yaml </code>mit dem folgenden Inhalt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-meta\" style=\"color: #bbb529;\">---</span>\n<span class=\"hljs-comment\" style=\"color: grey;\"># yamllint disable rule:line-length</span>\n\n<span class=\"hljs-attr\">all:</span>\n<span class=\"hljs-attr\">  hosts:</span>\n<span class=\"hljs-attr\">  children:</span>\n<span class=\"hljs-attr\">    citrix_adc:</span>\n<span class=\"hljs-attr\">      hosts:</span>\n        netscaler01\n        netscaler02</pre>\n<p>die Hosts müssen dabei natürlich den FQDN Namen deiner ADCs entsprechen.</p>\n<h2 id=\"mcetoc_1g7f244jrlb\">Playbook</h2>\n<p>Auch das Playbook selbst ist nicht sehr spannend, von hier aus werden wir dann die Rolle mit dem eigentlich spannenden Inhalt anstossen: <code>playbook.yaml</code></p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-meta\" style=\"color: #bbb529;\">---</span>\n\n<span class=\"hljs-attr\">- hosts:</span> citrix_adc\n<span class=\"hljs-attr\">  gather_facts:</span> <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n<span class=\"hljs-attr\">  roles:</span>\n<span class=\"hljs-bullet\" style=\"color: #6897bb;\">    -</span> citrix_adc</pre>\n<h2 id=\"mcetoc_1g7f244jrlc\">Rolle citrix_adc</h2>\n<p>Nun kommt der Spannende Inhalt, wir erstellen nun folgende Ordnerstruktur und main.yaml Dateien:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">└── roles\n    └── citrix_adc\n        ├── tasks\n        │   └── main.yaml\n        └── vars\n            └── main.yaml</pre>\n<p>der Inhalt der <code>task/main.yaml</code> Datei ist wiefolgt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-meta\" style=\"color: #bbb529;\">---</span>\n<span class=\"hljs-comment\" style=\"color: grey;\"># yamllint disable rule:line-length</span>\n\n<span class=\"hljs-attr\">- name:</span> Delete all old backups from local\n<span class=\"hljs-attr\">  delegate_to:</span> localhost\n<span class=\"hljs-attr\">  file:</span>\n<span class=\"hljs-attr\">    path:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ dest_path }}</span>/<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ inventory_hostname }}</span>\"</span>\n<span class=\"hljs-attr\">    state:</span> absent\n\n<span class=\"hljs-attr\">- name:</span> Generate new Citrix ADC system backup\n<span class=\"hljs-attr\">  delegate_to:</span> localhost\n<span class=\"hljs-attr\">  command:</span> ssh -l backuper {{ inventory_hostname }} <span class=\"hljs-string\" style=\"color: #6a8759;\">\"create system backup -level full <span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ backup_file }}</span>\"</span>\n<span class=\"hljs-attr\">  register:</span> command_result\n<span class=\"hljs-attr\">  failed_when:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"'Resource already exists' in command_result.stdout\"</span>\n\n<span class=\"hljs-attr\">- name:</span> Create new empty directory\n<span class=\"hljs-attr\">  delegate_to:</span> localhost\n<span class=\"hljs-attr\">  file:</span>\n<span class=\"hljs-attr\">    path:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ dest_path }}</span>/<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ inventory_hostname }}</span>\"</span>\n<span class=\"hljs-attr\">    state:</span> directory\n<span class=\"hljs-attr\">    mode:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">'0755'</span>\n\n<span class=\"hljs-attr\">- name:</span> Download backup file from Citrix ADC to local folder\n<span class=\"hljs-attr\">  delegate_to:</span> localhost\n<span class=\"hljs-attr\">  command:</span> /bin/scp backuper@{{ inventory_hostname }}:/var/ns_sys_backup/{{ backup_file }}.tgz {{ dest_path }}/{{ inventory_hostname }}/{{ backup_file }}.tgz\n\n<span class=\"hljs-attr\">- name:</span> delete backup from ADC\n<span class=\"hljs-attr\">  delegate_to:</span> localhost\n<span class=\"hljs-attr\">  command:</span> ssh -l backuper {{ inventory_hostname }} <span class=\"hljs-string\" style=\"color: #6a8759;\">\"rm backup <span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ backup_file }}</span>.tgz\"</span></pre>\n<p>der Inhalt der <code>vars/main.yaml</code> Datei ist wiefolgt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-meta\" style=\"color: #bbb529;\">---</span>\n<span class=\"hljs-comment\" style=\"color: grey;\"># yamllint disable rule:line-length</span>\n\n<span class=\"hljs-attr\">dest_path:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"/var/git/ndcb-data\"</span>\n<span class=\"hljs-attr\">backup_file:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"backup_full_<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ inventory_hostname }}</span>_<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ lookup('pipe','date +%Y-%m-%d-%H') }}</span>\"<br></span></pre>\n<h2 id=\"mcetoc_1g7f244jrld\">Secrets</h2>\n<p>Was noch fehlt sind die Secrets. Wir werden jedoch in diesem Fall gar keine Secrets verwenden, sondern direkt mit SSH-Key Authentifizieren. Dazu mussst du auf deinem Gerät einen neues SSH-Key Pair generieren und anschliessend wie folgt auf den Citrix ADCs als <em>authorized keys</em> erlauben:</p>\n<ol>\n<li>Auf ADCs einloggen und unter diesem Pfad dein PublicKey eintragen: /nsconfig/ssh/authorized_keys :\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">ssh-rsa AAAAB3NzaC1.....</pre>\n</li>\n<li>Anschliessend kannst du den Citrix ADC Host neustarten (z.b. wenn er nur im Seconday Mode ist), noch einfacher ist, wenn du einfach den sshd Service neustartest, was auf dem Citrix ADC relativ brachial ist:\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-built_in\">kill</span> -HUP `cat /var/run/sshd.pid`</pre>\n</li>\n</ol>\n<h2 id=\"mcetoc_1g7f244jrle\">Run</h2>\n<p>Das Playbook kann nun wiefolgt ausgeführt werden:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">ansible-playbook playbook.yaml -i inventory.yaml</pre>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "tools",
                   "ssh",
                   "infrastructure as code",
                   "iac",
                   "citrix netscaler",
                   "citrix adc",
                   "ansible"
            ],
            "date_published": "2022-07-08T15:47:31+02:00",
            "date_modified": "2022-07-08T16:13:45+02:00"
        },
        {
            "id": "https://www.finecloud.ch/jvm-und-jdk-unter-der-haube.html",
            "url": "https://www.finecloud.ch/jvm-und-jdk-unter-der-haube.html",
            "title": "JVM und JDK unter der Haube",
            "summary": "Woher lädt Java eigentlich seine JDK Klassen? Beim Start einer Applikation kann mit -cp ein Klassenpfad angegeben werden, in welchem sich Klassen befinden, die man verwenden möchte. Das ist das normale Vorgehen, wie man Klassen integriert. Doch woher hat das JDK seine eigenen Klassen? Um&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g7bnagbudlj\">Woher lädt Java eigentlich seine JDK Klassen?</a></li>\n<li><a href=\"#mcetoc_1g7bnagbudlk\">Kann man durch eine eigene java.lang.Integer Klasse die Integer JDK Klasse ersetzen?</a></li>\n<li><a href=\"#mcetoc_1g7bnagbudll\">Garbage Collection</a></li>\n<li><a href=\"#mcetoc_1g7bnagbudlm\">Speicherlecks</a></li>\n<li><a href=\"#mcetoc_1g7bnagbudln\">Weiche und schwache Referenzen</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g7bnagbudlj\">Woher lädt Java eigentlich seine JDK Klassen?</h2>\n<p>Beim Start einer Applikation kann mit -cp ein Klassenpfad angegeben werden, in welchem sich Klassen befinden, die man verwenden möchte. Das ist das normale Vorgehen, wie man Klassen integriert. Doch woher hat das JDK seine eigenen Klassen?</p>\n<p>Um das zu verstehen müssen wir uns zuerst mit dem Classloader befassen. Classloader sind selbst Java-Objekte mit denen man interagieren kann. Es gibt grundsätzlich mindestens drei Classloader:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/46/classloader.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/46/responsive/classloader-xs.png 300w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-sm.png 480w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-md.png 768w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-lg.png 1024w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-xl.png 1360w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-2xl.png 1600w\"  alt=\"\" width=\"311\" height=\"391\"></figure>\n<ul>\n<li><em>Bootstrap-Classloader</em>: lädt die JDK-Klassen</li>\n<li><em>Extension-Classloader</em>: lädt Klassen, die in Javas Erweiterungsverzeichnis liegen. In diesem selten genutzten Verzeichnis können Erweiterungen des JDKs abgelegt werden, die jeder Anwendung zur Verfügung stehen, ohne dass sie sie in den eigenen Klassenpfad aufnehmen müsste. Der Default ist das Erweiterungsverzeichnis im Java-Installationsverzeichnis unter lib/ext zu finden.</li>\n<li><em>System-Classpath-Classloader</em>: Der Classloader der Anwendung. Er lädt die Klassen welche mit -cp im angegebenen Verzeichnis liegen.</li>\n</ul>\n<h2 id=\"mcetoc_1g7bnagbudlk\">Kann man durch eine eigene java.lang.Integer Klasse die Integer JDK Klasse ersetzen?</h2>\n<p>Diese drei Klassloader stehen in einer hierarchischen Beziehung miteinander. Wenn man nun in seiner Applikation Klassen lädt, geschieht das immer mit dem System-Classpath-Classloader. Im ersten Schritt fragt jeder Classloader bei seinem übergeordneten Classsloader nach, ob dieser die Klasse laden kann. Diese Reihenfolge ist extrem wichtig, denn sie privilegiert die JDK Klassen. Eine Klasse, die dem Bootstrap-Classloader bekannt ist, kann deshalb niemals durch eine andere Klasse desselben Namens verdrängt werden. Etwas komplizierter ist das bei den Serverlet-Container.</p>\n<h2 id=\"mcetoc_1g7bnagbudll\">Garbage Collection</h2>\n<p>Jedes erzeugte Java-Objekt belegt Speicher und der JVM steht nur eine begrenzte Speichermenge zur Verfügung. Es muss also eine Möglichkeit geben, Objekte wieder aus dem Speicher zu entfernen, wenn diese nicht mehr benötigt werden. Ansonsten wird jede Java-Anwendung irgendwann mit einem <em>OutOfMemoryError</em> beendet. Dieser Mechanismus nennt sich Garbage Collection.</p>\n<p>Andere systemnähere Programmiersprachen haben keinen solchen Mechanismus und überlassen diese Aufgabe dem Entwickler selbst. Viele moderne Sprachen bieten mittlerweile eine automatische Garbage Collection an, aber Java war eine der ersten mit diesem Feature.</p>\n<p>Welche Objekte nicht mehr verwendet werden, findet der Garbage Collector heraus, indem er Referenzen untersucht. Dazu geht er von den Garbage Collection Roots aus und folgt allen Referenzen von diesen Objekten aus. Alle Objekte, die von einer Root referenziert werden, werden als noch aktiv markiert. Objekte, die von diesen Objekten aus referenziert werden, werden ebenfalls markiert usw. Garbage Collection Roots können Class-Objekte, lebende Threads, Lokale Variablen und Parameter, Monitor-Objekte, JNI-Variablen und spezielle JVM-Objekte sein. Rekursiv werden so alle Objekte markiert, die von einer Garbage Collection Root direkt oder indirekt erreichbar sind. Anschliessend werden alle Objekte die nicht von einer Root aus erreichbar sind aus dem Speichern entfernt. Dieses Vorgehen nennt sich <em>Mark and Sweep Collection</em>. Die echten Abläufe der Garbage Collection sind noch etwas komplexer als hier beschrieben.</p>\n<h2 id=\"mcetoc_1g7bnagbudlm\">Speicherlecks</h2>\n<p>Speicherlecks in Java kommen fast immer daher, dass man Objekte mit einer der Garbage Collection Roots verbinden und nicht wieder von dort entfernen. Am häufigsten passiert das mit statischen Variablen. Es ist leicht zu vergessen, dass ihr Inhalt nicht von selbst aus dem Speicher entfernt wird, im Unterschied zu Instanzvariablen. So kann man unbeabsichtigt viel Speicher belegen, indem man ein grosses Objekt in einer statischen Variablen hält, obwohl es bereits nicht mehr benötigt wird. Dabei handelt es sich aber nicht um ein Speicherleck, denn der belegte Speicher bleibt konstant und wächst mit der Zeit nicht mehr an. Ein echtes Speicherleck kann dadurch entstehen, dass man eine Collection in einem statischen Feld hält, der immer weiter Objekte hinzugefügt werden:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> class <span class=\"hljs-title\" style=\"color: #ffc66d;\">Speicherleck</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">private</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">final</span> Map&lt;String, Speicherleck&gt; cache = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> HashMap&lt;&gt;();\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">private</span> String name;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Speicherleck</span><span class=\"hljs-params\">(String name)</span></span>{\n        <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name = name;\n        cache.put(name, <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>);\n    }\n}</pre>\n<p>Jede Instanz der Klasse Speicherleck, die jemals erzeugt wird, wird in der statischen map cache gespeichert, aber nie wieder von dort entfernt. Das führt dazu, dass keine Instanz von Speicherleck jemals vom Garbage Collector entsorg werden kann, denn alle Instanzen werden von einem statischen Feld referenziert. Es kann natürlich sein, dass Sie diese Objekte wirklich noch brauchen, aber häufiger handelt es sich bei solchen Konstrukten um einen Fehler.</p>\n<p>Weitere Quellen für Speicherlecks in Java sind ThreadLocals, Variablen, die direkt mit einem Thread verbunden sind. Die genauen Mechanismen, wie es zu einem Speicherleck kommen kann, sind sehr ähnlich wie bei statischen Feldern: Solange der Thread lebendig ist, kann der Inhalt eines ThreadLocal nicht aus dem Speicher entfernt werden. Eine wachsende Collection dort hat deshalb denselben zerstörerischen Effekt wie in einem Statischen Feld.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "java",
                   "dev",
                   "classloader"
            ],
            "date_published": "2022-07-07T08:17:18+02:00",
            "date_modified": "2022-07-07T09:04:56+02:00"
        },
        {
            "id": "https://www.finecloud.ch/guis-mit-javafx.html",
            "url": "https://www.finecloud.ch/guis-mit-javafx.html",
            "title": "GUIs mit JavaFX",
            "summary": "Einführung JavaFX ist das modernste in der Java SE integrierte GUI-Framework zum Erstellen grafischer Benutzeroberflächen (GUI: Graphical User Interface). JavaFX ist eine reine Java-Bibliothek, die zwar, auch deklarative Definitionen von GUIs über XML ermöglicht, die aber im Kern aus Java-Klassen besteht. Seit Java 8 liegt&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g72m7p9tbq6\">Einführung</a></li>\n<li><a href=\"#mcetoc_1g72m7p9tbq7\">Installation</a>\n<ul>\n<li><a href=\"#mcetoc_1g72m7p9tbq8\">VSCode</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1g72m7p9tbq9\">Architektur von JavaFX</a>\n<ul>\n<li><a href=\"#mcetoc_1g72m7p9tbqa\">Stage</a></li>\n<li><a href=\"#mcetoc_1g72m7p9tbqb\">Scene</a></li>\n<li><a href=\"#mcetoc_1g72no33dbv0\">Node Typen</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1g72no33dbv1\">GUI Komponenten</a>\n<ul>\n<li><a href=\"#mcetoc_1g72no33dbv2\">Beschriftungen</a></li>\n<li><a href=\"#mcetoc_1g72no33dbv3\">Schaltflächen</a>\n<ul>\n<li><a href=\"#mcetoc_1g775qiifdbg\">Buttons</a></li>\n<li><a href=\"#mcetoc_1g775qiifdbh\">Radiobuttons</a></li>\n<li><a href=\"#mcetoc_1g775qiifdbi\">Toggle-Buttons</a></li>\n<li><a href=\"#u16.4.3\">Checkboxen </a></li>\n<li><a href=\"#u16.4.3\">Choiceboxen</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1g72no33dbv4\">Eingabefelder</a></li>\n<li><a href=\"#mcetoc_1g775qiifdbj\">Menüs</a></li>\n<li><a href=\"#mcetoc_1g775qiifdbk\">Weitere Standardkomponenten</a></li>\n<li><a href=\"#u16.4.7\">Geometrische Komponenten</a></li>\n<li><a href=\"#mcetoc_1g775qiifdbl\">Diagramme</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g72m7p9tbq6\">Einführung</h2>\n<p>JavaFX ist das modernste in der Java SE integrierte GUI-Framework zum Erstellen grafischer Benutzeroberflächen (<span class=\"italic\">GUI: Graphical User Interface</span>). JavaFX ist eine reine Java-Bibliothek, die zwar, auch deklarative Definitionen von GUIs über XML ermöglicht, die aber im Kern aus Java-Klassen besteht.</p>\n<h2 id=\"mcetoc_1g72m7p9tbq7\">Installation</h2>\n<p class=\"standard\">Seit Java 8 liegt das JavaFX-SDK dem JDK bei. Allerdings kann es sein, dass Sie die JavaFX-Bibliothek explizit dem Klassenpfad hinzufügen müssen. Zu finden ist die entsprechende JAR-Datei unter <span class=\"italic\">&lt;JRE_HOME&gt;/lib/ext/jfxrt.jar</span>, wobei <span class=\"italic\">&lt;JRE_HOME&gt;</span> für das root-Verzeichnis Ihrer JRE-Installation steht.</p>\n<p class=\"standard\">Die Versionsnummer von JavaFX ist seit Java/JavaFX 8 an die Version von Java angepasst.</p>\n<h3 id=\"mcetoc_1g72m7p9tbq8\">VSCode</h3>\n<p>Damit man JavaFX in VSCode nutzen kann, müssen wir uns JavaFX zuerst <a href=\"https://gluonhq.com/products/javafx/\" rel=\"nofollow\">von hier</a> herunterladen. Anschliessend entpacken wir die Archivdatei.</p>\n<p>In unserem VSCode Java Projekt müssen wir nun die JavaFX Libs einbinden: Um JavaFX als Abhängigkeiten zum Projekt hinzuzufügen, kann man einfach alle JAR-Dateien aus dem lib-Ordner des heruntergeladenen JavaFX-SDK kopieren, zum Beispiel /Users/your-user/Downloads/javafx-sdk-18.0.2/lib/ in die lib-Ordner Ihres Projekts. Alternativ kann man auch über den Java Projects Explorer hinzufügen. Dazu klickt man auf die Schaltfläche + neben den referenzierten Bibliotheken und wählt die JARs der JavaFX-Bibliothek aus, um sie hinzuzufügen.</p>\n<p>Als letzter Schritt müssen wir VSCode beibringen, dass wir das Java Programm mit Parameter an die Java VM übergeben und ausführen wollen. Dazu erstellen wir in unserem Projekt im Ordner <code>.vscode</code> eine Datei namens <code>launch.json</code> mit dem folgenden Inhalt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=<span class=\"hljs-number\" style=\"color: #6897bb;\">830387</span>\n    <span class=\"hljs-string\" style=\"color: #6a8759;\">\"version\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"0.2.0\"</span>,\n    <span class=\"hljs-attr\">\"configurations\"</span>: [\n        {\n            <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"java\"</span>,\n            <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Launch BeispielAnwendung\"</span>,\n            <span class=\"hljs-attr\">\"request\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"launch\"</span>,\n            <span class=\"hljs-attr\">\"mainClass\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"app.Kap16.BeispielAnwendung\"</span>,\n            <span class=\"hljs-attr\">\"projectName\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"labproject_3808de47\"</span>,\n            <span class=\"hljs-attr\">\"vmArgs\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"--module-path /Users/Dave/Downloads/javafx-sdk-18.0.1/lib/ --add-modules javafx.controls,javafx.fxml\"</span>\n        }\n}</pre>\n<p>Entscheidend ist die Angabe der <code>vmArgs</code>. Eine detailliertere Anleitung ist <a href=\"https://openjfx.io/openjfx-docs/#install-javafx\" rel=\"nofollow\">hier</a> zu finden.</p>\n<h2 id=\"mcetoc_1g72m7p9tbq9\">Architektur von JavaFX</h2>\n<p>Am einfachsten wir schauen uns zuerst ein Beispiel an:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">package</span> app.Kap16;\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">import</span> javafx.application.Application;\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">import</span> javafx.stage.Stage;\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">import</span> javafx.scene.Scene;\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">import</span> javafx.scene.control.Button;\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">import</span> javafx.scene.layout.BorderPane;\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">BeispielAnwendung</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">extends</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Application</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        launch(args);\n   }\n\n    <span class=\"hljs-meta\" style=\"color: #bbb529;\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">start</span><span class=\"hljs-params\">(Stage stage)</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">throws</span> Exception </span>{\n        stage.setTitle(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Beispielanwendung\"</span>);\n            Button button = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Button();\n            button.setText(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Klick mich\"</span>);\n            BorderPane root = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> BorderPane();\n            root.setCenter(button);\n            Scene scene = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Scene(root, <span class=\"hljs-number\" style=\"color: #6897bb;\">300</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">250</span>);\n            stage.setScene(scene);\n            stage.show();\n        }\n}</pre>\n<p>Die Ausgabe bei der Ausführung:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-03-at-20.39.58.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-2xl.png 1600w\"  alt=\"\" width=\"333\" height=\"310\"></figure>\n<h3 id=\"mcetoc_1g72m7p9tbqa\">Stage</h3>\n<p>Der Einstiegspunkt jeder JavaFX-Anwendung ist die javafx.application.Application Klasse. Application repräsentiert die Anwendungsklasse und stellt ein Fenster mit Rahmen, Systemmenü und Standardschaltflächen zur Verfügung. Die einzige Methode, die dabei überschrieben werden muss, ist die Methode start(), die als Parameter ein Objekt vom Typ javafx.stage.Stage übergeben bekommt.<br><br>Stage bildet an dieser Stelle das Hauptfenster der Anwendung, das alle weiteren Komponenten enthält. Die Methode start() dient dazu, den Inhalt dieses Fensters zu definieren. Um die Anwendung zu starten, reicht es, in der main-Methode die statische Methode launch() aufzurufen, die von Application bereitgestellt wird. Ausserdem darf man nicht vergessen, die Methode show() an dem Stage-Objekt aufzurufen, sonst wird das entsprechende Fenster gar nicht angezeigt.</p>\n<h3 id=\"mcetoc_1g72m7p9tbqb\">Scene</h3>\n<p>Über einzelne Scenes (Instanzen der Klasse javax.scene.Scene) wird definiert, welche Komponenten in einer Anwendung dargestellt werden. Innerhalb einer Scene werden die einzelnen Komponenten als Knoten (nodes) in einer Baumstruktur verwaltet, dem sogenannten Scene Graph. Nodes können ihrerseits mehrere andere Nodes als Kindelemente enthalten, aber nur ein Elternelement haben. Bei Nodes mit Kindelementen spricht man von Branch Nodes, bei Nodes ohne Kindelemente von Leaf Nodes.</p>\n<h3 id=\"mcetoc_1g72no33dbv0\">Node Typen</h3>\n<p>Die Basisklasse für alle Scene Graph Elemente bildet die Klasse javafx.scene.Node. Ihr folgt eine ganze Hierarchie an Unterklassen. Diese lassen sich in fünf Hauptkategorien unterteilen:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/ClassNode.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/ClassNode-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-2xl.png 1600w\"  alt=\"\" width=\"684\" height=\"216\"></figure>\n<ul>\n<li>Parent: alle Nodes, die Kindelemente haben können</li>\n<li>Canvas: Grafikoperationen, mit der sogenannten Canvas-API kann man zweidimensionale Grafiken zeichnen</li>\n<li>Shape: Oberklasse verschiedener geometrischer Formen</li>\n<li>ImageView: Darstellung von Bildern</li>\n<li>MediaView: Integration von Audio- und Videokomponenten</li>\n</ul>\n<h2 id=\"mcetoc_1g72no33dbv1\">GUI Komponenten</h2>\n<h3 id=\"mcetoc_1g72no33dbv2\">Beschriftungen</h3>\n<p>Die Klasse javafx.scene.control wird verwendet um Beschriftungen zu GUI Elementen benötigt werden. Den Text der Beschriftung setzen Sie dabei entweder über den Konstruktor oder über die Methode setText():</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">Label label = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Label(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Beschriftung\"</span>);</pre>\n<h3 id=\"mcetoc_1g72no33dbv3\">Schaltflächen</h3>\n<h4 id=\"mcetoc_1g775qiifdbg\">Buttons</h4>\n<p>Buttons bezeichnen einfache Schaltflächen. Repräsentiert werden Buttons durch die Klasse Button. Eine einfache Schaltfläche lässt sich folgendermassen erzeugen (gleiches Ergebnis wie oben):</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">Button button = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Button(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Klick mich\"</span>);</pre>\n<h4 id=\"mcetoc_1g775qiifdbh\">Radiobuttons</h4>\n<p>Radiobuttons eignen sich gut für Entweder-oder-Auswahlen. Repräsentiert werden Radiobuttons durch die Klasse RadioButton. Mit Hilfe der Klasse ToggleGroup können (und sollten) die einzelnen Radiobuttons ausserdem in Gruppen zusammengefasst werden. Innerhalb einer solchen Gruppe ist dann sichergestellt, dass jeweils nur ein Radiobutton ausgewählt werden kann. Über setSelected() lässt sich zudem der Radiobutton bestimmen, der (vor)selektiert werden soll. Im folgenden Beispiel wird eine ToggleGroup mit drei Radiobuttons erstellt, von denen der Radiobutton mit der Aufschrift Gelb vorselektiert ist:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">            ToggleGroup group = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> ToggleGroup();\n            RadioButton radioButton1 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> RadioButton(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Gelb\"</span>);\n            radioButton1.setToggleGroup(group);\n            radioButton1.setSelected(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">true</span>);\n            RadioButton radioButton2 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> RadioButton(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Blau\"</span>);\n            radioButton2.setToggleGroup(group);\n            RadioButton radioButton3 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> RadioButton(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Grün\"</span>);\n            radioButton3.setToggleGroup(group);</pre>\n<figure class=\"post__image\"><br><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-06.32.10.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-2xl.png 1600w\"  alt=\"\" width=\"427\" height=\"94\"></figure>\n<h4 id=\"mcetoc_1g775qiifdbi\">Toggle-Buttons</h4>\n<p>Toggle-Buttons (Klasse ToggleButton) eignen sich gut, wenn Sie eine Schaltfläche benötigen, die zwei Zustände darstellen kann (beispielsweise »An« und »Aus«). Über die Methode setSelected(), die einen booleschen Wert entgegennimmt, können Sie dabei zwischen beiden Zuständen wechseln und über isSelected() den aktuellen Zustand ermitteln. Wie Radiobuttons können auch Toggle-Buttons innerhalb einer Gruppe definiert werden. Im Unterschied zu Radiobuttons, bei denen immer genau einer der Buttons ausgewählt ist, ist es bei Toggle-Buttons also innerhalb einer Gruppe nicht zwingend notwendig, dass überhaupt ein Button ausgewählt ist. Standardmässig ist jedoch der erste Button einer Gruppe vorausgewählt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">            ToggleGroup group2 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> ToggleGroup();\n            ToggleButton toggleButtonOne = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> ToggleButton(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Option1\"</span>);\n            toggleButtonOne.setToggleGroup(group2);\n            toggleButtonOne.setSelected(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">true</span>);\n            ToggleButton toggleButtonTwo = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> ToggleButton(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Option2\"</span>);\n            toggleButtonTwo.setToggleGroup(group2);\n            ToggleButton toggleButtonThree = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> ToggleButton(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Option3\"</span>);\n            toggleButtonThree.setToggleGroup(group2);</pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-06.44.26.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-2xl.png 1600w\"  alt=\"\" width=\"423\" height=\"93\"></figure>\n<h4 id=\"u16.4.3\">Checkboxen </h4>\n<p>Checkboxen (Klasse CheckBox) bezeichnen Kästchen, über die bestimmte Auswahlen getroffen werden können. Ob eine Checkbox selektiert ist oder nicht, kann programmatisch über die Methode setSelected() bestimmt werden. Des Weiteren kann eine Checkbox über setIndeterminate() als »definiert« oder als »undefiniert« markiert werden. Beide Methoden erwarten jeweils einen booleschen Wert, in der Kombination ergeben sich so insgesamt drei (sichtbare) verschiedene Zustände pro Checkbox:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">            CheckBox checkBox1 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> CheckBox(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Option1\"</span>);\n            checkBox1.setSelected(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">false</span>);\n            CheckBox checkBox2 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> CheckBox(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Option2\"</span>);\n            checkBox2.setSelected(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">true</span>);\n            CheckBox checkBox3 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> CheckBox(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Option3\"</span>);\n            checkBox3.setSelected(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">true</span>);\n            checkBox3.setIndeterminate(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">true</span>);</pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-06.50.34.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-2xl.png 1600w\"  alt=\"\" width=\"386\" height=\"85\"></figure>\n<h4 id=\"u16.4.3\">Choiceboxen</h4>\n<p>Bei einer Choicebox handelt es sich um eine Aufklappliste, aus der genau ein Wert ausgewählt werden kann. Choiceboxen werden durch die Klasse ChoiceBox repräsentiert. Zu beachten ist dabei, dass die einzelnen Elemente, die ausgewählt werden können, über die Methode setItems() in Form einer ObservableList hinzugefügt werden müssen. Eine ObservableList unterscheidet sich von normalen Listen, darin, dass Änderungen an einer solchen Liste von der jeweiligen GUI-Komponente wahrgenommen werden und sich direkt auf die grafische Darstellung auswirken. Eine solche ObservableList erzeugen Sie beispielsweise wie in folgendem Listing über die Helferklasse FXCollections:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">            ChoiceBox&lt;String&gt; choiceBox = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> ChoiceBox&lt;String&gt;();\n            ObservableList&lt;String&gt; farben = FXCollections.observableArrayList(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Rot\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Blau\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Grün\"</span>);\n            choiceBox.setItems(farben);\n            farben.add(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Orange\"</span>);</pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-06.57.00.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-2xl.png 1600w\"  alt=\"\" width=\"370\" height=\"217\"></figure><br><br>Zunächst wird hierbei eine ObservableList mit den Werten \"Rot\", \"Blau\" und \"Grün\" angelegt, dann über setItems() der Choicebox hinzugefügt und anschliessend um ein weiteres Element (\"Orange\") ergänzt. Diese Änderung wirkt sich direkt auf die Choicebox aus: Es stehen anschliessend vier Werte in der Choicebox zur Verfügung.</p>\n<h3 id=\"mcetoc_1g72no33dbv4\">Eingabefelder</h3>\n<p>Neben Schaltflächen, über die in der Regel bestimmte Aktionen ausgelöst oder Selektionen getroffen werden, benötigen Sie ausserdem Komponenten, über die die Nutzer Eingaben tätigen können. Dazu zählen unter anderem einzeilige Textfelder, Passwortfelder oder mehrzeilige Textfelder. Textfelder und Passwortfelder sehen auf den ersten Blick gleich aus und verfügen auch über ähnliche Methoden. Das wundert wenig, da PasswordField eine Subklasse von TextField ist. Der einzige sichtbare Unterschied ist, dass jedes Textzeichen, das Sie eingeben, bei einem Passwortfeld durch ein Bullet-Symbol auf dem Bildschirm dargestellt wird:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">            TextField text = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> TextField();\n            text.setPromptText(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Benutzername\"</span>);\n            PasswordField password = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> PasswordField();\n            password.setPromptText(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Passwort\"</span>);</pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-07.37.47.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-2xl.png 1600w\"  alt=\"\" width=\"369\" height=\"91\"></figure>\n<p>Ausserdem ist es bei einer Instanz von PasswordField im Gegensatz zu reinen TextField-Instanzen nicht möglich, den Text aus dem Feld zu kopieren oder auszuschneiden: Die Methoden copy() und cut() funktionieren hier nicht.</p>\n<p>Für mehrzeilige Textfelder kann die Klasse TextArea verwendet werden.</p>\n<h3 id=\"mcetoc_1g775qiifdbj\">Menüs</h3>\n<p>Für das Erstellen von Menüs kommen mehrere Klassen zum Einsatz: Das Menü selbst wird mit Hilfe der Klasse Menu dargestellt, die einzelnen Menüeinträge durch die Klasse MenuItem. Hier gibt es beispielsweise die Sonderformen CheckMenuItem und RadioMenuItem, die jeweils über eine Checkbox respektive einen Radiobutton verfügen. Da Menu selbst auch eine Unterklasse von MenuItem ist, lassen sich Menüs zudem auf sehr einfache Weise schachteln.</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">            MenuBar menuBar = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> MenuBar();\n            Menu menu = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Menu(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Datei\"</span>);\n            MenuItem menuItem = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> MenuItem(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Neu\"</span>);\n            CheckMenuItem checkMenuItem = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> CheckMenuItem(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Auswahl\"</span>);\n            menu.getItems().add(menuItem);\n            menu.getItems().add(checkMenuItem);\n            menuBar.getMenus().add(menu);</pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-05-at-14.30.06.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-2xl.png 1600w\"  alt=\"\" width=\"339\" height=\"137\"></figure>\n<h3 id=\"mcetoc_1g775qiifdbk\">Weitere Standardkomponenten</h3>\n<p>Weitere Komponenten sind <a href=\"https://docs.oracle.com/javafx/2/api/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hier</a> zu finden.</p>\n<h3 id=\"u16.4.7\" class=\"t3\">Geometrische Komponenten</h3>\n<p>Im Paket javafx.scene.shape findet man eine ganze Reihe geometrischer Formen wie Kreise (Klasse Circle), Pfade (Klasse Path), Rechtecke (Klasse Rectangle), Ellipsen (Klasse Ellipse) und einfachen Text (Klasse Text).</p>\n<h3 id=\"mcetoc_1g775qiifdbl\">Diagramme</h3>\n<p>Im JavaFX-SDK sind verschiedene Diagrammformen enthalten (Paket javafx.scene.chart). Diese reichen von einfachen Balkendiagrammen (BarChart) und Tortendiagrammen (PieChart) über Liniendiagramme (LineChart) bis hin zu spezielleren Diagrammformen wie BubbleChart, ScatterChart und AreaChart.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "vscode",
                   "softwareentwicklung",
                   "javafx",
                   "java",
                   "gui",
                   "dev"
            ],
            "date_published": "2022-07-05T14:37:31+02:00",
            "date_modified": "2022-07-05T14:38:13+02:00"
        },
        {
            "id": "https://www.finecloud.ch/kubernetes-auf-proxmox-mit-ansible-und-terraform-teil-2.html",
            "url": "https://www.finecloud.ch/kubernetes-auf-proxmox-mit-ansible-und-terraform-teil-2.html",
            "title": "Kubernetes auf Proxmox mit Ansible und Terraform (Teil 2)",
            "summary": "Dieser Post wurde aus dem Original (https://datastrophic.io/kubernetes-homelab-with-proxmox-kubeadm-calico-openebs-and-metallb/)auf Deutsch übersetzt und leicht angepasst. Nachdem wir im ersten Teil mit Terraform die VMs für unseren K8s Cluster deployed haben, werden wir nun mit Ansible die folgenden K8s Komponenten in den worker Nodes und dem Controller installieren: Die&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g6umq8onb0g\">Einleitung</a></li>\n<li><a href=\"#mcetoc_1g6umq8onb0h\">Voraussetzungen</a></li>\n<li><a href=\"#mcetoc_1g6umq8onb0i\">Vorbereitungen</a></li>\n<li><a href=\"#mcetoc_1g6uqq0ncb8i\">Notwendige Software</a>\n<ul>\n<li><a href=\"#mcetoc_1g6uqq0ncb8j\">Volume Provisioning mit OpenEBS</a></li>\n<li><a href=\"#mcetoc_1g6uqq0ncb8k\">LoadBalancer mit MetalLB</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1g6uqq0ncb8l\">Installation überprüfen</a></li>\n<li><a href=\"#kubernetes-dashboard\">Kubernetes Dashboard</a></li>\n</ul>\n</div>\n<p>Dieser Post wurde aus dem Original (<a href=\"https://datastrophic.io/kubernetes-homelab-with-proxmox-kubeadm-calico-openebs-and-metallb/\">https://datastrophic.io/kubernetes-homelab-with-proxmox-kubeadm-calico-openebs-and-metallb/</a>)auf Deutsch übersetzt und leicht angepasst.</p>\n<h2 id=\"mcetoc_1g6umq8onb0g\">Einleitung</h2>\n<p>Nachdem wir im ersten Teil mit Terraform die VMs für unseren K8s Cluster deployed haben, werden wir nun mit Ansible die folgenden K8s Komponenten in den worker Nodes und dem Controller installieren:</p>\n<ul dir=\"auto\">\n<li><code>kubeadm</code> für das Kubernetes Cluster bootstrapping</li>\n<li><code>containerd</code> als container runtime</li>\n<li><code>Calico</code> für das Pod networking</li>\n<li><code>MetalLB</code>  verwenden wir als <code>LoadBalancer</code> service type</li>\n<li><code>OpenEBS</code> für das Volume provisioning</li>\n<li><code>Istio</code> für ingress und traffic management</li>\n</ul>\n<p>Die Kubernetes-Distribution der Wahl ist in diesem Fall Vanilla Open Source Kubernetes, das mit dem kubeadm-Tool für Cluster-Bootstrapping geliefert wird. Vanilla Kubernetes hat einen grösseren Fussabdruck im Vergleich zu k3s und eignet sich deshalb nicht gut für Umgebungen mit eingeschränkten Ressourcen. Es ist jedoch herstellerunabhängig und vollständig Open-Source, hat keine Modifikationen und sowohl die API-Änderungen als auch die Tools haben die gleiche Release-Kadenz, sodass das Risiko von Inkompatibilitäten oder Verzögerungen geringer ist.</p>\n<h2 id=\"mcetoc_1g6umq8onb0h\">Voraussetzungen</h2>\n<ul>\n<li>Cluster VMs sollten bereits provisioniert und erreichbar sein via SSH</li>\n<li>empfohlen ist Ubuntu 20.04 als Cluster OS zu verwenden</li>\n<li>der Benutzer (in unserem Fall <em>ubuntu</em>) sollte Superuser Berechtigungen haben auf den Cluster Nodes</li>\n<li>Ansible ist lokal bei dir installiert</li>\n</ul>\n<h2 id=\"mcetoc_1g6umq8onb0i\">Vorbereitungen</h2>\n<p class=\"msg--info msg\">Lade dir die Terraform und Ansible Files von <a href=\"https://github.com/datastrophic/kubernetes-deployment/tree/master/proxmox/\" rel=\"nofollow\">diesem Git Repo</a> herunter.</p>\n<p>Die Variablen in  <code>ansible/group_vars/all</code> sollten noch überprüft werden:</p>\n<div>\n<ul>\n<li><code>pod_subnet</code></li>\n<li><code>service_subnet</code></li>\n<li><code>dns</code></li>\n<li><code>metallb_address_range</code></li>\n</ul>\n</div>\n<p>Weiter musst du die IPs deiner VMs in dieser Datei nachtragen: <code>ansible/inventory.yaml</code></p>\n<p>Vor der Bereitstellung von Kubernetes selbst müssen die Cluster-Knoten zusätzlich konfiguriert und Software installiert werden:</p>\n<ul>\n<li>Knoten müssen Swap deaktiviert, iptables aktiviert haben und Weiterleitung und überbrückten Datenverkehr gemäss Bootstrapping-Clustern mit kubeadm zulassen.</li>\n<li>Auf den Knoten muss die Containerlaufzeit installiert sein. Die gängigste Containerlaufzeit, die in verschiedenen Cloud- und Anbieter-Kubernetes-Distributionen verwendet wird, ist containerd, also werden wir sie verwenden.</li>\n<li>Weitere Informationen darüber, warum wir Docker nicht verwenden werden, findest du in <a href=\"https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/\" rel=\"nofollow\">Don’t Panic: Kubernetes and Docker</a>.</li>\n<li>Auf Knoten müssen die folgenden Pakete installiert sein: kubelet, kubectl und kubeadm. Diese können über den Standard-Paketmanager wie apt installiert werden.</li>\n</ul>\n<p>Es gibt ein dediziertes Playbook zum Bootstrapping der Knoten mit allen erforderlichen Konfigurationen und Abhängigkeiten, die unter ansible/bootstrap.yaml verfügbar sind. Überprüfe die Standardeinstellungen und führe das Playbook wie folgt aus:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-section\" style=\"color: #ffc66d;\">#~$ ansible-playbook -i ansible/inventory.yaml ansible/bootstrap.yaml -u ubuntu</span>\n[<span class=\"hljs-symbol\" style=\"color: #6897bb;\">WARNING</span>]: <span class=\"hljs-link\" style=\"color: #629755;\">Invalid characters were found in group names but not replaced, use -vvvv to see details</span>\n\nPLAY [Bootstrapping hosts] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\n\nTASK [Gathering Facts] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>**\nok: [control-plane-0.k8s.cluster]\nok: [worker-1.k8s.cluster]\nok: [worker-0.k8s.cluster]\nok: [worker-2.k8s.cluster]\n\nTASK [commons : install common packages] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>*\nchanged: [control-plane-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\n\nTASK [commons : disable swap] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>\nchanged: [worker-2.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [commons : disable swap in fstab] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>*\nok: [worker-2.k8s.cluster]\nok: [control-plane-0.k8s.cluster]\nok: [worker-0.k8s.cluster]\nok: [worker-1.k8s.cluster]\n\nTASK [commons : enable br_netfilter] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\nchanged: [control-plane-0.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\n\nTASK [commons : ensure iptables enabled] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>*\nchanged: [worker-1.k8s.cluster]\nchanged: [control-plane-0.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\n\nTASK [commons : enable port forward] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\nchanged: [worker-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [container-runtime : create config and data dirs] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>\nchanged: [worker-2.k8s.cluster] =&gt; (item=/etc/containerd)\nchanged: [control-plane-0.k8s.cluster] =&gt; (item=/etc/containerd)\nchanged: [worker-1.k8s.cluster] =&gt; (item=/etc/containerd)\nchanged: [worker-0.k8s.cluster] =&gt; (item=/etc/containerd)\nchanged: [control-plane-0.k8s.cluster] =&gt; (item=/tmp/containerd)\nchanged: [worker-2.k8s.cluster] =&gt; (item=/tmp/containerd)\nchanged: [worker-1.k8s.cluster] =&gt; (item=/tmp/containerd)\nchanged: [worker-0.k8s.cluster] =&gt; (item=/tmp/containerd)\n\nTASK [container-runtime : download and install runc] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>**\nchanged: [worker-1.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\nchanged: [control-plane-0.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\n\nTASK [container-runtime : download and install crictl] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>\nchanged: [worker-1.k8s.cluster]\nchanged: [control-plane-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\n\nTASK [container-runtime : download containerd] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\nchanged: [worker-0.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\nchanged: [control-plane-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\n\nTASK [container-runtime : copy containerd binaries] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\nchanged: [control-plane-0.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\n\nTASK [container-runtime : copy containerd config] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>\nchanged: [control-plane-0.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\n\nTASK [container-runtime : create containerd systemd service] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>*\nchanged: [control-plane-0.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\n\nTASK [container-runtime : reload systemd] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\nok: [worker-1.k8s.cluster]\nok: [worker-0.k8s.cluster]\nok: [worker-2.k8s.cluster]\nok: [control-plane-0.k8s.cluster]\n\nTASK [container-runtime : enable containerd systemd service] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>*\nchanged: [control-plane-0.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\n\nTASK [container-runtime : start containerd service] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\nchanged: [worker-0.k8s.cluster]\nchanged: [control-plane-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\n\nTASK [kubernetes-packages : adding Kubernetes repository apt key] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>*\nchanged: [worker-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [kubernetes-packages : adding Kubernetes deb repository] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\nchanged: [worker-1.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [kubernetes-packages : installing Kubernetes packages] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>\nchanged: [control-plane-0.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\n\nTASK [kubernetes-packages : hold kubeadm, kubectl, kubelet] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>\nchanged: [worker-0.k8s.cluster] =&gt; (item=kubeadm)\nchanged: [worker-1.k8s.cluster] =&gt; (item=kubeadm)\nchanged: [control-plane-0.k8s.cluster] =&gt; (item=kubeadm)\nchanged: [worker-2.k8s.cluster] =&gt; (item=kubeadm)\nchanged: [worker-0.k8s.cluster] =&gt; (item=kubectl)\nchanged: [worker-1.k8s.cluster] =&gt; (item=kubectl)\nchanged: [worker-2.k8s.cluster] =&gt; (item=kubectl)\nchanged: [control-plane-0.k8s.cluster] =&gt; (item=kubectl)\nchanged: [worker-0.k8s.cluster] =&gt; (item=kubelet)\nchanged: [worker-1.k8s.cluster] =&gt; (item=kubelet)\nchanged: [worker-2.k8s.cluster] =&gt; (item=kubelet)\nchanged: [control-plane-0.k8s.cluster] =&gt; (item=kubelet)\n\nPLAY RECAP <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>*\ncontrol-plane-0.k8s.cluster : ok=21  changed=18  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 \nworker-0.k8s.cluster    : ok=21  changed=18  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 \nworker-1.k8s.cluster    : ok=21  changed=18  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 \nworker-2.k8s.cluster    : ok=21  changed=18  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 </pre>\n<p>Sobald alle Voraussetzungen erfüllt sind, können wir kubeadm für das Cluster-Bootstrapping verwenden. Die Installation des Kubernetes-Clusters besteht aus zwei Hauptschritten: Bootstrapping der Steuerungsebene und Joining zu den Worker-Knoten. Wir können dies tun, indem wir das Playbook ansible/kubernetes-install.yaml ausführen:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-section\" style=\"color: #ffc66d;\">#~$ ansible-playbook -i ansible/inventory.yaml ansible/kubernetes-install.yaml -u ubuntu</span>\n[<span class=\"hljs-symbol\" style=\"color: #6897bb;\">WARNING</span>]: <span class=\"hljs-link\" style=\"color: #629755;\">Invalid characters were found in group names but not replaced, use -vvvv to see details</span>\n\nPLAY [Bootstrap Kubernetes Control Plane] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\n\nTASK [Gathering Facts] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>**\nok: [control-plane-0.k8s.cluster]\n\nTASK [kubeadm-init : copy kubeadm init config] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [kubeadm-init : running kubeadm init] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>**\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [calico : copy Calico manifests] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>**\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [calico : install Calico] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>*\nchanged: [control-plane-0.k8s.cluster]\n\nPLAY [Retrieve join token and certificate hash] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>**\n\nTASK [Gathering Facts] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>**\nok: [control-plane-0.k8s.cluster]\n\nTASK [kubeadm-join-config : create local dir for token and cert hash] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>\nchanged: [control-plane-0.k8s.cluster -&gt; localhost]\n\nTASK [kubeadm-join-config : kubeadm token generate] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [kubeadm-join-config : generate cert hash] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>**\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [kubeadm-join-config : persist token locally] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>*\nchanged: [control-plane-0.k8s.cluster -&gt; localhost]\n\nTASK [kubeadm-join-config : persist cert hash locally] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>\nchanged: [control-plane-0.k8s.cluster -&gt; localhost]\n\nPLAY [Join Kubernetes worker nodes] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>*\n\nTASK [Gathering Facts] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>**\nok: [worker-1.k8s.cluster]\nok: [worker-2.k8s.cluster]\nok: [worker-0.k8s.cluster]\n\nTASK [kubeadm-join : copy kubeadm join config] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\nchanged: [worker-0.k8s.cluster]\nchanged: [worker-1.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\n\nTASK [kubeadm-join : running kubeadm join] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>**\nchanged: [worker-1.k8s.cluster]\nchanged: [worker-2.k8s.cluster]\nchanged: [worker-0.k8s.cluster]\n\nPLAY [Copy kubeconfig from remote] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>\n\nTASK [Gathering Facts] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>**\nok: [control-plane-0.k8s.cluster]\n\nTASK [fetching] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>*\nchanged: [control-plane-0.k8s.cluster]\n\nPLAY RECAP <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>*\ncontrol-plane-0.k8s.cluster : ok=13  changed=10  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 \nworker-0.k8s.cluster    : ok=3  changed=2  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 \nworker-1.k8s.cluster    : ok=3  changed=2  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 \nworker-2.k8s.cluster    : ok=3  changed=2  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 </pre>\n<p>Das Playbook führt kubeadm init auf den Knoten der Steuerungsebene aus und verwendet eine deklarative Clusterkonfiguration, die die bevorzugte Methode zum Konfigurieren von kubeadm ist. Die Konfigurationsvorlage ist unter ansible/roles/kubeadm-init/templates/kubeadm.yaml verfügbar. Sobald der Bootstrap der Steuerungsebene abgeschlossen ist, ruft Ansible ein Token und einen Zertifikat-Hash ab, die für die Authentifizierung der Worker-Knoten beim API-Server erforderlich sind, und führt kubeadm join auf den Worker-Knoten aus.<br><br>Das Playbook stellt Calico für die Clusternetzwerke bereit. Die Wahl von Calico ist motiviert, weil es die am weitesten verbreitete Netzwerk- und Sicherheitslösung für Kubernetes ist (zum Zeitpunkt des Schreibens).<br><br>Sobald die Playbook-Ausführung abgeschlossen ist, wird eine kubeconfig-Datei admin.conf in das aktuelle Verzeichnis geholt. Um zu überprüfen, ob der Cluster gebootet und verbunden ist, führe Folgendes aus:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">#~$  kubectl --kubeconfig=admin.conf get nodes</span>\nNAME                          STATUS   ROLES                  AGE     VERSION\ncontrol-plane-0.k8s.cluster   Ready    control-plane,master   3m30s   v1.21.6\nworker-0                      Ready    &lt;none&gt;                 2m54s   v1.21.6\nworker-1                      Ready    &lt;none&gt;                 2m55s   v1.21.6\nworker-2                      Ready    &lt;none&gt;                 2m55s   v1.21.6</pre>\n<blockquote>\n<p>es ist empfohlen die Location der admin.conf Datei als env. Variabel zu exportieren, damit man die Datei nicht jedesmal mit --kubeconfig mitgeben muss:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">export KUBECONFIG=<span class=\"hljs-variable\" style=\"color: #629755;\">$(pwd)</span>/<span class=\"hljs-literal\" style=\"color: #6897bb;\">admin</span>.conf</pre>\n</blockquote>\n<h2 id=\"mcetoc_1g6uqq0ncb8i\">Notwendige Software</h2>\n<p>Wenn der Kubernetes-Cluster eingerichtet und ausgeführt wird, können wir jetzt Container darauf bereitstellen und ausführen. Ein paar wesentliche Teile des voll funktionsfähigen Clusters fehlen jedoch noch: die dynamische Volume-Bereitstellung und die Unterstützung für Dienste welche einen LoadBalancer benötigen.</p>\n<h3 id=\"mcetoc_1g6uqq0ncb8j\">Volume Provisioning mit OpenEBS</h3>\n<p>Die Volume Provisioner-Lösung ist sowohl in Situationen nützlich, in denen Anwendungen von Drittanbietern eine Standard-StorageClass zum Bereitstellen von PersistentVolumes benötigen, als auch in Situationen, in denen eine Datenreplikation für Hochverfügbarkeitsgarantien erforderlich ist.<br><br>Die Verwendung von OpenEBS für das Home-Lab-Setup erscheint vernünftig, da es lokale Engines für die Bereitstellung von PersistentVolumes bereitstellt, die direkt von den lokalen Festplatten auf Hosts unterstützt werden. Wenn eine Datenreplikation erforderlich ist, verfügt OpenEBS über mehrere Replicated Engines, deren Leistung jedoch unterschiedlich ist.<br><br>Um eine minimale Installation mit hostlokalen PersistentVolumes bereitzustellen, bietet OpenEBS eine „Lite“-Version:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">#~$ kubectl apply -f https://openebs.github.io/charts/openebs-operator-lite.yaml</span>\nnamespace/openebs created\nserviceaccount/openebs-maya-operator created\nclusterrole.rbac.authorization.k8s.io/openebs-maya-operator created\nclusterrolebinding.rbac.authorization.k8s.io/openebs-maya-operator created\ncustomresourcedefinition.apiextensions.k8s.io/blockdevices.openebs.io created\ncustomresourcedefinition.apiextensions.k8s.io/blockdeviceclaims.openebs.io created\nconfigmap/openebs-ndm-config created\ndaemonset.apps/openebs-ndm created\ndeployment.apps/openebs-ndm-operator created\ndeployment.apps/openebs-ndm-cluster-exporter created\nservice/openebs-ndm-cluster-exporter-service created\ndaemonset.apps/openebs-ndm-node-exporter created\nservice/openebs-ndm-node-exporter-service created\ndeployment.apps/openebs-localpv-provisioner created</pre>\n<p>Sobald der Operator installiert ist, erstellen wir eine StorageClass und setzen diese als Standard. Das ermöglicht die Verwendung von OpenEBS für die Volume-Bereitstellung, ohne dass jedes Mal die StorageClass für PersistentVolumes angegeben werden muss:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~$ kubectl apply <span class=\"hljs-_\">-f</span> https://openebs.github.io/charts/openebs-operator-lite.yaml\nnamespace/openebs created\nserviceaccount/openebs-maya-operator created\nclusterrole.rbac.authorization.k8s.io/openebs-maya-operator created\nclusterrolebinding.rbac.authorization.k8s.io/openebs-maya-operator created\ncustomresourcedefinition.apiextensions.k8s.io/blockdevices.openebs.io created\ncustomresourcedefinition.apiextensions.k8s.io/blockdeviceclaims.openebs.io created\nconfigmap/openebs-ndm-config created\ndaemonset.apps/openebs-ndm created\ndeployment.apps/openebs-ndm-operator created\ndeployment.apps/openebs-ndm-cluster-exporter created\nservice/openebs-ndm-cluster-exporter-service created\ndaemonset.apps/openebs-ndm-node-exporter created\nservice/openebs-ndm-node-exporter-service created\ndeployment.apps/openebs-localpv-provisioner created\nDave@ChuckNorris[08:37:02]~/github/homelab$ kubectl apply <span class=\"hljs-_\">-f</span> - &lt;&lt;EOF\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: openebs-hostpath\n  annotations:\n    storageclass.kubernetes.io/is-default-class: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"true\"</span>\n    openebs.io/cas-type: <span class=\"hljs-built_in\">local</span>\n    cas.openebs.io/config: |\n      - name: StorageType\n        value: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"hostpath\"</span>\n      - name: BasePath\n        value: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"/var/openebs/local/\"</span>\nprovisioner: openebs.io/<span class=\"hljs-built_in\">local</span>\nvolumeBindingMode: WaitForFirstConsumer\nreclaimPolicy: Delete\nEOF\nstorageclass.storage.k8s.io/openebs-hostpath created</pre>\n<h3 id=\"mcetoc_1g6uqq0ncb8k\">LoadBalancer mit MetalLB</h3>\n<p>Eine letzte fehlende Funktionalität im bereitgestellten Cluster ist die Möglichkeit, Dienste vom Typ LoadBalancer für das lokale Netzwerk verfügbar zu machen. Bei der Ausführung in der Cloud wird diese Funktionalität von den Kubernetes-Integrationen mit Cloud-Anbietern bereitgestellt, und entsprechende netzwerkseitige Load Balancer werden über den Infrastrukturanbieter bereitgestellt. Bei der Ausführung auf Bare Metal ist eine solche Integration in Kubernetes standardmässig nicht verfügbar.<br><br>MetalLB ist die am weitesten verbreitete Lösung für den NetzwerkLB.<br><br>Die MetalLB-Installation wird über eine ConfigMap konfiguriert und kann mehrere Adresspools enthalten:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-attr\">apiVersion:</span> v1\n<span class=\"hljs-attr\">kind:</span> ConfigMap\n<span class=\"hljs-attr\">metadata:</span>\n<span class=\"hljs-attr\">  namespace:</span> metallb-system\n<span class=\"hljs-attr\">  name:</span> config\n<span class=\"hljs-attr\">data:</span>\n<span class=\"hljs-attr\">  config:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">|\n</span><span class=\"hljs-attr\">    address-pools:</span>\n<span class=\"hljs-attr\">    - name:</span> default\n<span class=\"hljs-attr\">      protocol:</span> layer2\n<span class=\"hljs-attr\">      addresses:</span>\n<span class=\"hljs-bullet\" style=\"color: #6897bb;\">      -</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ lab.metallb_address_range }}</span>\"</span> </pre>\n<p>Die obere Vorlage ist Teil des Ansible-Playbooks <code>ansible/metallb.yaml</code>, das die MetalLB installiert und konfiguriert, um Adressen aus der in <code>group_vars</code> angegebenen Variable <code>lab.metallb_address_range</code> zuzuweisen. Der Adressbereich muss für die Zielumgebung relevant sein (Teil des reservierten statischen Adressbereichs, der im Abschnitt zum Bereitstellungslayout beschrieben ist, damit die Adressen zugewiesen werden können. Um MetalLB zu installieren, führe Folgendes aus:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~$ ansible-playbook -i ansible/inventory.yaml ansible/metallb.yaml -u ubuntu\n[<span class=\"hljs-symbol\" style=\"color: #6897bb;\">WARNING</span>]: <span class=\"hljs-link\" style=\"color: #629755;\">Invalid characters were found in group names but not replaced, use -vvvv to see details</span>\n\nPLAY [Install MetalLB] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>\n\nTASK [Gathering Facts] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>\nok: [control-plane-0.k8s.cluster]\n\nTASK [metallb : copy MetalLB manifests] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [metallb : copy MetalLB config] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>*\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [metallb : create namespace] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>*\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [metallb : install MetalLB config] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-emphasis\" style=\"font-style: italic;\">***</span>\nchanged: [control-plane-0.k8s.cluster]\n\nTASK [metallb : install MetalLB] <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>\nchanged: [control-plane-0.k8s.cluster]\n\nPLAY RECAP <span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span><span class=\"hljs-strong\" style=\"font-weight: bold;\">*****</span>**\ncontrol-plane-0.k8s.cluster : ok=6    changed=5    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  </pre>\n<h2 id=\"mcetoc_1g6uqq0ncb8l\">Installation überprüfen</h2>\n<p>Um die Installation zu überprüfen, erstellen wir eine MinIO-Bereitstellung mit einem PersistentVolume für die Speicherung und stellen die Bereitstellung dem lokalen Netzwerk über den LoadBalancer-Diensttyp zur Verfügung. Das Beispiel basiert auf den Kubernetes-Speicherbeispielen.</p>\n<ol>\n<li>Erstellen ein PersistentVolumeClaim:<br>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~$ kubectl apply <span class=\"hljs-_\">-f</span> - &lt;&lt;EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: minio-pv-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\nEOF\npersistentvolumeclaim/minio-pv-claim created</pre>\n</li>\n<li>Erstelle ein Deployment:<br>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~$ kubectl apply <span class=\"hljs-_\">-f</span> - &lt;&lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: minio-deployment\nspec:\n  selector:\n    matchLabels:\n      app: minio\n  strategy:\n    <span class=\"hljs-built_in\">type</span>: Recreate\n  template:\n    metadata:\n      labels:\n        app: minio\n    spec:\n      volumes:\n      - name: storage\nEOF       mountPath: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"/storage\"</span>Ytim\ndeployment.apps/minio-deployment created</pre>\n</li>\n<li>Überprüfe ob der PersistentVolumeClaim an das PersistentVolume gebunden ist und dies erstellt wurde:<br>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~$ kubectl get pvc\nNAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS       AGE\nminio-pv-claim   Bound    pvc-8cb55047-43b6-4ab8<span class=\"hljs-_\">-a</span>8cb-20dc1ecf1979   1Gi        RWO            openebs-hostpath   3m4s</pre>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~$ kubectl get pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                    STORAGECLASS       REASON   AGE\npvc-8cb55047-43b6-4ab8<span class=\"hljs-_\">-a</span>8cb-20dc1ecf1979   1Gi        RWO            Delete           Bound    default/minio-pv-claim   openebs-hostpath            28s</pre>\n</li>\n<li>Überprüfe, ob das Deployment erfolgreich war:<br>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~$ kubectl describe deployment minio-deployment\nName:               minio-deployment\nNamespace:          default\nCreationTimestamp:  Sat, 02 Jul 2022 08:54:36 +0200\nLabels:             &lt;none&gt;\nAnnotations:        deployment.kubernetes.io/revision: 1\nSelector:           app=minio\nReplicas:           1 desired | 1 updated | 1 total | 1 available | 0 unavailable\nStrategyType:       Recreate\nM<span class=\"hljs-keyword\" style=\"color: #cc7832;\">in</span>ReadySeconds:    0\nPod Template:\n  Labels:  app=minio\n  Containers:\n   minio:\n    Image:       minio/minio:latest\n    Ports:       9000/TCP, 9001/TCP\n    Host Ports:  9000/TCP, 9001/TCP\n    Args:\n      server\n      /storage\n      --console-address\n      :9001\n    Environment:\n      MINIO_ACCESS_KEY:  minio\n      MINIO_SECRET_KEY:  minio123\n    Mounts:\n      /storage from storage (rw)\n  Volumes:\n   storage:\n    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim <span class=\"hljs-keyword\" style=\"color: #cc7832;\">in</span> the same namespace)\n    ClaimName:  minio-pv-claim\n    ReadOnly:   <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    NewReplicaSetAvailable\nOldReplicaSets:  &lt;none&gt;\nNewReplicaSet:   minio-deployment-59659f9655 (1/1 replicas created)\nEvents:\n  Type    Reason             Age   From                   Message\n  ----    ------             ----  ----                   -------\n  Normal  ScalingReplicaSet  56s   deployment-controller  Scaled up replica <span class=\"hljs-built_in\">set</span> minio-deployment-59659f9655 to 1</pre>\n</li>\n<li>Stelle das Deployment via Service vom Typ LoadBalancer zur Verfügung:<br>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~$ kubectl apply <span class=\"hljs-_\">-f</span> - &lt;&lt;EOF\napiVersion: v1\nkind: Service\nmetadata:\n  name: minio\nspec:\n  ports:\n  - name: http\n    port: 9000\n    protocol: TCP\n    targetPort: 9000\n  - name: http-ui\n    port: 9001\n    protocol: TCP\n    targetPort: 9001\n  selector:\n    app: minio\n  <span class=\"hljs-built_in\">type</span>: LoadBalancer\nEOF</pre>\n</li>\n<li>Überprüfe, ob der Service erstellt wurde und eine Externe IP erhalten hat:<br>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~$ kubectl get service minio\nNAME    TYPE           CLUSTER-IP      EXTERNAL-IP      PORT(S)                         AGE\nminio   LoadBalancer   10.97.129.247   192.168.30.150   9000:31713/TCP,9001:32327/TCP   10s</pre>\n</li>\n</ol>\n<p>Die externe IP Adresse sollte in dem Anfangs definierten lokalen Subnetz Range sein. Du kannst nun via Browser die MinIO Konsole öffnen (in meinem Fall war die URL: <a href=\"http://192.168.30.150:9001/login\">http://192.168.30.150:9001/login</a>) und dich mit Benutzer <em>minio</em> und Passwort <em>minio123</em> einloggen. Erstelle anschliessend ein Test Bucket, damit wir später auch überprüfen können ob die Daten persistent im Volume gespeichert werden:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/44/Screenshot-2022-07-02-at-17.03.04.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-xs.png 300w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-sm.png 480w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-md.png 768w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-lg.png 1024w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-xl.png 1360w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-2xl.png 1600w\"  alt=\"\" width=\"680\" height=\"637\"></figure>\n<p>Nun können wir direkt überprüfen, ob das Test-Bucket (testsetsetsgsdgfsdgagbadfg) im PersistentVolume gespeichert wurde:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~$ kubectl <span class=\"hljs-built_in\">exec</span> deploy/minio-deployment -- bash -c <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ls -la /storage\"</span>\ndrwxrwxrwx 4 root root 4096 Jul  2 06:59 .\ndrwxr-xr-x 1 root root 4096 Jul  2 06:54 ..\ndrwxr-xr-x 8 root root 4096 Jul  2 06:54 .minio.sys\ndrwxr-xr-x 5 root root 4096 Jul  2 15:06 testsetsetsgsdgfsdgagbadfg</pre>\n<p>Damit können wir sicher sein, dass die Daten im Testbucket im PersistentVolume landen.</p>\n<p>Als letzter Schritt werden wir das Kubernetes Dashboard deployen, damit kann man den Gesamten K8s Cluster als WebUI bedienen.</p>\n<h2 id=\"kubernetes-dashboard\">Kubernetes Dashboard</h2>\n<p>Das Kubernetes-Dashboard ist die unverzichtbare Mindestlösung für die Beobachtbarkeit. Das Kubernetes-Dashboard verfügt über eine entsprechende Installationsanleitung, und hier konzentrieren wir uns auf die entsprechenden RBAC-Berechtigungen für den verwendeten ServiceAccount.<br><br>Zuerst installieren wir das Kubernetes Dashboard:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~$ kubectl apply <span class=\"hljs-_\">-f</span> https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml\nnamespace/kubernetes-dashboard created\nserviceaccount/kubernetes-dashboard created\nservice/kubernetes-dashboard created\nsecret/kubernetes-dashboard-certs created\nsecret/kubernetes-dashboard-csrf created\nsecret/kubernetes-dashboard-key-holder created\nconfigmap/kubernetes-dashboard-settings created\nrole.rbac.authorization.k8s.io/kubernetes-dashboard created\nclusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created\nrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created\nclusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created\ndeployment.apps/kubernetes-dashboard created\nservice/dashboard-metrics-scraper created\ndeployment.apps/dashboard-metrics-scraper created</pre>\n<p>Während das Kubernetes-Dashboard das Erstellen neuer Ressourcen und das Bearbeiten vorhandener Ressourcen ermöglicht, ist die Verwendung im schreibgeschützten Modus sicherer und würde keine Sicherheitsrisiken mit sich bringen, falls jemand Zugriff auf die Benutzeroberfläche erhält. Der Sichtbarkeitsbereich des Dashboards wird über RBAC der darauf zugreifenden Benutzer gesteuert.<br><br>Der konservativste Ansatz wäre, eine Aggregated ClusterRole basierend auf der Standard-Viewer-Rolle zu verwenden und sie bei Bedarf mit zusätzlichen Regeln zu erweitern:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">kubectl apply <span class=\"hljs-_\">-f</span> - &lt;&lt;EOF\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: dashboard-viewer\naggregationRule:\n  clusterRoleSelectors:\n  - matchLabels:\n      rbac.authorization.k8s.io/aggregate-to-view: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"true\"</span>\n  - matchLabels:\n      rbac.homelab.k8s.io/aggregate-to-view: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"true\"</span>\nrules: []\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: dashboard-extended-view\n  labels:\n    rbac.homelab.k8s.io/aggregate-to-view: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"true\"</span>\nrules:\n- apiGroups:\n  - <span class=\"hljs-string\" style=\"color: #6a8759;\">\"\"</span>\n  resources:\n  - nodes\n  - extensions\n  - apps\n  - batch\n  - storage\n  - networking\n  verbs:\n  - get\n  - list\n  - watch\nEOF</pre>\n<p>Die ClusterRole bietet erweiterte Anzeigeberechtigungen, erlaubt aber immer noch nicht das Anzeigen von Secrets und Ressourcen aus der API-Gruppe rbac.authorization.k8s.io. Wir erstellen uns nun ein dedizierter ServiceAccount und binden den Account an die erstellte ClusterRole:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">kubectl apply <span class=\"hljs-_\">-f</span> - &lt;&lt;EOF\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: dashboard-viewer\n  namespace: kubernetes-dashboard\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: dashboard-viewer\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: dashboard-viewer\nsubjects:\n- kind: ServiceAccount\n  name: dashboard-viewer\n  namespace: kubernetes-dashboard\nEOF\n</pre>\n<p>Auf das Dashboard kann entweder über den kubectl-Proxy oder über die Portweiterleitung zugegriffen werden:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">kubectl -n kubernetes-dashboard port-forward service/kubernetes-dashboard 8443:443</pre>\n<p>Das Dashboard kann nun unter dieser URL erreicht werden: <a href=\"https://localhost:8443/\">https://localhost:8443/</a> :</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/44/Screenshot-2022-07-02-at-17.25.57.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-xs.png 300w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-sm.png 480w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-md.png 768w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-lg.png 1024w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-xl.png 1360w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-2xl.png 1600w\"  alt=\"\" width=\"1474\" height=\"380\"></figure>\n<p>Um das ServiceAccount-Token für den Zugriff auf das Dashboard zu ermitteln, führen wir Folgendes aus:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/dashboard-viewer -o jsonpath=<span class=\"hljs-string\" style=\"color: #6a8759;\">\"{.secrets[0].name}\"</span>) -o go-template=<span class=\"hljs-string\" style=\"color: #6a8759;\">\"{{.data.token | base64decode}}\"</span></pre>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "terraform",
                   "proxmox",
                   "openebs",
                   "minio",
                   "metallb",
                   "kubernetes",
                   "kubeadm",
                   "k8s",
                   "istio",
                   "containerd",
                   "container",
                   "calico",
                   "ansible"
            ],
            "date_published": "2022-07-02T17:34:53+02:00",
            "date_modified": "2022-07-05T14:44:19+02:00"
        },
        {
            "id": "https://www.finecloud.ch/kubernetes-auf-proxmox-mit-ansible-und-terraform.html",
            "url": "https://www.finecloud.ch/kubernetes-auf-proxmox-mit-ansible-und-terraform.html",
            "title": "Kubernetes auf Proxmox mit Ansible und Terraform (Teil 1)",
            "summary": "Einleitung In ersten Teil werden wir ein cloud-init Template erstellen, welches wir dann mit Terraform nutzen um die K8S VMs zu erzeugen. Damit wir mit Terraform unsere Kubernetes Nodes deployen können, brauchen wir ein Template. Das kann man entweder bereits mit Ansible machen, sieh dir&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g6tl57b7ar2\">Einleitung</a></li>\n<li><a href=\"#mcetoc_1g6tb05kfaqf\">Template Erstellen</a></li>\n<li><a href=\"#mcetoc_1g6tb05kfaqg\">Terraform IaC</a>\n<ul>\n<li><a href=\"#mcetoc_1g6tb05kfaqh\">Proxmox vorbereiten für Terraform</a></li>\n<li><a href=\"#mcetoc_1g6tb05kfaqi\">Terraform ausführen</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g6tl57b7ar2\">Einleitung</h2>\n<p>In ersten Teil werden wir ein cloud-init Template erstellen, welches wir dann mit Terraform nutzen um die K8S VMs zu erzeugen.</p>\n<h2 id=\"mcetoc_1g6tb05kfaqf\">Template Erstellen</h2>\n<p>Damit wir mit Terraform unsere Kubernetes Nodes deployen können, brauchen wir ein Template. Das kann man entweder bereits mit Ansible machen, sieh dir <a href=\"https://github.com/datastrophic/kubernetes-deployment/blob/master/proxmox/README.md\" rel=\"nofollow\">diesen Blog Artikel</a> an. Was mit daran aber nicht gefällt ist folgendes:</p>\n<blockquote>\n<p>The playbook should be run as root on the PVE host itself.</p>\n</blockquote>\n<p>Echt jetzt? als root direkt auf dem Proxmox Host - d.h. zuerst noch Ansible auf Proxmox installieren? mhhh, nee danke.</p>\n<p>Deshalb habe ich mich entschieden das Template lieber von Hand zu erstellen, da ich will den <strong>Ansible overhead nicht auf meinem Proxmox will und schon gar nicht als root ein Playboook ausführen.</strong></p>\n<p>Logge dich mit deinem Admin User <strong>(nicht root - man arbeitet nie mit root)</strong> auf einer deiner Proxmox Hosts ein und führe folgende Befehle aus, um das Ubuntu Template für unsere K8s Nodes zu erstellen:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">wget https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img -P /tmp/\nmv /tmp/focal-server-cloudimg-amd64.img /tmp/ubuntu-2004-server-amd64.qcow2\nqm create 1001 --name ubuntu-2004-cloudinit-template --memory 4096 --net0 virtio,bridge=vmbr0\nqm importdisk 1001 /tmp/ubuntu-2004-server-amd64.qcow2 <span class=\"hljs-built_in\">local</span>-zfs\nqm <span class=\"hljs-built_in\">set</span> 1001 --scsihw virtio-scsi-pci --scsi0 <span class=\"hljs-built_in\">local</span>-zfs:vm-1001-disk-0\nqm <span class=\"hljs-built_in\">set</span> 1001 --ide2 <span class=\"hljs-built_in\">local</span>-zfs:cloudinit\nqm <span class=\"hljs-built_in\">set</span> 1001 --boot c --bootdisk scsi0\nqm <span class=\"hljs-built_in\">set</span> 1001 --serial0 socket --vga serial0\nqm template 1001\n</pre>\n<h2 id=\"mcetoc_1g6tb05kfaqg\">Terraform IaC</h2>\n<p>Nun bereiten wir den Terraform Infrastructure-as-Code vor. Dazu erstellen wir zuerst eine neue Datei Namens <code>main.tf</code> mit dem folgenden Inhalt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">resource <span class=\"hljs-string\" style=\"color: #6a8759;\">\"proxmox_vm_qemu\"</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"control_plane\"</span> {\n  <span class=\"hljs-attr\">count</span>             = <span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>\n  <span class=\"hljs-attr\">name</span>              = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"control-plane-<span class=\"hljs-subst\">${count.index}</span>.k8s.cluster\"</span>\n  <span class=\"hljs-attr\">target_node</span>       = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"<span class=\"hljs-subst\">${var.pm_node}</span>\"</span>\n\n  <span class=\"hljs-attr\">clone</span>             = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ubuntu-2004-cloudinit-template\"</span>\n\n  <span class=\"hljs-attr\">os_type</span>           = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"cloud-init\"</span>\n  <span class=\"hljs-attr\">cores</span>             = <span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>\n  <span class=\"hljs-attr\">sockets</span>           = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"1\"</span>\n  <span class=\"hljs-attr\">cpu</span>               = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"host\"</span>\n  <span class=\"hljs-attr\">memory</span>            = <span class=\"hljs-number\" style=\"color: #6897bb;\">2048</span>\n  <span class=\"hljs-attr\">scsihw</span>            = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"virtio-scsi-pci\"</span>\n  <span class=\"hljs-attr\">bootdisk</span>          = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"scsi0\"</span>\n\n  disk {\n    <span class=\"hljs-attr\">size</span>            = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"20G\"</span>\n    <span class=\"hljs-attr\">type</span>            = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"scsi\"</span>\n    <span class=\"hljs-attr\">storage</span>         = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"local-lvm\"</span>\n    <span class=\"hljs-attr\">iothread</span>        = <span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>\n  }\n\n  network {\n    <span class=\"hljs-attr\">model</span>           = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"virtio\"</span>\n    <span class=\"hljs-attr\">bridge</span>          = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"vmbr0\"</span>\n  }\n\n  <span class=\"hljs-comment\" style=\"color: grey;\"># cloud-init settings</span>\n  <span class=\"hljs-comment\" style=\"color: grey;\"># adjust the ip and gateway addresses as needed</span>\n  <span class=\"hljs-attr\">ipconfig0</span>         = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ip=192.168.0.11<span class=\"hljs-subst\">${count.index}</span>/24,gw=192.168.0.1\"</span>\n  <span class=\"hljs-attr\">sshkeys</span> = file(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"<span class=\"hljs-subst\">${var.ssh_key_file}</span>\"</span>)\n}\n\nresource <span class=\"hljs-string\" style=\"color: #6a8759;\">\"proxmox_vm_qemu\"</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"worker_nodes\"</span> {\n  <span class=\"hljs-attr\">count</span>             = <span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>\n  <span class=\"hljs-attr\">name</span>              = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"worker-<span class=\"hljs-subst\">${count.index}</span>.k8s.cluster\"</span>\n  <span class=\"hljs-attr\">target_node</span>       = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"<span class=\"hljs-subst\">${var.pm_node}</span>\"</span>\n\n  <span class=\"hljs-attr\">clone</span>             = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ubuntu-2004-cloudinit-template\"</span>\n\n  <span class=\"hljs-attr\">os_type</span>           = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"cloud-init\"</span>\n  <span class=\"hljs-attr\">cores</span>             = <span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>\n  <span class=\"hljs-attr\">sockets</span>           = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"1\"</span>\n  <span class=\"hljs-attr\">cpu</span>               = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"host\"</span>\n  <span class=\"hljs-attr\">memory</span>            = <span class=\"hljs-number\" style=\"color: #6897bb;\">4098</span>\n  <span class=\"hljs-attr\">scsihw</span>            = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"virtio-scsi-pci\"</span>\n  <span class=\"hljs-attr\">bootdisk</span>          = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"scsi0\"</span>\n\n  disk {\n    <span class=\"hljs-attr\">size</span>            = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"20G\"</span>\n    <span class=\"hljs-attr\">type</span>            = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"scsi\"</span>\n    <span class=\"hljs-attr\">storage</span>         = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"local-lvm\"</span>\n    <span class=\"hljs-attr\">iothread</span>        = <span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>\n  }\n\n  network {\n    <span class=\"hljs-attr\">model</span>           = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"virtio\"</span>\n    <span class=\"hljs-attr\">bridge</span>          = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"vmbr0\"</span>\n  }\n\n  <span class=\"hljs-comment\" style=\"color: grey;\"># cloud-init settings</span>\n  <span class=\"hljs-comment\" style=\"color: grey;\"># adjust the ip and gateway addresses as needed</span>\n  <span class=\"hljs-attr\">ipconfig0</span>         = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ip=192.168.0.12<span class=\"hljs-subst\">${count.index}</span>/24,gw=192.168.0.1\"</span>\n  <span class=\"hljs-attr\">sshkeys</span> = file(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"<span class=\"hljs-subst\">${var.ssh_key_file}</span>\"</span>)\n}\n</pre>\n<ul>\n<li><code>clone</code> muss der eindeutige Name der Template VM sein, welche wir im letzten Schritt erstellen haben</li>\n<li><code>ipconfig0</code> muss das Subnetz sein in welchem die VMs laufen sollen. In diesem Fall weisen wir den VMs statische IPs zu in einem realen, externen Netzwerk, sodass diese Hosts ohne NAT Routing auskommen und aus Sicht der anderen Hosts \"ganz normal\" aussehen.</li>\n<li><span class=\"hljs-attr\"><code>storage</code> musst du evt. anpassen, je nachdem was du bei dir für ein Dateisystem hast. Bei ZFS musst du local-zfs angeben usw.</span></li>\n</ul>\n<p>Weiter benötigen wir eine Datei mit den Variabeln, <code>variables.tf</code> mit dem Folgenden Inhalt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">variable <span class=\"hljs-string\" style=\"color: #6a8759;\">\"pm_api_url\"</span> {\n  default = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"https://proxmox.lab.local/api2/json\"</span>\n}\n\nvariable <span class=\"hljs-string\" style=\"color: #6a8759;\">\"pm_node\"</span> {\n  default = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"pve\"</span>\n}\n\n<span class=\"hljs-comment\" style=\"color: grey;\"># variable \"pm_user\" {</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">#   default = \"\"</span>\n<span class=\"hljs-comment\" style=\"color: grey;\"># }</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\"># variable \"pm_password\" {</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">#   default = \"\"</span>\n<span class=\"hljs-comment\" style=\"color: grey;\"># }</span>\n\nvariable <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ssh_key_file\"</span> {\n  default = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"~/.ssh/id_rsa.pub\"</span>\n}</pre>\n<ul>\n<li><code>pm_api_url</code> muss deine Proxmox URL sein, wenn du kein DNS und kein reverse proxy hast, muss du die IP verwenden und Port 8006.</li>\n<li><code>pm_node</code> ist der Node deines Proxmox Clusters, auf welchem du dieses Terrafrom plan ausführen willst.</li>\n<li><code>ssh_key_file</code> dein ssh key mit welchem du dann auf die K8S VMs verbinden kannst.</li>\n</ul>\n<p>Die letzte Datei welche wir noch brauchen ist die provider.tf mit diesem Inhalt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">terraform {\n  required_providers {\n    proxmox = {\n      <span class=\"hljs-built_in\">source</span> = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Telmate/proxmox\"</span>\n      version = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"2.9.10\"</span>\n    }\n  }\n}\n\nprovider <span class=\"hljs-string\" style=\"color: #6a8759;\">\"proxmox\"</span> {\n  pm_parallel       = 1\n  pm_tls_insecure   = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n  pm_api_url        = var.pm_api_url\n<span class=\"hljs-comment\" style=\"color: grey;\">#   pm_password       = var.pm_password</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">#   pm_user           = var.pm_user</span>\n}</pre>\n<h3 id=\"mcetoc_1g6tb05kfaqh\">Proxmox vorbereiten für Terraform</h3>\n<p>Damit wir Proxmox mit Terraform steuern können, müssen wir zuerst noch ein paar Anpassungen machen. Dazu gehört folgendes (direkt auf dem Poxmox Host via CLI ausführen):</p>\n<ul>\n<li>Neue Rolle erstellen für den zukünftigen Terraform-Benutzer</li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Benutzer „terraform-prov@pve“ erstellen</span></li>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Dem Benutzer terraform-prov die Rolle TERRAFORM-PROV hinzufügen</span></li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">pveum role add TerraformProv -privs <span class=\"hljs-string\" style=\"color: #6a8759;\">\"VM.Allocate VM.Clone VM.Config.CDROM VM.Config.CPU VM.Config.Cloudinit VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network VM.Config.Options VM.Monitor VM.Audit VM.PowerMgmt Datastore.AllocateSpace Datastore.Audit\"</span>\npveum user add terraform-prov@pve\npveum aclmod / -user terraform-prov@pve -role TerraformProv\npveum passwd terraform-prov@pve</pre>\n<h3 id=\"mcetoc_1g6tb05kfaqi\">Terraform ausführen</h3>\n<p>Wenn du dich fragst, wieso ich beim Letzten Schritt <code style=\"font-weight: var(--font-weight-normal);\">pm_user</code><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\"> und </span><code style=\"font-weight: var(--font-weight-normal);\">pm_password</code><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\"> auskommentiert habe: man sollte nie Secrets nie in eine Datei schreiben! Wir lösen das, indem wir die folgenden env. Variabeln definieren (lokal auf deinem Gerät ausführen, auf welchem du Terraform verwenden willst):</span><span class=\"pl-k\"><br></span></p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-built_in\">#~/github/homelab/terraform$ export</span> PM_USER=<span class=\"hljs-string\" style=\"color: #6a8759;\">\"terraform-prov@pve\"</span>\n<span class=\"hljs-built_in\">#~/github/homelab/terraform$ export</span> PM_PASS=<span class=\"hljs-string\" style=\"color: #6a8759;\">\"password\"</span></pre>\n<p>Zuerst machen wir ein terraform init, um alle benötigten Komponenten zu installieren und das neue Terraform Repo zu initieren<span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\"> (lokal auf deinem Gerät ausführen, auf welchem du Terraform verwenden willst):</span></p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~/github/homelab/terraform$ terraform init\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Finding telmate/proxmox versions matching <span class=\"hljs-string\" style=\"color: #6a8759;\">\"2.9.10\"</span>...\n- Installing telmate/proxmox v2.<span class=\"hljs-number\" style=\"color: #6897bb;\">9</span>.<span class=\"hljs-number\" style=\"color: #6897bb;\">10</span>...\n- Installed telmate/proxmox v2.<span class=\"hljs-number\" style=\"color: #6897bb;\">9</span>.<span class=\"hljs-number\" style=\"color: #6897bb;\">10</span> (self-signed, key ID xxxx)\n\nPartner and community providers are signed by their developers.\nIf youd like to know more about provider signing, you can read about it here:\nhttps://www.terraform.io/docs/cli/plugins/signing.html\n\nTerraform has created a lock file .terraform.lock.hcl to record the provider\nselections it made above. Include this file in your version control repository\nso that Terraform can guarantee to make the same selections by default when\nyou run <span class=\"hljs-string\" style=\"color: #6a8759;\">\"terraform init\"</span> in the future.\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running <span class=\"hljs-string\" style=\"color: #6a8759;\">\"terraform plan\"</span> to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.</pre>\n<p>Als nächster Schritt erstellen mit terraform plan, einen terraform Plan und schreiben diese in eine Datei,<span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\"> (lokal auf deinem Gerät ausführen, auf welchem du Terraform verwenden willst)</span>:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~/github/homelab/terraform$ terraform plan -out plan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following\nsymbols:\n  + create\n\nTerraform will perform the following actions:\n\n  <span class=\"hljs-comment\" style=\"color: grey;\"># proxmox_vm_qemu.control_plane[0] will be created</span>\n  + resource <span class=\"hljs-string\" style=\"color: #6a8759;\">\"proxmox_vm_qemu\"</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"control_plane\"</span> {\n      + additional_<span class=\"hljs-built_in\">wait</span>           = 0\n      + agent                     = 0\n      + automatic_reboot          = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + balloon                   = 0\n      + bios                      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"seabios\"</span>\n      + boot                      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"c\"</span>\n      + bootdisk                  = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"scsi0\"</span>\n      + <span class=\"hljs-built_in\">clone</span>                     = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ubuntu-2004-cloudinit-template\"</span>\n      + <span class=\"hljs-built_in\">clone</span>_<span class=\"hljs-built_in\">wait</span>                = 0\n      + cores                     = 4\n      + cpu                       = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"host\"</span>\n      + default_ipv4_address      = (known after apply)\n      + define_connection_info    = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + force_create              = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n      + full_<span class=\"hljs-built_in\">clone</span>                = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + guest_agent_ready_timeout = 100\n      + hotplug                   = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"network,disk,usb\"</span>\n      + id                        = (known after apply)\n      + ipconfig0                 = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ip=192.168.0.0/24,gw=192.168.0.254\"</span>\n      + kvm                       = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + memory                    = 2048\n      + name                      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"control-plane-0.k8s.cluster\"</span>\n      + nameserver                = (known after apply)\n      + numa                      = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n      + onboot                    = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n      + oncreate                  = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + os_<span class=\"hljs-built_in\">type</span>                   = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"cloud-init\"</span>\n      + preprovision              = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + reboot_required           = (known after apply)\n      + scsihw                    = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"virtio-scsi-pci\"</span>\n      + searchdomain              = (known after apply)\n      + sockets                   = 1\n      + ssh_host                  = (known after apply)\n      + ssh_port                  = (known after apply)\n      + sshkeys                   = &lt;&lt;-EOT\n            ssh-rsa xxxx\n        EOT\n      + tablet                    = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + target_node               = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"pve\"</span>\n      + unused_disk               = (known after apply)\n      + vcpus                     = 0\n      + vlan                      = -1\n      + vmid                      = (known after apply)\n\n      + disk {\n          + backup       = 0\n          + cache        = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"none\"</span>\n          + file         = (known after apply)\n          + format       = (known after apply)\n          + iothread     = 1\n          + mbps         = 0\n          + mbps_rd      = 0\n          + mbps_rd_max  = 0\n          + mbps_wr      = 0\n          + mbps_wr_max  = 0\n          + media        = (known after apply)\n          + replicate    = 0\n          + size         = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"20G\"</span>\n          + slot         = (known after apply)\n          + ssd          = 0\n          + storage      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"local-zfs\"</span>\n          + storage_<span class=\"hljs-built_in\">type</span> = (known after apply)\n          + <span class=\"hljs-built_in\">type</span>         = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"scsi\"</span>\n          + volume       = (known after apply)\n        }\n\n      + network {\n          + bridge    = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"vmbr0\"</span>\n          + firewall  = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n          + link_down = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n          + macaddr   = (known after apply)\n          + model     = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"virtio\"</span>\n          + queues    = (known after apply)\n          + rate      = (known after apply)\n          + tag       = 30\n        }\n    }\n\n  <span class=\"hljs-comment\" style=\"color: grey;\"># proxmox_vm_qemu.worker_nodes[0] will be created</span>\n  + resource <span class=\"hljs-string\" style=\"color: #6a8759;\">\"proxmox_vm_qemu\"</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"worker_nodes\"</span> {\n      + additional_<span class=\"hljs-built_in\">wait</span>           = 0\n      + agent                     = 0\n      + automatic_reboot          = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + balloon                   = 0\n      + bios                      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"seabios\"</span>\n      + boot                      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"c\"</span>\n      + bootdisk                  = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"scsi0\"</span>\n      + <span class=\"hljs-built_in\">clone</span>                     = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ubuntu-2004-cloudinit-template\"</span>\n      + <span class=\"hljs-built_in\">clone</span>_<span class=\"hljs-built_in\">wait</span>                = 0\n      + cores                     = 4\n      + cpu                       = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"host\"</span>\n      + default_ipv4_address      = (known after apply)\n      + define_connection_info    = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + force_create              = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n      + full_<span class=\"hljs-built_in\">clone</span>                = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + guest_agent_ready_timeout = 100\n      + hotplug                   = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"network,disk,usb\"</span>\n      + id                        = (known after apply)\n      + ipconfig0                 = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ip=192.168.0.0/24,gw=192.168.0.254\"</span>\n      + kvm                       = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + memory                    = 4098\n      + name                      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"worker-0.k8s.cluster\"</span>\n      + nameserver                = (known after apply)\n      + numa                      = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n      + onboot                    = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n      + oncreate                  = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + os_<span class=\"hljs-built_in\">type</span>                   = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"cloud-init\"</span>\n      + preprovision              = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + reboot_required           = (known after apply)\n      + scsihw                    = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"virtio-scsi-pci\"</span>\n      + searchdomain              = (known after apply)\n      + sockets                   = 1\n      + ssh_host                  = (known after apply)\n      + ssh_port                  = (known after apply)\n      + sshkeys                   = &lt;&lt;-EOT\n            ssh-rsa xxx\n        EOT\n      + tablet                    = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + target_node               = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"pve\"</span>\n      + unused_disk               = (known after apply)\n      + vcpus                     = 0\n      + vlan                      = -1\n      + vmid                      = (known after apply)\n\n      + disk {\n          + backup       = 0\n          + cache        = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"none\"</span>\n          + file         = (known after apply)\n          + format       = (known after apply)\n          + iothread     = 1\n          + mbps         = 0\n          + mbps_rd      = 0\n          + mbps_rd_max  = 0\n          + mbps_wr      = 0\n          + mbps_wr_max  = 0\n          + media        = (known after apply)\n          + replicate    = 0\n          + size         = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"20G\"</span>\n          + slot         = (known after apply)\n          + ssd          = 0\n          + storage      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"local-zfs\"</span>\n          + storage_<span class=\"hljs-built_in\">type</span> = (known after apply)\n          + <span class=\"hljs-built_in\">type</span>         = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"scsi\"</span>\n          + volume       = (known after apply)\n        }\n\n      + network {\n          + bridge    = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"vmbr0\"</span>\n          + firewall  = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n          + link_down = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n          + macaddr   = (known after apply)\n          + model     = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"virtio\"</span>\n          + queues    = (known after apply)\n          + rate      = (known after apply)\n          + tag       = 30\n        }\n    }\n\n  <span class=\"hljs-comment\" style=\"color: grey;\"># proxmox_vm_qemu.worker_nodes[1] will be created</span>\n  + resource <span class=\"hljs-string\" style=\"color: #6a8759;\">\"proxmox_vm_qemu\"</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"worker_nodes\"</span> {\n      + additional_<span class=\"hljs-built_in\">wait</span>           = 0\n      + agent                     = 0\n      + automatic_reboot          = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + balloon                   = 0\n      + bios                      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"seabios\"</span>\n      + boot                      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"c\"</span>\n      + bootdisk                  = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"scsi0\"</span>\n      + <span class=\"hljs-built_in\">clone</span>                     = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ubuntu-2004-cloudinit-template\"</span>\n      + <span class=\"hljs-built_in\">clone</span>_<span class=\"hljs-built_in\">wait</span>                = 0\n      + cores                     = 4\n      + cpu                       = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"host\"</span>\n      + default_ipv4_address      = (known after apply)\n      + define_connection_info    = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + force_create              = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n      + full_<span class=\"hljs-built_in\">clone</span>                = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + guest_agent_ready_timeout = 100\n      + hotplug                   = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"network,disk,usb\"</span>\n      + id                        = (known after apply)\n      + ipconfig0                 = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ip=192.168.0.1/24,gw=192.168.0.254\"</span>\n      + kvm                       = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + memory                    = 4098\n      + name                      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"worker-1.k8s.cluster\"</span>\n      + nameserver                = (known after apply)\n      + numa                      = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n      + onboot                    = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n      + oncreate                  = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + os_<span class=\"hljs-built_in\">type</span>                   = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"cloud-init\"</span>\n      + preprovision              = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + reboot_required           = (known after apply)\n      + scsihw                    = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"virtio-scsi-pci\"</span>\n      + searchdomain              = (known after apply)\n      + sockets                   = 1\n      + ssh_host                  = (known after apply)\n      + ssh_port                  = (known after apply)\n      + sshkeys                   = &lt;&lt;-EOT\n            ssh-rsa xxx\n        EOT\n      + tablet                    = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + target_node               = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"pve\"</span>\n      + unused_disk               = (known after apply)\n      + vcpus                     = 0\n      + vlan                      = -1\n      + vmid                      = (known after apply)\n\n      + disk {\n          + backup       = 0\n          + cache        = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"none\"</span>\n          + file         = (known after apply)\n          + format       = (known after apply)\n          + iothread     = 1\n          + mbps         = 0\n          + mbps_rd      = 0\n          + mbps_rd_max  = 0\n          + mbps_wr      = 0\n          + mbps_wr_max  = 0\n          + media        = (known after apply)\n          + replicate    = 0\n          + size         = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"20G\"</span>\n          + slot         = (known after apply)\n          + ssd          = 0\n          + storage      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"local-zfs\"</span>\n          + storage_<span class=\"hljs-built_in\">type</span> = (known after apply)\n          + <span class=\"hljs-built_in\">type</span>         = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"scsi\"</span>\n          + volume       = (known after apply)\n        }\n\n      + network {\n          + bridge    = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"vmbr0\"</span>\n          + firewall  = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n          + link_down = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n          + macaddr   = (known after apply)\n          + model     = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"virtio\"</span>\n          + queues    = (known after apply)\n          + rate      = (known after apply)\n          + tag       = 30\n        }\n    }\n\n  <span class=\"hljs-comment\" style=\"color: grey;\"># proxmox_vm_qemu.worker_nodes[2] will be created</span>\n  + resource <span class=\"hljs-string\" style=\"color: #6a8759;\">\"proxmox_vm_qemu\"</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"worker_nodes\"</span> {\n      + additional_<span class=\"hljs-built_in\">wait</span>           = 0\n      + agent                     = 0\n      + automatic_reboot          = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + balloon                   = 0\n      + bios                      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"seabios\"</span>\n      + boot                      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"c\"</span>\n      + bootdisk                  = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"scsi0\"</span>\n      + <span class=\"hljs-built_in\">clone</span>                     = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ubuntu-2004-cloudinit-template\"</span>\n      + <span class=\"hljs-built_in\">clone</span>_<span class=\"hljs-built_in\">wait</span>                = 0\n      + cores                     = 4\n      + cpu                       = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"host\"</span>\n      + default_ipv4_address      = (known after apply)\n      + define_connection_info    = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + force_create              = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n      + full_<span class=\"hljs-built_in\">clone</span>                = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + guest_agent_ready_timeout = 100\n      + hotplug                   = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"network,disk,usb\"</span>\n      + id                        = (known after apply)\n      + ipconfig0                 = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ip=192.168.0.2/24,gw=192.168.0.254\"</span>\n      + kvm                       = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + memory                    = 4098\n      + name                      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"worker-2.k8s.cluster\"</span>\n      + nameserver                = (known after apply)\n      + numa                      = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n      + onboot                    = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n      + oncreate                  = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + os_<span class=\"hljs-built_in\">type</span>                   = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"cloud-init\"</span>\n      + preprovision              = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + reboot_required           = (known after apply)\n      + scsihw                    = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"virtio-scsi-pci\"</span>\n      + searchdomain              = (known after apply)\n      + sockets                   = 1\n      + ssh_host                  = (known after apply)\n      + ssh_port                  = (known after apply)\n      + sshkeys                   = &lt;&lt;-EOT\n            ssh-rsa xxx\n        EOT\n      + tablet                    = <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      + target_node               = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"pve\"</span>\n      + unused_disk               = (known after apply)\n      + vcpus                     = 0\n      + vlan                      = -1\n      + vmid                      = (known after apply)\n\n      + disk {\n          + backup       = 0\n          + cache        = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"none\"</span>\n          + file         = (known after apply)\n          + format       = (known after apply)\n          + iothread     = 1\n          + mbps         = 0\n          + mbps_rd      = 0\n          + mbps_rd_max  = 0\n          + mbps_wr      = 0\n          + mbps_wr_max  = 0\n          + media        = (known after apply)\n          + replicate    = 0\n          + size         = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"20G\"</span>\n          + slot         = (known after apply)\n          + ssd          = 0\n          + storage      = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"local-zfs\"</span>\n          + storage_<span class=\"hljs-built_in\">type</span> = (known after apply)\n          + <span class=\"hljs-built_in\">type</span>         = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"scsi\"</span>\n          + volume       = (known after apply)\n        }\n\n      + network {\n          + bridge    = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"vmbr0\"</span>\n          + firewall  = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n          + link_down = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n          + macaddr   = (known after apply)\n          + model     = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"virtio\"</span>\n          + queues    = (known after apply)\n          + rate      = (known after apply)\n          + tag       = 30\n        }\n    }\n\nPlan: 4 to add, 0 to change, 0 to destroy.\n\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n\nSaved the plan to: plan\n\nTo perform exactly these actions, run the following <span class=\"hljs-built_in\">command</span> to apply:\n    terraform apply <span class=\"hljs-string\" style=\"color: #6a8759;\">\"plan\"</span></pre>\n<p>Wir führen nun den Plan aus, dabei werden die Ressourcen wie geplant angelegt, <span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\"> (lokal auf deinem Gerät ausführen, auf welchem du Terraform verwenden willst)</span>:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">#~/github/homelab/terraform$ terraform apply <span class=\"hljs-string\" style=\"color: #6a8759;\">\"plan\"</span>\nproxmox_vm_qemu.worker_nodes[2]: Creating...\nproxmox_vm_qemu.worker_nodes[1]: Creating...\nproxmox_vm_qemu.worker_nodes[0]: Creating...\nproxmox_vm_qemu.control_plane[0]: Creating...\nproxmox_vm_qemu.worker_nodes[0]: Still creating... [10s elapsed]\nproxmox_vm_qemu.worker_nodes[1]: Still creating... [10s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [10s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [10s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [20s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [20s elapsed]\nproxmox_vm_qemu.worker_nodes[0]: Still creating... [20s elapsed]\nproxmox_vm_qemu.worker_nodes[1]: Still creating... [20s elapsed]\nproxmox_vm_qemu.worker_nodes[1]: Still creating... [30s elapsed]\nproxmox_vm_qemu.worker_nodes[0]: Still creating... [30s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [30s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [30s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [40s elapsed]\nproxmox_vm_qemu.worker_nodes[0]: Still creating... [40s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [40s elapsed]\nproxmox_vm_qemu.worker_nodes[1]: Still creating... [40s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [50s elapsed]\nproxmox_vm_qemu.worker_nodes[0]: Still creating... [50s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [50s elapsed]\nproxmox_vm_qemu.worker_nodes[1]: Still creating... [50s elapsed]\nproxmox_vm_qemu.worker_nodes[1]: Creation complete after 59s [id=mrprmx/qemu/105]\nproxmox_vm_qemu.control_plane[0]: Still creating... [1m0s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [1m0s elapsed]\nproxmox_vm_qemu.worker_nodes[0]: Still creating... [1m0s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [1m10s elapsed]\nproxmox_vm_qemu.worker_nodes[0]: Still creating... [1m10s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [1m10s elapsed]\nproxmox_vm_qemu.worker_nodes[0]: Still creating... [1m20s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [1m20s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [1m20s elapsed]\nproxmox_vm_qemu.worker_nodes[0]: Still creating... [1m30s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [1m30s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [1m30s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [1m40s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [1m40s elapsed]\nproxmox_vm_qemu.worker_nodes[0]: Still creating... [1m40s elapsed]\nproxmox_vm_qemu.worker_nodes[0]: Still creating... [1m50s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [1m50s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [1m50s elapsed]\nproxmox_vm_qemu.worker_nodes[0]: Creation complete after 1m57s [id=mrprmx/qemu/106]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [2m0s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [2m0s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [2m10s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [2m10s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [2m20s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [2m20s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [2m30s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [2m30s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [2m40s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [2m40s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Still creating... [2m50s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [2m50s elapsed]\nproxmox_vm_qemu.worker_nodes[2]: Creation complete after 2m56s [id=mrprmx/qemu/107]\nproxmox_vm_qemu.control_plane[0]: Still creating... [3m0s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [3m10s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [3m20s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [3m30s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [3m40s elapsed]\nproxmox_vm_qemu.control_plane[0]: Still creating... [3m50s elapsed]\nproxmox_vm_qemu.control_plane[0]: Creation complete after 3m54s [id=mrprmx/qemu/108]\n\nApply complete! Resources: 4 added, 0 changed, 0 destroyed.</pre>\n<p> </p>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "virtualisierung",
                   "unix",
                   "tools",
                   "terraform",
                   "ssh",
                   "shell",
                   "proxmox",
                   "network",
                   "linux",
                   "kvm",
                   "kubernetes",
                   "k8s",
                   "iac",
                   "ansible"
            ],
            "date_published": "2022-07-01T18:59:01+02:00",
            "date_modified": "2022-07-01T21:57:04+02:00"
        }
    ]
}
