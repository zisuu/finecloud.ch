{
    "version": "https://jsonfeed.org/version/1",
    "title": "Finecloud",
    "description": "",
    "home_page_url": "https://www.finecloud.ch",
    "feed_url": "https://www.finecloud.ch/feed.json",
    "user_comment": "",
    "author": {
        "name": "Finecloud"
    },
    "items": [
        {
            "id": "https://www.finecloud.ch/spring-bean-lifecycle.html",
            "url": "https://www.finecloud.ch/spring-bean-lifecycle.html",
            "title": "Spring Bean Lifecycle",
            "summary": "Before the application is deemed ready for use, Spring will go through and carry out all these actions on each bean in the context. This provides you with a variety of connections. You do have a great deal of flexibility and control over this. Sincerely&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gt66f14j8k\">Part 1</a></li>\n<li><a href=\"#mcetoc_1gt66f14j8l\">Part 2</a></li>\n<li><a href=\"#mcetoc_1gt66f14j8m\">Callback Interfaces</a></li>\n<li><a href=\"#mcetoc_1gt66f14j8n\">Lifecycle Annotations</a></li>\n<li><a href=\"#mcetoc_1gt66f14j8o\">Bean Post Processors</a></li>\n<li><a href=\"#mcetoc_1gt66f14j8p\">Aware Interfaces</a></li>\n</ul>\n</div>\n<p><strong><img loading=\"lazy\" src=\"https://springframework.guru/wp-content/uploads/2019/08/lifecycle.png\" alt=\"https://springframework.guru/wp-content/uploads/2019/08/lifecycle.png\" data-is-external-image=\"true\"></strong></p>\n<h2 id=\"mcetoc_1gt66f14j8k\">Part 1</h2>\n<div id=\"ct-sidebar-scroll-container\" class=\"sidebar--content---4z0-\" data-purpose=\"sidebar-content\">\n<div class=\"transcript--transcript-panel--kfMxM\" dir=\"auto\" data-purpose=\"transcript-panel\">\n<div class=\"transcript--cue-container--wu3UY\"><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Of course, instantiating the class will come first. The class will populate properties after it has been created. It will therefore set up any properties you may have. Then, if they exist, we do have some interfaces that we can implement. These methods will be executed by Spring if you've implemented these interfaces. As you can see, BeanNameAware's setBeanName method is called. Following that are BeanFactoryAware, ApplicationContextAware, and PreInitialization, which will be carried out using a post bean processor. As a result, we can hook into these callbacks before moving on to the initializing beans' afterPropertiesSetet. Additionally, we can offer special initialization techniques.  </span><span class=\"\" style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\" data-purpose=\"cue-text\">And then one of the last things is the post initialization. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">So these are all steps that the bean goes through before it is ready to use.</span></div>\n<div class=\"transcript--cue-container--wu3UY\">\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\"><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Before the application is deemed ready for use, Spring will go through and carry out all these actions on each bean in the context.</span></p>\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\"><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">This provides you with a variety of connections. You do have a great deal of flexibility and control over this. Sincerely speaking, you hardly ever need to hook into this. There are use cases that you encounter, but it's rare that you require this much control over the production of the beans. You're typically doing something a little complicated when you do it. But I believe that awareness is the most important lesson to learn. Use this when you need it; it is there and available for you.  </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">So here this is just the bean becoming ready for use.</span></p>\n</div>\n<div class=\"transcript--cue-container--wu3UY\">\n<h2 id=\"mcetoc_1gt66f14j8l\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Part 2</h2>\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\"><span class=\"\" data-purpose=\"cue-text\">There is also a lifecycle for the beans to be terminated. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">So when the container is being shut down, the application receives some type of shutdown event. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">There is a lifecycle for the shutdown. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">So you can annotate a bean method with the annotation PreDestroy that will get annotated. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">And then you can also implement a disposable bean interface that provides a destroy method so that the </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">annotation will come first and then the destroy method. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">And at that point we call the bean terminated.</span></p>\n<h2 id=\"mcetoc_1gt66f14j8m\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Callback Interfaces</h2>\n</div>\n<div class=\"transcript--cue-container--wu3UY\">\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Consequently, we did discuss a few of the interfaces. There are two interfaces in Spring that you can use to implement callback events. You have the afterPropertiesSet from the InitializingBean. So if you implement that interface, that method will be called. Finally, there is the DisposalBean. We discussed the fact that that is one of the last functions called before the bean is terminated. </p>\n<h2 id=\"mcetoc_1gt66f14j8n\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Lifecycle Annotations</h2>\n</div>\n<div class=\"transcript--cue-container--wu3UY\">\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\"><span class=\"\" data-purpose=\"cue-text\">You do also have a couple annotations, and these were in that flowchart as well. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">We have <strong>PostConstruct</strong>, so the bean has been constructed, but it has not been returned to the requesting </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">object. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">And then we also have <strong>PreDestroy</strong>. </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">So if you remember in the termination workflow, this was called just before the interface method is </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">called.</span></p>\n<h2 id=\"mcetoc_1gt66f14j8o\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Bean Post Processors</h2>\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">These can be useful if you're working with a third-party object of some kind that you need to create, put into your context, and update in some way. like configuring a component that is typically not managed by Spring. So, you now have some capabilities. The main point you should take away from this post is that bean processors are referred to as such internationally. In essence, you receive this event, and it will be examined. If you implement it, this will be called 100 times in the case where you have 100 beans and every object or bean. In order to implement this typically, you're probably searching for a particular bean, a kind of bean that </p>\n</div>\n<div class=\"transcript--cue-container--wu3UY\">\n<h2 id=\"mcetoc_1gt66f14j8p\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Aware Interfaces</h2>\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\">Finally, Spring has over 14 aware interfaces as well. Therefore, these extend interface are also known as aware. Thus, they are a continuation of that. They number fourteen. The Spring framework largely makes use of these. Therefore, if you're creating Spring applications, you should be aware that you use these. Therefore, if you have a use case, you may encounter situations where you must use these. These might be very useful.</p>\n</div>\n<div class=\"transcript--cue-container--wu3UY\">\n<p class=\"transcript--underline-cue--3osdw\" tabindex=\"-1\" role=\"button\" data-purpose=\"transcript-cue\"><span class=\"\" data-purpose=\"cue-text\">These are some of the current ones:</span></p>\n</div>\n<div class=\"transcript--cue-container--wu3UY\">\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 49.9288%;\"><strong>Aware Interface</strong></td>\n<td style=\"width: 49.9288%;\"><strong>Description</strong></td>\n</tr>\n<tr>\n<td style=\"width: 49.9288%;\">ApplicationContextAware</td>\n<td style=\"width: 49.9288%;\">Interface to be implemented by any object that wishes to be notified of the ApplicationContext that it runs in.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9288%;\">ApplicationEventPublisherAware</td>\n<td style=\"width: 49.9288%;\">Set the ApplicationEventPublisher that this object runs in.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9288%;\">BeanClassLoaderAware</td>\n<td style=\"width: 49.9288%;\">Callback that supplies the bean class loader to a bean instance.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9288%;\">BeanFactoryAware</td>\n<td style=\"width: 49.9288%;\">Callback that supplies the owning factory to a bean instance.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9288%;\">BeanNameAware</td>\n<td style=\"width: 49.9288%;\">Set the name of the bean in the bean factory that created this bean.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9288%;\">BootstrapContextAware</td>\n<td style=\"width: 49.9288%;\">Set the BootstrapContext that this object runs in.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "java",
                   "dev"
            ],
            "date_published": "2023-04-04T15:29:20+02:00",
            "date_modified": "2023-04-04T15:29:20+02:00"
        },
        {
            "id": "https://www.finecloud.ch/spring-annotations.html",
            "url": "https://www.finecloud.ch/spring-annotations.html",
            "title": "Spring Annotations",
            "summary": "If you want to develop a Spring Application you need to know when to use which Annotation. Spring’s dependency injection capability includes the following annotations:",
            "content_html": "<p>If you want to develop a Spring Application you need to know when to use which Annotation.</p>\n<h2>Dependency Injection</h2>\n<p>Spring’s dependency injection capability includes the following annotations:</p>\n<table style=\"border-collapse: collapse; width: 100%; height: 417.344px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"><strong>Annotation</strong></td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"><strong>Explanation</strong></td>\n</tr>\n<tr style=\"height: 136.75px;\">\n<td style=\"width: 49.9288%; height: 136.75px;\"><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-stereotype-annotations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Component</a></td>\n<td style=\"width: 49.9288%; height: 136.75px;\">Generic stereotype for any Spring-managed component.</td>\n</tr>\n<tr style=\"height: 79.1562px;\">\n<td style=\"width: 49.9288%; height: 79.1562px;\"><a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Service.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Service </a></td>\n<td style=\"width: 49.9288%; height: 79.1562px;\">Indicates that an annotated class is a service.</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n</tr>\n</tbody>\n</table>\n<h2><br>Configuration</h2>\n<table style=\"border-collapse: collapse; width: 100%; height: 417.344px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"><strong>Annotation</strong></td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"><strong>Explanation</strong></td>\n</tr>\n<tr style=\"height: 136.75px;\">\n<td style=\"width: 49.9288%; height: 136.75px;\"><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-autowired-annotation-qualifiers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Qualifier</a></td>\n<td style=\"width: 49.9288%; height: 136.75px;\">Associates a value with a particular argument. More finely tuned way than @Order and @Priority to control selection.</td>\n</tr>\n<tr style=\"height: 79.1562px;\">\n<td style=\"width: 49.9288%; height: 79.1562px;\"><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-definition-profiles\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Profile</a></td>\n<td style=\"width: 49.9288%; height: 79.1562px;\">Indicates that a component is eligible for registration when one or more specified profiles are active. You can also use @Profile({\"default\"}) to define a default profile, if no Profile is actively selected.</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n<td style=\"width: 49.9288%; height: 50.3594px;\"> </td>\n</tr>\n</tbody>\n</table>\n<p><br><br></p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "spring-framework",
                   "spring",
                   "software development",
                   "java",
                   "dev"
            ],
            "date_published": "2023-04-04T14:57:57+02:00",
            "date_modified": "2023-04-04T14:57:57+02:00"
        },
        {
            "id": "https://www.finecloud.ch/conventional-commits.html",
            "url": "https://www.finecloud.ch/conventional-commits.html",
            "title": "Conventional commits",
            "summary": "What are Conventional commits Conventional Commits is a convention for writing commit messages that provides structure and consistency to a project's version control history. It's based on the idea of defining a standard format for commit messages that makes it easier for developers to understand&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gp7g3b0bbq\">What are Conventional commits</a></li>\n<li><a href=\"#mcetoc_1gp7g3b0bbr\">Why should you use Conventional commits</a></li>\n<li><a href=\"#mcetoc_1gp7g3b0bbs\">Example</a>\n<ul>\n<li><a href=\"#mcetoc_1gp7g3b0bbt\">multiline commit messages</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1gp7g3b0bbq\">What are Conventional commits</h2>\n<p>Conventional Commits is a convention for writing commit messages that provides structure and consistency to a project's version control history. It's based on the idea of defining a standard format for commit messages that makes it easier for developers to understand the changes made to a codebase over time.</p>\n<p><a href=\"https://www.conventionalcommits.org/en/v1.0.0/#specification\">https://www.conventionalcommits.org/en/v1.0.0/#specification</a></p>\n<h2 id=\"mcetoc_1gp7g3b0bbr\">Why should you use Conventional commits</h2>\n<ul>\n<li>Improving collaboration: Having a clear, concise and standardized way of writing commit messages helps everyone on the team understand what changes were made and why. This can improve collaboration and reduce the time spent discussing changes.</li>\n<li>Better automated versioning: Conventional Commits provides a way to automate versioning and release management by using the commit messages to determine the type and scope of changes. This can save time and improve accuracy compared to manually managing versions.</li>\n<li>Improved documentation: Commit messages can serve as a form of documentation, providing insight into the motivations and thought process behind changes. By using Conventional Commits, this documentation is more consistent and easier to understand.</li>\n</ul>\n<h2 id=\"mcetoc_1gp7g3b0bbs\">Example</h2>\n<p>Here's an example of a Conventional Commit message:<br><br><code>feat(parser): add ability to parse hexadecimal numbers</code><br><br><code>This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options.</code><br><br>In this example, \"feat\" is the type of change being made (a new feature), \"parser\" is the scope of the change (the parser component), and the rest of the message provides a brief description of the change. The Conventional Commits specification defines a number of different types (e.g. \"feat\", \"fix\", \"docs\") and provides guidelines for how to use them.</p>\n<h3 id=\"mcetoc_1gp7g3b0bbt\">multiline commit messages</h3>\n<p>how do you make multiline commit messages like these? how do you add an optional body or optional footer in a conventional Commit message?<br><br>Multiline commit messages are written by adding a blank line between the subject (first line) and the body (or footer). The subject should be a single line of text that summarizes the change and should not exceed 50 characters. If a more detailed explanation is needed, it can be added in the body.<br><br>Here's an example of a multiline Conventional Commit message:<br><br><code>feat(parser): add ability to parse hexadecimal numbers</code><br><br><code>This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options. The new feature has been thoroughly tested and is now ready for use.</code><br><br>An optional footer can also be added to Conventional Commit messages for extra information, such as breaking changes, references to related issues, or other meta-information. The footer should start with a new line and should be separated from the body by a double line break. Here's an example with a footer:<br><br><code>feat(parser): add ability to parse hexadecimal numbers</code><br><br><code>This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options. The new feature has been thoroughly tested and is now ready for use.</code><br><br><code>BREAKING CHANGE: The previous version of the parser only supported decimal numbers, so this change may break compatibility with existing code that uses the parser.</code><br><br>It's worth noting that not all Conventional Commit tools and systems require or make use of the body or footer. The most important aspect is the subject line, as it provides a concise summary of the change. The body and footer are optional and should be used as needed to provide additional context and information.<br><br>Here's an example of a Conventional Commit message with a body and footer, using the git commit command with the -m option:<br><br><code>$ git commit -m \"feat(parser): add ability to parse hexadecimal numbers</code><br><br><code>This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options. The new feature has been thoroughly tested and is now ready for use.</code><br><br><code>BREAKING CHANGE: The previous version of the parser only supported decimal numbers, so this change may break compatibility with existing code that uses the parser.</code><br><br><code>Closes #123\"</code><br><br>In this example, the subject is \"feat(parser): add ability to parse hexadecimal numbers\", the body is \"This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options. The new feature has been thoroughly tested and is now ready for use.\", and the footer is \"BREAKING CHANGE: The previous version of the parser only supported decimal numbers, so this change may break compatibility with existing code that uses the parser. Closes #123\". The \"Closes #123\" part of the footer is an example of a reference to a related issue, indicating that this commit resolves the issue with the given number.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "git",
                   "dev"
            ],
            "date_published": "2023-02-14T09:20:08+01:00",
            "date_modified": "2023-02-14T09:20:08+01:00"
        },
        {
            "id": "https://www.finecloud.ch/cleancode.html",
            "url": "https://www.finecloud.ch/cleancode.html",
            "title": "CleanCode",
            "summary": "Summary of 'Clean code' by Robert C. Martin: https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29 Code is clean if it can be understood easily – by everyone on the team. Clean code can be read and enhanced by a developer other than its original author. With understandability comes readability, changeability, extensibility&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gore4e2o9\">General rules</a></li>\n<li><a href=\"#mcetoc_1gore4e2oa\">Design rules</a></li>\n<li><a href=\"#mcetoc_1gore6rj763\">Understandability tips</a></li>\n<li><a href=\"#mcetoc_1gore6rj764\">Names rules</a></li>\n<li><a href=\"#mcetoc_1gore6rj765\">Functions rules</a></li>\n<li><a href=\"#mcetoc_1gore6rj766\">Comments rules</a></li>\n<li><a href=\"#mcetoc_1gore6rj767\">Source code structure</a></li>\n<li><a href=\"#mcetoc_1gore6rj768\">Objects and data structures</a></li>\n<li><a href=\"#mcetoc_1gore6rj769\">Tests</a></li>\n<li><a href=\"#mcetoc_1gore6rj76a\">Code smells</a></li>\n</ul>\n</div>\n<p>Summary of 'Clean code' by Robert C. Martin:<br>https://gist.github.com/wojteklu/73c6914cc446146b8b533c0988cf8d29<br><br>Code is clean if it can be understood easily – by everyone on the team. Clean code can be read and enhanced by a developer other than its original author. With understandability comes readability, changeability, extensibility and maintainability.</p>\n<hr>\n<h2 id=\"mcetoc_1gore4e2o9\">General rules</h2>\n<p>1. Follow standard conventions.<br>2. Keep it simple stupid. Simpler is always better. Reduce complexity as much as possible.<br>3. Boy scout rule. Leave the campground cleaner than you found it.<br>4. Always find root cause. Always look for the root cause of a problem.</p>\n<h2 id=\"mcetoc_1gore4e2oa\">Design rules</h2>\n<p>1. Keep configurable data at high levels.<br>2. Prefer polymorphism to if/else or switch/case.<br>3. Separate multi-threading code.<br>4. Prevent over-configurability.<br>5. Use dependency injection.<br>6. Follow Law of Demeter. A class should know only its direct dependencies.</p>\n<h2 id=\"mcetoc_1gore6rj763\">Understandability tips</h2>\n<p>1. Be consistent. If you do something a certain way, do all similar things in the same way.<br>2. Use explanatory variables.<br>3. Encapsulate boundary conditions. Boundary conditions are hard to keep track of. Put the processing for them in one place.<br>4. Prefer dedicated value objects to primitive type.<br>5. Avoid logical dependency. Don't write methods which works correctly depending on something else in the same class.<br>6. Avoid negative conditionals.</p>\n<h2 id=\"mcetoc_1gore6rj764\">Names rules</h2>\n<p>1. Choose descriptive and unambiguous names.<br>2. Make meaningful distinction.<br>3. Use pronounceable names.<br>4. Use searchable names.<br>5. Replace magic numbers with named constants.<br>6. Avoid encodings. Don't append prefixes or type information.</p>\n<h2 id=\"mcetoc_1gore6rj765\">Functions rules</h2>\n<p>1. Small.<br>2. Do one thing.<br>3. Use descriptive names.<br>4. Prefer fewer arguments.<br>5. Have no side effects.<br>6. Don't use flag arguments. Split method into several independent methods that can be called from the client without the flag.</p>\n<h2 id=\"mcetoc_1gore6rj766\">Comments rules</h2>\n<p>1. Always try to explain yourself in code.<br>2. Don't be redundant.<br>3. Don't add obvious noise.<br>4. Don't use closing brace comments.<br>5. Don't comment out code. Just remove.<br>6. Use as explanation of intent.<br>7. Use as clarification of code.<br>8. Use as warning of consequences.</p>\n<h2 id=\"mcetoc_1gore6rj767\">Source code structure</h2>\n<p>1. Separate concepts vertically.<br>2. Related code should appear vertically dense.<br>3. Declare variables close to their usage.<br>4. Dependent functions should be close.<br>5. Similar functions should be close.<br>6. Place functions in the downward direction.<br>7. Keep lines short.<br>8. Don't use horizontal alignment.<br>9. Use white space to associate related things and disassociate weakly related.<br>10. Don't break indentation.</p>\n<h2 id=\"mcetoc_1gore6rj768\">Objects and data structures</h2>\n<p>1. Hide internal structure.<br>2. Prefer data structures.<br>3. Avoid hybrids structures (half object and half data).<br>4. Should be small.<br>5. Do one thing.<br>6. Small number of instance variables.<br>7. Base class should know nothing about their derivatives.<br>8. Better to have many functions than to pass some code into a function to select a behavior.<br>9. Prefer non-static methods to static methods.</p>\n<h2 id=\"mcetoc_1gore6rj769\">Tests</h2>\n<p>1. One assert per test.<br>2. Readable.<br>3. Fast.<br>4. Independent.<br>5. Repeatable.</p>\n<h2 id=\"mcetoc_1gore6rj76a\">Code smells</h2>\n<p>1. Rigidity. The software is difficult to change. A small change causes a cascade of subsequent changes.<br>2. Fragility. The software breaks in many places due to a single change.<br>3. Immobility. You cannot reuse parts of the code in other projects because of involved risks and high effort.<br>4. Needless Complexity.<br>5. Needless Repetition.<br>6. Opacity. The code is hard to understand.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "dev"
            ],
            "date_published": "2023-02-09T16:55:40+01:00",
            "date_modified": "2023-02-09T16:55:54+01:00"
        },
        {
            "id": "https://www.finecloud.ch/javascript-advanced-features.html",
            "url": "https://www.finecloud.ch/javascript-advanced-features.html",
            "title": "JavaScript advanced features",
            "summary": "New Features New versions of JavaScript, such as ES6, ES2016, 2017, etc., come with many new features, however it is still ECMAScript Many of the new features are syntactic sugar or extend the functionality only marginal Template Literals Template literals are string literals with support&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1go3akel62sa\">New Features</a>\n<ul>\n<li><a href=\"#mcetoc_1go3akel62sb\">Template Literals</a></li>\n<li><a href=\"#mcetoc_1go3akel62sc\">Spread Operator</a></li>\n<li><a href=\"#mcetoc_1go3akel62sd\">Array and Object Destructuring</a></li>\n<li><a href=\"#mcetoc_1go3akel62se\">Arraw functions</a></li>\n<li><a href=\"#mcetoc_1go3akel62sf\">Classes</a></li>\n<li><a href=\"#mcetoc_1go3akel62sg\">Class Inheritance</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1go3akel62sh\">Modules</a>\n<ul>\n<li><a href=\"#mcetoc_1go3akel62si\">Global Scope</a></li>\n<li><a href=\"#mcetoc_1go3akel62sj\">IIFE</a></li>\n<li><a href=\"#mcetoc_1go3akel62sk\">Example jQuery Plugin</a></li>\n<li><a href=\"#mcetoc_1go3r9h51351\">Module Systems</a></li>\n<li><a href=\"#mcetoc_1go3r9h51352\">ES Modules</a></li>\n<li><a href=\"#mcetoc_1go3r9h51353\">Export Examples</a></li>\n<li><a href=\"#mcetoc_1go3r9h51354\">Import Examples</a></li>\n<li><a href=\"#mcetoc_1go3r9h51355\">Default Export</a></li>\n<li><a href=\"#mcetoc_1go3r9h51356\">Usage in the Browser</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1go3akel62sl\">Promises</a>\n<ul>\n<li><a href=\"#mcetoc_1go41qk9o3km\">Asynchronous Programming</a></li>\n<li><a href=\"#mcetoc_1go41qk9o3kn\">Promises Are State Machines</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1go41qk9o3ko\">Creating Promises</a>\n<ul>\n<li><a href=\"#mcetoc_1go41qk9o3kp\">Promise Example</a></li>\n<li><a href=\"#mcetoc_1go41qk9o3kq\">Chaining</a></li>\n<li><a href=\"#mcetoc_1go41qk9o3kr\">Chaining and Combining Examples</a></li>\n<li><a href=\"#mcetoc_1go41qk9o3ks\">async and await</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1go3akel62sm\">Fetch API</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1go3akel62sa\">New Features</h2>\n<ul>\n<li>New versions of JavaScript, such as ES6, ES2016, 2017, etc., come with many new features, however it is still ECMAScript</li>\n<li>Many of the new features are syntactic sugar or extend the functionality only marginal</li>\n</ul>\n<h3 id=\"mcetoc_1go3akel62sb\">Template Literals</h3>\n<ul>\n<li>Template literals are string literals with support for text interpolation and multiple lines</li>\n<li>Template literals are enclosed by backticks</li>\n<li>Expressions in placeholders (marked by the dollar sign and curly braces) are evaluated and replaced by their value at runtime</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">getYear</span>() </span>{\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> (<span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> <span class=\"hljs-built_in\">Date</span>()).getFullYear();\n}\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> student = {\n    name: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bob\"</span>,\n    age: <span class=\"hljs-number\" style=\"color: #6897bb;\">25</span>,\n    university: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"BFH\"</span>\n};\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> message = <span class=\"hljs-string\" style=\"color: #6a8759;\">`<span class=\"hljs-subst\">${student.name}</span> is a student at <span class=\"hljs-subst\">${student.university}</span>.\n<span class=\"hljs-subst\">${student.name}</span> was born in <span class=\"hljs-subst\">${getYear() - student.age}</span>.`</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(message);    <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Bob is a student at BFH.</span>\n                         <span class=\"hljs-comment\" style=\"color: grey;\">//    Bob was born in 1996.</span>\n</pre>\n<h3 id=\"mcetoc_1go3akel62sc\">Spread Operator</h3>\n<ul>\n<li>Using the spread operator new arrays and objects can be created based on the values of other arrays or objects</li>\n<li>The spread operator is especially useful to shallow-clone and merge or extend objects</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> a = [<span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>];\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> b = [<span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">5</span>];\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> clonedA = [...a];\nclonedA[<span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>] = <span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>;                         <span class=\"hljs-comment\" style=\"color: grey;\">// a remains unaffected</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> mergedArr = [<span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>, ...a, ...b, <span class=\"hljs-number\" style=\"color: #6897bb;\">6</span>];   <span class=\"hljs-comment\" style=\"color: grey;\">// [0, 1, 2, 3, 4, 5, 6]</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> x = {a: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"foo\"</span>, b: <span class=\"hljs-number\" style=\"color: #6897bb;\">7</span>};\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> y = {a: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"bar\"</span>, c: <span class=\"hljs-number\" style=\"color: #6897bb;\">8</span>};\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> clonedX = {...x};\nclonedX.a = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"bar\"</span>;                      <span class=\"hljs-comment\" style=\"color: grey;\">// x remains unaffected</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> mergedObj = {...x, ...y, c: <span class=\"hljs-number\" style=\"color: #6897bb;\">9</span>};   <span class=\"hljs-comment\" style=\"color: grey;\">// \\{a: \"bar\", b: 7, c: 9\\}</span>\n</pre>\n<h3 id=\"mcetoc_1go3akel62sd\">Array and Object Destructuring</h3>\n<ul>\n<li>The destructuring assignment unpacks values from arrays and objects into distinct variables</li>\n<li>Destructuring can also be used in function parameter deﬁnitions to unpack ﬁelds from objects passed as argument</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> a = [<span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>];\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> [first, second] = a;\n<span class=\"hljs-built_in\">console</span>.log(first);             <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 1</span>\n<span class=\"hljs-built_in\">console</span>.log(second);            <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 2</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> x = {a: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"foo\"</span>, b: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"bar\"</span>, c: <span class=\"hljs-number\" style=\"color: #6897bb;\">12</span>};\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> {b, c} = x;\n<span class=\"hljs-built_in\">console</span>.log(b);                 <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; bar</span>\n<span class=\"hljs-built_in\">console</span>.log(c);                 <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 12</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">f</span>(<span class=\"hljs-params\">{a, b}</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(a+<span class=\"hljs-string\" style=\"color: #6a8759;\">\", \"</span>+b);\n}\nf(x);                          <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; foo, bar</span>\n</pre>\n<h3 id=\"mcetoc_1go3akel62se\">Arraw functions</h3>\n<ul>\n<li>Arrow functions are a compact alternative to function expressions</li>\n<li>If the body consists of a single expression, then the curly braces can be omitted and the return is implied</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> f = (a, b) =&gt; {\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> c = a * a;\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> c+b;\n};\n<span class=\"hljs-built_in\">console</span>.log(f(<span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>));         <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 13</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> g = a =&gt; a * a;\n<span class=\"hljs-built_in\">console</span>.log(g(<span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>));            <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 9</span>\n</pre>\n<ul>\n<li>Arrow functions cannot be bound to objects</li>\n<li>The this reference is lexically scoped</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> alice = {\n  name: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Alice\"</span>,\n  friends: [<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bob\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Eve\"</span>],\n  sayHi: <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.friends.forEach(friend =&gt; {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" says hi to \"</span>+friend);  <span class=\"hljs-comment\" style=\"color: grey;\">// this is lexically scoped</span>\n    });\n  }\n};\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> speak = phrase =&gt; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" says \"</span>+phrase);\nspeak.call(alice, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Hello World!\"</span>);   <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; undefined says Hello World!</span>\n</pre>\n<h3 id=\"mcetoc_1go3akel62sf\">Classes</h3>\n<ul>\n<li>The class keyword is syntactic sugar for constructor functions and prototype inheritance</li>\n<li>A class may contain a constructor, the actual constructor function, which will be bound to the class name, and any number of methods</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Person</span> </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">constructor</span>(name, age) {\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name = name;\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.age = age;\n  }\n  speak(phrase) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">`<span class=\"hljs-subst\">${this.name}</span> says: <span class=\"hljs-subst\">${phrase}</span>`</span>);\n  }\n}\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> alice = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Person(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Alice\"</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">19</span>);\nalice.speak(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"It's just syntactic sugar!\"</span>);\n</pre>\n<h3 id=\"mcetoc_1go3akel62sg\">Class Inheritance</h3>\n<ul>\n<li>Classes support inheritance</li>\n<li>The super keyword is used to reference the constructor and methods deﬁned in the base class</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Student</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">extends</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Person</span> </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">constructor</span>(name, age, university) {\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">super</span>(name, age);\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.university = university;\n  }\n  speak(phrase) {\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">super</span>.speak(phrase);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"And I'm a student at the \"</span>+<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.university);\n  }\n}\n</pre>\n<h2 id=\"mcetoc_1go3akel62sh\">Modules</h2>\n<h3 id=\"mcetoc_1go3akel62si\">Global Scope</h3>\n<ul>\n<li>JavaScript has one global scope</li>\n<li>Different JavaScript ﬁles share the same global scope and have not their own private scope</li>\n</ul>\n<p><code>let counter = 0;</code><br><code>function count() { return ++counter; }</code><br><br><code>function logCounter() { console.log(counter); }</code><br><br><code>&lt;html&gt;</code><br><code>&lt;head&gt;</code><br><code>&lt;script src=\"listing_11a.js\"&gt;&lt;/script&gt;</code><br><code>&lt;script src=\"listing_11b.js\"&gt;&lt;/script&gt;</code><br><code>&lt;/head&gt;</code><br><code>&lt;body&gt;</code><br><code>&lt;script&gt;</code><br><code>count();</code><br><code>logCounter(); // &gt;&gt; 1</code><br><code>&lt;/script&gt;</code><br><code>&lt;/body&gt;</code><br><code>&lt;/html&gt;</code></p>\n<h3 id=\"mcetoc_1go3akel62sj\">IIFE</h3>\n<ul>\n<li>An immediately-invoked function expression (IIFE, pronounced ”iffy”) is an unnamed function which is immediately invoked</li>\n<li>An IIFE takes advantage of the concept of closures and the local scope produced by functions</li>\n<li>IIFEs can be used to implement a simple module pattern, in which each module binds only a single global variable</li>\n</ul>\n<p>counter-service.js:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> counterService = (<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n    <span class=\"hljs-comment\" style=\"color: grey;\">// Private scope</span>\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> counter = <span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">count</span>() </span>{ <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> ++counter; }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">logCounter</span>() </span>{ <span class=\"hljs-built_in\">console</span>.log(counter); }\n\n    <span class=\"hljs-comment\" style=\"color: grey;\">// Export public features</span>\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> {count, logCounter};\n})();\n</pre>\n<p><code>&lt;script src=\"counter-service.js\"&gt;&lt;/script&gt;</code><br><code>&lt;script&gt;</code><br><code>counterService.count();</code><br><code>counterService.logCounter(); // 1</code><br><code>&lt;/script&gt;</code></p>\n<h3 id=\"mcetoc_1go3akel62sk\">Example jQuery Plugin</h3>\n<ul>\n<li>A jQuery plugin is implemented as an IIFE</li>\n<li>New features are added to the prototype of jQuery objects (which is the $.fn object)</li>\n<li>See How to Create a Basic Plugin for more details</li>\n</ul>\n<p>jquery-identify.js;</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">$</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> counter = <span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>;\n\n  $.fn.identify = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n      <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.id = <span class=\"hljs-string\" style=\"color: #6a8759;\">'id-'</span>+(++counter);\n    });\n  }\n})(jQuery);\n</pre>\n<p><code>&lt;script src=\"jquery.js\"&gt;&lt;/script&gt;</code><br><code>&lt;script src=\"jquery-identify.js\"&gt;&lt;/script&gt;</code><br><code>&lt;script&gt;</code><br><code>$('p, img').identify();</code><br><code>&lt;/script&gt;</code></p>\n<h3 id=\"mcetoc_1go3r9h51351\">Module Systems</h3>\n<ul>\n<li>Module Systems provide a private scope on a ﬁle basis with the possibility to export functionality and to import functionality from other modules</li>\n<li>Before ES6, JavaScript had no built-in module system and proprietary module systems, such as CommonJS (which is still used by Node.js), were needed</li>\n<li>ES6 introduced its own module system (often called ES modules) with the new keywords import and export</li>\n<li>In larger applications, module dependencies are resolved during the build and bundling process</li>\n<li>ES modules are natively supported by all modern browsers</li>\n</ul>\n<h3 id=\"mcetoc_1go3r9h51352\">ES Modules</h3>\n<ul>\n<li>Features are exported from a module using the export keyword</li>\n<li>The export keyword is placed in front of the item to export</li>\n<li>Functions, classes and variables deﬁned with let or const can be exported</li>\n<li>Multiple features can be exported in a single statement by wrapping the comma-separated list of items in curly braces</li>\n<li>Items which are not exported are local to the module</li>\n<li>Features are imported from other modules using the import keyword</li>\n<li>Speciﬁc features are imported by their names (comma-separated list in curly braces)</li>\n<li>All features of a module can be important using the *-notation</li>\n</ul>\n<h3 id=\"mcetoc_1go3r9h51353\">Export Examples</h3>\n<p>math.js:</p>\n<p><code>export const PI = computePI();</code><br><code>export function square(x) { return x * x; }</code><br><code>export function sum(x, y) { return x + y; }</code><br><code>// Local to math.js</code><br><code>function computePI() { return 3.14; }</code></p>\n<p>colors.js:</p>\n<p><code>const white = '#ffffff', black = '#000000';</code><br><code>function rgbToHex(r, g, b) { return '#' + toHex(r) + toHex(g) + toHex(b); }</code><br><code>function toHex(c) { return ('0' + c.toString(16)).slice(m2); }</code><br><code>// Export multiple features in a single statement</code><br><code>export {white, black, rgbToHex};</code></p>\n<h3 id=\"mcetoc_1go3r9h51354\">Import Examples</h3>\n<p>file1.js:</p>\n<p><code>// Import specific features from another module</code><br><code>import {square, PI} from 'math';</code><br><code>console.log(PI); // &gt;&gt; 3.14</code><br><code>console.log(square(4)); // &gt;&gt; 16</code><br><br>file2.js</p>\n<p><code>// Import all features from another module</code><br><code>import * as math from 'math';</code><br><code>console.log(math.PI); // &gt;&gt; 3.14</code><br><code>console.log(math.sum(4, 5)); // &gt;&gt; 9</code></p>\n<h3 id=\"mcetoc_1go3r9h51355\">Default Export</h3>\n<ul>\n<li>One single export per module can be marked as default using the default keyword</li>\n<li>The default feature is imported without curly braces and any name can be given</li>\n<li>Especially convenient if only one feature is exported per module</li>\n</ul>\n<p>hello-world.js:</p>\n<p><code>export default function() {</code><br><code>console.log(\"Hello World!\");</code><br><code>}</code></p>\n<p>any-class.js:</p>\n<p><code>export default class {</code><br><code>// ...</code><br><code>}</code></p>\n<p>main.js:</p>\n<p><code>import logHelloWorld from 'hello-world';</code><br><code>import AnyClass from 'any-class';</code><br><code>logHelloWorld();</code><br><code>let obj = new AnyClass();</code></p>\n<h3 id=\"mcetoc_1go3r9h51356\">Usage in the Browser</h3>\n<ul>\n<li>The type of the script must be module</li>\n<li>Modules are loaded deferred (after the browser ﬁnished parsing the HTML and building the DOM)</li>\n<li>Modules are running in strict mode by default</li>\n<li>The module name must be the ﬁle path relative to the site root or, using the dot-syntax, relative to the current location, e.g.: import ... from './lib/my-module.js';</li>\n</ul>\n<p><code>&lt;html&gt;</code><br><code>&lt;head&gt;</code><br><code>&lt;title&gt;ES Modules&lt;/title&gt;</code><br><code>&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;</code><br><code>&lt;script type=\"module\"&gt;</code><br><code>import {PI} from './math.js';</code><br><code>// ...</code><br><code>&lt;/script&gt;</code><br><code>&lt;/head&gt;</code><br><code>&lt;body&gt; ... &lt;/body&gt;</code><br><code>&lt;/html&gt;</code></p>\n<h2 id=\"mcetoc_1go3akel62sl\">Promises</h2>\n<h3 id=\"mcetoc_1go41qk9o3km\">Asynchronous Programming</h3>\n<ul>\n<li>JavaScript is single-threaded, hence time-consuming tasks must be implemented asynchronously to not block the thread</li>\n<li>Promises are helpers for asynchronous programming</li>\n<li>A promise is a proxy for a value possibly known in the future</li>\n<li>Instead of passing callback functions to the asynchronous function, the  synchronous function returns a promise on which success and error handlers can be registered</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Traditional approach with callbacks passed to the asynchronous function</span>\ncomputeAsync(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Foo\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">result</span>) </span>{\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Process result</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">error</span>) </span>{\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Handle error</span>\n});\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Promise based approach where the asynchronous function returns a promise</span>\ncomputeAsync(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Foo\"</span>)\n  .then(result =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* Process result */</span> })\n  .catch(error =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* Handle error */</span> });\n</pre>\n<h3 id=\"mcetoc_1go41qk9o3kn\">Promises Are State Machines</h3>\n<ul>\n<li>Newly created promises are in the state pending</li>\n<li>A promise remains pending as long as the value is unknown and no error has occurred</li>\n<li>As soon as the value is available, the state changes to fullﬁled and registered success handlers are called</li>\n<li>If an error occurs, the state changes to rejected and registered error handlers are called</li>\n<li>Once the state is fullﬁled or rejected, the promise remains in this state for ever</li>\n</ul>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/79/Screenshot-2023-01-31-at-14.42.22.png\" alt=\"\" width=\"882\" height=\"734\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.42.22-xs.png 300w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.42.22-sm.png 480w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.42.22-md.png 768w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.42.22-lg.png 1024w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.42.22-xl.png 1360w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.42.22-2xl.png 1600w\"></figure>\n<h2 id=\"mcetoc_1go41qk9o3ko\">Creating Promises</h2>\n<ul>\n<li>Promises are created using the Promise constructor</li>\n<li>A function is passed to the constructor implementing the asynchronous task</li>\n<li>The function is called by the promise, passing two functions to resolve or reject the promise</li>\n<li>Either the resolve or reject function must be ﬁnally called by the asynchronous task</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">computeAsync</span>() </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {\n\n    <span class=\"hljs-comment\" style=\"color: grey;\">// ... Perform the asynchronous task (Promise is pending)</span>\n\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (success) resolve(result);  <span class=\"hljs-comment\" style=\"color: grey;\">// Promise will be fulfilled</span>\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">else</span> reject(error);            <span class=\"hljs-comment\" style=\"color: grey;\">// Promise will be rejected</span>\n  });\n}\n</pre>\n<h3 id=\"mcetoc_1go41qk9o3kp\">Promise Example</h3>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">computePI</span>() </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {\n    <span class=\"hljs-comment\" style=\"color: grey;\">// Computing PI is hard work...</span>\n    setTimeout(() =&gt; {\n      <span class=\"hljs-comment\" style=\"color: grey;\">// Computing PI fails with a certain probability...</span>\n      <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (<span class=\"hljs-built_in\">Math</span>.random() &lt; <span class=\"hljs-number\" style=\"color: #6897bb;\">0.2</span>) {\n        reject(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Sorry, computation failed!\"</span>);     <span class=\"hljs-comment\" style=\"color: grey;\">// Reject the promise</span>\n      } <span class=\"hljs-keyword\" style=\"color: #cc7832;\">else</span> {\n        resolve(<span class=\"hljs-number\" style=\"color: #6897bb;\">3.14</span>);       <span class=\"hljs-comment\" style=\"color: grey;\">// Resolve the promise to the value of PI</span>\n      }\n    }, <span class=\"hljs-number\" style=\"color: #6897bb;\">300</span>);\n  });\n}\n\ncomputePI()\n  .then(result =&gt; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"PI: \"</span>+result))\n  .catch(error =&gt; <span class=\"hljs-built_in\">console</span>.log(error));\n</pre>\n<h3 id=\"mcetoc_1go41qk9o3kq\">Chaining</h3>\n<ul>\n<li>The then and catch functions return a promise, hence they can<br>be chained</li>\n<li>The promise returned by then and catch resolves to the return value of the handler or to its original settled value if the handler was not called (e.g. a catch-handler is not called on a fullﬁled promise)</li>\n<li>If the handler returns a promise, the promise returned by then and catch resolves to the same value as the returned promise</li>\n</ul>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/79/Screenshot-2023-01-31-at-14.49.16.png\" alt=\"\" width=\"2062\" height=\"734\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.49.16-xs.png 300w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.49.16-sm.png 480w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.49.16-md.png 768w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.49.16-lg.png 1024w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.49.16-xl.png 1360w ,https://www.finecloud.ch/media/posts/79/responsive/Screenshot-2023-01-31-at-14.49.16-2xl.png 1600w\"></figure>\n<h3 id=\"mcetoc_1go41qk9o3kr\">Chaining and Combining Examples</h3>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Chaining</span>\ndoAsync()\n  .then(resultA =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> })\n  .then(resultB =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> })\n  .catch(error =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> })\n  .then(resultC =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> })\n  .catch(error =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> });\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Add multiple handlers to the same promise</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> promise = doAsync();\npromise.then(result =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> });\npromise.then(result =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> });\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// 'Wait' until all promises are fulfilled or one rejected</span>\n<span class=\"hljs-built_in\">Promise</span>.all([doAsync(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"A\"</span>), doAsync(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"B\"</span>), doAsync2()])\n  .then(results =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> })\n  .catch(error =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> });\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// 'Wait' until the first promise is fulfilled or rejected</span>\n<span class=\"hljs-built_in\">Promise</span>.race([doAsync(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"A\"</span>), doAsync(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"B\"</span>), doAsync2()])\n  .then(result =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> })\n  .catch(error =&gt; { <span class=\"hljs-comment\" style=\"color: grey;\">/* ... */</span> });\n</pre>\n<h3 id=\"mcetoc_1go41qk9o3ks\">async and await</h3>\n<ul>\n<li>async and await allow asynchronous code to be written synchronously</li>\n<li>An async function implicitly returns a promise, which resolves to the return value of the function or is rejected on exception</li>\n<li>async functions can await other promises (written synchronously)</li>\n<li>await interrupts the synchronous execution and waits until the returned promise is resolved or rejected</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">computeDiskArea</span>(<span class=\"hljs-params\">radius</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> PI = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">await</span> computePI();\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> radius * radius * PI;\n}\n\ncomputeDiskArea(<span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>)\n  .then(area =&gt; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"The area of a disk with r=2 is \"</span>+area))\n  .catch(error =&gt; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"An error occurred: \"</span>+error))\n</pre>\n<h2 id=\"mcetoc_1go3akel62sm\">Fetch API</h2>\n<ul>\n<li>The Fetch API provides an interface for fetching resources</li>\n<li>This includes resources across the network</li>\n<li>It is similar to the XMLHttpRequest but it is more powerful and more ﬂexible</li>\n<li>It provides a generic deﬁnition of Request and Response objects</li>\n<li>The global fetch function takes the URL of a resource as parameter and returns a promise which resolves to a Response object once the response is available</li>\n</ul>\n<p><code>fetch('http://quotes.org')</code><br><code>  .then(response =&gt; response.text())</code><br><code>  .then(quote =&gt; console.log(quote));</code></p>\n<h3>Response Object</h3>\n<ul>\n<li>A Response object has the following properties:\n<ul>\n<li>ok - true if the status code is 2xx, false otherwise</li>\n<li>status - the response status code</li>\n<li>statusText - the status code message</li>\n<li>headers - the response headers</li>\n</ul>\n</li>\n<li>In addition, Response provides the following methods:\n<ul>\n<li>text() returns a promise resolving to the body as string</li>\n<li>json() returns a promise resolving to the result of parsing the body as JSON</li>\n<li>blob() returns a promise resolving the body as Blob object</li>\n</ul>\n</li>\n</ul>\n<p><code>fetch('http://news.org')</code><br><code>  .then(response =&gt; response.json())</code><br><code>  .then(data =&gt; data.articles.forEach(article =&gt; console.log(article.title)));</code></p>\n<h3>Request Options</h3>\n<p>The fetch function has as a second optional parameter that allows setting the HTTP method, headers and request body:</p>\n<p><code>fetch('http://news.org', {</code><br><code>method: 'POST',</code><br><code>headers: {</code><br><code>'Authorization:': 'Basic amRAZXhhbXBsZS5vcmc6MTIzNDU=',</code><br><code>'Content-Type': 'application/json'</code><br><code>},</code><br><code>body: JSON.stringify(article)</code><br><code>});</code></p>\n<p>Advanced settings include:</p>\n<ul>\n<li>the interaction with the browser cache</li>\n<li>the following of redirect responses</li>\n<li>sending credentials</li>\n<li>aborting requests</li>\n</ul>\n<h3>Error Handling</h3>\n<ul>\n<li>The promise returned by fetch does only reject on network errors but not on HTTP errors such as 404 or 500 (in contrast to many AJAX libraries)</li>\n<li>An accurate error handling should check if the promise was resolved and if its  status is OK</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\">fetch(<span class=\"hljs-string\" style=\"color: #6a8759;\">'http://news.org'</span>)\n  .then(response =&gt; {\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (!response.ok)\n      <span class=\"hljs-comment\" style=\"color: grey;\">// Error handling based on HTTP status</span>\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> response.json();\n  })\n  .then(data =&gt; {\n    ...\n  })\n  .catch(error =&gt; {\n    <span class=\"hljs-comment\" style=\"color: grey;\">// Error handling (network error, JSON syntax error, etc.)</span>\n  });\n</pre>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "javascript",
                   "dev"
            ],
            "date_published": "2023-01-31T07:15:51+01:00",
            "date_modified": "2023-03-29T20:14:17+02:00"
        },
        {
            "id": "https://www.finecloud.ch/javascript-and-the-browser.html",
            "url": "https://www.finecloud.ch/javascript-and-the-browser.html",
            "title": "JavaScript and the browser",
            "summary": "The DOM Based on the received HTML document the browser builds up a model of the document structure, the Document Object Model (DOM) The DOM has a tree structure and each node of the document is represented by an object The browser renders the page&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1go1k7l5mfr\">The DOM</a>\n<ul>\n<li><a href=\"#mcetoc_1go1k7l5mfs\">The DOM Tree</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1go1k7l5mft\">Finding Elements</a></li>\n<li><a href=\"#mcetoc_1go1k7l5mfu\">Element nodes</a></li>\n<li><a href=\"#mcetoc_1go1k7l5mfv\">Manipulating the DOM</a></li>\n<li><a href=\"#mcetoc_1go1k7l5mg0\">Animation</a></li>\n<li><a href=\"#mcetoc_1go1k7l5mg1\">Event handling</a>\n<ul>\n<li><a href=\"#mcetoc_1go1kdqqcj7\">Event Object</a></li>\n<li><a href=\"#mcetoc_1go1kdqqcj8\">Event Propagation</a></li>\n<li><a href=\"#mcetoc_1go1kdqqcj9\">Default action</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1go387fbq1bm\">AJAX</a>\n<ul>\n<li><a href=\"#mcetoc_1go387fbq1bn\">AJAX and JSON</a></li>\n<li><a href=\"#mcetoc_1go387fbq1bo\">Same-Origin Policy</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1go387fbq1bp\">jQuery</a>\n<ul>\n<li><a href=\"#mcetoc_1go387fbq1bq\">jQuery usage</a></li>\n<li><a href=\"#mcetoc_1go387fbq1br\">The jQuery Object</a></li>\n<li><a href=\"#mcetoc_1go387fbq1bs\">jQuery and AJAX</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1go1k7l5mfr\">The DOM</h2>\n<ul>\n<li>Based on the received HTML document the browser builds up a model of the document structure, the Document Object Model (DOM)</li>\n<li>The DOM has a tree structure and each node of the document is represented by an object</li>\n<li>The browser renders the page based on the DOM and provides an API to read and modify the DOM with JS</li>\n<li>The DOM is live, i.e., DOM modiﬁcations are immediately reﬂected on the page</li>\n</ul>\n<h3 id=\"mcetoc_1go1k7l5mfs\">The DOM Tree</h3>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"xml\"><span class=\"hljs-meta\" style=\"color: #bbb529;\">&lt;!doctype html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">html</span>&gt;</span>\n<span class=\"hljs-tag\">  &lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">head</span>&gt;</span>\n<span class=\"hljs-tag\">    &lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">title</span>&gt;</span>Todo App<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">title</span>&gt;</span>\n<span class=\"hljs-tag\">  &lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">head</span>&gt;</span>\n<span class=\"hljs-tag\">  &lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">body</span>&gt;</span>\n<span class=\"hljs-tag\">    &lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">h1</span>&gt;</span>Todo App<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">    &lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">p</span>&gt;</span>Don't forget anything!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">p</span>&gt;</span>\n<span class=\"hljs-tag\">    &lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">p</span>&gt;</span>Please <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: #e8bf6a;\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\" style=\"color: #6a8759;\">\"/login\"</span>&gt;</span>login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">a</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">p</span>&gt;</span>\n<span class=\"hljs-tag\">  &lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: #e8bf6a;\">html</span>&gt;</span></span></pre>\n<p>the Tree Structure of the html above:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/77/Screenshot-2023-01-24-at-10.45.34.png\" alt=\"\" width=\"1434\" height=\"858\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-24-at-10.45.34-xs.png 300w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-24-at-10.45.34-sm.png 480w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-24-at-10.45.34-md.png 768w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-24-at-10.45.34-lg.png 1024w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-24-at-10.45.34-xl.png 1360w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-24-at-10.45.34-2xl.png 1600w\"></figure>\n<p>you can traverse the DOM Tree with:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Root node of the dom tree (html)</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> root = <span class=\"hljs-built_in\">document</span>.documentElement;\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// The child elements of a node (only element nodes, no text nodes)</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; HTMLCollection(2) [head, body]</span>\nroot.children;\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// head and body can also be accessed directly</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> head = <span class=\"hljs-built_in\">document</span>.head;\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> body = <span class=\"hljs-built_in\">document</span>.body;\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// All children of a node (including text nodes)</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; NodeList(7) [\\#text, h1, \\#text, p, \\#text, p, \\#text]</span>\nbody.childNodes;\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Accessing children and node type</span>\nbody.childNodes[<span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>].nodeType === Node.TEXT_NODE;      <span class=\"hljs-comment\" style=\"color: grey;\">// \\#text</span>\nbody.childNodes[<span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>].nodeType === Node.ELEMENT_NODE;   <span class=\"hljs-comment\" style=\"color: grey;\">// h1</span>\n\nbody.firstChild;                                     <span class=\"hljs-comment\" style=\"color: grey;\">// \\#text</span>\nbody.firstElementChild;                              <span class=\"hljs-comment\" style=\"color: grey;\">// h1</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// dito for last: lastChild, lastElementChild</span>\n</pre>\n<p>Another example:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> h1 = <span class=\"hljs-built_in\">document</span>.body.children[<span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>];\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Parent node</span>\nh1.parentNode;\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Siblings</span>\nh1.nextSibling;                                     <span class=\"hljs-comment\" style=\"color: grey;\">// \\#text</span>\nh1.nextElementSibling;                              <span class=\"hljs-comment\" style=\"color: grey;\">// p</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// dito for previous: previousSibling, previousElementSibling</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Example of recursively traversing the DOM</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">findAnchors</span>(<span class=\"hljs-params\">node</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (node.tagName === <span class=\"hljs-string\" style=\"color: #6a8759;\">'A'</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(node.textContent+<span class=\"hljs-string\" style=\"color: #6a8759;\">\": \"</span>+node.pathname);\n  }\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (node.nodeType === Node.ELEMENT_NODE) {\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> i = <span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>; i &lt; node.children.length; i++) {\n      findAnchors(node.children[i]);\n    }\n  }\n}\nfindAnchors(<span class=\"hljs-built_in\">document</span>.body);\n</pre>\n<h2 id=\"mcetoc_1go1k7l5mft\">Finding Elements</h2>\n<p>It is often not a good idea to access a speciﬁc node by a ﬁxed path since the document structure may change over time:</p>\n<pre>// Get the href attribute of the first anchor<br>document.body.childNodes[5].childNodes[1].href;</pre>\n<p>There are a number of functions to ﬁnd DOM elements in a more sophisticated way. The functions can be called on the document or on any element node to reduce the search on the node’s descendants</p>\n<pre>// Get the href attribute of the first anchor<br>document.getElementsByTagName('a')[0].href;</pre>\n<p>more examples of finding elements:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Get a HTMLCollection of nodes by tag name</span>\n<span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\" style=\"color: #6a8759;\">'a'</span>);\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Get a HTMLCollection of nodes by class name</span>\n<span class=\"hljs-built_in\">document</span>.getElementsByClassName(<span class=\"hljs-string\" style=\"color: #6a8759;\">'external-link'</span>);\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// A single node can be retrieved by id (only via document)</span>\n<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\" style=\"color: #6a8759;\">'logo'</span>);\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Elements can also be selected by using a CSS selector string</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// A static NodeList is returned</span>\n<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\" style=\"color: #6a8759;\">'p a.external-link'</span>);\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Like querySelectorAll but only the first matching node is returned</span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'#logo'</span>);\n</pre>\n<h2 id=\"mcetoc_1go1k7l5mfu\">Element nodes</h2>\n<ul>\n<li>For different HTML elements (body, div, p, a, etc.) different objects with different properties and methods are created</li>\n<li>For example, an anchor object has a href and pathname property, whereas a form object has a submit and reset method</li>\n<li>w3schools provides a nice reference http://www.w3schools.com/jsref/default.asp</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> a = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'a'</span>);\n<span class=\"hljs-built_in\">console</span>.log(a.href);\n <span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; ’https://www.todo-app.com/login’</span>\n<span class=\"hljs-built_in\">console</span>.log(a.pathname);\n <span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; ’/login’</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> f = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\" style=\"color: #6a8759;\">'myForm'</span>);\nf.reset();\n <span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; resets all fields of the form</span>\nf.submit();\n <span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; submits the form</span></pre>\n<h2 id=\"mcetoc_1go1k7l5mfv\">Manipulating the DOM</h2>\n<ul>\n<li>Almost everything in the DOM can be manipulated with JavaScript:\n<ul>\n<li>Single node properties can be changed</li>\n<li>Nodes can be moved within the tree</li>\n<li>Nodes can be removed </li>\n<li>New nodes can be added</li>\n</ul>\n</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> h1 = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'h1'</span>);\n<span class=\"hljs-comment\" style=\"color: grey;\">// Change the color style property to ’#FF0000’</span>\nh1.style.color = <span class=\"hljs-string\" style=\"color: #6a8759;\">'#FF0000'</span>;\n<span class=\"hljs-comment\" style=\"color: grey;\">// Change the display style property to ’none’</span>\nh1.style.display = <span class=\"hljs-string\" style=\"color: #6a8759;\">'none'</span>;\n<span class=\"hljs-comment\" style=\"color: grey;\">// Change the text of the h1</span>\nh1.childNodes[<span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>].nodeValue = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Hello Earth!\"</span>;\n<span class=\"hljs-comment\" style=\"color: grey;\">// Or more comfortable by using the textContent property (all children of h1</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// are removed and and a new text node with the respective text is added)</span>\nh1.textContent = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Hello World!\"</span>;</pre>\n<p>another example:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> myList = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'ul'</span>);\n<span class=\"hljs-comment\" style=\"color: grey;\">// Nodes can be moved by simply re-inserting them at a different position</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; The last node of the list is moved to the beginning of the list</span>\nmyList.insertBefore(myList.lastElementChild, myList.firstElementChild);\n<span class=\"hljs-comment\" style=\"color: grey;\">// An element is removed by calling remove() on the node</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; Removes the last element from the list</span>\nmyList.lastElementChild.remove();\n<span class=\"hljs-comment\" style=\"color: grey;\">// New element and text nodes can be created. Newly created nodes must be</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// added to the DOM tree explicitly. e.g. using appendChild()</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; Creates a new list item and appends it to the end of the list</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> li = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\" style=\"color: #6a8759;\">'li'</span>);\nli.appendChild(<span class=\"hljs-built_in\">document</span>.createTextNode(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"New item\"</span>));\nmyList.appendChild(li);\n<span class=\"hljs-comment\" style=\"color: grey;\">// Nodes can also be created implicitly by using the innerHTML property</span>\nli.innerHTML = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"An &lt;b&gt;important&lt;/b&gt; item\"</span>;</pre>\n<h2 id=\"mcetoc_1go1k7l5mg0\">Animation</h2>\n<ul>\n<li>The setTimeout function waits a given number of milliseconds and then calls a function</li>\n<li>setTimeout can be used to implement an animation</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// The background color shall change between red and blue every second</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> ball = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'#ball'</span>);\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> toggle = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>;\n<span class=\"hljs-comment\" style=\"color: grey;\">// The animation function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">animate</span>() </span>{\nball.style.backgroundColor = toggle ? <span class=\"hljs-string\" style=\"color: #6a8759;\">'#f00'</span> : <span class=\"hljs-string\" style=\"color: #6a8759;\">'#00f'</span>;\ntoggle = !toggle;\n<span class=\"hljs-comment\" style=\"color: grey;\">// Keep the animation runnning</span>\nsetTimeout(animate, <span class=\"hljs-number\" style=\"color: #6897bb;\">1000</span>);\n}\n<span class=\"hljs-comment\" style=\"color: grey;\">// Start the animation</span>\nsetTimeout(animate, <span class=\"hljs-number\" style=\"color: #6897bb;\">1000</span>);</pre>\n<ul>\n<li>setInterval is similar to setTimeout but calls the function every interval and not only once</li>\n<li>clearInterval and clearTimeout clear a timer set with setInterval and setTimeout respectively</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> ball = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'#ball'</span>);\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> toggle = <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">animate</span>() </span>{\nball.style.backgroundColor = toggle ? <span class=\"hljs-string\" style=\"color: #6a8759;\">'#f00'</span> : <span class=\"hljs-string\" style=\"color: #6a8759;\">'#00f'</span>;\ntoggle = !toggle;\n}\n<span class=\"hljs-comment\" style=\"color: grey;\">// Start the animation</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> id = setInterval(animate, <span class=\"hljs-number\" style=\"color: #6897bb;\">1000</span>);\n<span class=\"hljs-comment\" style=\"color: grey;\">// Stop the animation after 10s</span>\nsetTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>()</span>{\nclearInterval(id);\n}, <span class=\"hljs-number\" style=\"color: #6897bb;\">10000</span>);</pre>\n<ul>\n<li>For smooth animations use requestAnimationFrame</li>\n<li>The scheduled animation function is called when the browser is ready to repaint the screen (at a rate of about 60 times per second but only when the window/tab is active)</li>\n<li>By using requestAnimationFrame the browser can optimize concurrent animations</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> ball = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'#ball'</span>);\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> angle = <span class=\"hljs-built_in\">Math</span>.PI / <span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">animate</span>(<span class=\"hljs-params\">time, lastTime</span>) </span>{\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (lastTime) {\n<span class=\"hljs-comment\" style=\"color: grey;\">// Compute the next position based on the elapsed time</span>\nangle += (time - lastTime) * <span class=\"hljs-number\" style=\"color: #6897bb;\">0.001</span>;\n}\nball.style.left = (<span class=\"hljs-built_in\">Math</span>.cos(angle) * <span class=\"hljs-number\" style=\"color: #6897bb;\">200</span>) + <span class=\"hljs-string\" style=\"color: #6a8759;\">'px'</span>;\nrequestAnimationFrame(<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">newTime</span>) </span>{ animate(newTime, time); });\n}\nrequestAnimationFrame(animate);</pre>\n<h2 id=\"mcetoc_1go1k7l5mg1\">Event handling</h2>\n<ul>\n<li>Normally, a GUI must not only provide data to the user but also react to user input </li>\n<li>A user interacts with the GUI by key strokes, mouse clicks, mouse moves, etc.</li>\n<li>There are also implicit user interactions like window scrolling, window resizing, etc.</li>\n<li>To react programmatically to user input, one could constantly read the state of the input device or adopt a polling mechanism</li>\n<li>A better approach is a system that actively notifies registered listeners, also called handlers, about user inputs by firing events</li>\n<li>Event handlers are registered for a certain event type using addEventListener and removed using removeEventListener</li>\n<li>Event handlers are always registered in a context and are only called for events in that context</li>\n<li>Event handlers can be registered on the window or on any DOM element</li>\n<li>Multiple handlers can be registered for the same event and the same handler can be registered for multiple events</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// An event handler can be registerd for a certain event type</span>\n<span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\" style=\"color: #6a8759;\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"That's amazing!\"</span>);\n});\n<span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\" style=\"color: #6a8759;\">'resize'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Window has been resized\"</span>);\n});\n<span class=\"hljs-comment\" style=\"color: grey;\">// Event handlers can be registerd on DOM elements to confine the context</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> myButton = docuemnt.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'#my-button'</span>);\nmyButton.addEventListener(<span class=\"hljs-string\" style=\"color: #6a8759;\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>()</span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">'What a surprise!'</span>);\n});\n<span class=\"hljs-comment\" style=\"color: grey;\">// Event handlers can also be removed again</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">once</span>() </span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">'Done.'</span>);\n<span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\" style=\"color: #6a8759;\">'click'</span>, once);\n}\n<span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\" style=\"color: #6a8759;\">'click'</span>, once);</pre>\n<h3 id=\"mcetoc_1go1kdqqcj7\">Event Object</h3>\n<ul>\n<li>Most events are propagated through the DOM tree, thus event handlers registered on an ancestor nodes are called too</li>\n<li>Default propagation behaviour is bubbling (the more specific handler, the earlier it is called)</li>\n<li>Handlers can also be registered in the capturing phase (before the bubbling phase)</li>\n<li>The propagation of an event can be stopped by any handler by calling stopPropagation on the event object</li>\n</ul>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/77/Pasted-image-20230130160641.png\" alt=\"\" width=\"421\" height=\"229\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160641-xs.png 300w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160641-sm.png 480w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160641-md.png 768w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160641-lg.png 1024w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160641-xl.png 1360w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160641-2xl.png 1600w\"></figure>\n<h3 id=\"mcetoc_1go1kdqqcj8\">Event Propagation</h3>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Registering a click event handler on the body and a button</span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'body'</span>).addEventListener(<span class=\"hljs-string\" style=\"color: #6a8759;\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Handler on body (bubbling)\"</span>);\n});\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'button'</span>).addEventListener(<span class=\"hljs-string\" style=\"color: #6a8759;\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Handler on button (bubbling)\"</span>);\n});\n<span class=\"hljs-comment\" style=\"color: grey;\">// Clicking on the button results in the following output:</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; Handler on button (bubbling)</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; Handler on body (bubbling)</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// Register an event handler in the capturing phase</span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'body'</span>).addEventListener(<span class=\"hljs-string\" style=\"color: #6a8759;\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Handler on body (capturing)\"</span>);\n}, <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>);\n<span class=\"hljs-comment\" style=\"color: grey;\">// Clicking now on the button results in the following output:</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; Handler on body (capturing)</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; Handler on button (bubbling)</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; Handler on body (bubbling)</span></pre>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// The propagation of an event can be stopped by an event handler</span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'button'</span>).addEventListener(<span class=\"hljs-string\" style=\"color: #6a8759;\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Handler on button (bubbling)\"</span>);\ne.stopPropagation();\n});\n<span class=\"hljs-comment\" style=\"color: grey;\">// Clicking on the button results in the following ouput:</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; Handler on body (capturing)</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// -&gt; Handler on button (bubbling)</span></pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/77/Pasted-image-20230130160742.png\" alt=\"\" width=\"481\" height=\"216\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160742-xs.png 300w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160742-sm.png 480w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160742-md.png 768w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160742-lg.png 1024w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160742-xl.png 1360w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160742-2xl.png 1600w\"></figure>\n<h3 id=\"mcetoc_1go1kdqqcj9\">Default action</h3>\n<ul>\n<li>Some events have associated default actions:\n<ul>\n<li>clicking on a link loads the link target</li>\n<li>clicking on a submit button submits the form</li>\n<li>pressing the down arrow scrolls the page down</li>\n</ul>\n</li>\n<li>Event handlers are called before the default behaviour takes place</li>\n<li>If the default action is unwanted, then the event handler can call preventDefault on the event object</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// The default action can be prevented by a handler</span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\" style=\"color: #6a8759;\">'a'</span>).addEventListener(<span class=\"hljs-string\" style=\"color: #6a8759;\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\ne.preventDefault();\nalert(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Sorry, but we don't want you to leave!\"</span>);\n});</pre>\n<h2 id=\"mcetoc_1go387fbq1bm\">AJAX</h2>\n<ul>\n<li>AJAX (Asynchronous JavaScript and XML) is used to create faster and more interactive web applications</li>\n<li>AJAX enables JavaScript to load data from the server without reloading the page</li>\n<li>On the protocol level, AJAX requests are just a normal HTTP requests</li>\n<li>The XMLHttpRequest (XHR) object is the interface for AJAX requests</li>\n<li>Despite the term XML in AJAX and XHR, any type of data can be loaded from the server</li>\n<li>ES6 introduced the new Promise based Fetch API</li>\n</ul>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/77/Screenshot-2023-01-31-at-07.17.30.png\" alt=\"\" width=\"1494\" height=\"834\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-31-at-07.17.30-xs.png 300w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-31-at-07.17.30-sm.png 480w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-31-at-07.17.30-md.png 768w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-31-at-07.17.30-lg.png 1024w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-31-at-07.17.30-xl.png 1360w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-31-at-07.17.30-2xl.png 1600w\"></figure>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Create a new XMLHttpRequest object</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> xhr = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> XMLHttpRequest();\n<span class=\"hljs-comment\" style=\"color: grey;\">// Specify the type of request: method and url</span>\nxhr.open(<span class=\"hljs-string\" style=\"color: #6a8759;\">'GET'</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">'/ajax/time'</span>);\n<span class=\"hljs-comment\" style=\"color: grey;\">// Register a callback to be notified about state changes</span>\nxhr.onreadystatechange = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Check ready state: 4 means request completed</span>\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.readyState === <span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>) {\n    <span class=\"hljs-comment\" style=\"color: grey;\">// Check HTTP status: 200 OK</span>\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.status === <span class=\"hljs-number\" style=\"color: #6897bb;\">200</span>) {\n      <span class=\"hljs-comment\" style=\"color: grey;\">// Update DOM with the response text</span>\n      <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\" style=\"color: #6a8759;\">'time'</span>).innerHTML = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.responseText;\n    } <span class=\"hljs-keyword\" style=\"color: #cc7832;\">else</span> {\n      <span class=\"hljs-comment\" style=\"color: grey;\">// Error handling...</span>\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Something failed!\"</span>);\n    }\n  }\n};\n<span class=\"hljs-comment\" style=\"color: grey;\">// Send the request</span>\nxhr.send();\n</pre>\n<h3 id=\"mcetoc_1go387fbq1bn\">AJAX and JSON</h3>\n<ul>\n<li>The property responseText of the XMLHttpRequest object contains the HTTP response body as a string</li>\n<li>If the response is an XML document, the data can be accessed directly by the responseXML property</li>\n<li>If the response is a JSON document, the JSON string must be parsed manually</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Retrieving a JSON document</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> xhr = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> XMLHttpRequest();\nxhr.open(<span class=\"hljs-string\" style=\"color: #6a8759;\">'GET'</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">'/ajax/data.json'</span>);\nxhr.onloadend = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.status === <span class=\"hljs-number\" style=\"color: #6897bb;\">200</span>) {\n    <span class=\"hljs-comment\" style=\"color: grey;\">// Parse the responseText into an object</span>\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> obj = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.responseText);\n    <span class=\"hljs-built_in\">console</span>.log(obj.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" is \"</span>+obj.age+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" years old.\"</span>);\n  } <span class=\"hljs-keyword\" style=\"color: #cc7832;\">else</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Error...\"</span>);\n  }\n};\nxhr.send();\n</pre>\n<h3 id=\"mcetoc_1go387fbq1bo\">Same-Origin Policy</h3>\n<ul>\n<li>The same-origin policy is a browser security feature that restricts how documents and scripts from one origin can interact with resources from another origin</li>\n<li>Two URLs have the same origin if the protocol, host, and port are the same</li>\n<li>Generally, embedding a cross-origin resource using tags such as img, link, and script is permitted</li>\n<li>Accessing a cross-origin resource using an AJAX request is blocked by default</li>\n<li>Using CORS headers, a web server can explicitly allow certain hosts to access its resources</li>\n</ul>\n<h2 id=\"mcetoc_1go387fbq1bp\">jQuery</h2>\n<blockquote>\n<p>”jQuery is a fast, small, and feature-rich JavaScript library” / <span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">jquery.com</span></p>\n</blockquote>\n<ul>\n<li>jQuery simpliﬁes\n<ul>\n<li>element selection</li>\n<li>DOM traversal/manipulation</li>\n<li>event handling</li>\n<li>animation</li>\n<li>AJAX requests</li>\n</ul>\n</li>\n<li>Provides an easy-to-use API</li>\n<li>Is tested on all major browsers</li>\n<li>Was initially released in 2006 and used by 80% of the top 100k websites in 2022 (builtwith.com)</li>\n</ul>\n<h3 id=\"mcetoc_1go387fbq1bq\">jQuery usage</h3>\n<p>jQuery can be downloaded and included by a single script tag:<br><code>&lt;script src=\"js/jquery.js\"&gt;&lt;/script&gt;</code><br>jQuery can also be loaded directly from jQuery or a CDN:<br><code>&lt;script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"&gt;&lt;/script&gt;</code><br><code>&lt;script src=\"https://unpkg.com/jquery\"&gt;&lt;/script&gt;</code></p>\n<p>Example:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// On document ready...</span>\n$(<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Set the css property color of each div to red</span>\n  $(<span class=\"hljs-string\" style=\"color: #6a8759;\">'div'</span>).css(<span class=\"hljs-string\" style=\"color: #6a8759;\">'color'</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">'red'</span>);\n\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Load some content for each selected element</span>\n  $(<span class=\"hljs-string\" style=\"color: #6a8759;\">'.content'</span>).each(<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>()</span>{\n    $(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>).load(<span class=\"hljs-string\" style=\"color: #6a8759;\">'/ajax/content'</span>, {id: <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.id});\n  });\n\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Register a click event handler. On each click a paragraph is added</span>\n  <span class=\"hljs-comment\" style=\"color: grey;\">// to the article element</span>\n  $(<span class=\"hljs-string\" style=\"color: #6a8759;\">'#add-content'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n    $(<span class=\"hljs-string\" style=\"color: #6a8759;\">'article'</span>).append($(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"&lt;p&gt;More content...&lt;/p&gt;\"</span>));\n  });\n\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Make an AJAX request and insert the received HTML into the DOM</span>\n  $.get(<span class=\"hljs-string\" style=\"color: #6a8759;\">'/ajax/test.html'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n    $(<span class=\"hljs-string\" style=\"color: #6a8759;\">'#result'</span>).html(data);\n  });\n});\n</pre>\n<p>There is no magic!</p>\n<ul>\n<li>$ is an alias for jQuery, which is a function and thus an object</li>\n<li>$(...) is equal to jQuery(...) and is just a function call</li>\n<li>$.abc() calls the jQuery’s static utility function abc</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// From jQuery’s source code: jQuery is a function and $ an alias</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">var</span> jQuery = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">slector, context</span>) </span>{\n<span class=\"hljs-comment\" style=\"color: grey;\">// ...</span>\n};\n<span class=\"hljs-built_in\">window</span>.jQuery = <span class=\"hljs-built_in\">window</span>.$ = jQuery;</pre>\n<h3 id=\"mcetoc_1go387fbq1br\">The jQuery Object</h3>\n<ul>\n<li>A jQuery object references one or more DOM nodes</li>\n<li>jQuery objects have methods to manipulate and to access these nodes</li>\n<li>Manipulations are applied to each DOM node referenced by the object</li>\n<li>jQuery object methods are chainable</li>\n</ul>\n<p><code>$('div')</code><br><code>.css('background-color', '#f00')</code><br><code>.addClass('whatever')</code><br><code>.click(function(){ console.log(\"Clicked!\"); })</code><br><code>.first()</code><br><code>.fadeOut(400);</code></p>\n<h3 id=\"mcetoc_1go387fbq1bs\">jQuery and AJAX</h3>\n<ul>\n<li>jQuery has great support for AJAX</li>\n<li>Supported data types are XML, HTML, Script, JSON, JSONP, and TEXT</li>\n<li>Besides the basic $.ajax() function, there are a number of convenient shorthand functions:\n<ul>\n<li>$.get()</li>\n<li>$.post()</li>\n<li>$.getJSON()</li>\n<li>.load()</li>\n</ul>\n</li>\n<li>Provides simpliﬁed callback handling (success/error)</li>\n<li>In addition, the jqXHR object implements the Promise interface</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// AJAX example with success and error callback</span>\n$.ajax({\n  url: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"/ajax/time\"</span>,\n  type: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"GET\"</span>,\n  dataType: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"text\"</span>,\n  success: <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">data</span>)</span>{ $(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"#time\"</span>).html(data); },\n  error: <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">jqXHR, status, msg</span>)</span>{ $(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"#error\"</span>).html(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Error! \"</span>+msg); }\n});\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// GET example with success callback</span>\n$.get(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"/ajax/time\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">data</span>)</span>{ $(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"#time\"</span>).html(data); });\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Load example</span>\n$(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"#time\"</span>).load(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"/ajax/time\"</span>);\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// POST example with success callback and JSON response</span>\n$.post(\n  <span class=\"hljs-string\" style=\"color: #6a8759;\">\"/ajax/get_person_data\"</span>,\n  $(<span class=\"hljs-string\" style=\"color: #6a8759;\">'#form'</span>).serialize(),    <span class=\"hljs-comment\" style=\"color: grey;\">// request data</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">person</span>) </span>{ $(<span class=\"hljs-string\" style=\"color: #6a8759;\">'#person'</span>).html(person.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" is \"</span>+person.age); },\n  <span class=\"hljs-string\" style=\"color: #6a8759;\">\"json\"</span>);\n</pre>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "javascript",
                   "dev"
            ],
            "date_published": "2023-01-24T08:35:37+01:00",
            "date_modified": "2023-03-29T20:14:23+02:00"
        },
        {
            "id": "https://www.finecloud.ch/javascript-objects.html",
            "url": "https://www.finecloud.ch/javascript-objects.html",
            "title": "JavaScript objects",
            "summary": "Object An object is a collection of properties A property has a name and a value An object can be seen as associative array (map) where the keys in the array are the names of the object’s properties // Create object as literal const bob&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gn0ic8ssj0\">Object</a></li>\n<li><a href=\"#mcetoc_1gn0ic8ssj1\">Object Properties</a></li>\n<li><a href=\"#mcetoc_1gna43tov6\">Object Methods</a></li>\n<li><a href=\"#mcetoc_1gna43tov7\">Object Constructor</a></li>\n<li><a href=\"#mcetoc_1gna43tov8\">Altering Objects</a></li>\n<li><a href=\"#mcetoc_1gnhh62kj1\">The this-reference</a></li>\n<li><a href=\"#mcetoc_1go1kjd5kjg\">Prototype</a></li>\n<li><a href=\"#mcetoc_1go1kjd5kjh\">Inheritance</a>\n<ul>\n<li><a href=\"#mcetoc_1go1kjd5kji\">Inheritance Helper Function</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1gn0ic8ssj0\">Object</h2>\n<ul>\n<li>An object is a collection of properties</li>\n<li>A property has a name and a value</li>\n<li>An object can be seen as associative array (map) where the keys in the array are the names of the object’s properties</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Create object as literal</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> bob = {\n  name: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bob\"</span>,\n  age: <span class=\"hljs-number\" style=\"color: #6897bb;\">25</span>\n};\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Access properties</span>\n<span class=\"hljs-built_in\">console</span>.log(bob.name);               <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Bob</span>\nbob.age = bob.age+<span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>;\nbob.age++;\n<span class=\"hljs-built_in\">console</span>.log(bob.age);                <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 27</span>\n</pre>\n<h2 id=\"mcetoc_1gn0ic8ssj1\">Object Properties</h2>\n<ul>\n<li>Properties can dynamically be added to an object</li>\n<li>Properties can be accessed using the dot or index operator</li>\n<li>Property names that are not valid variable names have to be put in quotes</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> bob = {name: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bob\"</span>, age: <span class=\"hljs-number\" style=\"color: #6897bb;\">25</span>};\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Add new properties</span>\nbob.hairColor = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"black\"</span>;\n<span class=\"hljs-built_in\">console</span>.log(bob.hairColor);          <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; black</span>\n<span class=\"hljs-built_in\">console</span>.log(bob.lastname);           <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; undefined</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Access properties using the dot or index operator</span>\n<span class=\"hljs-built_in\">console</span>.log(bob.name);               <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Bob</span>\n<span class=\"hljs-built_in\">console</span>.log(bob[<span class=\"hljs-string\" style=\"color: #6a8759;\">\"name\"</span>]);            <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Bob</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Property with quoted name</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> alice = {\n  name: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Alice\"</span>,\n  <span class=\"hljs-string\" style=\"color: #6a8759;\">\"year of birth\"</span>: <span class=\"hljs-number\" style=\"color: #6897bb;\">1991</span>\n};\n<span class=\"hljs-built_in\">console</span>.log(alice[<span class=\"hljs-string\" style=\"color: #6a8759;\">\"year of birth\"</span>]); <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 1991</span>\n</pre>\n<h2 id=\"mcetoc_1gna43tov6\">Object Methods</h2>\n<ul>\n<li>An object property that points to a function value is called method</li>\n<li>Within the method body, the this reference points to the object the method is called on</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> bob = {name: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bob\"</span>};\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Add method to object</span>\nbob.speak = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">phrase</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" says: \"</span>+phrase);\n};\nbob.speak(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"What's up?\"</span>);        <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Bob says: What's up?</span>\n<span class=\"hljs-built_in\">console</span>.log(bob.speak);         <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; [Function]</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Object literal with method</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> alice = {\n  name: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Alice\"</span>,\n  speak: <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">phrase</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" says: \"</span>+phrase);\n  }\n};\nalice.speak(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Great!\"</span>);          <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Alice says: Great!</span>\n</pre>\n<h2 id=\"mcetoc_1gna43tov7\">Object Constructor</h2>\n<ul>\n<li>A constructor function is a normal function, but treated as constructor when called with the new operator</li>\n<li>The this reference points to the new object</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Constructor function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Person</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name = name;\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.age = age;\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.speak = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">phrase</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" says: \"</span>+phrase);\n  }\n}\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Create objects</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> alice = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Person(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Alice\"</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">19</span>);\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> bob = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Person(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bob\"</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">25</span>);\n\n<span class=\"hljs-built_in\">console</span>.log(alice.name);    <span class=\"hljs-comment\" style=\"color: grey;\">// Alice</span>\nbob.speak(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"I'm Bob\"</span>);       <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Bob says: I'm Bob</span>\n</pre>\n<h2 id=\"mcetoc_1gna43tov8\">Altering Objects</h2>\n<p>Objects can always be altered even if they were created using a constructor function:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Person</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name = name;\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.age = age;\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.speak = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> (<span class=\"hljs-params\">phrase</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name + <span class=\"hljs-string\" style=\"color: #6a8759;\">\" says: \"</span> + phrase);\n    }\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.sleep = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> () </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"CHRRRZ Z Z z z...\"</span>);\n    };\n}\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> bob = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Person(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bob\"</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">25</span>);\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Alter bob</span>\nbob.speak = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> () </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Sorry, I prefer writing\"</span>);\n}\nbob.write = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> (<span class=\"hljs-params\">phrase</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name + <span class=\"hljs-string\" style=\"color: #6a8759;\">\" writes: \"</span> + phrase);\n}\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">delete</span> bob.sleep;\n\nbob.speak(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bla bla\"</span>);    <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Sorry, I prefer writing</span>\nbob.write(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bla bla\"</span>);   <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Bob writes: Bla bla</span>\nbob.sleep();             <span class=\"hljs-comment\" style=\"color: grey;\">// ! TypeError: bob.sleep is not a function !</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// bob is still a Person</span>\n<span class=\"hljs-built_in\">console</span>.log(bob <span class=\"hljs-keyword\" style=\"color: #cc7832;\">instanceof</span> Person);  <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; true</span></pre>\n<h2 id=\"mcetoc_1gnhh62kj1\">The this-reference</h2>\n<ul>\n<li>The this reference within a function points to the bound object</li>\n<li>Functions are implicitly bound to the object the function is called on (methods)</li>\n<li>Functions can be explicitly bound using bind or call</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// speak is not bound ('this' points to the global object or is undefined)</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">speak</span>(<span class=\"hljs-params\">phrase</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" says: \"</span>+phrase);\n}\nspeak(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Hello\"</span>);           <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; undefined says: Hello</span>\n                          <span class=\"hljs-comment\" style=\"color: grey;\">// OR</span>\n                          <span class=\"hljs-comment\" style=\"color: grey;\">// TypeError: Cannot read property name of undefined</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> alice = {name: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Alice\"</span>, speak: speak};\n<span class=\"hljs-comment\" style=\"color: grey;\">// speak is implicitly bound to alice when called as method</span>\nalice.speak(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Hello\"</span>);     <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Alice says: Hello</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// bind creates a new function which is explicitly bound to the passed object</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> aliceSpeak = speak.bind(alice);\naliceSpeak(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Hello\"</span>);      <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Alice says: Hello</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// call explicitly binds the function to the passed object and calls it</span>\nspeak.call(alice, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Hi\"</span>);  <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Alice says: Hi</span>\n</pre>\n<h2 id=\"mcetoc_1go1kjd5kjg\">Prototype</h2>\n<ul>\n<li>Most objects have a prototype, which is another object used as fallback source for properties</li>\n<li>The prototype is often referenced by the __proto__ property (not standardized)</li>\n<li>Each function has a prototype property which points to an object.</li>\n<li>This object becomes the prototype of the objects created with the new operator from that function</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Person</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name = name;\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.age = age;\n}\n<span class=\"hljs-comment\" style=\"color: grey;\">// Add functionality to Person's prototype</span>\nPerson.prototype.speak = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">phrase</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" says: \"</span>+phrase);\n};\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> alice = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Person(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Alice\"</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">19</span>);\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> bob = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Person(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bob\"</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">25</span>);\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// alice and bob have the same prototype</span>\n<span class=\"hljs-built_in\">console</span>.log(alice.__proto__ === bob.__proto__); <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; true</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// New functionality can always be added to a prototype</span>\nPerson.prototype.sleep = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"CHRRRZ Z Z z z ...\"</span>);\n};\n\nbob.sleep();    <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; CHRRR Z Z Z z z ...</span>\n</pre>\n<ul>\n<li>Using prototype functions has the advantage that only one function instance is needed for all objects</li>\n<li>But prototype functions have no access to local variables of the constructor function</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Person</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Public property</span>\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name = name;\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Local variable (private property)</span>\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> yearOfBirth = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear()-age;\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Only functions defined in the constructor function can access local variables</span>\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.getYearOfBirth = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> yearOfBirth;\n  }\n}\nPerson.prototype.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n  <span class=\"hljs-comment\" style=\"color: grey;\">// Prototype functions have only access to the public properties of the object</span>\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" was bron in \"</span>+<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.getYearOfBirth();\n}\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> bob = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Person(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bob\"</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">25</span>);\n<span class=\"hljs-built_in\">console</span>.log(bob+<span class=\"hljs-string\" style=\"color: #6a8759;\">\"!\"</span>);   <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Bob was born in 1996!</span>\n</pre>\n<h2 id=\"mcetoc_1go1kjd5kjh\">Inheritance</h2>\n<ul>\n<li>Prototype properties are inherited over several levels</li>\n<li>Inheritance is set up by\n<ul>\n<li>calling the base constructor function to initialize the new object :</li>\n</ul>\n</li>\n</ul>\n<p><code>function Student(name, age, university) {</code><br><code>Person.call(this, name, age);</code><br><code>// ...</code><br><code>}</code></p>\n<ul>\n<li style=\"list-style-type: none;\">\n<ul>\n<li>setting the prototype object of the base constructor function as the prototype of the prototype object of the sub constructor function:</li>\n</ul>\n</li>\n</ul>\n<p><code>// Student’s prototype object must be replaced by a new object which</code><br><code>// has Person’s prototype object as prototype</code><br><code>Student.prototype = Object.create(Person.prototype);</code><br><code>Student.prototype.constructor = Student;</code></p>\n<p>Example1:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Person</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name = name;\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.age = age;\n}\nPerson.prototype.describe = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" is \"</span>+<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.age);\n}\nPerson.prototype.speak = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">phrase</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" says: \"</span>+phrase);\n}\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Student extends Person</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Student</span>(<span class=\"hljs-params\">name, age, university</span>) </span>{\n  Person.call(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>, name, age);\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.university = university;\n}\nStudent.prototype = <span class=\"hljs-built_in\">Object</span>.create(Person.prototype);\nStudent.prototype.constructor = Student;\n\nStudent.prototype.sleep = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"CHRRRZ Z Z z z...\"</span>);\n}\nStudent.prototype.describe = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>()</span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" is a student at \"</span>+<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.university);\n};\n</pre>\n<p>Example2:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> bob = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Student(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Bob\"</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">25</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"BFH\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(bob <span class=\"hljs-keyword\" style=\"color: #cc7832;\">instanceof</span> Student); <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; true</span>\n<span class=\"hljs-built_in\">console</span>.log(bob <span class=\"hljs-keyword\" style=\"color: #cc7832;\">instanceof</span> Person); <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; true</span>\nbob.speak(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Hi\"</span>);\nbob.describe();\nbob.sleep();\n<span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Bob says: Hi</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Bob is a student at BFH</span>\n<span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; CHRRRZ Z Z z z...</span></pre>\n<h3 id=\"mcetoc_1go1kjd5kji\">Inheritance Helper Function</h3>\n<p>Using a helper function simpliﬁes inheritance and makes it less error prone:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Helper to correctly set up the prototype chain</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">extend</span>(<span class=\"hljs-params\">base, sub</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> origProto = sub.prototype;\n  sub.prototype = <span class=\"hljs-built_in\">Object</span>.create(base.prototype);\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> key <span class=\"hljs-keyword\" style=\"color: #cc7832;\">in</span> origProto) {\n    sub.prototype[key] = origProto[key];\n  }\n  <span class=\"hljs-built_in\">Object</span>.defineProperty(sub.prototype, <span class=\"hljs-string\" style=\"color: #6a8759;\">'constructor'</span>, {\n    enumerable: <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>,\n    value: sub\n  });\n}\n<span class=\"hljs-comment\" style=\"color: grey;\">//----------------------------------------</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Prof</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n  Person.call(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>, name, age);\n}\nProf.prototype.describe = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Prof. \"</span>+<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" is \"</span>+<span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.age+<span class=\"hljs-string\" style=\"color: #6a8759;\">\"years old\"</span>);\n}\nextend(Person, Prof);\n</pre>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "javascript",
                   "dev"
            ],
            "date_published": "2023-01-17T20:13:07+01:00",
            "date_modified": "2023-03-29T20:14:29+02:00"
        },
        {
            "id": "https://www.finecloud.ch/difference-between-heap-and-stack.html",
            "url": "https://www.finecloud.ch/difference-between-heap-and-stack.html",
            "title": "Difference between heap and stack",
            "summary": "In this Post I try to explain the difference between the heap and the stack. It's just a very high level amateur explanation, there is a lot more to read and learn about this Topics. This Drawing helps me a lot to understand the basic&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gna4n2a12f\">Overview</a></li>\n<li><a href=\"#mcetoc_1gna4n2a12g\">Key Difference Between Stack and Heap Memory</a></li>\n<li><a href=\"#what-is-a-stack\">What is a Stack?</a></li>\n<li><a href=\"#what-is-heap\">What is Heap?</a></li>\n</ul>\n</div>\n<p>In this Post I try to explain the difference between the heap and the stack. It's just a very high level amateur explanation, there is a lot more to read and learn about this Topics.</p>\n<h2 id=\"mcetoc_1gna4n2a12f\">Overview</h2>\n<p>This Drawing helps me a lot to understand the basic difference between the heap and the stack and as well how they interact together.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/75/HeapAndStack-2.png\" alt=\"\" width=\"721\" height=\"361\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/75/responsive/HeapAndStack-2-xs.png 300w ,https://www.finecloud.ch/media/posts/75/responsive/HeapAndStack-2-sm.png 480w ,https://www.finecloud.ch/media/posts/75/responsive/HeapAndStack-2-md.png 768w ,https://www.finecloud.ch/media/posts/75/responsive/HeapAndStack-2-lg.png 1024w ,https://www.finecloud.ch/media/posts/75/responsive/HeapAndStack-2-xl.png 1360w ,https://www.finecloud.ch/media/posts/75/responsive/HeapAndStack-2-2xl.png 1600w\"></figure>\n<p>The Heap is unstructured, this means that the Objects are laying somewhere around in the memory.</p>\n<h2 id=\"mcetoc_1gna4n2a12g\">Key Difference Between Stack and Heap Memory</h2>\n<ul>\n<li>Stack is a linear data structure whereas Heap is a hierarchical data structure.</li>\n<li>Stack memory will never become fragmented whereas Heap memory can become fragmented as blocks of memory are first allocated and then freed.</li>\n<li>Stack accesses local variables only while Heap allows you to access variables globally.</li>\n<li>Stack variables can’t be resized whereas Heap variables can be resized.</li>\n<li>Stack memory is allocated in a contiguous block whereas Heap memory is allocated in any random order.</li>\n<li>Stack doesn’t require to de-allocate variables whereas in Heap de-allocation is needed.</li>\n<li>Stack allocation and deallocation are done by compiler instructions whereas Heap allocation and deallocation is done by the programmer.</li>\n</ul>\n<h2 id=\"what-is-a-stack\">What is a Stack?</h2>\n<p>A stack is a special area of computer’s memory which stores temporary variables created by a function. In stack, variables are declared, stored and initialized during runtime.</p>\n<p>It is a temporary storage memory. When the computing task is complete, the memory of the variable will be automatically erased. The stack section mostly contains methods, local variable, and reference variables.</p>\n<h2 id=\"what-is-heap\">What is Heap?</h2>\n<p>The heap is a memory used by programming languages to store global variables. By default, all global variable are stored in heap memory space. It supports Dynamic memory allocation.</p>\n<p>The heap is not managed automatically for you and is not as tightly managed by the CPU. It is more like a free-floating region of memory.</p>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "dev"
            ],
            "date_published": "2023-01-17T19:57:51+01:00",
            "date_modified": "2023-03-29T20:14:52+02:00"
        },
        {
            "id": "https://www.finecloud.ch/javascript-arrays.html",
            "url": "https://www.finecloud.ch/javascript-arrays.html",
            "title": "JavaScript arrays",
            "summary": "Array An array combines multiple values in a single variable Arrays are helpful if the number of values is huge or dynamic Each value of an array has a unique numerical index // Normal variables hold exactly one value const colorA = \"blue\"; const colorB&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gn0hhd5uff\">Array</a></li>\n<li><a href=\"#mcetoc_1gn0hhd5ufg\">Creating an Array</a></li>\n<li><a href=\"#mcetoc_1gn0hhd5ufh\">Modifying an Array</a></li>\n<li><a href=\"#mcetoc_1gn0icm1fj8\">FIFO and LIFO</a></li>\n<li><a href=\"#mcetoc_1gn0icm1fj9\">Loop Through an Array</a></li>\n<li><a href=\"#mcetoc_1gn0icm1fja\">Arrays are Objects</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1gn0hhd5uff\">Array</h2>\n<ul>\n<li>An array combines multiple values in a single variable</li>\n<li>Arrays are helpful if the number of values is huge or dynamic</li>\n<li>Each value of an array has a unique numerical index</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Normal variables hold exactly one value</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> colorA = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"blue\"</span>;\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> colorB = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"red\"</span>;\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> colorC = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"yellow\"</span>;\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// An array variable can hold more than one value</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> colors = [<span class=\"hljs-string\" style=\"color: #6a8759;\">\"blue\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"red\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"yellow\"</span>];\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Each value of the array can be accessed by a numerical index</span>\n<span class=\"hljs-built_in\">console</span>.log(colors[<span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>]);  <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; blue</span>\n<span class=\"hljs-built_in\">console</span>.log(colors[<span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>]);  <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; red</span>\n<span class=\"hljs-built_in\">console</span>.log(colors[<span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>]);  <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; yellow</span>\n</pre>\n<h2 id=\"mcetoc_1gn0hhd5ufg\">Creating an Array</h2>\n<ul>\n<li>An array can be created as a literal or by using the array constructor (not recommended)</li>\n<li>The values of an array may have different types</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Array literal (recommended)</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> a = [<span class=\"hljs-string\" style=\"color: #6a8759;\">\"one\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"two\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"three\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"four\"</span>];\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Array constructor (not recommended)</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> b = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Apple\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Mango\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Kiwi\"</span>);\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> c = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>);  <span class=\"hljs-comment\" style=\"color: grey;\">// creates [3, 4]</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> d = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>);     <span class=\"hljs-comment\" style=\"color: grey;\">// creates [, , ] (three empty solots)</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Array with different types</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> e = [<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Apple\"</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">5</span>, <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">4.25</span>, <span class=\"hljs-literal\" style=\"color: #6897bb;\">null</span>];\n</pre>\n<h2 id=\"mcetoc_1gn0hhd5ufh\">Modifying an Array</h2>\n<ul>\n<li>Elements can be modiﬁed and inserted using the index operator</li>\n<li>In addition, there are many useful methods to work with arrays (see developer.mozilla.org)</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> a = [<span class=\"hljs-number\" style=\"color: #6897bb;\">7</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">8</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">40</span>];\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Change value</span>\na[<span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>] = <span class=\"hljs-number\" style=\"color: #6897bb;\">45</span>;              <span class=\"hljs-comment\" style=\"color: grey;\">// [7, 8, 45]</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Insert new values</span>\na[a.length] = <span class=\"hljs-number\" style=\"color: #6897bb;\">17</span>;       <span class=\"hljs-comment\" style=\"color: grey;\">// [7, 8, 45, 17]</span>\na[<span class=\"hljs-number\" style=\"color: #6897bb;\">6</span>] = <span class=\"hljs-number\" style=\"color: #6897bb;\">23</span>;              <span class=\"hljs-comment\" style=\"color: grey;\">// [7, 8, 45, 17, , , 23] (length: 7)</span>\n<span class=\"hljs-built_in\">console</span>.log(a[<span class=\"hljs-number\" style=\"color: #6897bb;\">5</span>]);      <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; undefined</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Remove some elements</span>\na.splice(<span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>);         <span class=\"hljs-comment\" style=\"color: grey;\">// [7, 8, 23]</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Use array as stack</span>\na.push(<span class=\"hljs-number\" style=\"color: #6897bb;\">12</span>);             <span class=\"hljs-comment\" style=\"color: grey;\">// [7, 8, 23, 12]</span>\n<span class=\"hljs-built_in\">console</span>.log(a.pop());   <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 12  (a: [7, 8, 23])</span>\n</pre>\n<h2 id=\"mcetoc_1gn0icm1fj8\">FIFO and LIFO</h2>\n<p>No these are not Dogs. It's about two different concepts and the main difference between a Queue and a Stack:</p>\n<ul>\n<li>FIFO = first in first out -&gt; that's a queue</li>\n<li>LIFO = last in first out -&gt; that's a stack</li>\n</ul>\n<p>In JavaScript we use <code>push</code> to put's it on top of stack and <code>pop</code> to pull an element from the top of a stack </p>\n<h2 id=\"mcetoc_1gn0icm1fj9\">Loop Through an Array</h2>\n<p>There are different ways to iterate over the elements of an array:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> colors = [<span class=\"hljs-string\" style=\"color: #6a8759;\">\"blue\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"red\"</span>, , <span class=\"hljs-string\" style=\"color: #6a8759;\">\"black\"</span>];\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Using for loop</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> i = <span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>; i &lt; a.length; i++) {      <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 0 -&gt; blue</span>\n  <span class=\"hljs-built_in\">console</span>.log(i+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" -&gt; \"</span>+a[i]);         <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 1 -&gt; red</span>\n}                                         <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 2 -&gt; undefined</span>\n                                          <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 3 -&gt; black</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Using for...of loop</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> color <span class=\"hljs-keyword\" style=\"color: #cc7832;\">of</span> colors) {               <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; blue</span>\n  <span class=\"hljs-built_in\">console</span>.log(color);                     <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; red</span>\n}                                         <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; undefined</span>\n                                          <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; black</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Using forEach method (empty slots are skipped)</span>\na.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">item, index</span>) </span>{         <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 0 -&gt; blue</span>\n  <span class=\"hljs-built_in\">console</span>.log(index+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" -&gt; \"</span>+item);     <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 1 -&gt; red</span>\n});                                       <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 3 -&gt; black</span>\n</pre>\n<h2 id=\"mcetoc_1gn0icm1fja\">Arrays are Objects</h2>\n<ul>\n<li>Arrays in JavaScript are based on numerical indexes</li>\n<li>Named indexes access properties of an object</li>\n<li>Since arrays are objects, both types of indexes can be used but address different concepts</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> colors = [<span class=\"hljs-string\" style=\"color: #6a8759;\">\"blue\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"red\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"black\"</span>];\n<span class=\"hljs-built_in\">console</span>.log(colors.length);               <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 3</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Named indexes address object properties and not array values</span>\ncolors[<span class=\"hljs-string\" style=\"color: #6a8759;\">\"favorite\"</span>] = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"pink\"</span>;\n<span class=\"hljs-built_in\">console</span>.log(colors.favorite);             <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; pink</span>\n<span class=\"hljs-built_in\">console</span>.log(colors.length);               <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 3 (still!)</span>\n\ncolors.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">item, index</span>) </span>{    <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 0 -&gt; blue</span>\n  <span class=\"hljs-built_in\">console</span>.log(index+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" -&gt; \"</span>+item);     <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 1 -&gt; red</span>\n});                                       <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 2 -&gt; black</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> i <span class=\"hljs-keyword\" style=\"color: #cc7832;\">in</span> colors) {                   <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 0 -&gt; blue</span>\n  <span class=\"hljs-built_in\">console</span>.log(i+<span class=\"hljs-string\" style=\"color: #6a8759;\">\" -&gt; \"</span>+colors[i]);    <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 1 -&gt; red</span>\n}                                         <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 2 -&gt; black</span>\n                                          <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; favorite -&gt; pink</span>\n</pre>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "javascript",
                   "dev",
                   "array"
            ],
            "date_published": "2023-01-17T19:48:55+01:00",
            "date_modified": "2023-03-29T20:14:46+02:00"
        },
        {
            "id": "https://www.finecloud.ch/javascript-functions.html",
            "url": "https://www.finecloud.ch/javascript-functions.html",
            "title": "JavaScript functions",
            "summary": "Function Expression A function expression starts with the keyword function followed by the function arguments in parentheses and the function body in curly braces: const square = function(x) { return x * x; }; console.log(square(4)); // &gt;&gt; 16 Function Scope Each function deﬁnes a scope&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1gn00tl6e8l\">Function Expression</a></li>\n<li><a href=\"#mcetoc_1gn018lrv9b\">Function Scope</a></li>\n<li><a href=\"#mcetoc_1gn018lrv9c\">Lexical Scope</a></li>\n<li><a href=\"#mcetoc_1gn02tcrha3\">Nested Scope</a></li>\n<li><a href=\"#mcetoc_1gn02tcrha4\">Functions are Objects</a></li>\n<li><a href=\"#mcetoc_1gn036mefbt\">Closure</a></li>\n<li><a href=\"#mcetoc_1gn036mefbu\">Function Declaration</a></li>\n<li><a href=\"#mcetoc_1gn0ggrqvcq\">Function Declarations are Hoisted</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1gn00tl6e8l\">Function Expression</h2>\n<p>A function expression starts with the keyword function followed by the function arguments in parentheses and the function body in curly braces:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> square = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">x</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> x * x;\n};\n\n<span class=\"hljs-built_in\">console</span>.log(square(<span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>));  <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 16</span>\n</pre>\n<h2 id=\"mcetoc_1gn018lrv9b\">Function Scope</h2>\n<ul>\n<li>Each function deﬁnes a scope</li>\n<li>Local variables of a function are not visible outside of the function</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> a = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Hello \"</span>;          <span class=\"hljs-comment\" style=\"color: grey;\">// a has global scope</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> f = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">b</span>) </span>{      <span class=\"hljs-comment\" style=\"color: grey;\">// b is local to f</span>\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> c = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"!\"</span>;             <span class=\"hljs-comment\" style=\"color: grey;\">// c is local to f</span>\n  <span class=\"hljs-built_in\">console</span>.log(a+b+c);\n};\n\nf(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"World\"</span>);                 <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Hello World!</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">typeof</span> b);      <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; undefined</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">typeof</span> c);      <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; undefined</span></pre>\n<h2 id=\"mcetoc_1gn018lrv9c\">Lexical Scope</h2>\n<p>Variables have lexical (static) scope, i.e., the scope of a variable is determined by the code context of the variable:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> a = <span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>;\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> f = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">b</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> a+b;\n};\n\n<span class=\"hljs-built_in\">console</span>.log(f(<span class=\"hljs-number\" style=\"color: #6897bb;\">7</span>));      <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 9</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> g = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> a = <span class=\"hljs-number\" style=\"color: #6897bb;\">5</span>;          <span class=\"hljs-comment\" style=\"color: grey;\">// a is hiding the global variable inside g</span>\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> f(<span class=\"hljs-number\" style=\"color: #6897bb;\">7</span>);          <span class=\"hljs-comment\" style=\"color: grey;\">// but the global variable is used inside f</span>\n};\n<span class=\"hljs-built_in\">console</span>.log(g());       <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 9</span>\n</pre>\n<h2 id=\"mcetoc_1gn02tcrha3\">Nested Scope</h2>\n<ul>\n<li>Blocks and functions can be created inside other blocks and functions</li>\n<li>Each local scope can access the variables from the surrounding scopes</li>\n</ul>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> a = <span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>;\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> f = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">b</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> x = <span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>;\n\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> g = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{    <span class=\"hljs-comment\" style=\"color: grey;\">// g has access to the local variables of f and to</span>\n    x *= a;                 <span class=\"hljs-comment\" style=\"color: grey;\">// the variables of the global scope</span>\n  };\n\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">while</span> (x &lt; b) g();\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> x;\n};\n<span class=\"hljs-built_in\">console</span>.log(f(<span class=\"hljs-number\" style=\"color: #6897bb;\">100</span>))        <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 128</span>\n</pre>\n<h2 id=\"mcetoc_1gn02tcrha4\">Functions are Objects</h2>\n<p>Functions are objects, hence they can be used as arguments and return values of other functions (higher-order functions)</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Function as argument</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> repeat = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">action, n</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">for</span> (<span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> i = <span class=\"hljs-number\" style=\"color: #6897bb;\">0</span>; i &lt; n; i++) action();\n};\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> sayHello = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Hello\"</span>);\n}\nrepeat(sayHello, <span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>);                   <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; Hello Hello Hello</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// Function as return value</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> formatter = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">prefix, suffix</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">s</span>) </span>{\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> prefix+s+suffix;\n  }\n};\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> format = formatter(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"'\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"!'\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Hello World\"</span>));    <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 'Hello World!'</span>\n</pre>\n<h2 id=\"mcetoc_1gn036mefbt\">Closure</h2>\n<p>A function that references a speciﬁc instance of a local variable in an enclosing function is called a closure:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> counter = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>(<span class=\"hljs-params\">init</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">let</span> val = <span class=\"hljs-built_in\">Number</span>(init);\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> ++val;\n  };\n};\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> countA = counter(<span class=\"hljs-number\" style=\"color: #6897bb;\">12</span>);    <span class=\"hljs-comment\" style=\"color: grey;\">// countA references a specific instance of val</span>\n<span class=\"hljs-built_in\">console</span>.log(countA());         <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 13</span>\n<span class=\"hljs-built_in\">console</span>.log(countA());         <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 14</span>\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">const</span> countB = counter(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"6\"</span>);   <span class=\"hljs-comment\" style=\"color: grey;\">// countB references another instance of val</span>\n<span class=\"hljs-built_in\">console</span>.log(countB());         <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 7</span>\n<span class=\"hljs-built_in\">console</span>.log(countA());         <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 15</span>\n</pre>\n<h2 id=\"mcetoc_1gn036mefbu\">Function Declaration</h2>\n<p>A function declaration deﬁnes a variable which points to the given function:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// Declare f to be a function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">f</span>() </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"I'm a chicken\"</span>;\n}\n\n<span class=\"hljs-built_in\">console</span>.log(f());      <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; I'm a chicken</span>\n\n<span class=\"hljs-comment\" style=\"color: grey;\">// The variable f can be reassigned</span>\nf = <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span>() </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"I'm a fox\"</span>;\n}\n\n<span class=\"hljs-built_in\">console</span>.log(f());      <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; I'm a fox</span>\n</pre>\n<h2 id=\"mcetoc_1gn0ggrqvcq\">Function Declarations are Hoisted</h2>\n<p>Function declarations are not part of the regular top-to-bottom ﬂow of control:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-comment\" style=\"color: grey;\">// The function f can be used before it is declared</span>\n<span class=\"hljs-built_in\">console</span>.log(f(<span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>));     <span class=\"hljs-comment\" style=\"color: grey;\">// &gt;&gt; 48</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">f</span>(<span class=\"hljs-params\">a</span>) </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> g() * a;\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">function</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">g</span>() </span>{\n  <span class=\"hljs-keyword\" style=\"color: #cc7832;\">return</span> <span class=\"hljs-number\" style=\"color: #6897bb;\">12</span>;\n}\n</pre>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "software development",
                   "javascript",
                   "dev"
            ],
            "date_published": "2023-01-17T15:46:55+01:00",
            "date_modified": "2023-03-29T20:14:40+02:00"
        }
    ]
}
