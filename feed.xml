<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Finecloud</title>
    <link href="https://www.finecloud.ch/feed.xml" rel="self" />
    <link href="https://www.finecloud.ch" />
    <updated>2022-06-27T09:22:53+02:00</updated>
    <author>
        <name>Finecloud</name>
    </author>
    <id>https://www.finecloud.ch</id>

    <entry>
        <title>HTTP Response Status Codes</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/http-response-status-codes.html"/>
        <id>https://www.finecloud.ch/http-response-status-codes.html</id>
            <category term="statuscode"/>
            <category term="softwareentwicklung"/>
            <category term="rfc9110"/>
            <category term="network"/>
            <category term="java"/>
            <category term="http"/>
            <category term="dev"/>

        <updated>2022-06-27T06:35:21+02:00</updated>
            <summary>
                <![CDATA[
                    Die erste Ziffer des Status-Codes definiert die Klasse der Response. Die letzten zwei Ziffern haben keine Bedeutung für die Kategorisierung. Es gibt fünf unterschiedliche Response Klassen: Nachfolgend eine Zusammenstellung der häufigsten HTTP-Codes denen man im Alltag begegnet: HTTP-Statuscode Bedeutung 200 OK Der Request wurde ohne&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Die erste Ziffer des Status-Codes definiert die Klasse der Response. Die letzten zwei Ziffern haben keine Bedeutung für die Kategorisierung.</p>
<p>Es gibt fünf unterschiedliche Response Klassen:</p>
<ul>
<li id="section-15-3.1" class="normal"><strong>1xx (Informational)</strong>: Der Request wurde entgegengenommen, der Prozess geht weiter.</li>
<li><strong>2xx (Successful)</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: Der Request ist angekommen und wurde korrekt interpretiert und ist damit akzeptiert.</span></li>
<li><strong>3xx (Redirection)</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: Weitere Schritte sind notwendig um den Request abzuschliessen.</span></li>
<li><strong>4xx (Client Error)</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: Der Request hat Syntaxfehler oder kann aus anderen Gründen nicht angenommen werden.</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> </span><strong>5xx (Server Error)</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: Der Server hatte ein Fehler beim Versuch den Request zu beantworten.</span></li>
</ul>
<p>Nachfolgend eine Zusammenstellung der häufigsten HTTP-Codes denen man im Alltag begegnet:</p>
<table id="t14.1">
<thead>
<tr>
<th>
<p><strong>HTTP-Statuscode</strong></p>
</th>
<th>
<p><strong>Bedeutung</strong></p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<p>200 OK</p>
</td>
<td>
<p>Der Request wurde ohne Fehler verarbeitet.</p>
</td>
</tr>
<tr>
<td>
<p>400 Bad Request</p>
</td>
<td>
<p>Der empfangene Request war fehlerhaft. Wenn du aus einem Browser zugreifst, solltest du diese Meldung nicht sehen.</p>
</td>
</tr>
<tr>
<td>
<p>401 Unauthorized</p>
</td>
<td>
<p>Die angefragte Ressource ist nur für angemeldete Benutzer freigegeben, aber der Anfragende ist nicht angemeldet.</p>
</td>
</tr>
<tr>
<td>
<p>403 Forbidden</p>
</td>
<td>
<p>Die Ressource ist nur für angemeldete Benutzer mit bestimmten Rechten freigegeben. Der Benutzer ist zwar angemeldet, besitzt aber nicht die notwendigen Rechte.</p>
</td>
</tr>
<tr>
<td>
<p>404 Not Found</p>
</td>
<td>
<p>Die angefragte Ressource konnte nicht gefunden werden.</p>
</td>
</tr>
<tr>
<td>
<p>405 Method Not Allowed</p>
</td>
<td>
<p>Die verwendete HTTP-Methode wird von dieser Ressource nicht unterstützt. Im Servlet bedeutet das, dass die do…-Methode nicht implementiert ist.</p>
</td>
</tr>
<tr>
<td>
<p>500 Internal Server Error</p>
</td>
<td>
<p>Bei der Verarbeitung des Requests ist im Server ein Fehler aufgetreten. Diesen Fehler bekommen Sie zu sehen, wenn Ihr Servlet eine Exception wirft.</p>
</td>
</tr>
</tbody>
</table>
<p>Ausführlichere Angaben zu den HTTP Status Codes findest du im <a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-status-codes" rel="nofollow">RFC9110</a>.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>HTTP Methoden - RFC9110</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/http-methoden-rfc9110.html"/>
        <id>https://www.finecloud.ch/http-methoden-rfc9110.html</id>
            <category term="softwareentwicklung"/>
            <category term="servlet"/>
            <category term="rfc9110"/>
            <category term="java"/>
            <category term="http"/>
            <category term="dev"/>

        <updated>2022-06-25T10:55:55+02:00</updated>
            <summary>
                <![CDATA[
                    Was geschieht eigentlich wenn ich eine Webseite aufrufe? Wir überspringen den Ersten Teil mit DNS und gehen davon aus, dass die URL bereits im DNS Cache ist. Um diese Frage zu beantworten, müssen wir uns mit den Grundlagen des HTTP-Protokolls befassen. Der Aufruf der Webseite&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Was geschieht eigentlich wenn ich eine Webseite aufrufe?</h2>
<p>Wir überspringen den Ersten Teil mit DNS und gehen davon aus, dass die URL bereits im DNS Cache ist. Um diese Frage zu beantworten, müssen wir uns mit den Grundlagen des HTTP-Protokolls befassen.</p>
<h3>Der Standard HTTP-Request</h3>
<p>Der Aufruf der Webseite beginnt im Browser. Dieser öffnet eine Netzwerkverbindung zur eingegebenen Adresse. Für diesen Schritt ist aber noch nicht die gesamte URL relevant, nur Servername (oder die IP-Adresse) und Port werden benötigt. Über diese Netzwerkverbindung wird ein HTTP-Request gesendet. HTTP ist ein textbasiertes Protokoll, deswegen kann man einfach einsehen, wie dieser Request aussieht:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">GET <span class="hljs-regexp">/servlet-1.0-SNAPSHOT/</span> HTTP/<span class="hljs-number" style="color: #6897bb;">1.1</span>
<span class="hljs-string" style="color: #6a8759;">Host:</span> <span class="hljs-string" style="color: #6a8759;">localhost:</span><span class="hljs-number" style="color: #6897bb;">8080</span>
User-<span class="hljs-string" style="color: #6a8759;">Agent:</span> Mozilla<span class="hljs-regexp">/5.0 (Macintosh; Intel Mac OS X 10.15; rv:101.0) Gecko/</span><span class="hljs-number" style="color: #6897bb;">20100101</span> Firefox/<span class="hljs-number" style="color: #6897bb;">101.0</span>
<span class="hljs-string" style="color: #6a8759;">Accept:</span> text<span class="hljs-regexp">/html,application/</span>xhtml+xml,application<span class="hljs-regexp">/xml;q=0.9,image/</span>avif,image<span class="hljs-regexp">/webp,*/</span>*;q=<span class="hljs-number" style="color: #6897bb;">0.8</span>
Accept-<span class="hljs-string" style="color: #6a8759;">Language:</span> en-US,en;q=<span class="hljs-number" style="color: #6897bb;">0.5</span>
Accept-<span class="hljs-string" style="color: #6a8759;">Encoding:</span> gzip, deflate, br
<span class="hljs-string" style="color: #6a8759;">Connection:</span> keep-alive</pre>
<p>Die erste Zeile des Requests enthält die wichtigsten Informationen:</p>
<ul>
<li>die relative Adresse der angesprochenen Ressource auf dem Server: /servlet-1.0-SNAPSHOT. Anhand dieses Pfades bestimmt der Server, welche Datei er ausliefern oder welches Servlet er ansprechen soll.</li>
<li>was mit dieser Ressource passieren soll. GET bedeutet, sie soll an den Anfragenden gesendet werden.</li>
<li>die verwendete Version des HTTP-Protokolls: HTTP/1.1. Diese Information ist für  eine funktionierende Kommunikation zwischen Client und Server wesentlich.</li>
</ul>
<p>Alle weiteren Zeilen des Requests sind sogenannte Header. Sie transportieren zusätzliche Informationen, die der Server bei seiner Arbeit berücksichtigen sollte, aber nicht unbedingt muss. So enthält zum Beispiel der Header Accept-Language die Vorliebe des Benutzers, in welcher Sprache er den angefragten Inhalt sehen möchte. Der Server kann diese Information aber ignorieren und den Inhalt in einer völlig anderen Sprache zurückliefern.<br><br>In den Headern werden auch Cookies übertragen, kleine Textstücke, die ein Server im Browser hinterlegen kann und die bei weiteren Anfragen an denselben Server vom Browser an den Server zurückgesendet werden. Cookies sind die verbreitete Möglichkeit für den Server, zu bestimmen, ob zwei Anfragen vom selben Client stammen. Das HTTP-Protokoll ist zustandslos, jede Anfrage ist völlig unabhängig von allen anderen Anfragen. Wenn der Server also Informationen zwischen zwei Requests speichern muss, dann geschieht das üblicherweise durch Cookies. Im Servlet-Container werden diese durch das Session-Objekt abgebildet.</p>
<h3>Weitere HTTP-Methoden</h3>
<p>Alle server müssen zwingend die GET und HEAD Methoden unterstützen, alle anderen Methoden sind Optional:</p>
<table id="table-4" class="left" style="width: 100%; height: 539.625px;">
<thead>
<tr style="height: 79.1562px;">
<th class="text-left" style="width: 20.6007%; height: 79.1562px;"><strong>Method Name</strong></th>
<th class="text-left" style="width: 79.2568%; height: 79.1562px;"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">GET</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Transfer a current representation of the target resource.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">HEAD</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Same as GET, but do not transfer the response content.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">POST</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Perform resource-specific processing on the request content.</td>
</tr>
<tr style="height: 79.1562px;">
<td class="text-left" style="width: 20.6007%; height: 79.1562px;">PUT</td>
<td class="text-left" style="width: 79.2568%; height: 79.1562px;">Replace all current representations of the target resource with the request content.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">DELETE</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Remove all current representations of the target resource.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">CONNECT</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Establish a tunnel to the server identified by the target resource.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">OPTIONS</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Describe the communication options for the target resource.</td>
</tr>
<tr style="height: 79.1562px;">
<td class="text-left" style="width: 20.6007%; height: 79.1562px;">TRACE</td>
<td class="text-left" style="width: 79.2568%; height: 79.1562px;">Perform a message loop-back test along the path to the target resource.</td>
</tr>
</tbody>
</table>
<p>Quelle: <a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-methods" rel="nofollow">RFC9110</a></p>
<p>Von diesen Methoden sind GET, HEAD und POST die mit grossem Abstand häufiger verwendeten. Die meisten Anwendungen kommen ohne PUT und DELETE aus, und wenn diese Methoden doch verwendet werden, dann nur unter starken Sicherheitsvorkehrungen. Es bedarf nicht viel Fantasie, das Missbrauchspotenzial zu erkennen, wenn jeder Dateien auf Ihrem Server anlegen und löschen könnte.</p>
<h3>Verarbeitung im Servlet-Container</h3>
<p>Der Servlet-Container empfängt diesen HTTP-Request und erzeugt daraus ein Objekt der Klasse <em>HttpServletRequest</em>. Durch dieses Objekt sind alle Daten zugänglich, die im Request gesendet wurden.</p>
<p>Als Nächstes ermittelt der Servlet-Container anhand der Adresse in der ersten Request-Zeile, an welche Anwendung und welche Ressource der Request adressiert ist. Die Anwendung wird durch den ersten Teil der Adresse identifiziert, der Teil /servlet-1.0-SNAPSHOT, identifiziert die Ressource. Das kann ein Servlet sein, dessen <em>urlPatterns-Attribut</em> passt, oder bei einem GET-Request eine statische Ressource dieses Namens, die im Wurzelverzeichnis des WARs liegt.<br><br>Unter /servlet-1.0-SNAPSHOT antwortet ein Servlet. Falls noch keine Instanz dieses Servlets erzeugt wurde, erzeugt der Container nun eine. Es wird nicht für jeden Request eine neue Servlet-Instanz erzeugt, deshalb sollten man niemals Daten, die zu einem Request gehören, in Instanzvariablen speichern, denn diese könnten in einem anderen Request weiterverwendet werden.<br><br>Nun endlich so weit: Das Servlet wird aufgerufen.</p>
<p id="table.of.methods"></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>TOC in README.md erstellen mit VSCode</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/toc-in-readmemd-erstellen.html"/>
        <id>https://www.finecloud.ch/toc-in-readmemd-erstellen.html</id>
            <category term="vscode"/>
            <category term="markdown"/>
            <category term="git"/>

        <updated>2022-06-25T08:31:16+02:00</updated>
            <summary>
                <![CDATA[
                    TOC steht für Table of Contents (aka Inhaltsverzeichnis). Jedes grössere README Markdown File in einem git Repo sollte über ein TOC verfügen. Doch die Pflege eines TOC sowie die initiale Erstellung ist nicht sehr handlich, du musst für jeden einzelnen Titel in der richtigen Einrückung&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><em>TOC</em> steht für <em>Table of Contents</em> (aka Inhaltsverzeichnis). Jedes grössere README Markdown File in einem git Repo sollte über ein TOC verfügen.</p>
<p>Doch die Pflege eines TOC sowie die initiale Erstellung ist nicht sehr handlich, du musst für jeden einzelnen Titel in der richtigen Einrückung (damit die Titelanordnung stimmt) folgender Inhalt eintippen, obwohl du diese ja bereits als Titel in der Markdown Datei definiert hast:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-bullet" style="color: #6897bb;">- </span>[<span class="hljs-string" style="color: #6a8759;">Table of Contents</span>](<span class="hljs-link" style="color: #629755;">#table-of-contents</span>)
<span class="hljs-bullet" style="color: #6897bb;">- </span>[<span class="hljs-string" style="color: #6a8759;">Verbesserungen</span>](<span class="hljs-link" style="color: #629755;">#verbesserungen</span>)
<span class="hljs-bullet" style="color: #6897bb;">- </span>[<span class="hljs-string" style="color: #6a8759;">Anpassungen innerhalb dieses Repositories</span>](<span class="hljs-link" style="color: #629755;">#anpassungen-innerhalb-dieses-repositories</span>)
<span class="hljs-code">    - [CI Pipeline](#ci-pipeline)</span>
</pre>
<p>damit dann dieses schöne Inhaltsverzeichnis entsteht:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/39/Screenshot-2022-06-25-at-08.21.47.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/39/responsive/Screenshot-2022-06-25-at-08.21.47-xs.png 300w ,https://www.finecloud.ch/media/posts/39/responsive/Screenshot-2022-06-25-at-08.21.47-sm.png 480w ,https://www.finecloud.ch/media/posts/39/responsive/Screenshot-2022-06-25-at-08.21.47-md.png 768w ,https://www.finecloud.ch/media/posts/39/responsive/Screenshot-2022-06-25-at-08.21.47-lg.png 1024w ,https://www.finecloud.ch/media/posts/39/responsive/Screenshot-2022-06-25-at-08.21.47-xl.png 1360w ,https://www.finecloud.ch/media/posts/39/responsive/Screenshot-2022-06-25-at-08.21.47-2xl.png 1600w"  alt="" width="366" height="115"></figure>
<p>Doch es gibt einen Weg, wie du ohne die Arbeit doppelt zu machen (jeden Titel zweimal schreiben 😒), einfach und schnell aus deinem Markdown ein TOC erstellen und später auch einfach wieder aktualisieren kannst. </p>
<p>In der IDE VSCode kannst du dazu die Extension <a href="https://marketplace.visualstudio.com/items?itemName=huntertran.auto-markdown-toc" target="_blank" rel="nofollow noopener noreferrer">Auto Markdown TOC</a> installieren. Es gibt duzende solche Extensions, lass mich wissen wenn du ein besseres findest. 😃</p>
<p>Wenn du die Extension installiert hast, kannst du anschliessend direkt aus VSCode in deinem Markdown File ein TOC generieren lassen:</p>
<figure class="AnimatedImagePlayer-animatedImage"><img loading="lazy"  style="display: block; opacity: 1;" src="https://github.com/huntertran/markdown-toc/raw/master/img/insert-toc.gif" data-is-external-image="true"  alt="Insert TOC" data-target="animated-image.replacedImage"></figure>
<p>Viel Spass damit!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java Serverlet mit Tomcat und Maven in VSCode</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-serverlet-entwickeln-mit-vscode.html"/>
        <id>https://www.finecloud.ch/java-serverlet-entwickeln-mit-vscode.html</id>
            <category term="vscode"/>
            <category term="tomcat"/>
            <category term="softwareentwicklung"/>
            <category term="servlet"/>
            <category term="network"/>
            <category term="maven"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-06-25T09:54:05+02:00</updated>
            <summary>
                <![CDATA[
                    In diesem Artikel ist beschrieben, wie man Apache Tomcat direkt in VSCode nutzen kann. Voraussetzung ist, dass du auf deinem Gerät bereits eine Java JRE und Apache Maven installiert hast. Weiter brauchen wir in VSCode das Extension Pack for Java, du kannst dire in VSCode&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In <a href="https://www.finecloud.ch/java-serverlet-entwickeln-mit-vscode.html" rel="nofollow">diesem Artikel</a> ist beschrieben, wie man Apache Tomcat direkt in VSCode nutzen kann.<a href="https://www.finecloud.ch/java-serverlet-entwickeln-mit-vscode.html" rel="nofollow"></a></p>
<p>Voraussetzung ist, dass du auf deinem Gerät bereits eine Java JRE und Apache Maven installiert hast. Weiter brauchen wir in VSCode das <em>Extension Pack for Java</em>, du kannst dire in VSCode installieren, wenn du  <em>CTRL + SHIFT + X</em> und dann <code>vscode:extension/vscjava.vscode-java-pack</code> eingibst.</p>
<h2>Maven Projekt anlegen</h2>
<p>Als erster Schritt legen wir ein neues Maven Projekt an:</p>
<ul>
<li>Aus VSCode mit <em>Strg+Shift+P</em>, dann</li>
<li>Wählen Sie <code>Maven: Create Maven-Procekt</code></li>
<li>Wählen Sie <code>maven-archetype-quickstart</code></li>
<li>Wählen Sie die aktuelle Vision wie <code>1.4</code></li>
<li>Geben Sie Ihre Gruppen-ID wie <code>com.testservlet</code> ein</li>
<li>Geben Sie Ihre Artefakt-ID wie <code>servlet</code> ein</li>
<li>Suchen Sie Ihren Zielordner, den Sie zuvor erstellt haben, und generieren Sie dort das Projekt.</li>
</ul>
<h2>Task File anlegen</h2>
<p>Wir müssen nun ein tasks file konfigurieren das besagt wie das Maven Projekt zu kompilieren ist.</p>
<ul>
<li>Aus VSCode mit <em>Strg+Shift+P</em>, dann</li>
<li><code style="font-weight: var(--font-weight-normal);">Tasks: Configure task</code></li>
<li><code style="font-weight: var(--font-weight-normal);">Create tasks.json from template</code></li>
<li><code style="font-weight: var(--font-weight-normal);">maven: executes common maven command</code></li>
</ul>
<p>Anschliessen wir ein leeres default <strong>tasks.json</strong> file generiert. Das passen wir nun so an:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">{
    <span class="hljs-attr">"version"</span>: <span class="hljs-string" style="color: #6a8759;">"2.0.0"</span>,
    <span class="hljs-attr">"tasks"</span>: [
        {
            <span class="hljs-attr">"label"</span>: <span class="hljs-string" style="color: #6a8759;">"compile"</span>,
            <span class="hljs-attr">"type"</span>: <span class="hljs-string" style="color: #6a8759;">"shell"</span>,
            <span class="hljs-attr">"command"</span>: <span class="hljs-string" style="color: #6a8759;">"mvn -B compile"</span>,
            <span class="hljs-attr">"group"</span>: <span class="hljs-string" style="color: #6a8759;">"build"</span>
        },
        {
            <span class="hljs-attr">"label"</span>: <span class="hljs-string" style="color: #6a8759;">"test"</span>,
            <span class="hljs-attr">"type"</span>: <span class="hljs-string" style="color: #6a8759;">"shell"</span>,
            <span class="hljs-attr">"command"</span>: <span class="hljs-string" style="color: #6a8759;">"mvn -B test"</span>,
            <span class="hljs-attr">"group"</span>: <span class="hljs-string" style="color: #6a8759;">"test"</span>
        }
    ]
}
</pre>
<p>Nun kompilieren wir unser maven Projekt, dazu in VSCode in der top bar auf <code>Terminal</code>, <code>Run Build Task</code><em> </em>und dann <code>compile</code>.</p>
<h2>Dependencies hinzufügen</h2>
<p>Bevor wir loslegen können, müssen wir für unser Servlet noch wesentliche Dependencies deklarieren, ansonsten kann das Servlet nicht erstellt werden. Dazu fügen wir im <code>pom.xml </code>File folgenden Inhalt hinzu:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attribute" style="color: #6a8759;">&lt;dependency&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;groupId&gt;</span>javax.servlet<span class="hljs-attribute" style="color: #6a8759;">&lt;/groupId&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;artifactId&gt;</span>javax.servlet-api<span class="hljs-attribute" style="color: #6a8759;">&lt;/artifactId&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;version&gt;</span>4.0.1<span class="hljs-attribute" style="color: #6a8759;">&lt;/version&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;scope&gt;</span>provided<span class="hljs-attribute" style="color: #6a8759;">&lt;/scope&gt;</span>
<span class="hljs-attribute" style="color: #6a8759;">&lt;/dependency&gt;</span>
<span class="hljs-attribute" style="color: #6a8759;">&lt;dependency&gt;</span>
     <span class="hljs-attribute" style="color: #6a8759;">&lt;groupId&gt;</span>javax.servlet<span class="hljs-attribute" style="color: #6a8759;">&lt;/groupId&gt;</span>
     <span class="hljs-attribute" style="color: #6a8759;">&lt;artifactId&gt;</span>jstl<span class="hljs-attribute" style="color: #6a8759;">&lt;/artifactId&gt;</span>
     <span class="hljs-attribute" style="color: #6a8759;">&lt;version&gt;</span>1.2<span class="hljs-attribute" style="color: #6a8759;">&lt;/version&gt;</span>
<span class="hljs-attribute" style="color: #6a8759;">&lt;/dependency&gt;</span>
<span class="hljs-attribute" style="color: #6a8759;">&lt;dependency&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;groupId&gt;</span>javax<span class="hljs-attribute" style="color: #6a8759;">&lt;/groupId&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;artifactId&gt;</span>javaee-web-api<span class="hljs-attribute" style="color: #6a8759;">&lt;/artifactId&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;version&gt;</span>8.0<span class="hljs-attribute" style="color: #6a8759;">&lt;/version&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;scope&gt;</span>provided<span class="hljs-attribute" style="color: #6a8759;">&lt;/scope&gt;</span>
<span class="hljs-attribute" style="color: #6a8759;">&lt;/dependency&gt;</span></pre>
<h2>Servlet erstellen</h2>
<p>Wir löschen die default Klasse App.java und erstellen folgende neue NewServlet.java Klasse unter diesem Pfad: <code>src\main\java\com\myservlet\NewServlet.java</code></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">package</span> com.myservlet;

<span class="hljs-keyword" style="color: #cc7832;">import</span> java.io.IOException;
<span class="hljs-keyword" style="color: #cc7832;">import</span> java.io.PrintWriter;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javax.servlet.ServletException;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javax.servlet.http.HttpServlet;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javax.servlet.http.HttpServletResponse;

<span class="hljs-comment" style="color: grey;">/**
 * NewServlet
 */</span>
<span class="hljs-meta" style="color: #bbb529;">@WebServlet</span>(urlPatterns = <span class="hljs-string" style="color: #6a8759;">"/mambo.do"</span>)
<span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">NewServlet</span> <span class="hljs-keyword" style="color: #cc7832;">extends</span> <span class="hljs-title" style="color: #ffc66d;">HttpServlet</span> </span>{

    <span class="hljs-comment" style="color: grey;">/**
     * Processes requests for both HTTP &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;
     * methods.
     *
     * <span class="hljs-doctag">@param</span> request servlet request
     * <span class="hljs-doctag">@param</span> response servlet response
     * <span class="hljs-doctag">@throws</span> ServletException if a servlet-specific error occurs
     * <span class="hljs-doctag">@throws</span> IOException if an I/O error occurs
     */</span>
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">protected</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">processRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span>
            <span class="hljs-keyword" style="color: #cc7832;">throws</span> ServletException, IOException </span>{
        response.setContentType(<span class="hljs-string" style="color: #6a8759;">"text/html;charset=UTF-8"</span>);
        <span class="hljs-keyword" style="color: #cc7832;">try</span> ( PrintWriter out = response.getWriter()) {
            <span class="hljs-comment" style="color: grey;">/* TODO output your page here. You may use following sample code. */</span>
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;!DOCTYPE html&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;html&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;head&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;title&gt;Servlet NewServlet&lt;/title&gt;"</span>);            
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;/head&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;body&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;h1&gt;Servlet NewServlet at "</span> + request.getContextPath() + <span class="hljs-string" style="color: #6a8759;">"&lt;/h1&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;/body&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;/html&gt;"</span>);
        }
    }

    <span class="hljs-comment" style="color: grey;">// &lt;editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code."&gt;</span>
    <span class="hljs-comment" style="color: grey;">/**
     * Handles the HTTP &lt;code&gt;GET&lt;/code&gt; method.
     *
     * <span class="hljs-doctag">@param</span> request servlet request
     * <span class="hljs-doctag">@param</span> response servlet response
     * <span class="hljs-doctag">@throws</span> ServletException if a servlet-specific error occurs
     * <span class="hljs-doctag">@throws</span> IOException if an I/O error occurs
     */</span>
    <span class="hljs-meta" style="color: #bbb529;">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">protected</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span>
            <span class="hljs-keyword" style="color: #cc7832;">throws</span> ServletException, IOException </span>{
        processRequest(request, response);
    }

    <span class="hljs-comment" style="color: grey;">/**
     * Handles the HTTP &lt;code&gt;POST&lt;/code&gt; method.
     *
     * <span class="hljs-doctag">@param</span> request servlet request
     * <span class="hljs-doctag">@param</span> response servlet response
     * <span class="hljs-doctag">@throws</span> ServletException if a servlet-specific error occurs
     * <span class="hljs-doctag">@throws</span> IOException if an I/O error occurs
     */</span>
    <span class="hljs-meta" style="color: #bbb529;">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">protected</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span>
            <span class="hljs-keyword" style="color: #cc7832;">throws</span> ServletException, IOException </span>{
        processRequest(request, response);
    }

    <span class="hljs-comment" style="color: grey;">/**
     * Returns a short description of the servlet.
     *
     * <span class="hljs-doctag">@return</span> a String containing servlet description
     */</span>
    <span class="hljs-meta" style="color: #bbb529;">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> String <span class="hljs-title" style="color: #ffc66d;">getServletInfo</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> <span class="hljs-string" style="color: #6a8759;">"Short description"</span>;
    }<span class="hljs-comment" style="color: grey;">// &lt;/editor-fold&gt;</span>

}

</pre>
<h2>web.xml File anlegen</h2>
<ul>
<li>Erstelle unter dem Pfad "src/main/" den Ordner webapp (wenn nicht bereits vorhanden).</li>
<li>Erstelle unter dem Pfad "src/main/webapp" den Ordner "WEB-INF" und die Datei web.xml mit dem folgenden Inhalt:</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">&lt;web-<span class="hljs-keyword" style="color: #cc7832;">app</span> xmlns=<span class="hljs-string" style="color: #6a8759;">"http://java.sun.com/xml/ns/javaee"</span> xmlns:xsi=<span class="hljs-string" style="color: #6a8759;">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xsi:schemaLocation=<span class="hljs-string" style="color: #6a8759;">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>
    <span class="hljs-keyword" style="color: #cc7832;">version</span>=<span class="hljs-string" style="color: #6a8759;">"3.0"</span>&gt;
    &lt;<span class="hljs-keyword" style="color: #cc7832;">display</span>-name&gt;To <span class="hljs-keyword" style="color: #cc7832;">do</span> <span class="hljs-keyword" style="color: #cc7832;">List</span>&lt;/<span class="hljs-keyword" style="color: #cc7832;">display</span>-name&gt;
    &lt;welcome-<span class="hljs-keyword" style="color: #cc7832;">file</span>-<span class="hljs-keyword" style="color: #cc7832;">list</span>&gt;
        &lt;welcome-<span class="hljs-keyword" style="color: #cc7832;">file</span>&gt;mambo.<span class="hljs-keyword" style="color: #cc7832;">do</span>&lt;/welcome-<span class="hljs-keyword" style="color: #cc7832;">file</span>&gt;
    &lt;/welcome-<span class="hljs-keyword" style="color: #cc7832;">file</span>-<span class="hljs-keyword" style="color: #cc7832;">list</span>&gt;
&lt;/web-<span class="hljs-keyword" style="color: #cc7832;">app</span>&gt;
</pre>
<h2>war File erstellen</h2>
<p>Bevor wir die war Datei erstellen können, müssen wir sicherstellen, dass in der pom.xml Datei nicht ein jar erstellt wird, sondern ein war:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"> <span class="hljs-attribute" style="color: #6a8759;">&lt;groupId&gt;</span>com.myservlet<span class="hljs-attribute" style="color: #6a8759;">&lt;/groupId&gt;</span>
 <span class="hljs-attribute" style="color: #6a8759;">&lt;artifactId&gt;</span>servlet<span class="hljs-attribute" style="color: #6a8759;">&lt;/artifactId&gt;</span>
 <span class="hljs-attribute" style="color: #6a8759;">&lt;version&gt;</span>1.0-SNAPSHOT<span class="hljs-attribute" style="color: #6a8759;">&lt;/version&gt;</span>
 <span class="hljs-attribute" style="color: #6a8759;">&lt;packaging&gt;</span>war<span class="hljs-attribute" style="color: #6a8759;">&lt;/packaging&gt;</span></pre>
<p>Nun können wir die war Datei kompilieren, dazu im Menu von VSCode auf Terminal -&gt; Run Build Task -&gt; compile klicken. Nachdem die war Datei kompiliert wurde, muss auf der Konsole, im Projektverzeichnis noch   </p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"># mvn clean package</pre>
<p>ausgeführt werden. Sofern die war Datei nun erfolgreich erstellt wurde, können wir diese nun auf den Tomcat deployen.</p>
<h2>War File auf lokalen Tomcat deployen</h2>
<p>In <a href="https://www.finecloud.ch/java-serverlets.html" rel="nofollow">diesem Artikel</a> steht, wie du ein Tomcat direkt in VSCode verwenden kannst.</p>
<p>Starte den Tomcat Server, und mache ein Rechtsklick auf den Server und wähle "Add Deployment", wähle "File". Anschliessend lade das zuvor erstellte war File hoch. Das war File wird in der Regel im Projektordner unter "target" abgelegt. Bei der Frage "Do you want to edit optional deployment parameters", wähle "no". Nun musst du noch mit einem Rechtsklick auf den Server "Publish Server (Full)" auswählen, damit die war Datei aktiv wird.</p>
<p>Endlich kannst du in deinem Browser unter dieser URL dein servlet aufrufen: <a href="http://localhost:8080/servlet-1.0-SNAPSHOT/">http://localhost:8080/servlet-1.0-SNAPSHOT/</a></p>
<p>Alternativ kannst du mit Rechtsklick auf den Server "Server Actions", "Show in Browser" auswählen.</p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java Serverlet Container installieren</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-serverlets.html"/>
        <id>https://www.finecloud.ch/java-serverlets.html</id>
            <category term="vscode"/>
            <category term="tomcat"/>
            <category term="softwareentwicklung"/>
            <category term="socket"/>
            <category term="servlet"/>
            <category term="network"/>
            <category term="java.io"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-06-27T09:22:53+02:00</updated>
            <summary>
                <![CDATA[
                    Einleitung Das Serverlet-Framework Jakarta EE ermöglicht die Entwicklung von Anwendungen für eine grosse Anzahl paralleler Benutzer die über einen Web-Browser zugreifen. Dazu ist besonders die Serverlet-API von JEE von Interesse. Diese API-Klasse wartet auf eingehende Netzwerkverbindungen und reagiert mit einer entsprechenden Antwort. Für die übertragenen&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g62lllju8df">Einleitung</a></li>
<li><a href="#mcetoc_1g62lllju8dg">Serverlet-Container installieren</a>
<ul>
<li><a href="#mcetoc_1g62lllju8dh">Option 1: Manuelle Installation des Tomcat-Servers auf dem eigenen Gerät</a></li>
<li><a href="#mcetoc_1g62lllju8di">Option 2: Installation des Tomcat-Servers via VSCode</a></li>
<li><a href="#mcetoc_1g62lllju8dj">(Option 3: Tomcat Docker Image)</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g62lllju8dk">Tomcat mit VSCode einrichten</a></li>
</ul>
</div>
<h2 id="mcetoc_1g62lllju8de"></h2>
<h2 id="mcetoc_1g62lllju8df">Einleitung</h2>
<p>Das Serverlet-Framework Jakarta EE ermöglicht die Entwicklung von Anwendungen für eine grosse Anzahl paralleler Benutzer die über einen Web-Browser zugreifen. Dazu ist besonders die Serverlet-API von JEE von Interesse.</p>
<p>Diese API-Klasse wartet auf eingehende Netzwerkverbindungen und reagiert mit einer entsprechenden Antwort. Für die übertragenen Daten wird fast immer das HTTP (Hypertext Transfer Protocol) verwendet.</p>
<p>Die Hauptaufgabe eines Serverlets ist von einem Serverprozess aufgerufen zu werden, um in eine Netzwerkverbindung einen Datenstrom zu schreiben, den es auf irgendeine Weise erzeugt hat. Damit ein Serverlet ausgeführt werden kann, braucht es den Serverlet-Container. Das ist ein Programm, das man fertig installiert. Dieses Programm stellt anschliessend ein oder mehrere Serverlets zur Verfügung, die vom Container aufgerufen werden. Ein Serverlet verfügt nicht über eine main-Methode und ist allein nicht funktionsfähig, es kann also auch nicht einfach von der Kommandozeile aus ausgerufen werden.</p>
<p>Die Aufgaben des Containers sind alle Aufgaben, die nicht mit der Logik der Anwendung zu tun haben. Beispielsweise die Verwaltung der Netzwerkverbindungen, Benutzerberechtigungen und des Speichers. Dazu kann das Serverlet auf die Schnittstellen des Containers zugreifen. Das ermöglicht dem Entwickler sich auf die Anwendung zu konzentrieren. Der Hauptvorteil von Serverlets ist, das diese bereits out-of-the-Box sicherer, performanter und stabiler sind, als wenn man diese Funktionen und Methoden selbst noch neu entwickeln müsste.</p>
<h2 id="mcetoc_1g62lllju8dg">Serverlet-Container installieren</h2>
<p>Es gibt eine Vielzahl von Serverlet-Containern. Nicht alle eigenen sich für jeden Anwendungsfall. Wir werden Testeshalber den Apache Tomcat verwenden. Dieser Server, wie auch alle anderen Serverlet-Container sind selbst ein Java-Programm und dadurch unabhängig vom Betriebssystem. <strong>Die Anweisungen hier gelten nur für eine Testumgebung und sind nicht für den produktiven Einsatz als Webserver gedacht.</strong></p>
<h3 id="mcetoc_1g62lllju8dh">Option 1: Manuelle Installation des Tomcat-Servers auf dem eigenen Gerät</h3>
<p>Wer sich den manuellen overhead der Installation des Tomcat-Servers antun will, der kann die aktuellste Version des Tomcat hier heruntergeladen werden: <a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p>
<p>Die Installationsanweisungen befinden sich hier: <a href="https://tomcat.apache.org/tomcat-9.0-doc/setup.html">https://tomcat.apache.org/tomcat-9.0-doc/setup.html</a></p>
<p>Da ich mich nicht mit manuellen Installationen herumschlagen will, ist Option 2 mein Favorit.</p>
<h3 id="mcetoc_1g62lllju8di">Option 2: Installation des Tomcat-Servers via VSCode</h3>
<p>Falls man für die Entwicklung in der IDE VSCode arbeitet, kann man dort direkt Tomcat als AddOn installieren und muss sich so garnicht mit der Installation des Tomcat befassen. Link zum Add-On: <a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-community-server-connector">https://marketplace.visualstudio.com/items?itemName=redhat.vscode-community-server-connector</a></p>
<h3 id="mcetoc_1g62lllju8dj">(Option 3: Tomcat Docker Image)</h3>
<p>Fortgeschrittene Java Entwickler können theoretisch auch direkt das Docker Tomcat Image nutzen. Da ich jedoch Java sowie Tomcat Anfänger bin, verzichte ich vorerst auf den Docker Container, und werde Option 2 weiter erläutern.</p>
<h2 id="mcetoc_1g62lllju8dk">Tomcat mit VSCode einrichten</h2>
<p>Nach der Installation erscheint links im Explorer von VSCode ein neuer Tab "SERVERS", wenn man diesen öffnet erscheint der "Cummunity Server Connector". Mit rechtsklick darauf kann man einen neuen Server erstellen. Wir beantworten "Download Server?" mit Yes. und wählen "Apache Tomcat 9.0.41" als nächstes müssen wir die Lizenz akzeptieren. That's it. Nun sollte ein Apache Tomcat aufgelistet sein.</p>
<p>Es fehlt lediglich ein Benutzer, der die Administrationskonsole des Servers bedienen darf. Einen solchen Nutzer sollte aber eingerichtet werden, damit man die Administrationskonsole verwalten kann. Dazu öffnen wir folgende Datei (gilt nur für MacOS):  <span class="s1">/Users/&lt;deinuser&gt;/.rsp/redhat-community-server-connector/runtimes/installations/tomcat-9.0.41/apache-tomcat-9.0.41/conf/t</span><span class="s1">omcat-users.xml und fügen folgende Zeile hinzu:</span></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">&lt;<span class="hljs-literal" style="color: #6897bb;">user</span> username=<span class="hljs-string" style="color: #6a8759;">"tomcat"</span> password=<span class="hljs-string" style="color: #6a8759;">"tomcat"</span> roles=<span class="hljs-string" style="color: #6a8759;">"manager,manager-gui"</span>/&gt;</pre>
<p>Natürlich sollte ein anderes Kennwort verwendet werden, idealerweise lässt man eines generieren. Der Server ist jetzt fertig konfiguriert. Der Server kann nun mit einem Rechtsklick auf dem TomCat Server gestartet werden.</p>
<h2>Installation verifizieren</h2>
<p>Um zu überprüfen, ob der Server wirklich funktioniert, kann man nun die Administrationskonsole unter <a href="http://localhost:8080/manager">http://localhost:8080/manager</a> aufrufen. Nun sollte eine Loginmaske erscheinen, in welchem wir den zuvor definieren User und PW eingeben. Nach der Anmeldung sollte man die Tomcat-Manager-Anwendung zu sehen bekommen:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/36/Screenshot-2022-06-21-at-10.59.45.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/36/responsive/Screenshot-2022-06-21-at-10.59.45-xs.png 300w ,https://www.finecloud.ch/media/posts/36/responsive/Screenshot-2022-06-21-at-10.59.45-sm.png 480w ,https://www.finecloud.ch/media/posts/36/responsive/Screenshot-2022-06-21-at-10.59.45-md.png 768w ,https://www.finecloud.ch/media/posts/36/responsive/Screenshot-2022-06-21-at-10.59.45-lg.png 1024w ,https://www.finecloud.ch/media/posts/36/responsive/Screenshot-2022-06-21-at-10.59.45-xl.png 1360w ,https://www.finecloud.ch/media/posts/36/responsive/Screenshot-2022-06-21-at-10.59.45-2xl.png 1600w"  alt="" width="1912" height="926"></figure>
<p>Wenn man diese Ansicht zu sehen bekommt kann man sicher sein, das die Installation erfolgreich war und der Tomcat Server funktioniert.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Tabby Config-Sync auf Nextcloud einrichten</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/tabby.html"/>
        <id>https://www.finecloud.ch/tabby.html</id>
            <category term="unix"/>
            <category term="tools"/>
            <category term="tabby"/>
            <category term="ssh"/>
            <category term="shell"/>
            <category term="nextcloud"/>
            <category term="linux"/>
            <category term="container"/>

        <updated>2022-06-17T06:44:36+02:00</updated>
            <summary>
                <![CDATA[
                    A terminal for the modern age Tabby ist ein anpassbares, Platform-Übergreifendes Terminal App für die Arbeit mit Lokalen Shells sowie Serial, SSH und Telnet Verbindungen. Aus diesen Gründen ist Tabby viel praktischer und moderner als Putty: Link zum App: https://tabby.sh/ Link zum Projekt auf GitHub:&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3>A terminal for the modern age</h3>
<p><a href="https://tabby.sh/" rel="nofollow">Tabby</a> ist ein anpassbares, Platform-Übergreifendes Terminal App für die Arbeit mit Lokalen Shells sowie Serial, SSH und Telnet Verbindungen.</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/33/readme-terminal.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/33/responsive/readme-terminal-xs.png 300w ,https://www.finecloud.ch/media/posts/33/responsive/readme-terminal-sm.png 480w ,https://www.finecloud.ch/media/posts/33/responsive/readme-terminal-md.png 768w ,https://www.finecloud.ch/media/posts/33/responsive/readme-terminal-lg.png 1024w ,https://www.finecloud.ch/media/posts/33/responsive/readme-terminal-xl.png 1360w ,https://www.finecloud.ch/media/posts/33/responsive/readme-terminal-2xl.png 1600w"  alt="" width="2724" height="1810"></figure>
<p>Aus diesen Gründen ist Tabby viel praktischer und moderner als <a href="https://www.putty.org/" target="_blank" rel="nofollow noopener noreferrer">Putty</a>:</p>
<ul>
<li>Läuft auf Windows, Mac und Linux</li>
<li>Integrierter SSH-Client mit Verbindungsmanager</li>
<li>Integriertes serielles Terminal</li>
<li>Unterstützung für PowerShell, PS Core, WSL, Git-Bash, Cygwin, Cmder und CMD</li>
<li>Volle Unicode-Unterstützung, einschließlich Zeichen mit doppelter Breite</li>
<li>Dateiübertragung von/zu SSH-Sitzungen über SFTP und Zmodem</li>
<li>Thematisierung und Farbschemata</li>
<li>Vollständig konfigurierbare Shortcuts und Multi-Chord-Shortcuts</li>
<li>Erinnert sich an Ihre Registerkarten und geteilten Fenster</li>
<li>Shell-Funktionen wie unter Windows, einschließlich Tab-Vervollständigung</li>
<li>Integrierter verschlüsselter Container für SSH-Secrets und -Konfiguration</li>
</ul>
<p>Link zum App: <a href="https://tabby.sh/">https://tabby.sh/</a></p>
<p>Link zum Projekt auf GitHub: <a href="https://github.com/eugeny/tabby">https://github.com/eugeny/tabby</a> </p>
<h3>Tabby Config Sync mit Nextcloud</h3>
<p class="msg msg--warning">Achtung: So schön das alles klingt, der WebDav Sync mit Nextcloud scheint nicht zu funktionieren. Beim Anlegen der Konfigdatei via WebDav erscheint ein unspezifischer Fehler. Solange das Problem noch nicht behoben ist, muss man wohl mit alternativen auskommen wie FTPS oder manuelles kopieren der Datei auf einen Nextcloud-Share.</p>
<p>Doch was bringt das alles ohne Config Sync zwischen deinen einzelnen Geräten, Windows, MacOS und Linux. Dafür kannst du entweder den Server von Tabby verwenden, oder andere 3rd Party Backends. Noch toller ist aber, dass du deine eigene Nextcloud mittels DAV Protokoll verwenden kannst, um die Konfiguration zwischen deinen Geräten zu synchronisieren:</p>
<h5>Vorbereitungen auf Nextcloud</h5>
<ol>
<li>Aus Sicherheitsgründen empfehle ich für den ConfigSync einen separaten Benutzer Account explizit nur für diesen ConfigSync zu erstellen.</li>
<li>Melde dich mit dem neuen Benutzer an deiner Nextcloud an und erstelle einen neuen leeren Ordner "TabbyConfigSync".</li>
<li>Optional kannst du unter den Security Einstellungen des Benutzers noch ein App Passwort generieren - damit kannst du den Zugriff auf das DAV Protokoll beschränken. Mit dem App Passwort ist eine Anmeldung am Nextcloud WebInterface nicht möglich.</li>
</ol>
<h5>Einstellungen in der Tabby App</h5>
<ol>
<li>Installiere das Tabby Plugin "cloud-settings-sync" Quelle: <a href="https://tabby-cloud.tranit.co/">https://tabby-cloud.tranit.co/</a> <br><figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/33/Screenshot-2022-06-14-at-22.13.16.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.13.16-xs.png 300w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.13.16-sm.png 480w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.13.16-md.png 768w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.13.16-lg.png 1024w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.13.16-xl.png 1360w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.13.16-2xl.png 1600w"  alt="" width="1754" height="1094"></figure></li>
<li>Klicke auf "Get" um das Plugin zu installieren:<br><figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/33/Screenshot-2022-06-14-at-22.15.00.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.15.00-xs.png 300w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.15.00-sm.png 480w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.15.00-md.png 768w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.15.00-lg.png 1024w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.15.00-xl.png 1360w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.15.00-2xl.png 1600w"  alt="" width="1754" height="1094"></figure></li>
<li>Beende die App und starte sie neu, damit das Plugin aktiv wird</li>
<li>Nun ist ein neuer Reiter in den Einstellungen "Settings Sync", gib hier die folgenden Einstellungen an:
<ul>
<li>URL: <a href="https://nextcloud.domain.com">https://nextcloud.domain.com</a></li>
<li>User: useraccount</li>
<li>Password: dein App-Passwort</li>
<li>Port: 443</li>
<li>Pfad: /remote.php/dav/files/useraccount/TabbyConfigSync<br><figure class="post__image post__image--wide"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/33/Screenshot-2022-06-14-at-22.57.05.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.57.05-xs.png 300w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.57.05-sm.png 480w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.57.05-md.png 768w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.57.05-lg.png 1024w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.57.05-xl.png 1360w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.57.05-2xl.png 1600w"  alt="" width="1913" height="693"></figure></li>
<li>Klicke anschliessend auf den Button "Test Connection"</li>
</ul>
</li>
<li>Sofern deine Einstellungen korrekt sind, Klicke auf "Save This Setting". Nun kannst du nun auf der rechten Seite noch den Sync aktivieren.</li>
<li>Richte diese Konfiguration auf allen deinen Geräten so ein und deine Config ist auf allen Geräten immer aktuell.</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Netzwerkkommunikation mit Java</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/netzwerkkommunikation-mit-java.html"/>
        <id>https://www.finecloud.ch/netzwerkkommunikation-mit-java.html</id>
            <category term="writer"/>
            <category term="softwareentwicklung"/>
            <category term="socket"/>
            <category term="reader"/>
            <category term="network"/>
            <category term="java.io"/>
            <category term="java"/>
            <category term="dev"/>
            <category term="bufferedwriter"/>

        <updated>2022-06-21T10:11:31+02:00</updated>
            <summary>
                <![CDATA[
                    In Java gibt es keinen nennenswerten Unterschied wischen I/O mit Daten und I/O mit Netzwerkverbindungen. In beiden Fällen basiert die Ein- und Ausgabe auf InputStream und OutputStream, der Unterschied liegt nur darin, wo diese Datenströme herkommen. Bei der Netzwerkkommunikation mit dem TCP-Protokoll kommen sie aus&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In Java gibt es keinen nennenswerten Unterschied wischen I/O mit Daten und I/O mit Netzwerkverbindungen. In beiden Fällen basiert die Ein- und Ausgabe auf InputStream und OutputStream, der Unterschied liegt nur darin, wo diese Datenströme herkommen. Bei der Netzwerkkommunikation mit dem TCP-Protokoll kommen sie aus einem Socket. Bei UDP wird die Klasse DatagramSocket verwendet, welche nicht auf Streams basiert.</p>
<p>Socket hat zwar eine lange Liste von Methoden, aber bei der grundlegenden Verwendung kann man die meisten davon ignorieren.</p>
<h3>Client-Seite</h3>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">String nachricht = in.readLine();
<span class="hljs-keyword" style="color: #cc7832;">try</span> (Socket verbindung = <span class="hljs-keyword" style="color: #cc7832;">new</span> Socket(<span class="hljs-string" style="color: #6a8759;">"localhost"</span>, <span class="hljs-number" style="color: #6897bb;">23456</span>)){
    BufferedReader reader = <span class="hljs-keyword" style="color: #cc7832;">new</span> BufferedReader(
     <span class="hljs-keyword" style="color: #cc7832;">new</span> InputStreamReader(verbindung.getInputStream())); 
    BufferedWriter writer = <span class="hljs-keyword" style="color: #cc7832;">new</span> BufferedWriter(
     <span class="hljs-keyword" style="color: #cc7832;">new</span> OutputStreamWriter(verbindung.getOutputStream()));
    writer.write(nachricht);
    writer.newLine();
    writer.flush();
    String antwort = reader.readLine();
}</pre>
<p>Im Beispiel wird dem Socket im Konstruktor Adresse (IP oder Hostname) und Port des Servers angegeben, mit dem eine Verbindung hergestellt werden soll. Die Verbindung wird automatisch hergestellt und mit den Methoden getInputStream und getOutputStream kann man Daten vom Server empfangen und zum Server senden.</p>
<p>Einen kleinen Unterschied zwischen Netzwerk I/O und Datei I/O gibt es mit der flush-Methode. Sie sorgt dafür, dass der Schreibpuffer sofort weiterverarbeitet wird, auch wenn er noch nicht voll ist. Dabei wird der Strom aber nicht sofort geschlossen, denn es sollen nicht nur Daten in eine Richtung versendet werden, es soll echte Kommunikation in beide Richtungen stattfinden. Damit der Server eine Antwort schicken kann, die dann mit readLine gelesen werden kann, muss er zunächst die Nachricht vom Client erhalten und dazu muss der Client den Puffer leeren.</p>
<p>Ausserdem wird weder InputStream noch OutputStream geschlossen. Beide sind fest mit dem Socket verbunden, aus dem sie hergestellt wurden und wenn man einen der Ströme schliesst, wird auch der Socket geschlossen. Andersherum werden die Datenströme aber auch geschlossen, wenn man den Socket schliesst, deswegen reicht es, diesen als Ressource für den try-Block anzugeben.</p>
<h3>Server-Seite</h3>
<p>Ein einfaches Serverprogramm in Java zu schreiben, ist kaum anders als beim Client, nur die Herkunft des Sockets ändert sich:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">ServerSocket server = <span class="hljs-keyword" style="color: #cc7832;">new</span> ServerSocket(<span class="hljs-number" style="color: #6897bb;">23456</span>);
<span class="hljs-keyword" style="color: #cc7832;">try</span> (Socket verbindung = server.accept()){
    BufferedReader reader = <span class="hljs-keyword" style="color: #cc7832;">new</span> BufferedReader(
     <span class="hljs-keyword" style="color: #cc7832;">new</span> InputStreamReader(verbindung.getInputStream())); 
    BufferedWriter writer = <span class="hljs-keyword" style="color: #cc7832;">new</span> BufferedWriter(
     <span class="hljs-keyword" style="color: #cc7832;">new</span> OutputStreamWriter(verbindung.getOutputStream()));
    String nachricht = reader.readLine();
    writer.write(antwort);
    writer.flush();
}</pre>
<p>Ein ServerSocket dient nicht direkt der Kommunikation, er wartet nur auf eingehende Verbindungen. Der Konstruktor-Parameter gibt den Port an, auf dem Verbindungen akzeptiert werden sollen; die Methode accept wartet, bis auf diesem Port eine Verbindung hergestellt wird. Und warten heisst hier wirklich warten: accept blockiert so lange, bis eine Verbindung zustande kommt. Wenn dies der Fall ist, gibt accept einen Socket zurück, mit dem man genauso verfahren kann, wie mit einem Socket auf der Client-Seite.</p>
<p>Wie demonstriert, wird nur eine Verbindung akzeptiert und verarbeitet. Für ein Beispiel ausreichend, werden für einen echten Serverprozess dagegen üblicherweise Verbindungen in einer Schleife akzeptiert und die Verarbeiten wird in einem neuen Thread durchgeführt, so dass dieser Thread erneut mit accept auf Verbindungen warten kann.</p>
<p>Hier ein Beispiel-Code für ServerSocket mit Threads:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">ServerSocket server = <span class="hljs-keyword" style="color: #cc7832;">new</span> ServerSocket(<span class="hljs-number" style="color: #6897bb;">23456</span>);
<span class="hljs-keyword" style="color: #cc7832;">while</span>(!beendet){
    <span class="hljs-keyword" style="color: #cc7832;">try</span> (Socket verbindung = server.accept()){
        <span class="hljs-keyword" style="color: #cc7832;">new</span> Thread(() -&gt; verarbeiteVerbidnung(verbindung));
    }
}</pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Proxmox VE 7.2 Installation</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/proxmox-ve-72-installation.html"/>
        <id>https://www.finecloud.ch/proxmox-ve-72-installation.html</id>
            <category term="virtualization"/>
            <category term="unix"/>
            <category term="proxmox"/>
            <category term="lxc"/>
            <category term="linux"/>
            <category term="kvm"/>
            <category term="hci"/>
            <category term="container"/>

        <updated>2022-06-09T13:16:03+02:00</updated>
            <summary>
                <![CDATA[
                    Systemanforderungen Proxmox gibt folgende minimale Systemanforderungen an: Für produktive Workloads sind diese Anforderungen aber nicht gedacht. Daher sind die empfohlenen Systemanforderungen wie folgt: Da ich meine Proxmox Infrastruktur zum Start nur als Standalone LAB installieren will und für mein kleines Budget maximal viel Leistung erhalten&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="mcetoc_1g53sim7k6lt"></h3>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g53sim7k6lu">Systemanforderungen</a></li>
<li><a href="#mcetoc_1g53sim7k6lv">Vorbereitung</a>
<ul>
<li><a href="#mcetoc_1g53sim7k6m0">BIOS Einstellungen</a></li>
<li><a href="#mcetoc_1g53sim7k6m1">BIOS Upgrade</a></li>
<li><a href="#mcetoc_1g53sim7k6m2">Installations Medium</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g53sim7k6m3">Installation</a></li>
</ul>
</div>
<h3 id="mcetoc_1g53sim7k6lu">Systemanforderungen</h3>
<p>Proxmox gibt folgende minimale Systemanforderungen an:</p>
<ul>
<li>CPU: 64bit (Intel EMT64 or AMD64)</li>
<li>Intel VT/AMD-V capable CPU/Mainboard for KVM full virtualization support</li>
<li>RAM: 1 GB RAM, plus additional RAM needed for guests</li>
<li>Hard drive</li>
<li>One network card (NIC)</li>
</ul>
<p>Für produktive Workloads sind diese Anforderungen aber nicht gedacht. Daher sind die empfohlenen Systemanforderungen wie folgt:</p>
<ul>
<li>Intel EMT64 or AMD64 with Intel VT/AMD-V CPU ﬂag</li>
<li>Memory: Minimum 2 GB for the OS and Proxmox VE services, plus designated memory for guests. For Ceph and ZFS, additional memory is required; approximately 1GB of memory for every TB of used storage</li>
<li>Fast and redundant storage, best results are achieved with SSDs</li>
<li>OS storage: Use a hardware RAID with battery protected write cache (“BBU”) or non-RAID with ZFS (optional SSD for ZIL)</li>
<li>VM storage:
<ul>
<li>For local storage, use either a hardware RAID with battery backed write cache (BBU) or non-RAID for ZFS and Ceph. Neither ZFS nor Ceph are compatible with a hardware RAID controller</li>
<li>Shared and distributed storage is possible</li>
</ul>
</li>
<li>Redundant (Multi-)Gbit NICs, with additional NICs depending on the preferred storage technology and cluster setup.</li>
<li>For PCI(e) passthrough the CPU needs to support the VT-d/AMD-d ﬂag.</li>
</ul>
<p>Da ich meine Proxmox Infrastruktur zum Start nur als Standalone LAB installieren will und für mein kleines Budget maximal viel Leistung erhalten will, geht das nur auf Kosten von Redundanz und Verfügbarkeit, deshalb habe ich mich zum Start für folgende Hardware entschieden:</p>
<ul>
<li>Intel NUC10i7FNHN Barebone</li>
<li>Kingston SO-DDR4-RAM 32GB</li>
<li>Samsung SSD 970 EVO Plus NVMe M.2 500GB</li>
</ul>
<h3 id="mcetoc_1g53sim7k6lv">Vorbereitung</h3>
<h4 id="mcetoc_1g53sim7k6m0">BIOS Einstellungen</h4>
<p>Bevor wir mit der Installation starten, muss im BIOS des NUC überprüft werden ob die Virtualisierungs-Unterstützung des Prozessors aktiviert ist, dazu müssen folgende Settings aktiviert sein:</p>
<ul>
<li>Performance &gt; Processor &gt; Hyper-Threading (enabled)</li>
<li>Performance &gt; Processor &gt; Intel Turbo Boost Technology (checked)</li>
</ul>
<p>Secure Boot schalten wir aus:</p>
<ul>
<li>Boot &gt; Secure Boot &gt; Secure Boot &gt; Disabled</li>
</ul>
<p>Weiter empfiehlt es sich die Boot Reihenfolge so anzupassen das USB Geräte an erster Stelle kommen. Dazu unter:</p>
<ul>
<li>Boot &gt; Boot Priority &gt; Boot USB Devices Frist</li>
</ul>
<h4 id="mcetoc_1g53sim7k6m1">BIOS Upgrade</h4>
<p>Von einem pauschalen BIOS Upgrade habe ich abgesehen, da Intel die Frage "Wann soll ich ein BIOS Update machen?" wie folgt beantwortet:</p>
<blockquote>
<p>Update the BIOS on your computer only if the newer BIOS version can solve a specific problem. We don't recommend BIOS updates for computers that do not need it. </p>
<p>Quelle: <a href="https://www.intel.com/content/www/us/en/support/articles/000006714/intel-nuc.html" target="_blank" rel="nofollow noopener noreferrer">https://www.intel.com/content/www/us/en/support/articles/000006714/intel-nuc.html</a></p>
</blockquote>
<h4 id="mcetoc_1g53sim7k6m2">Installations Medium</h4>
<p>Proxmox empfiehlt die Installation via ISO File mittels einem USB Flash Drive. Dazu muss aber das ISO File zuerst in ein Image konvertiert werden, damit wir dieses Image so auf den USB Stick schreiben können, damit wir davon booten können. Unter MacOS geht das am einfachsten so:</p>
<ol>
<li>Neues Terminal öffnen (suche nach Terminal in Spotlight)</li>
<li>Konvertieren der .iso Datei nach .dmg:<br><code># hdiutil convert -format UDRW -o proxmox-ve_*.dmg proxmox-ve_*.iso</code></li>
<li>Damit wir eine aktuelle Liste der verfügbaren Geräte erhalten:<br><code># diskutil list</code></li>
<li>Nun stecken wir den USB Stick ein und geben den vorherigen Befehl nochmals ein, damit wir herausfinden können, welche Gerätebezeichnung vergeben wurde. (sollte etwas mit, /dev/diskX sein).<br><code># diskutil list</code><br><code># diskutil unmountDisk /dev/diskX</code></li>
<li>Nun schreiben wir das Image auf den USB Stick. Achtung: das X muss mit der Disk Nummer des letzten Befehls ersetzt werden. (rdiskX anstelle von diskX ist Absicht, das erhöht die Schreibgeschwindikeit):<br><code># sudo dd if=proxmox-ve_*.dmg of=/dev/rdiskX bs=1m</code></li>
</ol>
<h3 id="mcetoc_1g53sim7k6m3">Installation</h3>
<p>Zum Start des Installations wizards erhält man folgende Optionen:</p>
<ul>
<li>Install Proxmox</li>
<li>Rescue Boot</li>
<li>Test Memory</li>
</ul>
<p>Mit <em>Install Proxmox</em> kann die Installation gestartet werden. Nachdem die ELUA akzeptiert wurde, müssen wir uns Entscheiden welches Filesystem wir verwenden wollen und auf welche Harddisk Proxmox installiert werden soll. <strong>Da ich nur eine NVMe SSD habe, gibt es nur diese Auswahl der Disk. Als Filesystem will ich ein ZFS ausprobieren, was eigentlich normalerweise erst bei mehreren Disks sinnvoll ist.</strong></p>
<p><strong>Obwohl ZFS mehr Memory frisst (angeblich muss man mit mindestens Pauschal 4GB rechnen plus 1GB Memory pro TB Raw Datenspeicher) möchte ich auf die folgenden ZFS Vorteile welche in Proxmox angeblich nur mit ZFS integriert nicht verzichten:</strong></p>
<ul>
<li><strong>Encryption</strong></li>
<li><strong>Snapshots/Backups</strong></li>
<li><strong>Compression</strong></li>
</ul>
<p>Da ich aber nur eine Disk habe verzichte ich auf einen RAID Level, und nehme die Option: <em>zfs (RAID0)</em></p>
<p>Als nächstes werden die <em>Location and Time Zone</em> definiert. Weiter muss ein Kennwort definiert werden für den Proxmox root Account, bevor die Netzwerk Angaben angefragt werden und schliesslich die Installation gestartet werden kann.</p>
<p>Sobald die Installation erfolgt ist, kann das Proxmox Web-UI von einem anderen Gerät aus unter <em>https://&lt;proxmox-ip&gt;:8006/ </em>geöffnet werden.</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Proxmox VE 7.2 Übersicht</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/proxmox-ve-intro.html"/>
        <id>https://www.finecloud.ch/proxmox-ve-intro.html</id>
            <category term="virtualization"/>
            <category term="unix"/>
            <category term="proxmox"/>
            <category term="lxc"/>
            <category term="linux"/>
            <category term="kvm"/>
            <category term="hci"/>
            <category term="container"/>

        <updated>2022-06-08T15:46:47+02:00</updated>
            <summary>
                <![CDATA[
                    Die Architektur Proxmox VE ist eine Plattform zum Betrieben von virtuellen Maschinen und Container. Dabei ist die gesamte Proxmox VE Plattform open source und baisert auf Debian Linux. die VE Plattform besteht aus zwei virtualisierungs-technologien: Proxmox gibt es als single node, oder als Cluster mit&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g4tdpel45mg">Die Architektur</a></li>
<li><a href="#mcetoc_1g4tdhqsl5l5">Zentrales Management</a></li>
<li><a href="#mcetoc_1g4tdhqsl5l6">Storage</a></li>
<li><a href="#mcetoc_1g4tdhqsl5l7">Backup und Restore</a></li>
<li><a href="#mcetoc_1g4tdhqsl5l8">High Availability Cluster</a></li>
<li><a href="#mcetoc_1g4tdhqsl5l9">Networking</a></li>
<li><a href="#mcetoc_1g4tdhqsl5la">Firewall</a></li>
<li><a href="#mcetoc_1g4tdhqsl5lb">Hyper-converged Infrastructure (HCI)</a>
<ul>
<li><a href="#mcetoc_1g4tdlsh25m7">HCI Storage</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g4tdcg765ga">Feature Übersicht</a></li>
</ul>
</div>
<h3 id="mcetoc_1g4tdpel45mg">Die Architektur</h3>
<p><img loading="lazy" src="https://www.finecloud.ch/media/posts/22/Screenshot-2022-06-06-at-23.00.20.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/22/responsive/Screenshot-2022-06-06-at-23.00.20-xs.png 300w ,https://www.finecloud.ch/media/posts/22/responsive/Screenshot-2022-06-06-at-23.00.20-sm.png 480w ,https://www.finecloud.ch/media/posts/22/responsive/Screenshot-2022-06-06-at-23.00.20-md.png 768w ,https://www.finecloud.ch/media/posts/22/responsive/Screenshot-2022-06-06-at-23.00.20-lg.png 1024w ,https://www.finecloud.ch/media/posts/22/responsive/Screenshot-2022-06-06-at-23.00.20-xl.png 1360w ,https://www.finecloud.ch/media/posts/22/responsive/Screenshot-2022-06-06-at-23.00.20-2xl.png 1600w"  alt="Architektur" width="765" height="586"></p>
<p>Proxmox VE ist eine Plattform zum Betrieben von virtuellen Maschinen und Container. Dabei ist die gesamte Proxmox VE Plattform open source und baisert auf Debian Linux. die VE Plattform besteht aus zwei virtualisierungs-technologien:</p>
<ul>
<li>Kernel-based Virtual Machine (KVM)</li>
<li>Container-based virtualization (LXC)</li>
</ul>
<p>Proxmox gibt es als single node, oder als Cluster mit Anzahl n Nodes. Das gesamte Management der Plattform kann über ein Web basiertes Management Interface erfolgen.</p>
<h3 id="mcetoc_1g4tdhqsl5l5">Zentrales Management</h3>
<p>Proxmox ermöglicht es sämtliche Management Arbeiten zentral auszuführen, egal ob es sich um einen Cluster mit n Nodes handelt, oder ob es nur ein Single Node ist.  Damit lässt sich der gesamte Cluster von jedem einzelnen Node aus verwalten. Das JavaScript basierte Web-UI erlaubt die Verwaltung von Storage, Containern sowie den KVM Guest VMs. Darüberhinaus kann über das Web-UI die History, Syslogs, Backup und Restore Jobs, live-migration oder HA Aktivitäten eingesehen werden.</p>
<p>Was Proxmox einmalig macht ist deren Cluster File System: pmxcfs, ein Datenbank getriebener Speicher zum Speichern von Konfigurationsdateien. Mittels corosync werden diese Dateien in Echtzeit zwischen allen Nodes im Cluster repliziert. Das File System speichert alle Daten in einer persistenten Datenbank auf der Disk, unabhängig davon wird eine kopier der Datenbank im RAM, mit einer maximalen Speichergrösse von 30MB abgelegt, was für mehr als tausend VMs ausreicht.</p>
<p>Für fortgeschrittene Anwender kann Proxmox auch via CLI, also Unix Shell oder mit Windows Powershell oder über die Rest-API verwaltet werden. Die API unterstützt JSON als primäres Datenformat.</p>
<p>Für die Authentifizierung unterstützt Proxmox Microsoft Active Directory, LDAP, Linux PAM standard authentifizierung oder den eigenen built-in Proxmox VE auth Server.</p>
<h3 id="mcetoc_1g4tdhqsl5l6">Storage</h3>
<p>Proxmox verfügt über ein sehr flexibles Storage Modell. VM Images können lokal auf einem oder mehreren Local Storages gespeichert werden, oder auf einem shared Storage wie NFS oder einem SAN. Es können sämtliche für Debian Linux verfügbaren Storage-Technologien verwendet werden.</p>
<p>Für den Betrieb eines Clusters sollte man unbedingt einen Shared Storage verwenden um die VMs zu speichern, damit man auch von der live-migrate Funktion gebrauch machen kann. Diese ermöglicht es eine VM im laufenden Betrieb von einem Node auf einen anderen zu verschieben. Dabei haben sämtliche Nodes im Cluster direkten zugriff auf die VM Disk Images. Nachfolgende Liste listet die unterstützten Storage auf:</p>
<p>Netzwerk-Storage:</p>
<ul>
<li>LVM Group (network backing with iSCSI targets)</li>
<li>iSCSI target</li>
<li>NFS Share</li>
<li>CIFS Share</li>
<li>Ceph Share</li>
<li>Directly use iSCSI LUNs</li>
<li>GlusterFS</li>
</ul>
<p>Lokale Storage:</p>
<ul>
<li>LVM Group (local backing devices like block devices, FC devices, DRBD, ect.)</li>
<li>Directory (storage on existing filesystem)</li>
<li>ZFS</li>
</ul>
<h3 id="mcetoc_1g4tdhqsl5l7">Backup und Restore</h3>
<p>Das integrierte Backup Tool names <em>vzdump </em>kreiert konsistente Snapshots von laufenden Containern und KVM Guests. Dabei wird ein Archiv der VM oder Container Daten erstellt, welches auch die Konfiguration der VM/CT beinhaltet.</p>
<h3 id="mcetoc_1g4tdhqsl5l8">High Availability Cluster</h3>
<p>Ein multi-node Proxmox VE HA Cluster erlaubt den Betrieb von hochverfügbaren virtual servers. Der Cluster basiert auf bewährte Linux HA Technologien, welche eine stabile und zuverlässigen HA Service ermöglichen.</p>
<h3 id="mcetoc_1g4tdhqsl5l9">Networking</h3>
<p>Proxmox erlaubt den Einsatz von VLANS (IEEE 802.1q) und Netzwerk bonding/aggregation. Damit ist es möglich auch komplexere, flexible virtuelle Netzwerke für die Proxmox VE Hosts aufzubauen und sämtliche Funktionen des Linux Netzwerk Stacks zu nutzen.</p>
<p>Standardmässig kommt Proxmox mit einem bridge Netzwerkmodel.  Alle VMs können diese bridge verwenden, so als wären alle Guests mit virtuellen Netzwerkkabel zu einem physikalischen Netzwerk zusammengeschlossen. Jeder Netzwerkkarte kann eine TCP/IP Konfiguration zugewiesen werden.</p>
<h3 id="mcetoc_1g4tdhqsl5la">Firewall</h3>
<p>Die integrierte Firewall ermöglicht es Netzwerk Packete von jedem VM oder Container Interface zu filtern. Firewall Rules können in <em>Security Groups</em> gruppiert werden.</p>
<h3 id="mcetoc_1g4tdhqsl5lb">Hyper-converged Infrastructure (HCI)</h3>
<p>HCI Umgebungen sind besonders nützlich für Deployments in einer Infrastruktur mit hohen Anforderungen und tiefem administrations Budget.</p>
<p id="mcetoc_1g4tdlsh25m6">Vorteile von HCI sind:</p>
<ul>
<li>Skalierbarkeit: nahtlose Erweiterung von Computing, Netzwerk und Storage</li>
<li>Tiefe Kosten: Proxmox VE ist open source und integriert alle benötigten Komponenten und kann damit eine teure Computing/Storage Infrastruktur ersetzen</li>
<li>Daten-Schutz und Effizienz: Services wie Backup und Disaster Recovery sind direkt integriert</li>
<li>Kein Vendor-Lock-in dank open source</li>
</ul>
<h4 id="mcetoc_1g4tdlsh25m7">HCI Storage</h4>
<p>Proxmox unterstützt die nahtlose Integration von HCI Storage Infrastrukturen wie ceph oder ZFS.</p>
<ul>
<li>ceph: bietet self-healing und self-managing shared, zuverlässig und hoch skalierbaren Storage.</li>
<li>ZFS: kombiniert File System und Local Volume Manager mit erweitertem Schutz vor Datenkorruption, diversen RAID modi und schnellen und günstigen Snapshots. </li>
</ul>
<h3 id="mcetoc_1g4tdcg765ga">Feature Übersicht</h3>
<ul>
<li>Open source software</li>
<li>Kein Vendor lock-in</li>
<li>Linux kernel</li>
<li>Schnelle installation, einfach zu verwenden</li>
<li>Web-basiertes Management Interface</li>
<li>REST API</li>
<li>Grosse aktive Community</li>
<li>Tiefe Administrationskosten und einfaches deployment</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Dateien und Verzeichnisse unter Java</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/dateien-und-verzeichnisse-unter-java.html"/>
        <id>https://www.finecloud.ch/dateien-und-verzeichnisse-unter-java.html</id>
            <category term="verzeichnisse"/>
            <category term="softwareentwicklung"/>
            <category term="java.nio.files"/>
            <category term="java.io.file"/>
            <category term="java.io"/>
            <category term="java"/>
            <category term="dev"/>
            <category term="dateien"/>

        <updated>2022-06-06T23:13:08+02:00</updated>
            <summary>
                <![CDATA[
                    Dateioperationen mit java.io werden in Java immer, direkt oder indirekt, durch ein Objekt des Typs java.io.File abgebildet. Dabei kann File aber nicht selbst aus Dateien lesen, oder in sie schreiben, dazu benötigt man einen Reader oder Writer (für Textdateien) resp. einen InputStream oder OutputStream (für&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g4tdqg1s5n6">Dateien und Pfade</a></li>
<li><a href="#mcetoc_1g4tdqg1s5n7">Dateioperationen aus "Files"</a></li>
<li><a href="#mcetoc_1g4tdqg1s5n8">Verzeichnisse</a></li>
</ul>
</div>
<p>Dateioperationen mit java.io werden in Java immer, direkt oder indirekt, durch ein Objekt des Typs java.io.File abgebildet. Dabei kann File aber nicht selbst aus Dateien lesen, oder in sie schreiben, dazu benötigt man einen Reader oder Writer (für Textdateien) resp. einen InputStream oder OutputStream (für Binärdateien).</p>
<h3 id="mcetoc_1g4tdqg1s5n6">Dateien und Pfade</h3>
<p>Ein File wird immer aus einer Pfadangabe, entweder <em>absolut</em> oder <em>relativ</em> erzeugt. Absolut geht von einem Wurzelverzeichnis aus, zum Beispiel C:\ unter Windows, oder / unter Linux. Ein relativer Pfad bezieht sich dagegen auf das aktuelle Verzeichnis des Benutzers, normalerweise von dort aus woher das Programm aufgerufen wurde. Wenn die Datei unter dem angegebenen Pfad nicht existiert, wird auch keine entsprechende Datei unter dem definierten Pfad angelegt:</p>
<p><code>File windowsDatei = new File("C:\\home\\user\\text.txt");</code><br><code>File linuxDatei = new File("/home/user/text.txt");</code></p>
<p>Pfade werden also je nach OS unterschiedlich angegeben. Für Windows Pfade als Konstante sind effektiv zwei Doppel Backslashes zu verwenden! Solange die Pfadeingabe vom Benutzer selbst kommt, macht das keine Probleme. Wenn aber aus dem Programm heraus Dateipfade erzeugt werden müssen, dann müssen Sie auf diese Details acht geben. Das richtige Zeichen zum trennen von Verzeichnissen in einer Pfadangabe findet sich in der Konstanten File.separator. Damit lässt sich einen Pfad OS unabhängig erstellen: </p>
<p><code>File datei = new File(File.separator + "home" </code><br><code>    + File.separator + "user"</code><br><code>    + File.separator + "text.txt");</code></p>
<p>Unter Unix-basierten Systemen funktioniert dieser Code. Unter Windows bleibt das Problem mit dem Laufwerksbuchstaben. Dazu kann unabhängig vom OS, alle Wurzelverzeichnisse aufgelistet werden. Dazu kennt File die statische Methode listRoots. So lässt sich ein OS unabhängiger Code schreiben:</p>
<p><code>public File waehleWurzel(){</code><br><code>    File[] wurzeln = File.listRoots();</code><br><code>    if (wurzeln.length == 1){</code><br><code>        return wurzeln[0];</code><br><code>    } else {</code><br><code>        System. out.println("Bitte wählen Sie eine Wurzel");</code><br><code>        for (int i = 0; i &lt; wurzeln.length; i++){</code><br><code>            System.out.println(i + ": " + wurzeln[i]);</code><br><code>        }</code><br><code>        int index = liesZahl();</code><br><code>        return wurzeln[index];</code><br><code>    }</code><br><code>}</code></p>
<p>Doch das reicht immer noch nicht ganz, denn unter Windows kann es hier mehrere Einträge geben, je nachdem wieviele Laufwerke vorhanden sind (C:\, D:\ ...). In diesem Fall wird der Benutzer geben, ein Laufwerk auszuwählen. Anschliessend kann ein neues File-Objekt relativ zur ausgewählten Wurzel erzeugt werden, indem dies dem Konstruktor angegeben wird:</p>
<p><code>File wurzel = waehleWurzel();</code><br><code>File datei = new File(wurzel, "home"</code><br><code> + File.separator + "user"</code><br><code> + File.separator + "text.txt");</code></p>
<p>Ob eine Datei überhaupt existiert kann mit der Methode exists überprüft werden. Da ein File lediglich die objektorientierte Repräsentation eines Pfades ist, kann man Files erzeugen, ohne das diese Dateien bereits existieren. Falls keine Datei existiert kann eine neue Datei mit createNewFile oder mit mkdir ein Verzeichnis an der vom Pfad angegebenen Stelle angelegt werden. File liefert weitere Informationen über Dateien:</p>
<table style="border-collapse: collapse; width: 100%; height: 525.297px;" border="1">
<tbody>
<tr style="height: 50.3594px;">
<td style="width: 49.9288%; height: 50.3594px;"><strong>Methode</strong></td>
<td style="width: 49.9288%; height: 50.3594px;"><strong>Funktion</strong></td>
</tr>
<tr style="height: 107.953px;">
<td style="width: 49.9288%; height: 107.953px;">isFile()</td>
<td style="width: 49.9288%; height: 107.953px;">Prüft, ob es sich bei der angegebenen File-Objekt um eine Datei handelt, (oder einen Ordner)</td>
</tr>
<tr style="height: 107.953px;">
<td style="width: 49.9288%; height: 107.953px;">isDirectory()</td>
<td style="width: 49.9288%; height: 107.953px;">Prüft, ob es sich bei der angegebenen File-Objekt um einen Ordner handelt, (oder eine Datei)</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 49.9288%; height: 50.3594px;">canRead()</td>
<td style="width: 49.9288%; height: 50.3594px;">Prüft, ob der Benutzer Leserechte hat</td>
</tr>
<tr style="height: 79.1562px;">
<td style="width: 49.9288%; height: 79.1562px;">canWrite()</td>
<td style="width: 49.9288%; height: 79.1562px;">Prüft, ob der Benutzer Schreibrechte hat</td>
</tr>
<tr>
<td style="width: 49.9288%;">canExectue()</td>
<td style="width: 49.9288%;">Prüft, ob der Benutzer Ausführungsrechte hat</td>
</tr>
<tr style="height: 79.1562px;">
<td style="width: 49.9288%; height: 79.1562px;">getName()</td>
<td style="width: 49.9288%; height: 79.1562px;">Liefert den Namen der Datei, ohne vorangehende Pfadangabe</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 49.9288%; height: 50.3594px;">getParent()<br>getParentFile()</td>
<td style="width: 49.9288%; height: 50.3594px;">Liefert das übergeordnete Verzeichnis, entweder als String mit getParent oder als Objekt mit getParentFile</td>
</tr>
<tr>
<td style="width: 49.9288%;">lastModified()</td>
<td style="width: 49.9288%;">Liefert das letzte Änderungsdatum der Datei als long</td>
</tr>
<tr>
<td style="width: 49.9288%;">length()</td>
<td style="width: 49.9288%;">Liefert die Grösse der Datei in Byte als long</td>
</tr>
<tr>
<td style="width: 49.9288%;">delete</td>
<td style="width: 49.9288%;">eine Datei löschen</td>
</tr>
<tr>
<td style="width: 49.9288%;">renameTo</td>
<td style="width: 49.9288%;">eine Datei umbenennen</td>
</tr>
</tbody>
</table>
<p>java.io.File stellt jedoch keine Methoden zur Verfügung für das Kopieren oder verschieben von Dateien. Dazu gibt es aber seit Java 7 eine Hilfsklasse aus Files.</p>
<h3 id="mcetoc_1g4tdqg1s5n7">Dateioperationen aus "Files"</h3>
<p>Die Klasse Files ist eine Sammlung von Hilfsmethoden für alles, was mit Dateien zu tun hat. Diese Klasse ist aber nicht im java.io-Package enthalten, sondern nur im java.nio.files. Damit ist es die einzige Klasse aus der Non-Blocking-I/O-API, die man auch beim alltäglichen Umgang mit Dateien regelmässig benutzt.</p>
<p>Da die Hilfsklasse zu der API java.nio.file.Path gehört und nicht zur java.io.File müssen bei jeder Operation die Parameter von File nach Path und die Rückgabewerte, falls Dateien zurückgegeben werden, wieder von Path nach File konvertiert werden. Dabei lassen sich nicht alle Path-Objekte nach File konvertieren, nur solche welche aus einer Operation auf einem File resultieren. Damit sind auch Kopier- und Verschiebeoperationen möglich. Die Verwendung dieser Methode macht mehr Sinn, als eine Eigenentwicklung in Java, da dies nicht nur praktischer ist, sondern auch effizienter die JDL Systemaufrufe verwenden kann.</p>
<p><code>//File nach Path konvertieren</code><br><code>Path quellPath = quelle.toPath();</code><br><code>Path zielPath = ziel.toPath();</code><br><code>//ENTWEDER Datei kopieren</code><br><code>Path ergebnisPath = Files.copy(quellPath, zielPath);</code><br><code>//ODER Datei verschieben</code><br><code>Path ergebnisPath = Files.move(quellPath, zielPath);</code><br><code>//Ergebnis - eigentlich wieder das Ziel - nach File konvertieren</code><br><code>File ergebnis = ergebnisPath.toFile();</code></p>
<h3 id="mcetoc_1g4tdqg1s5n8">Verzeichnisse</h3>
<p>Um den Inhalt von Verzeichnissen zu ermitteln, gibt es die überladene Methode listFiles die zur Files Klasse gehört. Ohne Parameter gibt sie alle im Verzeichnis enthaltenen Dateien zurück. Wenn man nur an bestimmten Dateien interessiert ist, dann sollte man entweder einen FileFilter oder einen FilenameFilter an listFiles übergeben. Die beiden Filterklassen unterscheiden sich nur darin, dass FileFilter das File-Objekt der gefundenen Datei zur Prüfung erhält, FilenameFilter den Dateinamen als String und das aktuelle Verzeichnis. Beide Filter sind funktionale Interfaces und können deshalb auch als Lambdas angegeben werden.</p>
<p><code>//Alle Dateien auflisten</code><br><code>File[] alleDateien = verzeichnis.listFiles();</code><br><code>//Alle Dateien mit der Endung .txt auflisten </code><br><code>File[] textDateien = verzeichnis.listFiles((parent, name) -&gt; </code><br><code> name.endsWith(".txt"));</code><br><code>//Alle Unterverzeichnisse auflisten</code><br><code>File[] unterverzeichnisse = verzeichnis.listFiles(file -&gt; </code><br><code> file.isDirectory());</code></p>
<p>Auch zum Auflisten des Verzeichnisinhalts hat die Klasse Files Hilfsmethoden. list gibt dabei den Inhalt eines Verzeichnisses als einen Stream von Path-Objekten zurück. walk, listet nicht nur den Inhalt des übergebenen Verzeichnisses auf, sondern auch aller Unterverzeichnisse, ist also rekursiv.</p>
<p><code>Files.walk(quelle.toPath()).forEach(System.out::println);</code></p>
<p>Optional kann die Tiefe der rekursiven Auflistung limitiert werden bis zu einer bestimmten Tiefe. walk(quelle, 1) enthält nur den Inhalt des Verzeichnisses selbst, tut also dasselbe wie list. walk(quelle, 2) enthält den Inhalt der Verzeichnisses und seiner direkten Unterverzeichnisse usw.</p>
<p>Weiter kann mit Files.find in einem Verzeichnis und dessen Unterverzeichnisse nach Dateien gesucht werden, die bestimmten Vorgaben entsprechen. Leider ist auch hier dass java.io und java.nio nicht aus einem Guss. So muss man also die Suchkriterien nicht als FileFilter angeben, sondern als BiPredicate, das als Parameter des Path-Objekt der Datei und ein Objekt vom Typ BasicFileAttributes erhält, in dem sich Informationen wie Dateigrösse und letzte Zugriffszeit finden. Das Beispiel zeigt, wie man Dateien, die grösser als 500MB sind, auflisten kann. Der grosse Nachteil von walk und find ist, dass wenn der Zugriff auf ein Verzeichnis nicht möglich ist, brechen sie mit einer Fehlermeldung ab. Es gibt keine Funktion, diesen Methoden beizubringen, bei unlesbaren Verzeichnissen einfach den Fehler zu ignorieren und weiter zu suchen. Deswegen wird häufig dennoch auf File.listFiles zurückgegriffen.</p>
            ]]>
        </content>
    </entry>
</feed>
