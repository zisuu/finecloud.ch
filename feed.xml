<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Finecloud</title>
    <link href="https://www.finecloud.ch/feed.xml" rel="self" />
    <link href="https://www.finecloud.ch" />
    <updated>2022-08-23T12:05:05+02:00</updated>
    <author>
        <name>Finecloud</name>
    </author>
    <id>https://www.finecloud.ch</id>

    <entry>
        <title>Java basics: Exceptions</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-exceptions.html"/>
        <id>https://www.finecloud.ch/java-exceptions.html</id>
            <category term="try catch"/>
            <category term="software development"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="exceptions"/>
            <category term="exception"/>
            <category term="dev"/>

        <updated>2022-08-23T12:05:05+02:00</updated>
            <summary>
                <![CDATA[
                    What are Exceptions? An exception is an event, commonly it is a problem that arises during the execution of a program. When an Exception occurs the normal program is disrupted and the program/Application terminates abnormally, which is not recommended. Unexpected termination of an Application is&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gb4ofck08p">What are Exceptions?</a></li>
<li><a href="#mcetoc_1gb4ofck08q">Types of Exceptions</a></li>
<li><a href="#mcetoc_1gb4ofck08r">Example Scenario #1</a></li>
<li><a href="#mcetoc_1gb4p2t6m8t">Try / Catch</a></li>
<li><a href="#mcetoc_1gb4q077394">The Exception</a></li>
<li><a href="#mcetoc_1gb4ofck08r">Example ScenarioÂ #2</a></li>
<li><a href="#mcetoc_1gb4rqeac9d">Multiple catches</a></li>
<li><a href="#mcetoc_1gb4uonu7kt">Stack Trace</a></li>
<li><a href="#mcetoc_1gb4uonu7ku">Runtime Exceptions</a></li>
<li><a href="#mcetoc_1gb521do8qr">Checked Exceptions</a></li>
<li><a href="#mcetoc_1gb521do8qs">Finally</a></li>
<li><a href="#mcetoc_1gb521do8qt">Optimizing Example Szenario #1</a></li>
</ul>
</div>
<h2 id="mcetoc_1gb4ofck08p">What are Exceptions?</h2>
<p>An exception is an event, commonly it is a problem that arises during the execution of a program. When an Exception occurs the normal program is disrupted and the program/Application terminates abnormally, which is not recommended. Unexpected termination of an Application is never wanted and this is why exceptions should be handled, so that the Application lets the User know that some Error or Problem exists, but the Application itself should not just die without any information.</p>
<p>The most common scenarios where an exception occurs are:</p>
<ul>
<li>the user entered invalid data</li>
<li>a file needs to be opened but cannot be found</li>
<li>a network connection has been lost during communication</li>
<li>the JVM has run out of memory</li>
</ul>
<h2 id="mcetoc_1gb4ofck08q">Types of Exceptions</h2>
<p>There are three main types of Java Exceptions:</p>
<ul>
<li>Checked Exceptions</li>
<li>Runtime Exceptions</li>
<li>Error Exceptions</li>
</ul>
<p>Checked and Runtime Exceptions both extend the same superclass, which is Exception. Exception class itself extends from a superclass called Throwable.</p>
<h2 id="mcetoc_1gb4ofck08r">Example Scenario #1</h2>
<p>Given the following code:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = 0;
        System.out.println(array.length / num);
        System.out.println(array[2]);
    }
}
</pre>
<p>if we execute this application it crashes like this:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Exception in thread <span class="hljs-string" style="color: #6a8759;">"main"</span> java.lang.ArithmeticException: / by zero
	at section11_loose_ends.ExceptionTests.main(ExceptionTests.java:<span class="hljs-number" style="color: #6897bb;">7</span>)

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">1</span></pre>
<p>this should not be surprising, since the fact that a devision by zero is considered to be impossible. <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">And so the JVM generated this arithmetic exception. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">And what happens then is that once we get to this line in that arithmetic exception is thrown. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">The program just dies. </span></p>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">ðŸ’€</span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> Right then and there.</span></p>
<p>So line six is never even reached because that exception got thrown.</p>
<h2 id="mcetoc_1gb4p2t6m8t">Try / Catch</h2>
<p><span class="" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);" data-purpose="cue-text">What we will do next here is really just for illustrative purposes. </span><span class="" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);" data-purpose="cue-text">This this isn't actually, generally speaking, a good idea, but we</span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> can handle this exception or we can catch this particular exception like this:</span></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = <span class="hljs-number" style="color: #6897bb;">0</span>;
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            System.out.println(array.length / num);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (Exception e) {
            e.printStackTrace();
        }
        System.out.println(array[<span class="hljs-number" style="color: #6897bb;">2</span>]);
    }
</pre>
<div class="transcript--cue-container--wu3UY">
<div class="transcript--cue-container--wu3UY">
<p class="transcript--underline-cue--3osdw" tabindex="-1" role="button" data-purpose="transcript-cue"><span class="" data-purpose="cue-text">This is called a try catch block. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">So now we've got this keyword try. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">So we're now telling the JVM essentially try executing this line. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">And if anything goes wrong, maybe we'll catch it and do something about it down here.</span></p>
</div>
<div class="transcript--cue-container--wu3UY">
<p class="transcript--underline-cue--3osdw" tabindex="-1" role="button" data-purpose="transcript-cue"><span class="" data-purpose="cue-text">So now if I run this again, let's see what happens:</span></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">java.lang.ArithmeticException: / by zero
	at section11_loose_ends.ExceptionTests.main(ExceptionTests.java:<span class="hljs-number" style="color: #6897bb;">8</span>)
three

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So we still have an exception happening here. The divide by zero, but the next line line 10 is executing now. Please note, this is generally not a good idea, this is just for illustrative purposes so that you can learn how exceptions work and how they can be caught and when to catch them and how and why, and all of that.<br><br>So what just happened now is that an exception was still generated in throne when the JVM realised that we were about to attempt a divide by zero operation here. So it generated the arithmetic exception and it threw it. But now that we have this try catch block here, we cut the exception. And so that's why they used these terms to throw and to catch right.</p>
<h2 id="mcetoc_1gb4q077394" tabindex="-1" role="button" data-purpose="transcript-cue">The Exception</h2>
<p tabindex="-1" role="button" data-purpose="transcript-cue">You can think of it as an object, it's an object that's sort of being thrown. And if you set up a catcher to catch it, then you can do something sometimes with that exception. In this particular case, all we're doing with it is simply printing its stack trace. Basically, it's printing the details of the error that occurred. And that's how we get to see this divide by zero.<br><br>Now, previously, before I surrounded this line with a try catch, we were still seeing this, this output here, and that was happening because the exception was being handled by the JVM itself. Beyond the main method here, we're doing all of this inside of one main method. Something called the main method, though. And so what happened before we had this try catch block here is that the exception was thrown and it made its way outside of the main method. And then the JVM were the thing that called our main method handled it. And in its handling of the method, it displayed the stack trace just like we're doing now.<br><br>Now, because we are now handling this method with try and catch here, as soon as we call the division by zero line, the App does not crash because we're handling it and we're not killing the application as a result of it. This allows us to proceed to the next line and print the array content.</p>
<p tabindex="-1" role="button" data-purpose="transcript-cue">But in this particular case, it's not really a good idea at all, because with this divide by zero happening here, we're not able to fix anything. All we're doing is just saying, Oh yeah, that divide by zero occurred. Let's move on. It's kind of like if your house was on fire and you're driving by and you see your house is on fire and you say, Oh, look, my house is on fire and then you just keep driving. ðŸ”¥</p>
<p tabindex="-1" role="button" data-purpose="transcript-cue"><strong>We are not really handling the exception in any way.</strong><br><br>All I'm doing is just noting yet there's that exception and I'm printing it out. Oftentimes, the better thing to do in a case like this might be to just let the program die, which would be the default behavior of the JVM.</p>
<h2 id="mcetoc_1gb4ofck08r">Example ScenarioÂ #2</h2>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = <span class="hljs-number" style="color: #6897bb;">1</span>;
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            System.out.println(array.length / num);
            System.out.println(array[<span class="hljs-number" style="color: #6897bb;">3</span>]);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (ArrayIndexOutOfBoundsException e) {
            System.out.println(<span class="hljs-string" style="color: #6a8759;">"The array index was thrown here"</span>);
        }
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"You made it to the end"</span>);
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-number" style="color: #6897bb;">3</span>
The array index was thrown here
You made it to the end

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So we are able to say what these catch blocks here, what type of exception we are expecting to catch and then do something accordingly to that. In this example we have something called array index out of bounds exception. So this is a subclass of exception. And one interesting thing we can do with this is we could actually be much more specific in what exception we're actually looking for here.<br><br>So what happens if we change <em>num</em> back to zero?</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = 0;
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            System.out.println(array.length / num);
            System.out.println(array[<span class="hljs-number" style="color: #6897bb;">3</span>]);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (ArrayIndexOutOfBoundsException e) {
            System.out.println(<span class="hljs-string" style="color: #6a8759;">"The array index was thrown here"</span>);
        }
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"You made it to the end"</span>);
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Exception in thread <span class="hljs-string" style="color: #6a8759;">"main"</span> java.lang.ArithmeticException: / by zero
	at section11_loose_ends.ExceptionTests.main(ExceptionTests.java:<span class="hljs-number" style="color: #6897bb;">8</span>)

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">1</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So now we're getting an exception here, and it's the familiar divide by zero exception, which is an arithmetic exception. We're not even making it to the end of the program anymore, even though we've got to try catch block,Â  we're not making it to the end of the program anymore. And the reason for that is because we are no longer catching this arithmetic exception.</p>
<p tabindex="-1" role="button" data-purpose="transcript-cue"><strong>Well, we never were catching an arithmetic exception. Initially, we were catching just an exception. And now we're catching an array index out of bounds exception. However, since arithmetic exception and array index out of bounds exception, both extend from exception. And we were explicitly catching exception. That catch was handling both types and so many more, by the way.Â  You can always catch the more generic exception data type.</strong><br><br>Sometimes it can also be a bad thing if you're not aware that that could be happening in general. You do actually want to catch the most specific exception data type that is meaningful for whatever it is that you're doing.</p>
<h2 id="mcetoc_1gb4rqeac9d" tabindex="-1" role="button" data-purpose="transcript-cue">Multiple catches</h2>
<p tabindex="-1" role="button" data-purpose="transcript-cue">We can actually specify multiple catches:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = <span class="hljs-number" style="color: #6897bb;">0</span>;
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            System.out.println(array.length / num);
            System.out.println(array[<span class="hljs-number" style="color: #6897bb;">3</span>]);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (ArrayIndexOutOfBoundsException e) {
            System.out.println(<span class="hljs-string" style="color: #6a8759;">"The array index was thrown here"</span>);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (ArithmeticException e) {
            System.out.println(<span class="hljs-string" style="color: #6a8759;">"This is due to the arithmetic exception being thrown"</span>);
        }
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"You made it to the end"</span>);
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">This is due to the arithmetic exception being thrown
You made it to the end

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">Because we are now handling that exception with this explicit catch here, the program in this case isn't dying. So in general, you can have as many catches as you need to handle, whatever the situations are.<br><br>What if we wanted to do basically the same error handling for both for either of these catches? Sure we just copy-paste the same code for both catches, but you always want to eliminate duplicate code, so we need to consolidate this because otherwise we have duplicated code. So what we can do is actually combine these two bits into one catch block here, and the way we can do that is simply within order. This is called multi-catch:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = <span class="hljs-number" style="color: #6897bb;">0</span>;
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            System.out.println(array.length / num);
            System.out.println(array[<span class="hljs-number" style="color: #6897bb;">3</span>]);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (ArrayIndexOutOfBoundsException | ArithmeticException e ) {
            System.out.printf(<span class="hljs-string" style="color: #6a8759;">"Exception type: %s. Message: %s%n"</span>, e.getClass(), e.getMessage());
            e.printStackTrace();
        }
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"You made it to the end"</span>);
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Exception type: <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">java</span>.<span class="hljs-title" style="color: #ffc66d;">lang</span>.<span class="hljs-title" style="color: #ffc66d;">ArithmeticException</span>. <span class="hljs-title" style="color: #ffc66d;">Message</span>: / <span class="hljs-title" style="color: #ffc66d;">by</span> <span class="hljs-title" style="color: #ffc66d;">zero</span>
<span class="hljs-title" style="color: #ffc66d;">You</span> <span class="hljs-title" style="color: #ffc66d;">made</span> <span class="hljs-title" style="color: #ffc66d;">it</span> <span class="hljs-title" style="color: #ffc66d;">to</span> <span class="hljs-title" style="color: #ffc66d;">the</span> <span class="hljs-title" style="color: #ffc66d;">end</span>
<span class="hljs-title" style="color: #ffc66d;">java</span>.<span class="hljs-title" style="color: #ffc66d;">lang</span>.<span class="hljs-title" style="color: #ffc66d;">ArithmeticException</span>: / <span class="hljs-title" style="color: #ffc66d;">by</span> <span class="hljs-title" style="color: #ffc66d;">zero</span>
	<span class="hljs-title" style="color: #ffc66d;">at</span> <span class="hljs-title" style="color: #ffc66d;">section11_loose_ends</span>.<span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span>.<span class="hljs-title" style="color: #ffc66d;">main</span>(<span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span>.<span class="hljs-title" style="color: #ffc66d;">java</span>:8)

<span class="hljs-title" style="color: #ffc66d;">Process</span> <span class="hljs-title" style="color: #ffc66d;">finished</span> <span class="hljs-title" style="color: #ffc66d;">with</span> <span class="hljs-title" style="color: #ffc66d;">exit</span> <span class="hljs-title" style="color: #ffc66d;">code</span> 0</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">That's at least giving us a little bit more of a hint of what exactly went wrong. Especially since now we're handling it all in the same code with the same single catch.Â </p>
<h2 id="mcetoc_1gb4uonu7kt" tabindex="-1" role="button" data-purpose="transcript-cue">Stack Trace</h2>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So let's talk a little bit more about the Stack Trace business now. What if we create a new method with all of that code in it? All the try catch business like before, but our main method is still going to be the starting point into our program. So the main method is going to start up and we're going to call this second level method:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v2</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        doSecondLevel();
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"You made it to the end"</span>);
    }

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">private</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">doSecondLevel</span><span class="hljs-params">()</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = <span class="hljs-number" style="color: #6897bb;">0</span>;
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            System.out.println(array.length / num);
            System.out.println(array[<span class="hljs-number" style="color: #6897bb;">3</span>]);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (ArrayIndexOutOfBoundsException | ArithmeticException e ) {
            System.out.printf(<span class="hljs-string" style="color: #6a8759;">"Exception type: %s. Message: %s%n"</span>, e.getClass(), e.getMessage());
            e.printStackTrace();
        }
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">let's run this and see what what we get here:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Exception type: <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">java</span>.<span class="hljs-title" style="color: #ffc66d;">lang</span>.<span class="hljs-title" style="color: #ffc66d;">ArithmeticException</span>. <span class="hljs-title" style="color: #ffc66d;">Message</span>: / <span class="hljs-title" style="color: #ffc66d;">by</span> <span class="hljs-title" style="color: #ffc66d;">zero</span>
<span class="hljs-title" style="color: #ffc66d;">You</span> <span class="hljs-title" style="color: #ffc66d;">made</span> <span class="hljs-title" style="color: #ffc66d;">it</span> <span class="hljs-title" style="color: #ffc66d;">to</span> <span class="hljs-title" style="color: #ffc66d;">the</span> <span class="hljs-title" style="color: #ffc66d;">end</span>
<span class="hljs-title" style="color: #ffc66d;">java</span>.<span class="hljs-title" style="color: #ffc66d;">lang</span>.<span class="hljs-title" style="color: #ffc66d;">ArithmeticException</span>: / <span class="hljs-title" style="color: #ffc66d;">by</span> <span class="hljs-title" style="color: #ffc66d;">zero</span>
	<span class="hljs-title" style="color: #ffc66d;">at</span> <span class="hljs-title" style="color: #ffc66d;">section11_loose_ends</span>.<span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v2</span>.<span class="hljs-title" style="color: #ffc66d;">doSecondLevel</span>(<span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v2</span>.<span class="hljs-title" style="color: #ffc66d;">java</span>:13)
	<span class="hljs-title" style="color: #ffc66d;">at</span> <span class="hljs-title" style="color: #ffc66d;">section11_loose_ends</span>.<span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v2</span>.<span class="hljs-title" style="color: #ffc66d;">main</span>(<span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v2</span>.<span class="hljs-title" style="color: #ffc66d;">java</span>:5)

<span class="hljs-title" style="color: #ffc66d;">Process</span> <span class="hljs-title" style="color: #ffc66d;">finished</span> <span class="hljs-title" style="color: #ffc66d;">with</span> <span class="hljs-title" style="color: #ffc66d;">exit</span> <span class="hljs-title" style="color: #ffc66d;">code</span> 0</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So we got that familiar output, but then we got at exception tests that do second level exception test Java 13, and then we see another line here. Exception tests dot main. So what this is showing us is the tracing of the path that our thread took. A thread is just like this little guy who is actually stepping through each line of our program and executing those lines, and then he can jump to new lines as needed. So when our program is running, the thread will start at line to write and it'll it'll bring in, it'll carry in, so to speak, the any arguments that we passed in. Then it sees Line five do second level and it knows that this is a method call. So then the thread jumps down to the second level method and then it starts executing each of these lines.</p>
<p tabindex="-1" role="button" data-purpose="transcript-cue"><strong>Why are we seeing "you made it to the end" before we are seeing the stack trace?</strong></p>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So just know that the way these stack traces are generated and the timing and order of the thread stuff, you should not expect that to print out in the exact order that you would intuitively assume it would. In this stack trace, we're seeing the most immediate method first. So it's kind of like the most recently called method will be at the top. So it's kind of backward to how a lot of people will tend to think. Intuitively you'll kind of start at the bottom. <strong>Typically, though, with a stack trace, the line of code where the exception occurred will be at the top.</strong></p>
<h2 id="mcetoc_1gb4uonu7ku" tabindex="-1" role="button" data-purpose="transcript-cue">Runtime Exceptions</h2>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So far, we're looking at this array index out of bounds and the arithmetic exception. These two exceptions are actually both runtime exceptions, and that means that they don't actually have to be caught. As you already saw when we first started writing this, I'm going to just comment these out. Java is not forcing us to surround any of these lines with a try catch block.</p>
<p tabindex="-1" role="button" data-purpose="transcript-cue">And that is because of a couple of things. First off, the IDE and Java do not know at this point in time that either of these calls could result in an exception. It won't know that until runtime when we're actually running the the code. And that's one of the reasons why the type of exceptions that can be thrown from these kinds of errors are runtime exceptions. They can't easily be known before you start running. A human could analyze this particular code and see that we're passing a zero in and we're about to try to do a divide by zero. But the JVM can't really see it until you actually do it. And there's no guarantee that every time you divide by this variable that it's always going to be zero.</p>
<h2 id="mcetoc_1gb521do8qr" tabindex="-1" role="button" data-purpose="transcript-cue">Checked Exceptions</h2>
<p tabindex="-1" role="button" data-purpose="transcript-cue">Lets take for example that Code Snippet:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">            Long result = Files.lines(Path.of(<span class="hljs-string" style="color: #6a8759;">"/Users/Dave/Downloads/Hr5m.csv"</span>))</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">We know for a fact the creator of this method line's method knows that it is possible that the path that we are passing into it might not be a valid path. And because he or she knew at the time of writing this method that that could happen. They declared that this method is capable of throwing an IO exception and they made their IO exception class extend not from runtime exception, but directly from exception. And because it extends directly from exception, it is a checked exception, which means that we have to do something with it. And so what we're doing here is we're surrounding all of this code inside of a try catch block:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            <span class="hljs-keyword" style="color: #cc7832;">long</span> startTime = System.currentTimeMillis();
            Long result = Files.lines(Path.of(<span class="hljs-string" style="color: #6a8759;">"/Users/Dave/Downloads/Hr5m.csv"</span>))
                    .skip(<span class="hljs-number" style="color: #6897bb;">1</span>)
<span class="hljs-comment" style="color: grey;">//                    .limit(10)</span>
                    .map(s -&gt; s.split(<span class="hljs-string" style="color: #6a8759;">","</span>))
                    .map(arr -&gt; arr[<span class="hljs-number" style="color: #6897bb;">25</span>])
<span class="hljs-comment" style="color: grey;">//                    .forEach(System.out::println);</span>
                    .collect(Collectors.summingLong(sal -&gt; Long.parseLong(sal)));

            <span class="hljs-keyword" style="color: #cc7832;">long</span> endTime = System.currentTimeMillis();
<span class="hljs-comment" style="color: grey;">//            System.out.println(moneyFormat.format(result));</span>
            System.out.printf(<span class="hljs-string" style="color: #6a8759;">"$%,d.00%n"</span>, result);
            System.out.println(endTime - startTime + <span class="hljs-string" style="color: #6a8759;">"ms"</span>);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (IOException e) {
            <span class="hljs-keyword" style="color: #cc7832;">throw</span> <span class="hljs-keyword" style="color: #cc7832;">new</span> RuntimeException(e);
        }
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">However, one other way that we could implement this is by adding the throws IOException at the end of the main Method signature:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v4</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword" style="color: #cc7832;">throws</span> IOException </span>{
        Files.lines(Path.of(<span class="hljs-string" style="color: #6a8759;">"blababla"</span>));
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">This looks cleaner, right? But be careful with this. So now the main Method just declared to the JVM as a whole that, there is content that is capable of throwing an IO exception, but the main Method don't want to be the one to handle that. What so what I'm going to do is I'm going to take that particular exception if it is thrown and I'm going to re throw it back to whoever called me. So whatever code calls the main method, will have to handle whatever happens with this exception now. So we're kind of passing the buck on to the code that called this main method, which in this case is the JVM itself. And so the JVM is just going to blow up all the same. So in this particular case, I suppose you're not really losing much in such a simple program like this. However, imagine if we were writing a program with a user interface and we asked the user to select a file, right? Like it's a graphical program right in like a file open dialogue.</p>
<h2 id="mcetoc_1gb521do8qs" tabindex="-1" role="button" data-purpose="transcript-cue">Finally</h2>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">import</span> java.io.IOException;
<span class="hljs-keyword" style="color: #cc7832;">import</span> java.nio.file.Files;
<span class="hljs-keyword" style="color: #cc7832;">import</span> java.nio.file.Path;

<span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v4</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            Files.lines(Path.of(<span class="hljs-string" style="color: #6a8759;">"blababla"</span>));
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (IOException e) {
            e.printStackTrace();
            System.out.println(<span class="hljs-string" style="color: #6a8759;">"We are unable to open the file"</span>);
        } <span class="hljs-keyword" style="color: #cc7832;">finally</span> {
            System.out.println(<span class="hljs-string" style="color: #6a8759;">"Make sure this runs no matter what..."</span>);
        }
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">java.nio.file.NoSuchFileException: blababla
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:<span class="hljs-number" style="color: #6897bb;">92</span>)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:<span class="hljs-number" style="color: #6897bb;">106</span>)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:<span class="hljs-number" style="color: #6897bb;">111</span>)
	at java.base/sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:<span class="hljs-number" style="color: #6897bb;">181</span>)
	at java.base/java.nio.channels.FileChannel.open(FileChannel.java:<span class="hljs-number" style="color: #6897bb;">298</span>)
	at java.base/java.nio.channels.FileChannel.open(FileChannel.java:<span class="hljs-number" style="color: #6897bb;">357</span>)
	at java.base/java.nio.file.Files.lines(Files.java:<span class="hljs-number" style="color: #6897bb;">4132</span>)
	at java.base/java.nio.file.Files.lines(Files.java:<span class="hljs-number" style="color: #6897bb;">4227</span>)
	at section11_loose_ends.ExceptionTests_v4.main(ExceptionTests_v4.java:<span class="hljs-number" style="color: #6897bb;">10</span>)
We are unable to open the file
Make sure <span class="hljs-keyword" style="color: #cc7832;">this</span> runs no matter what...

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So what's happening here is that sometimes depending on what you're trying to do inside of your try block, you may need to clean up or finish up some things before the program completely dies. Because as we've seen here, in many cases with a try catch block, the program is going to just die. Even though you may have that catch, you might be handling things in such a way that the program is still going to just die when it's done, but before it dies, you may want to clean a few things up.<br><br>One example of this would be in some kinds of applications where we might be opening files to read or write to them, or making connections to databases or things of that sort. If something goes wrong with any of those opening of connections and files and stuff, we don't want to just leave the file that we may have been able to open in in in a strange state. We want to ensure that even if something went wrong while we were reading data from somewhere, we still close that connection or closed that file gracefully and we can do that in a final block.<br><br>So what happens with the final block is that any code that we put here is strongly attempted by the JVM to be executed regardless of what went wrong in in the try in the try block.</p>
<h2 id="mcetoc_1gb521do8qt" tabindex="-1" role="button" data-purpose="transcript-cue">Optimizing the Example Szenarios</h2>
<p tabindex="-1" role="button" data-purpose="transcript-cue">What do we do to protect ourselves from this type of situation? And it's actually not that hard to protect ourselves from some of these situations in this particular. For example we could simply just make sure that num can not be zero and that the array length is not exceeded with if blocks:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v5</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        doSecondLevel(<span class="hljs-number" style="color: #6897bb;">0</span>);
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"You made it to the end"</span>);
    }

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">private</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">doSecondLevel</span><span class="hljs-params">(<span class="hljs-keyword" style="color: #cc7832;">int</span> num)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">if</span> (num != <span class="hljs-number" style="color: #6897bb;">0</span>) {
            System.out.println(array.length / num);
        }
        <span class="hljs-keyword" style="color: #cc7832;">int</span> index = <span class="hljs-number" style="color: #6897bb;">3</span>;
        <span class="hljs-keyword" style="color: #cc7832;">if</span> (index &lt; array.length) {
            System.out.println(array[<span class="hljs-number" style="color: #6897bb;">3</span>]);
        }
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">But please, don't put every line wrapped in some defensive if block. You got to try to find a balance.</p>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Visualisiere deine Strava AktivitÃ¤ten mit Grafana</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/visualisiere-deine-strava-aktivitaeten-mit-grafana.html"/>
        <id>https://www.finecloud.ch/visualisiere-deine-strava-aktivitaeten-mit-grafana.html</id>
            <category term="strava"/>
            <category term="grafana"/>
            <category term="api"/>

        <updated>2022-08-09T08:41:05+02:00</updated>
            <summary>
                <![CDATA[
                    Was ist Strava Strava ist das soziale Netzwerk fÃ¼r Sportler. Du kannst deine Sport AktivitÃ¤ten aufzeichnen und diese wird deinem Strava-Feed hinzugefÃ¼gt - zusammen mit jenen, die deine Freunde und Followers mit dir teilen. Auf diese Weise kÃ¶nnt ihr eure Wettkampf- und TrainingsaktivitÃ¤ten gegenseitig verfolgen,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1ga0fla9lcj">Was ist Strava</a></li>
<li><a href="#mcetoc_1ga0fla9lck">Was ist Grafana</a></li>
<li><a href="#mcetoc_1ga0fla9lcl">Wieso das ganze?</a></li>
<li><a href="#mcetoc_1ga0fla9lcm">Features</a></li>
<li><a href="#mcetoc_1ga0fla9lcn">Voraussetzungen</a></li>
<li><a href="#mcetoc_1ga0fla9lco">Setup</a>
<ul>
<li><a href="#mcetoc_1ga0fla9lcp">Strava Plugin</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1ga0fla9lcj">Was ist Strava</h2>
<p><a href="https://www.strava.com/" target="_blank" rel="nofollow noopener noreferrer">Strava</a> ist <strong>das</strong> soziale Netzwerk fÃ¼r Sportler. Du kannst deine Sport AktivitÃ¤ten aufzeichnen und diese wird deinem Strava-Feed hinzugefÃ¼gt - zusammen mit jenen, die deine Freunde und Followers mit dir teilen. Auf diese Weise kÃ¶nnt ihr eure Wettkampf- und TrainingsaktivitÃ¤ten gegenseitig verfolgen, kommentieren und bei tollen Leistungen Kudos geben.</p>
<h2 id="mcetoc_1ga0fla9lck">Was ist Grafana</h2>
<p>Mit der Open-Source-Software von <a href="https://grafana.com" target="_blank" rel="nofollow noopener noreferrer">Grafana</a> kann man Metriken, Protokolle und Ablaufverfolgungen, visualisieren, warnen und untersuchen. Grafana OSS stellt Tools zur VerfÃ¼gung, mit denen man seine <em>time-series database</em> (TSDB) in aufschlussreiche Diagramme und Visualisierungen umwandeln kann.</p>
<h2 id="mcetoc_1ga0fla9lcl">Wieso das ganze?</h2>
<p>Weil man's kann. NatÃ¼rlich hast du bereits bei Gramin wie auch Strava und anderen Portalen gute Dashboards um deine Trainings zu analysieren. Ich finde dieser Anwendungsfall aber doppelt interessant, da ich bei diesem Vorhaben mit Grafana vertrauter machen kann und zudem interessante Daten analysieren kann, welche ich selbst generiert habe.</p>
<h2 id="mcetoc_1ga0fla9lcm">Features</h2>
<p>Das <a href="http://192.168.100.13:3000/plugins/grafana-strava-datasource" target="_blank" rel="nofollow noopener noreferrer">Grafana Plugin fÃ¼r Strava</a> ermÃ¶glicht dir folgendes:</p>
<ul>
<li>Abfrage von AktivitÃ¤tsstatistiken und Darstellung als Zeitreihendaten</li>
<li>Tabellenformat</li>
<li>Anzeigen der AktivitÃ¤ten auf der ganzen Welt mit dem Worldmap-Panel</li>
<li>Visualisierung und Analyse von AktivitÃ¤tsdaten wie Herzfrequenz, Geschwindigkeit/Tempo, Leistung, etc.</li>
<li>UnterstÃ¼tzung von Template-Variablen</li>
</ul>
<h2 id="mcetoc_1ga0fla9lcn">Voraussetzungen</h2>
<ol>
<li>Du hast bereits eine fertig installierte Grafana Instanz. Falls du Grafana noch installieren musst, kannst du <a href="https://www.finecloud.ch/monitor-proxmox-mit-grafana-und-prometheus.html#mcetoc_1g8oet5nkph" target="_blank" rel="nofollow noopener noreferrer">hier</a> nachlesen wie das geht.</li>
<li>Du hast das <a href="http://192.168.100.13:3000/plugins/grafana-strava-datasource" target="_blank" rel="nofollow noopener noreferrer">Grafana Plugin fÃ¼r Strava</a> bereits installiert</li>
</ol>
<h2 id="mcetoc_1ga0fla9lco">Setup Strava Plugin</h2>
<p>Bevor wir Daten von Strava anziehen kÃ¶nnnen, musst du auf strava.com mit deinem Account einloggen und dir ein API App Secret erstellen:</p>
<ol>
<li>Nachdem du dich auf <a href="https://www.strava.com/settings/api">https://www.strava.com/settings/api</a> eingeloggt hast, erstelle eine App.</li>
<li>Du solltest nun die Seite "Meine API-Anwendung" sehen. Hier die ErklÃ¤rung der Begriffe:
<ul>
<li>Category: Die Kategorie fÃ¼r deine Anwendung</li>
<li>Club: Zeigt an, ob du einen Club mit deiner Anwendung verknÃ¼pft hast</li>
<li>Client ID: Deine Anmelde-ID</li>
<li>Client Secret: Dein Kundengeheimnis (bitte behandle es vertraulich)</li>
<li>Authorization Token: Dein Autorisierungs-Token, der sich alle sechs Stunden Ã¤ndert (bitte behandeln Sie dies vertraulich)</li>
<li>Your Refresh-Token: Das Token, das du verwenden kannst, um ein neues Autorisierungs-Token zu erhalten (bitte vertraulich behandeln)</li>
<li>Rate limits: Dein aktuelles Ratenlimit</li>
<li>Authorization Callback Domain: Ã„ndern auf die exakte Grafana URL oder IP von welcher aus du Grafana verwendets, dass wird warscheinlich eine interne URL/IP sein. FÃ¼ge die URL aber ohne Ports hinzu, also z.b. 192.168.0.10</li>
</ul>
</li>
</ol>
<p>Nun wechseln wir zurÃ¼ck in unser Grafana und erstellen eine neue Strava Data Source:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/55/strava.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/55/responsive/strava-xs.png 300w ,https://www.finecloud.ch/media/posts/55/responsive/strava-sm.png 480w ,https://www.finecloud.ch/media/posts/55/responsive/strava-md.png 768w ,https://www.finecloud.ch/media/posts/55/responsive/strava-lg.png 1024w ,https://www.finecloud.ch/media/posts/55/responsive/strava-xl.png 1360w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2xl.png 1600w"  alt="" width="1835" height="723"></figure>
<p>Wichtig ist das nun zuerst Connect with Strava angewÃ¤hlt wird, damit die OAuth stattfinden kann:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/55/config_2.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/55/responsive/config_2-xs.png 300w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-sm.png 480w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-md.png 768w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-lg.png 1024w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-xl.png 1360w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-2xl.png 1600w"  alt="" width="1686" height="947"></figure>
<p>Anschliessend wirst du nochmals zurÃ¼ck auf den vorherigen Data Source Dialog redirected. Gib dort nochmals deine Client ID und Client Secret ein und klicke danach auf Save &amp; Test. Nun sollte die Meldung kommen "<em>Data source is working</em>".</p>
<p>Nun kannst du in Tab Dashboards noch die Dashboards importieren welche du dann unter Browse anschauen kannst:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/55/strava-2.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/55/responsive/strava-2-xs.png 300w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-sm.png 480w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-md.png 768w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-lg.png 1024w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-xl.png 1360w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-2xl.png 1600w"  alt="" width="2557" height="1341"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>ShellCheck</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/shellcheck.html"/>
        <id>https://www.finecloud.ch/shellcheck.html</id>
            <category term="vscode"/>
            <category term="tools"/>
            <category term="shell"/>
            <category term="linux"/>
            <category term="infrastructure as code"/>
            <category term="iac"/>
            <category term="bash"/>

        <updated>2022-08-05T19:22:39+02:00</updated>
            <summary>
                <![CDATA[
                    Beschreibung ShellCheck ist ein Tool, das Warnungen und VorschlÃ¤ge fÃ¼r Bash/Sh-Shell-Skripte liefert. Das Tool kann verwendet werden fÃ¼r statische Code Analyse. Idealerweise wird das Tool in einer CI Pipeline integriert. Hier ein Beispiel einer Github Action Pipeline: name: Shellcheck on: pull_request: push: branches: - main&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Beschreibung</h2>
<p><a href="https://www.shellcheck.net/" target="_blank" rel="nofollow noopener noreferrer">ShellCheck</a> ist ein Tool, das Warnungen und VorschlÃ¤ge fÃ¼r Bash/Sh-Shell-Skripte liefert. Das Tool kann verwendet werden fÃ¼r statische Code Analyse.</p>
<h2>CI Pipeline</h2>
<p>Idealerweise wird das Tool in einer CI Pipeline integriert. Hier ein Beispiel einer Github Action Pipeline:<code></code></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attribute" style="color: #6a8759;">name</span>: Shellcheck

<span class="less"><span class="hljs-attribute" style="color: #6a8759;">on</span>:
  <span class="hljs-attribute" style="color: #6a8759;">pull_request</span>:
  <span class="hljs-attribute" style="color: #6a8759;">push</span>:
    <span class="hljs-attribute" style="color: #6a8759;">branches</span>:
      - main

<span class="hljs-attribute" style="color: #6a8759;">jobs</span>:
  <span class="hljs-attribute" style="color: #6a8759;">shellcheck</span>:
    <span class="hljs-attribute" style="color: #6a8759;">name</span>: Github Actions
    <span class="hljs-attribute" style="color: #6a8759;">runs-on</span>: ubuntu-latest
    <span class="hljs-attribute" style="color: #6a8759;">steps</span>:
    - <span class="hljs-attribute" style="color: #6a8759;">uses</span>: actions/checkout<span class="hljs-variable" style="color: #629755;">@v3</span>
    - <span class="hljs-attribute" style="color: #6a8759;">name</span>: Run Shellcheck
      <span class="hljs-attribute" style="color: #6a8759;">uses</span>: ludeeus/action-shellcheck<span class="hljs-variable" style="color: #629755;">@master</span>
      <span class="hljs-attribute" style="color: #6a8759;">with</span>:
        <span class="hljs-attribute" style="color: #6a8759;">check_together</span>: <span class="hljs-string" style="color: #6a8759;">'yes'</span>
      <span class="hljs-attribute" style="color: #6a8759;">env</span>:
        <span class="hljs-attribute" style="color: #6a8759;">SHELLCHECK_OPTS</span>: --shell bash</span></pre>
<h2>IDE VSCode</h2>
<p>Zudem gibt es auch die MÃ¶glichkeit ShellChek direkt in der IDE VSCode zu integrieren:Â </p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/54//shellcheck.gif" alt="ShellChek" width="1920" height="948"></figure>
<p>Hier gehts zum Marketplace-Item fÃ¼r VSCode: <a href="https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck">https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Imperativ vs. Deklarativ</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/imperativ-vs-deklarativ.html"/>
        <id>https://www.finecloud.ch/imperativ-vs-deklarativ.html</id>
            <category term="tools"/>
            <category term="terraform"/>
            <category term="pulumi"/>
            <category term="infrastructure as code"/>
            <category term="imperative"/>
            <category term="iac"/>
            <category term="declarative"/>
            <category term="ansible"/>

        <updated>2022-07-26T07:59:36+02:00</updated>
            <summary>
                <![CDATA[
                    Immer wieder stÃ¶sst man im Bereich Infrastructure as Code (IaC) auf die Begriffe imperativ und deklarativ. Doch was bedeuten diese Begriffe? Ist Terraform wirklich deklarativ und Ansible nicht? Diese beiden Begriffe sind nicht einfach Buzzwords, sondern wesentliche Design-Patterns von IaC. Beim deklarativen Ansatz definiert der&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g8sg1qh415e">Glossar: Imperativ / Deklarativ</a></li>
<li><a href="#mcetoc_1g8sg1qh415f">Erwartung und Vorurteil</a></li>
<li><a href="#mcetoc_1g8sg1qh415g">Der Irrtum</a></li>
<li><a href="#mcetoc_1g8sg1qh415h">Meine Ansicht</a></li>
</ul>
</div>
<p>Immer wieder stÃ¶sst man im Bereich Infrastructure as Code (IaC) auf die Begriffe imperativ und deklarativ. Doch was bedeuten diese Begriffe? Ist Terraform wirklich deklarativ und Ansible nicht? Diese beiden Begriffe sind nicht einfach Buzzwords, sondern wesentliche Design-Patterns von IaC.</p>
<h2 id="mcetoc_1g8sg1qh415e">Glossar: Imperativ / Deklarativ</h2>
<div class="page" title="Page 8">
<div class="layoutArea">
<div class="column">
<p>Beim deklarativen Ansatz definiert der Entwickler den Endzustand und laÌˆsst das IaC Tool ermitteln, wie dieser Zustand erreicht werden soll. Im Gegensatz dazu definiert beim imperativen Ansatz der Entwickler den Prozess, mit welchem vom Ist-Zustand aus der Soll-Zustand erreicht wird. <strong>Der Hauptunterschied ist, dass imperative Programme einen Control-Flow haben und deklarative nicht.</strong> Das lÃ¤sst sich einfach herausfinden indem man die IaC Anweisungen. VerfÃ¼gen diese Ã¼ber Error-Checks und ÃœberprÃ¼fungen ob etwas korrekt ausgefÃ¼hrt wurde, dann handelt es sich um einen Control-Flow.</p>
<p>Ein einfaches Beispiel einer imperativen Anweisung:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">if</span> cluster_exists:
  echo <span class="hljs-string" style="color: #6a8759;">"you already created that cluster"</span>
<span class="hljs-keyword" style="color: #cc7832;">else</span>:
  echo <span class="hljs-string" style="color: #6a8759;">"I'm creating a cluster for you"</span></pre>
<p>Auf der anderen Seite verfÃ¼gt der deklarative Ansatz Ã¼ber keinen Control-Flow, das braucht es dort gar nicht, weil sich Terraform selbst um die Logik und den Control-Flow kÃ¼mmert, deshalb muss sich der Anwender keine Gedanken darÃ¼ber machen wie der Soll-Zustand erreicht wird, er muss nur definieren wie der Soll-Zustand am Ende sein soll.</p>
<p>Ein einfaches Beispiel einer deklarativen Anweisung:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">terraform {
  required_providers {
    aws = {
      source  = <span class="hljs-string" style="color: #6a8759;">"hashicorp/aws"</span>
      version = <span class="hljs-string" style="color: #6a8759;">"~&gt; 4.16"</span>
    }
  }

  required_version = <span class="hljs-string" style="color: #6a8759;">"&gt;= 1.2.0"</span>
}

provider <span class="hljs-string" style="color: #6a8759;">"aws"</span> {
  region  = <span class="hljs-string" style="color: #6a8759;">"us-west-2"</span>
}

resource <span class="hljs-string" style="color: #6a8759;">"aws_instance"</span> <span class="hljs-string" style="color: #6a8759;">"app_server"</span> {
  ami           = <span class="hljs-string" style="color: #6a8759;">"ami-830c94e3"</span>
  instance_type = <span class="hljs-string" style="color: #6a8759;">"t2.micro"</span>

  tags = {
    Name = <span class="hljs-string" style="color: #6a8759;">"ExampleAppServerInstance"</span>
  }
}
</pre>
<p>Der deklarative Ansatz reduziert den Code Umfang erheblich und vermindert damit auch die FehleranfÃ¤lligkeit. Zudem muss man sich nicht selbst mit dauern Ã¤ndernden Cloud APIs herumschlagen.</p>
<h2 id="mcetoc_1g8sg1qh415f">Erwartung und Vorurteil</h2>
<p>Die meisten Leute mit denen man Ã¼ber IaC spricht haben die Tendenz zu glauben das ein IaC Tool deklarativ sein muss. Was sehr komisch ist, sind aussagen wie:</p>
<blockquote>
<p>Terraform ist deklarativ, Pulumi, Ansible und AWS CDK nicht, deshalb ist Terraform besser als die anderen.</p>
</blockquote>
<p>Leute mit solchen Aussagen verraten das sie keine Ahnung haben wovon sie sprechen.</p>
<h2 id="mcetoc_1g8sg1qh415g">Der Irrtum</h2>
<p>Das Hauptproblem in der ganzen imperativ vs. deklarativ Debatte besteht darin, das die meisten Leute meinen, wenn man eine Configurations-Sprache, wie zum Beispiel die DSL Sprachen von Terraform, HCL verwendet das automatisch etwas deklarativ macht.</p>
<p>IaC Tools wie Terraform, Ansible, Pulumi, AWS CDK usw. machen sich alle DAG zu nutzen. DAG steht fÃ¼rÂ <a href="https://www.bigdata-insider.de/was-ist-ein-directed-acyclic-graph-dag-a-1075296/" target="_blank" rel="nofollow noopener noreferrer">Directed acyclic graph:</a></p>
<blockquote>
<p>Ein Directed Acyclic Graph (DAG) ist eine abstrakte Struktur, die aus Knoten und Kanten besteht. Die Kanten bilden die Verbindungen zwischen den Knoten und besitzen eine Richtung. Schleifen sind in der Struktur ausgeschlossen. Folgt man der Richtung der Kanten, gelangt man von einem Startpunkt (Startknoten) zu einem Zielknoten und niemals zurÃ¼ck an den Ausgangsknoten. Es entsteht eine topologische Ordnung. Mit DAGs lassen sich beispielsweise kausale ZusammenhÃ¤nge gut darstellen. Â </p>
</blockquote>
<p>Pulumi, und Terraform erstellen nicht nur ein DAG, sondern ermÃ¶glichen es auch, das erstellte Diagramm zu untersuchen! Pulumi verfÃ¼gt Ã¼ber den Pulumi-Stack-Graph-Befehl und Terraform Ã¼ber den Terraform-Graph-Befehl.<br><br>Dieses Diagramm wird erstellt, wenn man ein Terraform- oder Pulumi-Programm erstellt, und <strong>wird dann von den Engines des jeweiligen Tools ausgefÃ¼hrt, die dieses Diagramm bei jeder Tool-Instanziierung idempotent ausfÃ¼hren.</strong></p>
<p>Idempotent bedeutet, dass man dieselben Ergebnisse erwarten kann, wenn man immer wieder dasselbe ausfÃ¼hrt. <strong>Jedes Infrastruktur als Code-Tool ist (wenn man es korrekt einsetzt) deklarativ und idempotent.</strong> Konfigurationsmanagement-Tools sind im Allgemeinen idempotent, aber nicht unbedingt deklarativ.</p>
<p>Wieso glauben aber so viele Leute das Pulumi, Ansible und CDK imperativ sind? Die Antwort ist, das die meisten Leute dabei nicht an das eigentliche Tool denken, sondern nur an die Sprache welche verwendet wird. Konfigurationssprachen machen deklarative ZustÃ¤nde leicht verstÃ¤ndlich, da Sie keine Bedingungen in Konfigurationssprachen verwenden kÃ¶nnen, ohne eine Templating Sprache zu verwenden, oder grosse Ã„nderungen an einer DSL vorzunehmen.<br><br>Mit Ansible, Pulumi und AWS CDK kann man jedoch Bedingungen nach Herzenslust verwenden, da sie imperative Sprachen als primÃ¤re Authoring-Erfahrung verwenden.</p>
<p>Nehmen wir das folgende Snippet von Ansible code als Beispiel:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Â  - name: Set super_group variable for RedHat
Â  Â  set_fact:
Â  Â  Â  super_group: wheel
Â  Â  when: ansible_os_family == <span class="hljs-string" style="color: #6a8759;">"RedHat"</span> Â 
<span class="hljs-attr">  - name:</span> Set super_group variable for Debian
<span class="hljs-attr">    set_fact:</span>
<span class="hljs-attr">      super_group:</span> sudo
<span class="hljs-attr">    when:</span> ansible_os_family == <span class="hljs-string" style="color: #6a8759;">"Debian"</span>
<span class="hljs-attr">  - name:</span> Add local linux user {{ username }}
Â  Â  user:
  Â  Â  name: <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-template-variable" style="color: #629755;">{{ username }}</span>"</span>
Â  Â  Â  groups: <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-template-variable" style="color: #629755;">{{ super_group }}</span>"</span>
Â  Â  Â  append: <span class="hljs-literal" style="color: #6897bb;">true</span>
Â  Â  Â  password_lock: <span class="hljs-literal" style="color: #6897bb;">true</span>
Â  Â  Â  shell: /bin/bash
Â  Â  Â  create_home: <span class="hljs-literal" style="color: #6897bb;">true</span>
  Â  Â  generate_ssh_key: <span class="hljs-literal" style="color: #6897bb;">true</span>
  Â  Â  state: present</pre>
<p>Hier kann man sehen, das eine <em>when</em> Bedingung definiert ist und dort entschieden wird, ob die Variable <em><span class="hljs-attr">super_group:</span> sudo </em>oder<em> wheel</em> gesetzt wird, oder garnicht. Anschliessend wird ein neuer Linux User erstellt. Es handelt sich in offensichtlich insgesamt um eine imperative Operation, zuerst wird anhand der OS Family eine Variable gesetzt und dann der Benutzer erstellt. Aber damit nicht genug: das Resultat, dieser imerpativen Operation <strong>ist deklarativ.</strong> Damit versuchen wir den Irrtum nun aufzulÃ¶sen: <strong>Pulumi und Ansible und wie die Tools alle heissen sind als solches, (als Tool) alle deklarativ. Die Sprache jedoch, in welcher man die Infrastruktur beschreibt wird bei Pulumi und Ansible in einer imperativen Form geschrieben.</strong></p>
<h2>Das Problem mit imperativen Anweisungen</h2>
<p>Das Problem bei manchen Ansible Playbooks ist, dass diese nicht idempotent geschrieben wurden. Was bitte schÃ¶n ist <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Idempotenz? </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Idempotenz bezeichnet die UnverÃ¤nderbarkeit des Ergebnisses bei einer mehrfachen VerknÃ¼pfung oder Funktionsanwendung. Idempotenz ist erreicht, wenn ein IaC-Task nach wiederholtem AusfuÌˆhren immer dasselbe Resultat erzeugt. Erst durch idempotente Tasks wird ein Gesamtautomatisierungsprozess auch fuÌˆr mehrere AusfuÌˆhrungen robust und zuverlaÌˆssig.</span></p>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Wenn man unsorgfÃ¤ltige Ansible Tasks verfasst, kann das dazu fÃ¼hren, dass diese bei wiederholtem ausfÃ¼hren nicht dieselben Resultate erzeugen, im Vergleich zu Terraform, wo dies aufgrund der strikten DSL nicht passieren kann.</span></p>
<h2>Das Problem mit deklarativen Anweisungen</h2>
<p>Im Gegensatz dazu gibt es bei Terraform keine wirklich ausgereifte MÃ¶glichkeit den Control-Flow zu bearbeiten. Es gibt zwar mechanismen wie das count argument oder ein for_each, das fÃ¼hrt dann aber beispielsweise zu folgendem Code:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">count = var.enabled ? <span class="hljs-number" style="color: #6897bb;">1</span> : length([some list of resources or datasources])</pre>
<p>Diese Anweisung ist nichts anderes als die <span class="hljs-attr"><em>when</em> oder <em>state</em> Anweisung im oberen Ansible Beispielcode. Nur ist dieser Code hier deutlich schwerer lesbar und wenige verstÃ¤ndlich.</span></p>
<h2 id="mcetoc_1g8sg1qh415h">Meine Ansicht</h2>
<p>Anstatt imperativ und deklarativ mit falsch, richtig, besser oder schlechter zu bewerten, sollten wir uns bewusst werden, das wir in den meisten FÃ¤llen im IaC Bereich immer mit beidem zu tun haben. Je nach Tool oder Configurations Sprache direkter oder indirekter. Letztendlich erlauben Tools wie Ansible und Pulumi aus meiner Sicht hÃ¶chste flexibilitÃ¤t und Anpassbarkeit des Control-Flows. Tools wie Terraform hingegen sind ungeeignet fÃ¼r mofizierungen des Control-Flows. Deshalb macht es meiner Meinung nach am meisten Sinn, das Tool oder die Konfigurations-Sprache zu verwenden, welche fÃ¼r den jeweiligen Use-Case am besten geeignet ist. GrundsaÌˆtzlich laÌˆsst sich jede Aufgabe mit entweder dem imperativen oder deklarativen Ansatz loÌˆsen. Es gibt aber Aufgaben, die deutlich einfacher mit dem einen oder dem anderen Ansatz geloÌˆst werden koÌˆnnen. Es gilt daher situativ zu entscheiden, welcher Ansatz sich fuÌˆr welche Aufgaben am besten eignet und diese dann geschickt zu kombinieren. Beispielsweise kann man Terraform einsetzen, um Basis-VMs direkt von einem Template ausgehend zu erstellen. Nachfolgend kann man dann z.b. je nach OS Familie Ansible einsetzen, um Software-Installationen und Konfigurationen auf dem VMs vorzunehmen.</p>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Monitor Proxmox mit Grafana und Prometheus</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/monitor-proxmox-mit-grafana-und-prometheus.html"/>
        <id>https://www.finecloud.ch/monitor-proxmox-mit-grafana-und-prometheus.html</id>
            <category term="virtualization"/>
            <category term="proxmox"/>
            <category term="prometheus"/>
            <category term="monitoring"/>
            <category term="lxc"/>
            <category term="linux"/>
            <category term="grafana"/>
            <category term="container"/>

        <updated>2022-07-24T18:00:23+02:00</updated>
            <summary>
                <![CDATA[
                    Obwohl Proxmox selbst ja sehr gute Monitoring Informationen direkt auf dem eigenen WebUI anzeigt werde ich um Grafana und Prometheus besser kennen zu lernen diese Tools nutzen um meinen Proxmox Host zu Ã¼berwachen. Mit der Open-Source-Software von Grafana kann man Metriken, Protokolle und Ablaufverfolgungen, visualisieren,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g8ncv1m65n">Grafana</a>
<ul>
<li><a href="#mcetoc_1g8ncv1m65o">Was ist Grafana?</a></li>
<li><a href="#mcetoc_1g8oet5nkph">Installation</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g8ncv1m65p">Prometheus</a></li>
<li><a href="#mcetoc_1g8ncv1m65q">Was istÂ Prometheus?</a>
<ul>
<li><a href="#features">Features</a></li>
<li><a href="#mcetoc_1g8oet5nkpi">Installation</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g8oet5nkpj">Proxmox</a></li>
<li><a href="#mcetoc_1g8oet5nkpk">Konfiguration von Grafana und Prometheus</a></li>
</ul>
</div>
<p>Obwohl Proxmox selbst ja sehr gute Monitoring Informationen direkt auf dem eigenen WebUI anzeigt werde ich um Grafana und Prometheus besser kennen zu lernen diese Tools nutzen um meinen Proxmox Host zu Ã¼berwachen.</p>
<h2 id="mcetoc_1g8ncv1m65n">Grafana</h2>
<h3 id="mcetoc_1g8ncv1m65o">Was ist Grafana?</h3>
<p>Mit der Open-Source-Software von <a href="https://grafana.com" target="_blank" rel="nofollow noopener noreferrer">Grafana</a> kann man Metriken, Protokolle und Ablaufverfolgungen, visualisieren, warnen und untersuchen. Grafana OSS stellt Tools zur VerfÃ¼gung, mit denen man seine <em>time-series database</em> (TSDB) in aufschlussreiche Diagramme und Visualisierungen umwandeln kann.</p>
<h3 id="mcetoc_1g8oet5nkph">Installation</h3>
<p>Da ich Grafana selbst als Test in meinem Homelab ausprobieren will mÃ¶chte ich mÃ¶glichst wenig Zeit in das Setup investieren und das ganze auch so schlank als mÃ¶glich halten. Deshalb habe ich mit dazu entschieden Grafana als LXC Container zu installieren. Dazu erstelle ich als erster Schritt einen neuen LXC Container mit den folgenden Specs:</p>
<ul>
<li>Template: Debian 11</li>
<li>Disk: 10GB (kÃ¶nnen wir jederzeit noch vergrÃ¶ssern)</li>
<li>Cores: 2</li>
<li>Memory: 1024 MiB</li>
<li>Swap: 1024 MiB</li>
</ul>
<p>Als nÃ¤chster Schritt loggen wir uns in den LXC Container ein und fÃ¼gen die Grafana Repos hinzu und installieren Grafana auch gleich:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo apt-get install -y apt-transport-https gnupg
sudo apt-get install -y software-properties-common wget
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
<span class="hljs-built_in">echo</span> <span class="hljs-string" style="color: #6a8759;">"deb https://packages.grafana.com/oss/deb stable main"</span> | sudo tee <span class="hljs-_">-a</span> /etc/apt/sources.list.d/grafana.list
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install grafana
sudo systemctl daemon-reload
sudo systemctl start grafana-server
sudo systemctl status grafana-server
sudo systemctl <span class="hljs-built_in">enable</span> grafana-server.service</pre>
<p>Wenn alles geklappt hat, sollte Grafana nun unter dieser URL erreichbar sein: <a href="http://LXC-Container-IP-Adresse:3000/login" rel="nofollow">http://&lt;<em>LXC-Container-IP-Adresse</em>&gt;:3000/login</a> Einloggen kann man mit dem default Login:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">username: admin
password: admin
</pre>
<h2 id="mcetoc_1g8ncv1m65p">Prometheus</h2>
<h2 id="mcetoc_1g8ncv1m65q">Was istÂ Prometheus?</h2>
<p>Prometheus ist ein Open-Source-Systems fÃ¼r Monitoring und Alerting, das ursprÃ¼nglich bei SoundCloud entwickelt wurde. Seit seiner GrÃ¼ndung im Jahr 2012 haben viele Unternehmen und Organisationen Prometheus Ã¼bernommen, und das Projekt hat eine sehr aktive Entwickler- und Benutzergemeinschaft. Es ist jetzt ein eigenstÃ¤ndiges Open-Source-Projekt und wird unabhÃ¤ngig von einem Unternehmen gepflegt. Um dies zu betonen und die Governance-Struktur des Projekts zu verdeutlichen, trat Prometheus 2016 als zweites gehostetes Projekt nach Kubernetes der Cloud Native Computing Foundation bei.<br><br>Prometheus sammelt und speichert seine Metriken als Zeitreihendaten (time series data), d. h. Metrikinformationen werden mit dem Zeitstempel gespeichert, zu dem sie aufgezeichnet wurden, zusammen mit optionalen SchlÃ¼ssel-Wert-Paaren, die als Labels bezeichnet werden.<br><br>AusfÃ¼hrlichere Ãœbersichten Ã¼ber Prometheus finden Sie in den Ressourcen, die im Medienbereich verlinkt sind.</p>
<h3 id="features">Features<a class="header-anchor" href="https://prometheus.io/docs/introduction/overview/#features" name="features"></a></h3>
<p>Prometheus's Features sind:</p>
<ul>
<li>ein multi-dimensionales daten model mit Zeitreihendaten, die durch Metriknamen und SchlÃ¼ssel/Wert-Paare identifiziert werden</li>
<li>PromQL, eine flexible Abfragesprache, um diese DimensionalitÃ¤t zu nutzen<br>keine AbhÃ¤ngigkeit von verteilter Speicherung; einzelne Serverknoten sind autonom</li>
<li>Die Erfassung von Zeitreihen erfolgt Ã¼ber ein Pull-Modell Ã¼ber HTTP</li>
<li>Das Pushen von Zeitreihen wird Ã¼ber ein zwischengeschaltetes Gateway unterstÃ¼tzt</li>
<li>Ziele werden Ã¼ber die Diensterkennung oder die statische Konfiguration erkannt<br>mehrere Modi der Grafik- und Dashboard-UnterstÃ¼tzung</li>
</ul>
<h3 id="mcetoc_1g8oet5nkpi">Installation</h3>
<p>Wie zuvor Grafana installieren wir nun auch Prometheus als LXC Container:</p>
<ul>
<li>Template: Debian 11</li>
<li>Disk: 10GB (kÃ¶nnen wir jederzeit noch vergrÃ¶ssern)</li>
<li>Cores: 2</li>
<li>Memory: 2048 MiB</li>
<li>Swap: 2048 MiB</li>
</ul>
<p>Als nÃ¤chster Schritt loggen wir uns in den LXC Container ein und fÃ¼gen die Grafana Repos hinzu und installieren Grafana auch gleich:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">apt-get install -y curl sudo
mkdir -p /etc/prometheus
mkdir -p /var/lib/prometheus
wget https://github.com/prometheus/prometheus/releases/download/v2.37.0/prometheus-2.37.0.linux-amd64.tar.gz
tar -xvf prometheus-2.37.0.linux-amd64.tar.gz
<span class="hljs-built_in">cd</span> prometheus-2.37.0.linux-amd64
mv prometheus promtool /usr/<span class="hljs-built_in">local</span>/bin/
mv consoles/ console_libraries/ /etc/prometheus/
mv prometheus.yml /etc/prometheus/prometheus.yml</pre>
<p>Weiter erstellen wir den Prometheus Systemd Service und aktivieren diesen:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">service_path=<span class="hljs-string" style="color: #6a8759;">"/etc/systemd/system/prometheus.service"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string" style="color: #6a8759;">"[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=root
Restart=always
Type=simple
ExecStart=/usr/local/bin/prometheus \
    --config.file=/etc/prometheus/prometheus.yml \
    --storage.tsdb.path=/var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries \
    --web.listen-address=0.0.0.0:9090

[Install]
WantedBy=multi-user.target"</span> &gt; <span class="hljs-variable" style="color: #629755;">$service_path</span>
sudo systemctl <span class="hljs-built_in">enable</span> --now prometheus</pre>
<p>Wenn alles geklappt hat, sollte Prometheus nun unter dieser URL erreichbar sein: <a href="http://LXC-Container-IP-Adresse:9090" rel="nofollow">http://&lt;<em>LXC-Container-IP-Adresse</em>&gt;:9090</a></p>
<h2 id="mcetoc_1g8oet5nkpj">Proxmox</h2>
<p>Zuerst mÃ¼ssen wir auf Proxmox einen neuen User anlegen mit welchem wir von Prometheus her authentifizieren kÃ¶nnen. Damit wir den Service als deamon laufen lassen kÃ¶nnen, mÃ¼ssen wir den User zudem auf OS Ebene installieren, jedoch ohne Shell:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">pveum user add prometheus@pve
pveum aclmod / -user prometheus@pve -role PVEAuditor<br>pveum passwd <a href="mailto:prometheus@pve">prometheus@pve</a><br>useradd -c "pve exporter" -m -s /bin/false prometheus</pre>
<p>Damit wir nun den Proxmox mit Grafana und Prometheus Ãœberwachen kÃ¶nnen, mÃ¼ssen wir auf dem Proxmox selbst den proxmox-pve-exporter installieren:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo apt install python3-pip
sudo pip install prometheus-pve-exporter</pre>
<p>auf dem Proxmox Host erstellen wir zudem eine neue Datei mit dem folgenden Inhalt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo vi /etc/prometheus/pve.yml<br>default:
    user: prometheus@pve
    password: your_password_here
    verify_ssl: <span class="hljs-literal" style="color: #6897bb;">false</span></pre>
<p>Weiter brauchen wir auf dem Proxmox Host ein Systemd Service Config File:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo tee /etc/systemd/system/prometheus-pve-exporter.service&lt;&lt;EOF
[Unit]
Description=Prometheus exporter <span class="hljs-keyword" style="color: #cc7832;">for</span> Proxmox VE
Documentation=https://github.com/znerol/prometheus-pve-exporter

[Service]
Restart=always
User=prometheus
ExecStart=/usr/<span class="hljs-built_in">local</span>/bin/pve_exporter /etc/prometheus/pve.yml

[Install]
WantedBy=multi-user.target
EOF</pre>
<p>Nun erstellen wir eine weitere Config Datei:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo vi /etc/prometheus/prometheus.yml
- job_name: <span class="hljs-string" style="color: #6a8759;">'proxmox'</span>
  metrics_path: /pve
  static_configs:
  - targets: [<span class="hljs-string" style="color: #6a8759;">'&lt;proxmox-ip&lt;:9221'</span>]</pre>
<p>und starten den Prometheus Service neu:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo systemctl restart prometheus</pre>
<h2 id="mcetoc_1g8oet5nkpk">Konfiguration von Grafana und Prometheus</h2>
<p>Dazu loggen wir uns nun auf Grafana ein und klicken auf "Add data source":</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-09.03.53.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-2xl.png 1600w"  alt="" width="3360" height="1766"></figure>
<p>und wir wÃ¤hlen Prometheus als Datenquelle aus:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-09.04.29.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-2xl.png 1600w"  alt="" width="3360" height="1766"></figure>
<p>und geben die Angaben unseres Prometheus LXC Containers an:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-16.35.52.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-2xl.png 1600w"  alt="" width="3360" height="1766"></figure>
<p>anschliessend klicken wir auf "Save &amp; Test". Nun importieren wir ein bereits bestehendes Grafana Dashboard. Dazu gehen wir auf Dashboards -&gt; + Import</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-17.01.18.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-2xl.png 1600w"  alt="" width="3360" height="1766"></figure>
<p>Dort geben wir die ID (10347) des existierenden Dashboards an und importieren es, indem wir auf Load klicken:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-17.04.08-2.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-2xl.png 1600w"  alt="" width="1794" height="1206"></figure>
<p>Anschliessend verÃ¤ndert sich die Ansicht. Die einzige Anpassung die wir hier benÃ¶tigen die die Auswahl der Datenquelle (letzter Schritt), dort wÃ¤hlen wir unser Prometheus aus und klicken dann auf Import:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-17.05.53.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-2xl.png 1600w"  alt="" width="1860" height="1418"></figure>
<p>Anschliessend sollte unser Dashboard nach einer Weile die Daten des PVE Exporters wunderschÃ¶n und detailliert aufbereitet anzeigen:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/screenshot.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/screenshot-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-2xl.png 1600w"  alt="" width="3676" height="1846"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Capture Groups in Java</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/capture-groups-in-java.html"/>
        <id>https://www.finecloud.ch/capture-groups-in-java.html</id>
            <category term="software development"/>
            <category term="regex"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-07-14T06:35:45+02:00</updated>
            <summary>
                <![CDATA[
                    Capture Groups Im letzten PostÂ haben wir einen kleinen Einstieg in Regex mit Java gemacht. Nun sehen wir uns an, wie man Regex Pattern in Java mittels Capture Groups anwenden kann: String regex = "(1[-.\\s])?(\\d{3}[-.\\s]?)(\\d{3}[-.\\s]?)\\d{4}"; String phoneNumber = "12.523.231.4234"; Pattern pat = Pattern.compile(regex); Matcher mat =&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g7tfqiu92l">Capture Groups</a></li>
<li><a href="#mcetoc_1g7tfr24a2o">Not Capture Groups</a></li>
<li><a href="#mcetoc_1g7tfqiu92m">Named Capture Groups</a></li>
</ul>
</div>
<h2 id="mcetoc_1g7tfqiu92l">Capture Groups</h2>
<p><a href="https://www.finecloud.ch/einstieg-in-regex-mit-java.html" rel="nofollow">Im letzten Post</a>Â haben wir einen kleinen Einstieg in Regex mit Java gemacht. Nun sehen wir uns an, wie man Regex Pattern in Java mittels Capture Groups anwenden kann:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">        String regex = <span class="hljs-string" style="color: #6a8759;">"(1[-.\\s])?(\\d{3}[-.\\s]?)(\\d{3}[-.\\s]?)\\d{4}"</span>;
        String phoneNumber = <span class="hljs-string" style="color: #6a8759;">"12.523.231.4234"</span>;
        Pattern pat = Pattern.compile(regex);
        Matcher mat = pat.matcher(phoneNumber);

        <span class="hljs-keyword" style="color: #cc7832;">if</span> (mat.matches()){
            //System.out.format("entire String: %s\n", mat.group(0));
            System.out.format("Country Code: %s\n", mat.group(2));
            System.out.format("Area Code: %s\n", mat.group(4));
            System.out.format("Exchange Code: %s\n", mat.group(6));
            System.out.format("Line number Code: %s\n", mat.group(7));
        }</pre>
<p>Damit kÃ¶nnen wir nun die einzelnen Nummern-Teile extrahieren und separat behandeln:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Country Code: 12
Area Code: 523
Exchange Code: 231
Line number Code: 4234</pre>
<h2 id="mcetoc_1g7tfr24a2o">Not Capture Groups</h2>
<p>Im Beispiel oben werden die Klammern fortlaufend nummeriert, jede Klammer wird von links nach rechts aufsteigend nummeriert, dabei werden auch die embeded Gruppen mitgezÃ¤hlt. Das hat den Nachteil das es etwas unÃ¼bersichtlich wird, welche Nummer hat nun die Klammer in der Mitte. Dabei interessieren uns ja eigentlich immer nur die embeded Gruppen. Das kÃ¶nnen wir optimieren, indem wir bei den Klammern welche uns nicht interessieren ein '?:' direkt nach dem Ã–ffnen der Klammer angeben. Das bedeutet dann soviel wir <em>not Capture Group</em>. Damit wird fÃ¼r die Klammern keine Gruppennummer vergeben:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">        String regex = <span class="hljs-string" style="color: #6a8759;">"(?:(\\d{1,2})[-.\\s])?(?:(\\d{3})[-.\\s]?)(?:(\\d{3})[-.\\s]?)(\\d{4})"</span>;
        String phoneNumber = <span class="hljs-string" style="color: #6a8759;">"12.523.231.4234"</span>;

        Pattern pat = Pattern.compile(regex);
        Matcher mat = pat.matcher(phoneNumber);

        <span class="hljs-keyword" style="color: #cc7832;">if</span> (mat.matches()){
            <span class="hljs-comment" style="color: grey;">//System.out.format("entire String: %s\n", mat.group(0));</span>
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Country Code: %s\n"</span>, mat.group(<span class="hljs-number" style="color: #6897bb;">1</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Area Code: %s\n"</span>, mat.group(<span class="hljs-number" style="color: #6897bb;">2</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Exchange Code: %s\n"</span>, mat.group(<span class="hljs-number" style="color: #6897bb;">3</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Line number Code: %s\n"</span>, mat.group(<span class="hljs-number" style="color: #6897bb;">4</span>));
        }</pre>
<h2 id="mcetoc_1g7tfqiu92m">Named Capture Groups</h2>
<p>Noch mehr Optimieren kÃ¶nnen wir das mit Named Capture Groups:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">        String regex = <span class="hljs-string" style="color: #6a8759;">"(?:(?&lt;countryCode&gt;\\d{1,2})[-.\\s])?(?:(?&lt;areaCode&gt;\\d{3})[-.\\s]?)(?:(?&lt;exchangeCode&gt;\\d{3})[-.\\s]?)(?&lt;lineNumber&gt;\\d{4})"</span>;
        String phoneNumber = <span class="hljs-string" style="color: #6a8759;">"12.523.231.4234"</span>;

        Pattern pat = Pattern.compile(regex);
        Matcher mat = pat.matcher(phoneNumber);

        <span class="hljs-keyword" style="color: #cc7832;">if</span> (mat.matches()){
            <span class="hljs-comment" style="color: grey;">//System.out.format("entire String: %s\n", mat.group(0));</span>
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Country Code: %s\n"</span>, mat.group(<span class="hljs-string" style="color: #6a8759;">"countryCode"</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Area Code: %s\n"</span>, mat.group(<span class="hljs-string" style="color: #6a8759;">"areaCode"</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Exchange Code: %s\n"</span>, mat.group(<span class="hljs-string" style="color: #6a8759;">"exchangeCode"</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Line number Code: %s\n"</span>, mat.group(<span class="hljs-string" style="color: #6a8759;">"lineNumber"</span>));
        }</pre>
<p>Â </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Einstieg in Regex mit Java</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/einstieg-in-regex-mit-java.html"/>
        <id>https://www.finecloud.ch/einstieg-in-regex-mit-java.html</id>
            <category term="software development"/>
            <category term="regex"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-07-14T05:55:53+02:00</updated>
            <summary>
                <![CDATA[
                    Was ist Regex? Regex steht fÃ¼r Regular expressions und ist eine Technik, Technologie und Sprache an und fÃ¼r sich, die verwendet werden kann zum AusdrÃ¼cken von Textmustern mit Symbolen. Und diese Symbole sind selbst Text.Â Damit lassen wir verschiedene Textteile und Zeichen andere Textfolgen darstellen. In&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g7qsl72t8a">Was ist Regex?</a></li>
<li><a href="#mcetoc_1g7qsl72t8b">Einfaches Beispiel</a></li>
<li><a href="#mcetoc_1g7qsl72t8c">Negieren</a></li>
<li><a href="#mcetoc_1g7qsl72t8d">Anzahl Buchstaben</a></li>
<li><a href="#mcetoc_1g7tdih5q2e">Anzahl Zahlen</a></li>
<li><a href="#mcetoc_1g7tdih5q2f">Buchstaben und Zahlenfolge</a></li>
</ul>
</div>
<h2 id="mcetoc_1g7qsl72t8a">Was ist Regex?</h2>
<p>Regex steht fÃ¼r Regular expressions undÂ  ist eine Technik, Technologie und Sprache an und fÃ¼r sich, die verwendet werden kann zum AusdrÃ¼cken von Textmustern mit Symbolen. Und diese Symbole sind selbst Text.Â Damit lassen wir verschiedene Textteile und Zeichen andere Textfolgen darstellen.</p>
<h2 id="mcetoc_1g7qsl72t8b">Einfaches Beispiel</h2>
<p>In Java kann Regex Beispielsweise bei Strings angewendet werden, dazu verwenden wir die Methode <em>String.matches. </em>Das einfachste Beispiel, ist wenn wir mit Regex in einem String nach einem String suchen:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"cat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"cat"</span>));
    }
}</pre>
<p>Der Output ist ein Boolean Wert, in diesem Fall <em>true.Â </em>Was aber wenn wir nun eines der beiden cat gross schreiben? Der Boolean wird <em>false</em> sein, ausser wir passen den Regex Pattern so an, dass er Gross- und Kleinbuchstaben berÃ¼cksichtigt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"Cat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"[Cc]at"</span>));
    }
}
</pre>
<p>mit den eckigen Klammern [ ] kann eine OR VerknÃ¼pfung zwischen Zeichen definiert werden.</p>
<p>Wenn wir ein Pattern wollen, um zu prÃ¼fen ob das Wort mit einem Buchstaben von a bis f startet kÃ¶nnten wir entweder alle Buchstaben in der eckigen Klammer ausschreiben. DafÃ¼r gibt es glÃ¼cklicherweise eine schÃ¶nere MÃ¶glichkeit, wir kÃ¶nnen Ranges angeben:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"Fat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"[a-fA-F]at"</span>));
    }
}</pre>
<h2 id="mcetoc_1g7qsl72t8c">Negieren</h2>
<p>Was wenn wir einen Pattern wollen der prÃ¼ft ob etwas <strong>nicht</strong> zutrifft. Zum Beispiel ob der Erste Buchstaben des Wortes nicht ein Buchstabe von a bis f ist:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"Fat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"[^a-fA-F]at"</span>));
    }
}</pre>
<p>Das Ergebnis ist nun <em>false</em>. Das Zeichen am Anfang nennt sich "Caret".</p>
<h2 id="mcetoc_1g7qsl72t8d">Anzahl Buchstaben</h2>
<p>Wenn wir nun ein Pattern suchen, der prÃ¼ft ob unser String aus nur drei latinischen Buchstaben besteht:Â </p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"Fat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\w\\w\\w"</span>));
    }
}</pre>
<p>Der reine Regex Pattern besteht nur aus einem \ (Backslash). Damit wir diesen in Java nutzen kÃ¶nnen, mÃ¼ssen wir jedoch den Backslash mit einem zweiten Backslash escapen, damit Java den Backslash nicht als Java, sondern als Regex Pattern erkennen kann.</p>
<p class="msg msg--highlight ">Der Regex-Pattern fÃ¼r Buchstaben (\w) wertet nicht nur Buchstaben von a bis z als Valid, sondern auch Zahlen und '_' (underscore).</p>
<h2 id="mcetoc_1g7tdih5q2e">Anzahl Zahlen</h2>
<p>Dasselbe geht auch, wenn wir einen Pattern fÃ¼r die Anzahl Zahlen definieren:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"521"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d\\d\\d"</span>));
    }
}</pre>
<h2 id="mcetoc_1g7tdih5q2f">Buchstaben und Zahlenfolge</h2>
<p>Was wenn wir nun eine Sammlung von Nummern auf das folgende Format prÃ¼fen mÃ¼ssen: <em>523-231-4444</em> (alle Zahlen sind erlaubt). Wir kÃ¶nnten dazu einfach aus Faulheit folgenden Pattern definieren:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523-231-4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\d\d\d-\d\d\d-\d\d\d\d"</span>));
    }
}</pre>
<p>Das ist ein Valider Pattern der die Problemstellung lÃ¶st. Allerdings geht das schÃ¶ner und einfacher mit dem Quantifier { }:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523-231-4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\d{3}-\d{3}-\d{4}"</span>));
    }
}</pre>
<p>Viel besser oder? Was wenn wir nun nicht nur die Bindestriche, sondern auch z.B. Punkte als Trennzeichen akzeptieren wollen? Dann kÃ¶nnen wir eine Or VerknÃ¼pfung machen anhand des oberen Beispiels:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523-231.4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\d{3}[-.]\d{3}[-.]\d{4}"</span>));
    }
}</pre>
<p>Was ist nun wenn wir Leerzeichen (523-231.4444) zwischen den Nummern als Valid behandeln wollen? Theoretisch kÃ¶nnen wir nun in der Or VerknÃ¼pfung (in den eckigen Klammern) einfach ein Leerzeichen einfÃ¼gen. Das funktioniert, ist aber Optisch nicht ideal, da das Leerzeichen schnell Ã¼bersehen wird. Expliziter geht das mit \s als Regex Zeichen fÃ¼r einen Leerschlag:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523 231.4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]\\d{3}[-.\\s]\\d{4}"</span>));
    }
}</pre>
<p>Wenn mehr als ein Leerschlag, Bindestrich oder Punkt erlaubt ist, kann hinter der "Or"-Klammer einfach ein Plus angefÃ¼gt werden:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523 ..231  4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]+\\d{3}[-.\\s]+\\d{4}"</span>));
    }
}</pre>
<p>Was wenn keines, eines oder mehrere dieser "Or"-VerknÃ¼pften Zeichen erlaubt sein sollen? Wir verwenden '*' anstelle von '+':</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523231 .4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]*\\d{3}[-.\\s]*\\d{4}"</span>));
    }
}</pre>
<p>Was ist nun wenn wir genau nur eines oder keines dieser Zeichen erlauben wollen? Wir verwenden '?' anstelle von '*':</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523231-4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}"</span>));
    }
}</pre>
<p>Was, wenn wir in der letzten Zahlenfolge nur 3 oder 4 Zeichen erlauben wollen?Â </p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523231-4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{3,4}"</span>));
    }
}</pre>
<p>Wenn wir mindestens drei Stellen brauchen, aber es auch unbeschrÃ¤nkt mehr sein dÃ¼rfen, kÃ¶nnen wir die zweite Zahl nach dem Komma einfach weglassen. Was wir weiter optimieren kÃ¶nnen ist, dass wir die Wiederholungen von Regex Statements zusammenfassen und nur einmal deklarieren. Dazu lÃ¶schen wir eines der beiden "\d{3}[-.\s]?" Statements und setzen es im runde Klammern, gefolgt von Spitzen klammern, in der wir die Anzahl Wiederholungen angeben, in diesem Fall 2:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523 231 4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"(\\d{3}[-.\\s]?){2}\\d{3,}"</span>));
    }
}</pre>
<p>Genial, oder?</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java Access-Modifier</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-access-modifier.html"/>
        <id>https://www.finecloud.ch/java-access-modifier.html</id>
            <category term="software development"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>
            <category term="access modifier"/>

        <updated>2022-07-10T06:31:08+02:00</updated>
            <summary>
                <![CDATA[
                    Sobald ein Feld sichtbar ist, bedeutet das auch, das es gelesen und beschrieben werden kann. Die Access-Modifier steuern, von wo auf Felder und Methoden eines Objekts zugegriffen werden kann: Modifier Wer darf zugreifen? public Auf public-Objekte/Felder und Methoden darf ohne EinschrÃ¤nkungen von Ã¼berall aus zugegriffen&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Sobald ein Feld sichtbar ist, bedeutet das auch, das es gelesen und beschrieben werden kann. Die Access-Modifier steuern, von wo auf Felder und Methoden eines Objekts zugegriffen werden kann:</p>
<table style="border-collapse: collapse; width: 100%; height: 309.391px;" border="1">
<tbody>
<tr style="height: 50.3594px;">
<td style="width: 24.4301%; height: 50.3594px;"><strong>Modifier</strong></td>
<td style="width: 75.5699%; height: 50.3594px;"><strong>Wer darf zugreifen?</strong></td>
</tr>
<tr style="height: 107.953px;">
<td style="width: 24.4301%; height: 107.953px;">public</td>
<td style="width: 75.5699%; height: 107.953px;">Auf <em>public-Objekte/Felder und Methoden </em>darf ohne EinschrÃ¤nkungen von Ã¼berall aus zugegriffen werden.</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 24.4301%; height: 50.3594px;">protected</td>
<td style="width: 75.5699%; height: 50.3594px;">Zugriff ist erlaubt fÃ¼r Klassen, die im gleichen Package liegen, sowie fÃ¼r Klassen, die von dieser Klasse erben.</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 24.4301%; height: 50.3594px;">- (nur Package)</td>
<td style="width: 75.5699%; height: 50.3594px;">Wenn keinen Access-Modifier definiert wird, dann ist das Feld oder die Methode fÃ¼r alle Klassen sichtbar, die im gleichen Package liegen.<br>Dies ist aber kein Schutz gegen Zugriffe von ausserhalb auf Ihre Klasse: Packages in Java sind offen, d. h. jeder kann eine weitere Klasse in Ihrem Package deklarieren und von dort auf diese Felder zugreifen.</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 24.4301%; height: 50.3594px;">private</td>
<td style="width: 75.5699%; height: 50.3594px;">Nur die Klasse selbst darf auf <em>private</em>-Felder zugreifen. Wie alle Access-Modifier wirkt auch <em>private</em> auf Klassenebene. Das bedeutet, dass ein Objekt auf <em>private</em>-Member eines anderen Objekts des gleichen Typs zugreifen kann.</td>
</tr>
</tbody>
</table>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java Namenskonventionen</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-namenskonventionen.html"/>
        <id>https://www.finecloud.ch/java-namenskonventionen.html</id>
            <category term="software development"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-07-09T15:53:17+02:00</updated>
            <summary>
                <![CDATA[
                    In diesem Blog fasse ich die Java Namenskonventionen kurz zusammen: Typ Namenskonvention Beispiele Class Sollte mit Grossbuchstaben beginnen und sollte ein Substantiv wie Farbe, Knopf, System, Faden usw. sein. Verwenden Sie geeignete WÃ¶rter anstelle von Akronymen. public class Employee { //code snippet } Interface Sollte&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In diesem Blog fasse ich die Java Namenskonventionen kurz zusammen:</p>
<table class="alt" style="border-collapse: collapse; border-color: #000000; border-style: solid; width: 100%; height: 1446.8px;" border="1">
<tbody>
<tr style="height: 79.1562px;">
<th style="width: 17.4037%; height: 79.1562px;"><strong>Typ</strong></th>
<th style="width: 55.3495%; height: 79.1562px;"><strong>Namenskonvention</strong></th>
<th style="width: 27.2468%; height: 79.1562px;"><strong>Beispiele</strong></th>
</tr>
<tr style="height: 165.547px;">
<td style="width: 17.4037%; height: 165.547px;">Class</td>
<td style="width: 55.3495%; height: 165.547px;">Sollte mit Grossbuchstaben beginnen und<br>sollte ein Substantiv wie Farbe, Knopf, System, Faden usw. sein. Verwenden Sie geeignete WÃ¶rter anstelle von Akronymen.</td>
<td style="width: 27.2468%; height: 165.547px;"><code>public class <strong>Employee</strong></code><br><code>{</code><br><code>//code snippet</code><br><code>}</code></td>
</tr>
<tr style="height: 165.547px;">
<td style="width: 17.4037%; height: 165.547px;">Interface</td>
<td style="width: 55.3495%; height: 165.547px;">Sollte mit dem Grossbuchstaben beginnen und sollte ein Adjektiv wie Runnable, Remote, ActionListener sein. Verwenden Sie geeignete WÃ¶rter anstelle von Akronymen.</td>
<td style="width: 27.2468%; height: 165.547px;"><code>interface <strong>Printable</strong>{//code snippet}</code></td>
</tr>
<tr style="height: 251.938px;">
<td style="width: 17.4037%; height: 251.938px;">Method</td>
<td style="width: 55.3495%; height: 251.938px;">Sollte mit Kleinbuchstaben beginnen und sollte ein Verb wie main(), print(), println() sein. Wenn der Name mehrere WÃ¶rter enthÃ¤lt, beginnen Sie ihn mit einem Kleinbuchstaben, gefolgt von einem Grossbuchstaben, z. B. actionPerformed().</td>
<td style="width: 27.2468%; height: 251.938px;"><code>class Employee</code><br><code>{</code><br><code>// method</code><br><code>void <strong>draw()</strong></code><br><code>{</code><br><code>//code snippet</code><br><code>}</code><br><code>}</code></td>
</tr>
<tr style="height: 338.328px;">
<td style="width: 17.4037%; height: 338.328px;">Variable</td>
<td style="width: 55.3495%; height: 338.328px;">Sollte mit einem Kleinbuchstaben beginnen, z. B. ID, Name und sollte nicht mit Sonderzeichen wie &amp; (kaufmÃ¤nnisches Und), $ (Dollar), _ (Unterstrich) beginnen. Wenn der Name mehrere WÃ¶rter enthÃ¤lt, beginnen Sie ihn mit dem Kleinbuchstaben, gefolgt von einem Grossbuchstaben, z. B. Vorname, Nachname. Vermeiden Sie die Verwendung von Ein-Zeichen-Variablen wie x, y, z.</td>
<td style="width: 27.2468%; height: 338.328px;"><code>class Employee</code><br><code>{</code><br><code>// variable</code><br><code>int <strong>id</strong>;</code><br><code>//code snippet</code><br><code>}</code></td>
</tr>
<tr style="height: 223.141px;">
<td style="width: 17.4037%; height: 223.141px;">Package</td>
<td style="width: 55.3495%; height: 223.141px;">Sollte ein Kleinbuchstabe sein, z. B. java, lang. Wenn der Name mehrere WÃ¶rter enthÃ¤lt, sollten sie durch Punkte (.) getrennt werden, z. B. java.util, java.lang.</td>
<td style="width: 27.2468%; height: 223.141px;"><code>//package</code><br><code>package <strong>com.javatpoint;</strong></code><br><code>class Employee</code><br><code>{</code><br><code>//code snippet</code><br><code>}</code></td>
</tr>
<tr style="height: 223.141px;">
<td style="width: 17.4037%; height: 223.141px;">Constant</td>
<td style="width: 55.3495%; height: 223.141px;">Sollte in GroÃŸbuchstaben wie ROT, GELB sein. Wenn der Name mehrere WÃ¶rter enthÃ¤lt, sollten sie durch einen Unterstrich (_) getrennt werden, z. B. MAX_PRIORITY.<br>Es darf Ziffern enthalten, jedoch nicht als erster Buchstabe.</td>
<td style="width: 27.2468%; height: 223.141px;"><code>class Employee</code><br><code>{</code><br><code>//constant</code><br><code>static final int <strong>MIN_AGE</strong> = 18;</code><br><code>//code snippet</code><br><code>}</code></td>
</tr>
</tbody>
</table>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Unterschiede zwischen Proxmox Containers und Docker</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/unterschiede-zwischen-proxmox-containers-und-docker.html"/>
        <id>https://www.finecloud.ch/unterschiede-zwischen-proxmox-containers-und-docker.html</id>
            <category term="virtualization"/>
            <category term="proxmox"/>
            <category term="lxc"/>
            <category term="linux"/>
            <category term="kvm"/>
            <category term="docker"/>
            <category term="container"/>

        <updated>2022-07-08T16:43:37+02:00</updated>
            <summary>
                <![CDATA[
                    LXC LXC ist ein Userspace Interface zur EindÃ¤mmung des Linux-Kernels und kann verwendet werden fÃ¼r Systemvirtualisierung. Durch eine mÃ¤chtige API und einfache Tools ermÃ¶glicht es Linux Benutzern einfache Erstellung und Verwaltung von System Container. LXC ermÃ¶glicht ein komplettes OS in einem Container zu betreiben. LXD&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g7f40muo25">LXC</a></li>
<li><a href="#mcetoc_1g7f40muo26">LXD</a></li>
<li><a href="#mcetoc_1g7f40muo27">Proxmox Containers</a></li>
<li><a href="#mcetoc_1g7f40muo28">Docker</a></li>
</ul>
</div>
<h2 id="mcetoc_1g7f40muo25">LXC</h2>
<p>LXC ist ein Userspace Interface zur EindÃ¤mmung des Linux-Kernels und kann verwendet werden fÃ¼r Systemvirtualisierung. Durch eine mÃ¤chtige API und einfache Tools ermÃ¶glicht es Linux Benutzern einfache Erstellung und Verwaltung von System Container. LXC ermÃ¶glicht ein komplettes OS in einem Container zu betreiben.</p>
<h2 id="mcetoc_1g7f40muo26">LXD</h2>
<p>LXD ist auf LXC Aufgebaut und bietet neue und bessere Benutzererfahrung. Unter der Haube verwendet LXD LXC durch liblxc und dessen Go binding fÃ¼r das Erstellen und Verwalten von Container. Es ist im Grunde eine Alternative zu den Tools und dem Verteilungsvorlagensystem von LXC mit den zusÃ¤tzlichen Funktionen, die sich aus der Steuerbarkeit Ã¼ber das Netzwerk ergeben.</p>
<h2 id="mcetoc_1g7f40muo27">Proxmox Containers</h2>
<p>Als Proxmox Container werden Container bezeichnet, die mit dem Proxmox Container Toolkit (pct) erstellt und verwaltet werden. Sie zielen auch auf die Systemvirtualisierung ab und verwenden LXC als Grundlage des Containerangebots. Das Proxmox Container Toolkit (pct) ist eng mit Proxmox VE gekoppelt. Das bedeutet, dass es Cluster-Setups kennt und dieselben Netzwerk- und Speicherressourcen wie virtuelle QEMU-Maschinen (VMs) verwenden kann. Sie kÃ¶nnen sogar die Proxmox VE-Firewall verwenden, Backups erstellen und wiederherstellen oder Container mit dem HA-Framework verwalten. Mit der Proxmox VE API lÃ¤sst sich alles Ã¼ber das Netzwerk steuern.</p>
<h2 id="mcetoc_1g7f40muo28">Docker</h2>
<p>Docker zielt darauf ab, eine einzelne Anwendung in einer isolierten, in sich geschlossenen Umgebung zu laufen. Diese werden im Allgemeinen als â€žAnwendungscontainerâ€œ und nicht als â€žSystemcontainerâ€œ bezeichnet. Sie verwalten eine Docker-Instanz Ã¼ber den Host mithilfe der Docker Engine-Befehlszeilenschnittstelle. Es wird nicht empfohlen, Docker direkt auf Ihrem Proxmox VE-Host auszufÃ¼hren. <strong>Wenn man also einen Anwendungscontainer ausfÃ¼hren mÃ¶chte mit z.B. Docker-Images, sollte man diese am besten in einer Proxmox Qemu-VM ausfÃ¼hren.</strong></p>
            ]]>
        </content>
    </entry>
</feed>
