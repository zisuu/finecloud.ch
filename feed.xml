<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Finecloud</title>
    <link href="https://www.finecloud.ch/feed.xml" rel="self" />
    <link href="https://www.finecloud.ch" />
    <updated>2023-01-30T20:19:54+01:00</updated>
    <author>
        <name>Finecloud</name>
    </author>
    <id>https://www.finecloud.ch</id>

    <entry>
        <title>JavaScript and the browser</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/javascript-and-the-browser.html"/>
        <id>https://www.finecloud.ch/javascript-and-the-browser.html</id>
            <category term="software development"/>
            <category term="javascript"/>
            <category term="dev"/>

        <updated>2023-01-30T20:19:54+01:00</updated>
            <summary>
                <![CDATA[
                    The DOM Based on the received HTML document the browser builds up a model of the document structure, the Document Object Model (DOM) The DOM has a tree structure and each node of the document is represented by an object The browser renders the page&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1go1k7l5mfr">The DOM</a>
<ul>
<li><a href="#mcetoc_1go1k7l5mfs">The DOM Tree</a></li>
</ul>
</li>
<li><a href="#mcetoc_1go1k7l5mft">Finding Elements</a></li>
<li><a href="#mcetoc_1go1k7l5mfu">Element nodes</a></li>
<li><a href="#mcetoc_1go1k7l5mfv">Manipulating the DOM</a></li>
<li><a href="#mcetoc_1go1k7l5mg0">Animation</a></li>
<li><a href="#mcetoc_1go1k7l5mg1">Event handling</a>
<ul>
<li><a href="#mcetoc_1go1kdqqcj7">Event Object</a></li>
<li><a href="#mcetoc_1go1kdqqcj8">Event Propagation</a></li>
<li><a href="#mcetoc_1go1kdqqcj9">Default action</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1go1k7l5mfr">The DOM</h2>
<ul>
<li>Based on the received HTML document the browser builds up a model of the document structure, the Document Object Model (DOM)</li>
<li>The DOM has a tree structure and each node of the document is represented by an object</li>
<li>The browser renders the page based on the DOM and provides an API to read and modify the DOM with JS</li>
<li>The DOM is live, i.e., DOM modiﬁcations are immediately reﬂected on the page</li>
</ul>
<h3 id="mcetoc_1go1k7l5mfs">The DOM Tree</h3>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="xml"><span class="hljs-meta" style="color: #bbb529;">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">html</span>&gt;</span>
<span class="hljs-tag">  &lt;<span class="hljs-name" style="color: #e8bf6a;">head</span>&gt;</span>
<span class="hljs-tag">    &lt;<span class="hljs-name" style="color: #e8bf6a;">title</span>&gt;</span>Todo App<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">title</span>&gt;</span>
<span class="hljs-tag">  &lt;/<span class="hljs-name" style="color: #e8bf6a;">head</span>&gt;</span>
<span class="hljs-tag">  &lt;<span class="hljs-name" style="color: #e8bf6a;">body</span>&gt;</span>
<span class="hljs-tag">    &lt;<span class="hljs-name" style="color: #e8bf6a;">h1</span>&gt;</span>Todo App<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">h1</span>&gt;</span>
<span class="hljs-tag">    &lt;<span class="hljs-name" style="color: #e8bf6a;">p</span>&gt;</span>Don't forget anything!<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">p</span>&gt;</span>
<span class="hljs-tag">    &lt;<span class="hljs-name" style="color: #e8bf6a;">p</span>&gt;</span>Please <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string" style="color: #6a8759;">"/login"</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">p</span>&gt;</span>
<span class="hljs-tag">  &lt;/<span class="hljs-name" style="color: #e8bf6a;">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">html</span>&gt;</span></span></pre>
<p>the Tree Structure of the html above:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/77/Screenshot-2023-01-24-at-10.45.34.png" alt="" width="1434" height="858" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-24-at-10.45.34-xs.png 300w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-24-at-10.45.34-sm.png 480w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-24-at-10.45.34-md.png 768w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-24-at-10.45.34-lg.png 1024w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-24-at-10.45.34-xl.png 1360w ,https://www.finecloud.ch/media/posts/77/responsive/Screenshot-2023-01-24-at-10.45.34-2xl.png 1600w"></figure>
<p>you can traverse the DOM Tree with:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// Root node of the dom tree (html)</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> root = <span class="hljs-built_in">document</span>.documentElement;

<span class="hljs-comment" style="color: grey;">// The child elements of a node (only element nodes, no text nodes)</span>
<span class="hljs-comment" style="color: grey;">// -&gt; HTMLCollection(2) [head, body]</span>
root.children;

<span class="hljs-comment" style="color: grey;">// head and body can also be accessed directly</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> head = <span class="hljs-built_in">document</span>.head;
<span class="hljs-keyword" style="color: #cc7832;">const</span> body = <span class="hljs-built_in">document</span>.body;

<span class="hljs-comment" style="color: grey;">// All children of a node (including text nodes)</span>
<span class="hljs-comment" style="color: grey;">// -&gt; NodeList(7) [\#text, h1, \#text, p, \#text, p, \#text]</span>
body.childNodes;

<span class="hljs-comment" style="color: grey;">// Accessing children and node type</span>
body.childNodes[<span class="hljs-number" style="color: #6897bb;">0</span>].nodeType === Node.TEXT_NODE;      <span class="hljs-comment" style="color: grey;">// \#text</span>
body.childNodes[<span class="hljs-number" style="color: #6897bb;">1</span>].nodeType === Node.ELEMENT_NODE;   <span class="hljs-comment" style="color: grey;">// h1</span>

body.firstChild;                                     <span class="hljs-comment" style="color: grey;">// \#text</span>
body.firstElementChild;                              <span class="hljs-comment" style="color: grey;">// h1</span>
<span class="hljs-comment" style="color: grey;">// dito for last: lastChild, lastElementChild</span>
</pre>
<p>Another example:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> h1 = <span class="hljs-built_in">document</span>.body.children[<span class="hljs-number" style="color: #6897bb;">0</span>];

<span class="hljs-comment" style="color: grey;">// Parent node</span>
h1.parentNode;

<span class="hljs-comment" style="color: grey;">// Siblings</span>
h1.nextSibling;                                     <span class="hljs-comment" style="color: grey;">// \#text</span>
h1.nextElementSibling;                              <span class="hljs-comment" style="color: grey;">// p</span>
<span class="hljs-comment" style="color: grey;">// dito for previous: previousSibling, previousElementSibling</span>

<span class="hljs-comment" style="color: grey;">// Example of recursively traversing the DOM</span>
<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">findAnchors</span>(<span class="hljs-params">node</span>) </span>{
  <span class="hljs-keyword" style="color: #cc7832;">if</span> (node.tagName === <span class="hljs-string" style="color: #6a8759;">'A'</span>) {
    <span class="hljs-built_in">console</span>.log(node.textContent+<span class="hljs-string" style="color: #6a8759;">": "</span>+node.pathname);
  }
  <span class="hljs-keyword" style="color: #cc7832;">if</span> (node.nodeType === Node.ELEMENT_NODE) {
    <span class="hljs-keyword" style="color: #cc7832;">for</span> (<span class="hljs-keyword" style="color: #cc7832;">let</span> i = <span class="hljs-number" style="color: #6897bb;">0</span>; i &lt; node.children.length; i++) {
      findAnchors(node.children[i]);
    }
  }
}
findAnchors(<span class="hljs-built_in">document</span>.body);
</pre>
<h2 id="mcetoc_1go1k7l5mft">Finding Elements</h2>
<p>It is often not a good idea to access a speciﬁc node by a ﬁxed path since the document structure may change over time:</p>
<pre>// Get the href attribute of the first anchor<br>document.body.childNodes[5].childNodes[1].href;</pre>
<p>There are a number of functions to ﬁnd DOM elements in a more sophisticated way. The functions can be called on the document or on any element node to reduce the search on the node’s descendants</p>
<pre>// Get the href attribute of the first anchor<br>document.getElementsByTagName('a')[0].href;</pre>
<p>more examples of finding elements:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// Get a HTMLCollection of nodes by tag name</span>
<span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string" style="color: #6a8759;">'a'</span>);

<span class="hljs-comment" style="color: grey;">// Get a HTMLCollection of nodes by class name</span>
<span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string" style="color: #6a8759;">'external-link'</span>);

<span class="hljs-comment" style="color: grey;">// A single node can be retrieved by id (only via document)</span>
<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string" style="color: #6a8759;">'logo'</span>);

<span class="hljs-comment" style="color: grey;">// Elements can also be selected by using a CSS selector string</span>
<span class="hljs-comment" style="color: grey;">// A static NodeList is returned</span>
<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string" style="color: #6a8759;">'p a.external-link'</span>);

<span class="hljs-comment" style="color: grey;">// Like querySelectorAll but only the first matching node is returned</span>
<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string" style="color: #6a8759;">'#logo'</span>);
</pre>
<h2 id="mcetoc_1go1k7l5mfu">Element nodes</h2>
<ul>
<li>For different HTML elements (body, div, p, a, etc.) different objects with different properties and methods are created</li>
<li>For example, an anchor object has a href and pathname property, whereas a form object has a submit and reset method</li>
<li>w3schools provides a nice reference http://www.w3schools.com/jsref/default.asp</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> a = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string" style="color: #6a8759;">'a'</span>);
<span class="hljs-built_in">console</span>.log(a.href);
 <span class="hljs-comment" style="color: grey;">// -&gt; ’https://www.todo-app.com/login’</span>
<span class="hljs-built_in">console</span>.log(a.pathname);
 <span class="hljs-comment" style="color: grey;">// -&gt; ’/login’</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> f = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string" style="color: #6a8759;">'myForm'</span>);
f.reset();
 <span class="hljs-comment" style="color: grey;">// -&gt; resets all fields of the form</span>
f.submit();
 <span class="hljs-comment" style="color: grey;">// -&gt; submits the form</span></pre>
<h2 id="mcetoc_1go1k7l5mfv">Manipulating the DOM</h2>
<ul>
<li>Almost everything in the DOM can be manipulated with JavaScript:
<ul>
<li>Single node properties can be changed</li>
<li>Nodes can be moved within the tree</li>
<li>Nodes can be removed </li>
<li>New nodes can be added</li>
</ul>
</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> h1 = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string" style="color: #6a8759;">'h1'</span>);
<span class="hljs-comment" style="color: grey;">// Change the color style property to ’#FF0000’</span>
h1.style.color = <span class="hljs-string" style="color: #6a8759;">'#FF0000'</span>;
<span class="hljs-comment" style="color: grey;">// Change the display style property to ’none’</span>
h1.style.display = <span class="hljs-string" style="color: #6a8759;">'none'</span>;
<span class="hljs-comment" style="color: grey;">// Change the text of the h1</span>
h1.childNodes[<span class="hljs-number" style="color: #6897bb;">0</span>].nodeValue = <span class="hljs-string" style="color: #6a8759;">"Hello Earth!"</span>;
<span class="hljs-comment" style="color: grey;">// Or more comfortable by using the textContent property (all children of h1</span>
<span class="hljs-comment" style="color: grey;">// are removed and and a new text node with the respective text is added)</span>
h1.textContent = <span class="hljs-string" style="color: #6a8759;">"Hello World!"</span>;</pre>
<p>another example:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> myList = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string" style="color: #6a8759;">'ul'</span>);
<span class="hljs-comment" style="color: grey;">// Nodes can be moved by simply re-inserting them at a different position</span>
<span class="hljs-comment" style="color: grey;">// -&gt; The last node of the list is moved to the beginning of the list</span>
myList.insertBefore(myList.lastElementChild, myList.firstElementChild);
<span class="hljs-comment" style="color: grey;">// An element is removed by calling remove() on the node</span>
<span class="hljs-comment" style="color: grey;">// -&gt; Removes the last element from the list</span>
myList.lastElementChild.remove();
<span class="hljs-comment" style="color: grey;">// New element and text nodes can be created. Newly created nodes must be</span>
<span class="hljs-comment" style="color: grey;">// added to the DOM tree explicitly. e.g. using appendChild()</span>
<span class="hljs-comment" style="color: grey;">// -&gt; Creates a new list item and appends it to the end of the list</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string" style="color: #6a8759;">'li'</span>);
li.appendChild(<span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string" style="color: #6a8759;">"New item"</span>));
myList.appendChild(li);
<span class="hljs-comment" style="color: grey;">// Nodes can also be created implicitly by using the innerHTML property</span>
li.innerHTML = <span class="hljs-string" style="color: #6a8759;">"An &lt;b&gt;important&lt;/b&gt; item"</span>;</pre>
<h2 id="mcetoc_1go1k7l5mg0">Animation</h2>
<ul>
<li>The setTimeout function waits a given number of milliseconds and then calls a function</li>
<li>setTimeout can be used to implement an animation</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// The background color shall change between red and blue every second</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> ball = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string" style="color: #6a8759;">'#ball'</span>);
<span class="hljs-keyword" style="color: #cc7832;">let</span> toggle = <span class="hljs-literal" style="color: #6897bb;">false</span>;
<span class="hljs-comment" style="color: grey;">// The animation function</span>
<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">animate</span>() </span>{
ball.style.backgroundColor = toggle ? <span class="hljs-string" style="color: #6a8759;">'#f00'</span> : <span class="hljs-string" style="color: #6a8759;">'#00f'</span>;
toggle = !toggle;
<span class="hljs-comment" style="color: grey;">// Keep the animation runnning</span>
setTimeout(animate, <span class="hljs-number" style="color: #6897bb;">1000</span>);
}
<span class="hljs-comment" style="color: grey;">// Start the animation</span>
setTimeout(animate, <span class="hljs-number" style="color: #6897bb;">1000</span>);</pre>
<ul>
<li>setInterval is similar to setTimeout but calls the function every interval and not only once</li>
<li>clearInterval and clearTimeout clear a timer set with setInterval and setTimeout respectively</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> ball = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string" style="color: #6a8759;">'#ball'</span>);
<span class="hljs-keyword" style="color: #cc7832;">let</span> toggle = <span class="hljs-literal" style="color: #6897bb;">false</span>;
<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">animate</span>() </span>{
ball.style.backgroundColor = toggle ? <span class="hljs-string" style="color: #6a8759;">'#f00'</span> : <span class="hljs-string" style="color: #6a8759;">'#00f'</span>;
toggle = !toggle;
}
<span class="hljs-comment" style="color: grey;">// Start the animation</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> id = setInterval(animate, <span class="hljs-number" style="color: #6897bb;">1000</span>);
<span class="hljs-comment" style="color: grey;">// Stop the animation after 10s</span>
setTimeout(<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>()</span>{
clearInterval(id);
}, <span class="hljs-number" style="color: #6897bb;">10000</span>);</pre>
<ul>
<li>For smooth animations use requestAnimationFrame</li>
<li>The scheduled animation function is called when the browser is ready to repaint the screen (at a rate of about 60 times per second but only when the window/tab is active)</li>
<li>By using requestAnimationFrame the browser can optimize concurrent animations</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> ball = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string" style="color: #6a8759;">'#ball'</span>);
<span class="hljs-keyword" style="color: #cc7832;">let</span> angle = <span class="hljs-built_in">Math</span>.PI / <span class="hljs-number" style="color: #6897bb;">2</span>;
<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">animate</span>(<span class="hljs-params">time, lastTime</span>) </span>{
<span class="hljs-keyword" style="color: #cc7832;">if</span> (lastTime) {
<span class="hljs-comment" style="color: grey;">// Compute the next position based on the elapsed time</span>
angle += (time - lastTime) * <span class="hljs-number" style="color: #6897bb;">0.001</span>;
}
ball.style.left = (<span class="hljs-built_in">Math</span>.cos(angle) * <span class="hljs-number" style="color: #6897bb;">200</span>) + <span class="hljs-string" style="color: #6a8759;">'px'</span>;
requestAnimationFrame(<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">newTime</span>) </span>{ animate(newTime, time); });
}
requestAnimationFrame(animate);</pre>
<h2 id="mcetoc_1go1k7l5mg1">Event handling</h2>
<ul>
<li>Normally, a GUI must not only provide data to the user but also react to user input </li>
<li>A user interacts with the GUI by key strokes, mouse clicks, mouse moves, etc.</li>
<li>There are also implicit user interactions like window scrolling, window resizing, etc.</li>
<li>To react programmatically to user input, one could constantly read the state of the input device or adopt a polling mechanism</li>
<li>A better approach is a system that actively notifies registered listeners, also called handlers, about user inputs by firing events</li>
<li>Event handlers are registered for a certain event type using addEventListener and removed using removeEventListener</li>
<li>Event handlers are always registered in a context and are only called for events in that context</li>
<li>Event handlers can be registered on the window or on any DOM element</li>
<li>Multiple handlers can be registered for the same event and the same handler can be registered for multiple events</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// An event handler can be registerd for a certain event type</span>
<span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string" style="color: #6a8759;">'click'</span>, <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{
<span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"That's amazing!"</span>);
});
<span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string" style="color: #6a8759;">'resize'</span>, <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{
<span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"Window has been resized"</span>);
});
<span class="hljs-comment" style="color: grey;">// Event handlers can be registerd on DOM elements to confine the context</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> myButton = docuemnt.querySelector(<span class="hljs-string" style="color: #6a8759;">'#my-button'</span>);
myButton.addEventListener(<span class="hljs-string" style="color: #6a8759;">'click'</span>, <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>()</span>{
<span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">'What a surprise!'</span>);
});
<span class="hljs-comment" style="color: grey;">// Event handlers can also be removed again</span>
<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">once</span>() </span>{
<span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">'Done.'</span>);
<span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string" style="color: #6a8759;">'click'</span>, once);
}
<span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string" style="color: #6a8759;">'click'</span>, once);</pre>
<h3 id="mcetoc_1go1kdqqcj7">Event Object</h3>
<ul>
<li>Most events are propagated through the DOM tree, thus event handlers registered on an ancestor nodes are called too</li>
<li>Default propagation behaviour is bubbling (the more specific handler, the earlier it is called)</li>
<li>Handlers can also be registered in the capturing phase (before the bubbling phase)</li>
<li>The propagation of an event can be stopped by any handler by calling stopPropagation on the event object</li>
</ul>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/77/Pasted-image-20230130160641.png" alt="" width="421" height="229" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160641-xs.png 300w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160641-sm.png 480w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160641-md.png 768w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160641-lg.png 1024w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160641-xl.png 1360w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160641-2xl.png 1600w"></figure>
<h3 id="mcetoc_1go1kdqqcj8">Event Propagation</h3>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// Registering a click event handler on the body and a button</span>
<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string" style="color: #6a8759;">'body'</span>).addEventListener(<span class="hljs-string" style="color: #6a8759;">'click'</span>, <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">e</span>)</span>{
<span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"Handler on body (bubbling)"</span>);
});
<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string" style="color: #6a8759;">'button'</span>).addEventListener(<span class="hljs-string" style="color: #6a8759;">'click'</span>, <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">e</span>)</span>{
<span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"Handler on button (bubbling)"</span>);
});
<span class="hljs-comment" style="color: grey;">// Clicking on the button results in the following output:</span>
<span class="hljs-comment" style="color: grey;">// -&gt; Handler on button (bubbling)</span>
<span class="hljs-comment" style="color: grey;">// -&gt; Handler on body (bubbling)</span>
<span class="hljs-comment" style="color: grey;">// Register an event handler in the capturing phase</span>
<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string" style="color: #6a8759;">'body'</span>).addEventListener(<span class="hljs-string" style="color: #6a8759;">'click'</span>, <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">e</span>)</span>{
<span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"Handler on body (capturing)"</span>);
}, <span class="hljs-literal" style="color: #6897bb;">true</span>);
<span class="hljs-comment" style="color: grey;">// Clicking now on the button results in the following output:</span>
<span class="hljs-comment" style="color: grey;">// -&gt; Handler on body (capturing)</span>
<span class="hljs-comment" style="color: grey;">// -&gt; Handler on button (bubbling)</span>
<span class="hljs-comment" style="color: grey;">// -&gt; Handler on body (bubbling)</span></pre>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// The propagation of an event can be stopped by an event handler</span>
<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string" style="color: #6a8759;">'button'</span>).addEventListener(<span class="hljs-string" style="color: #6a8759;">'click'</span>, <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">e</span>)</span>{
<span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"Handler on button (bubbling)"</span>);
e.stopPropagation();
});
<span class="hljs-comment" style="color: grey;">// Clicking on the button results in the following ouput:</span>
<span class="hljs-comment" style="color: grey;">// -&gt; Handler on body (capturing)</span>
<span class="hljs-comment" style="color: grey;">// -&gt; Handler on button (bubbling)</span></pre>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/77/Pasted-image-20230130160742.png" alt="" width="481" height="216" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160742-xs.png 300w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160742-sm.png 480w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160742-md.png 768w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160742-lg.png 1024w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160742-xl.png 1360w ,https://www.finecloud.ch/media/posts/77/responsive/Pasted-image-20230130160742-2xl.png 1600w"></figure>
<h3 id="mcetoc_1go1kdqqcj9">Default action</h3>
<ul>
<li>Some events have associated default actions:
<ul>
<li>clicking on a link loads the link target</li>
<li>clicking on a submit button submits the form</li>
<li>pressing the down arrow scrolls the page down</li>
</ul>
</li>
<li>Event handlers are called before the default behaviour takes place</li>
<li>If the default action is unwanted, then the event handler can call preventDefault on the event object</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// The default action can be prevented by a handler</span>
<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string" style="color: #6a8759;">'a'</span>).addEventListener(<span class="hljs-string" style="color: #6a8759;">'click'</span>, <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">e</span>) </span>{
e.preventDefault();
alert(<span class="hljs-string" style="color: #6a8759;">"Sorry, but we don't want you to leave!"</span>);
});</pre>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>JavaScript objects</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/javascript-objects.html"/>
        <id>https://www.finecloud.ch/javascript-objects.html</id>
            <category term="software development"/>
            <category term="javascript"/>
            <category term="dev"/>

        <updated>2023-01-30T16:26:53+01:00</updated>
            <summary>
                <![CDATA[
                    Object An object is a collection of properties A property has a name and a value An object can be seen as associative array (map) where the keys in the array are the names of the object’s properties // Create object as literal const bob&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gn0ic8ssj0">Object</a></li>
<li><a href="#mcetoc_1gn0ic8ssj1">Object Properties</a></li>
<li><a href="#mcetoc_1gna43tov6">Object Methods</a></li>
<li><a href="#mcetoc_1gna43tov7">Object Constructor</a></li>
<li><a href="#mcetoc_1gna43tov8">Altering Objects</a></li>
<li><a href="#mcetoc_1gnhh62kj1">The this-reference</a></li>
<li><a href="#mcetoc_1go1kjd5kjg">Prototype</a></li>
<li><a href="#mcetoc_1go1kjd5kjh">Inheritance</a>
<ul>
<li><a href="#mcetoc_1go1kjd5kji">Inheritance Helper Function</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1gn0ic8ssj0">Object</h2>
<ul>
<li>An object is a collection of properties</li>
<li>A property has a name and a value</li>
<li>An object can be seen as associative array (map) where the keys in the array are the names of the object’s properties</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// Create object as literal</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> bob = {
  name: <span class="hljs-string" style="color: #6a8759;">"Bob"</span>,
  age: <span class="hljs-number" style="color: #6897bb;">25</span>
};

<span class="hljs-comment" style="color: grey;">// Access properties</span>
<span class="hljs-built_in">console</span>.log(bob.name);               <span class="hljs-comment" style="color: grey;">// &gt;&gt; Bob</span>
bob.age = bob.age+<span class="hljs-number" style="color: #6897bb;">1</span>;
bob.age++;
<span class="hljs-built_in">console</span>.log(bob.age);                <span class="hljs-comment" style="color: grey;">// &gt;&gt; 27</span>
</pre>
<h2 id="mcetoc_1gn0ic8ssj1">Object Properties</h2>
<ul>
<li>Properties can dynamically be added to an object</li>
<li>Properties can be accessed using the dot or index operator</li>
<li>Property names that are not valid variable names have to be put in quotes</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> bob = {name: <span class="hljs-string" style="color: #6a8759;">"Bob"</span>, age: <span class="hljs-number" style="color: #6897bb;">25</span>};

<span class="hljs-comment" style="color: grey;">// Add new properties</span>
bob.hairColor = <span class="hljs-string" style="color: #6a8759;">"black"</span>;
<span class="hljs-built_in">console</span>.log(bob.hairColor);          <span class="hljs-comment" style="color: grey;">// &gt;&gt; black</span>
<span class="hljs-built_in">console</span>.log(bob.lastname);           <span class="hljs-comment" style="color: grey;">// &gt;&gt; undefined</span>

<span class="hljs-comment" style="color: grey;">// Access properties using the dot or index operator</span>
<span class="hljs-built_in">console</span>.log(bob.name);               <span class="hljs-comment" style="color: grey;">// &gt;&gt; Bob</span>
<span class="hljs-built_in">console</span>.log(bob[<span class="hljs-string" style="color: #6a8759;">"name"</span>]);            <span class="hljs-comment" style="color: grey;">// &gt;&gt; Bob</span>

<span class="hljs-comment" style="color: grey;">// Property with quoted name</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> alice = {
  name: <span class="hljs-string" style="color: #6a8759;">"Alice"</span>,
  <span class="hljs-string" style="color: #6a8759;">"year of birth"</span>: <span class="hljs-number" style="color: #6897bb;">1991</span>
};
<span class="hljs-built_in">console</span>.log(alice[<span class="hljs-string" style="color: #6a8759;">"year of birth"</span>]); <span class="hljs-comment" style="color: grey;">// &gt;&gt; 1991</span>
</pre>
<h2 id="mcetoc_1gna43tov6">Object Methods</h2>
<ul>
<li>An object property that points to a function value is called method</li>
<li>Within the method body, the this reference points to the object the method is called on</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> bob = {name: <span class="hljs-string" style="color: #6a8759;">"Bob"</span>};

<span class="hljs-comment" style="color: grey;">// Add method to object</span>
bob.speak = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">phrase</span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">this</span>.name+<span class="hljs-string" style="color: #6a8759;">" says: "</span>+phrase);
};
bob.speak(<span class="hljs-string" style="color: #6a8759;">"What's up?"</span>);        <span class="hljs-comment" style="color: grey;">// &gt;&gt; Bob says: What's up?</span>
<span class="hljs-built_in">console</span>.log(bob.speak);         <span class="hljs-comment" style="color: grey;">// &gt;&gt; [Function]</span>

<span class="hljs-comment" style="color: grey;">// Object literal with method</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> alice = {
  name: <span class="hljs-string" style="color: #6a8759;">"Alice"</span>,
  speak: <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">phrase</span>) </span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">this</span>.name+<span class="hljs-string" style="color: #6a8759;">" says: "</span>+phrase);
  }
};
alice.speak(<span class="hljs-string" style="color: #6a8759;">"Great!"</span>);          <span class="hljs-comment" style="color: grey;">// &gt;&gt; Alice says: Great!</span>
</pre>
<h2 id="mcetoc_1gna43tov7">Object Constructor</h2>
<ul>
<li>A constructor function is a normal function, but treated as constructor when called with the new operator</li>
<li>The this reference points to the new object</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// Constructor function</span>
<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">Person</span>(<span class="hljs-params">name, age</span>) </span>{
  <span class="hljs-keyword" style="color: #cc7832;">this</span>.name = name;
  <span class="hljs-keyword" style="color: #cc7832;">this</span>.age = age;
  <span class="hljs-keyword" style="color: #cc7832;">this</span>.speak = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">phrase</span>) </span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">this</span>.name+<span class="hljs-string" style="color: #6a8759;">" says: "</span>+phrase);
  }
}

<span class="hljs-comment" style="color: grey;">// Create objects</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> alice = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Alice"</span>, <span class="hljs-number" style="color: #6897bb;">19</span>);
<span class="hljs-keyword" style="color: #cc7832;">const</span> bob = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Bob"</span>, <span class="hljs-number" style="color: #6897bb;">25</span>);

<span class="hljs-built_in">console</span>.log(alice.name);    <span class="hljs-comment" style="color: grey;">// Alice</span>
bob.speak(<span class="hljs-string" style="color: #6a8759;">"I'm Bob"</span>);       <span class="hljs-comment" style="color: grey;">// &gt;&gt; Bob says: I'm Bob</span>
</pre>
<h2 id="mcetoc_1gna43tov8">Altering Objects</h2>
<p>Objects can always be altered even if they were created using a constructor function:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">Person</span>(<span class="hljs-params">name, age</span>) </span>{
    <span class="hljs-keyword" style="color: #cc7832;">this</span>.name = name;
    <span class="hljs-keyword" style="color: #cc7832;">this</span>.age = age;
    <span class="hljs-keyword" style="color: #cc7832;">this</span>.speak = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> (<span class="hljs-params">phrase</span>) </span>{
        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">this</span>.name + <span class="hljs-string" style="color: #6a8759;">" says: "</span> + phrase);
    }
    <span class="hljs-keyword" style="color: #cc7832;">this</span>.sleep = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> () </span>{
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"CHRRRZ Z Z z z..."</span>);
    };
}

<span class="hljs-keyword" style="color: #cc7832;">const</span> bob = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Bob"</span>, <span class="hljs-number" style="color: #6897bb;">25</span>);

<span class="hljs-comment" style="color: grey;">// Alter bob</span>
bob.speak = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> () </span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"Sorry, I prefer writing"</span>);
}
bob.write = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> (<span class="hljs-params">phrase</span>) </span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">this</span>.name + <span class="hljs-string" style="color: #6a8759;">" writes: "</span> + phrase);
}
<span class="hljs-keyword" style="color: #cc7832;">delete</span> bob.sleep;

bob.speak(<span class="hljs-string" style="color: #6a8759;">"Bla bla"</span>);    <span class="hljs-comment" style="color: grey;">// &gt;&gt; Sorry, I prefer writing</span>
bob.write(<span class="hljs-string" style="color: #6a8759;">"Bla bla"</span>);   <span class="hljs-comment" style="color: grey;">// &gt;&gt; Bob writes: Bla bla</span>
bob.sleep();             <span class="hljs-comment" style="color: grey;">// ! TypeError: bob.sleep is not a function !</span>

<span class="hljs-comment" style="color: grey;">// bob is still a Person</span>
<span class="hljs-built_in">console</span>.log(bob <span class="hljs-keyword" style="color: #cc7832;">instanceof</span> Person);  <span class="hljs-comment" style="color: grey;">// &gt;&gt; true</span></pre>
<h2 id="mcetoc_1gnhh62kj1">The this-reference</h2>
<ul>
<li>The this reference within a function points to the bound object</li>
<li>Functions are implicitly bound to the object the function is called on (methods)</li>
<li>Functions can be explicitly bound using bind or call</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// speak is not bound ('this' points to the global object or is undefined)</span>
<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">speak</span>(<span class="hljs-params">phrase</span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">this</span>.name+<span class="hljs-string" style="color: #6a8759;">" says: "</span>+phrase);
}
speak(<span class="hljs-string" style="color: #6a8759;">"Hello"</span>);           <span class="hljs-comment" style="color: grey;">// &gt;&gt; undefined says: Hello</span>
                          <span class="hljs-comment" style="color: grey;">// OR</span>
                          <span class="hljs-comment" style="color: grey;">// TypeError: Cannot read property name of undefined</span>

<span class="hljs-keyword" style="color: #cc7832;">const</span> alice = {name: <span class="hljs-string" style="color: #6a8759;">"Alice"</span>, speak: speak};
<span class="hljs-comment" style="color: grey;">// speak is implicitly bound to alice when called as method</span>
alice.speak(<span class="hljs-string" style="color: #6a8759;">"Hello"</span>);     <span class="hljs-comment" style="color: grey;">// &gt;&gt; Alice says: Hello</span>

<span class="hljs-comment" style="color: grey;">// bind creates a new function which is explicitly bound to the passed object</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> aliceSpeak = speak.bind(alice);
aliceSpeak(<span class="hljs-string" style="color: #6a8759;">"Hello"</span>);      <span class="hljs-comment" style="color: grey;">// &gt;&gt; Alice says: Hello</span>

<span class="hljs-comment" style="color: grey;">// call explicitly binds the function to the passed object and calls it</span>
speak.call(alice, <span class="hljs-string" style="color: #6a8759;">"Hi"</span>);  <span class="hljs-comment" style="color: grey;">// &gt;&gt; Alice says: Hi</span>
</pre>
<h2 id="mcetoc_1go1kjd5kjg">Prototype</h2>
<ul>
<li>Most objects have a prototype, which is another object used as fallback source for properties</li>
<li>The prototype is often referenced by the __proto__ property (not standardized)</li>
<li>Each function has a prototype property which points to an object.</li>
<li>This object becomes the prototype of the objects created with the new operator from that function</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">Person</span>(<span class="hljs-params">name, age</span>) </span>{
  <span class="hljs-keyword" style="color: #cc7832;">this</span>.name = name;
  <span class="hljs-keyword" style="color: #cc7832;">this</span>.age = age;
}
<span class="hljs-comment" style="color: grey;">// Add functionality to Person's prototype</span>
Person.prototype.speak = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">phrase</span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">this</span>.name+<span class="hljs-string" style="color: #6a8759;">" says: "</span>+phrase);
};

<span class="hljs-keyword" style="color: #cc7832;">const</span> alice = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Alice"</span>, <span class="hljs-number" style="color: #6897bb;">19</span>);
<span class="hljs-keyword" style="color: #cc7832;">const</span> bob = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Bob"</span>, <span class="hljs-number" style="color: #6897bb;">25</span>);

<span class="hljs-comment" style="color: grey;">// alice and bob have the same prototype</span>
<span class="hljs-built_in">console</span>.log(alice.__proto__ === bob.__proto__); <span class="hljs-comment" style="color: grey;">// &gt;&gt; true</span>

<span class="hljs-comment" style="color: grey;">// New functionality can always be added to a prototype</span>
Person.prototype.sleep = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"CHRRRZ Z Z z z ..."</span>);
};

bob.sleep();    <span class="hljs-comment" style="color: grey;">// &gt;&gt; CHRRR Z Z Z z z ...</span>
</pre>
<ul>
<li>Using prototype functions has the advantage that only one function instance is needed for all objects</li>
<li>But prototype functions have no access to local variables of the constructor function</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">Person</span>(<span class="hljs-params">name, age</span>) </span>{
  <span class="hljs-comment" style="color: grey;">// Public property</span>
  <span class="hljs-keyword" style="color: #cc7832;">this</span>.name = name;
  <span class="hljs-comment" style="color: grey;">// Local variable (private property)</span>
  <span class="hljs-keyword" style="color: #cc7832;">const</span> yearOfBirth = <span class="hljs-keyword" style="color: #cc7832;">new</span> <span class="hljs-built_in">Date</span>().getFullYear()-age;
  <span class="hljs-comment" style="color: grey;">// Only functions defined in the constructor function can access local variables</span>
  <span class="hljs-keyword" style="color: #cc7832;">this</span>.getYearOfBirth = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{
    <span class="hljs-keyword" style="color: #cc7832;">return</span> yearOfBirth;
  }
}
Person.prototype.toString = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{
  <span class="hljs-comment" style="color: grey;">// Prototype functions have only access to the public properties of the object</span>
  <span class="hljs-keyword" style="color: #cc7832;">return</span> <span class="hljs-keyword" style="color: #cc7832;">this</span>.name+<span class="hljs-string" style="color: #6a8759;">" was bron in "</span>+<span class="hljs-keyword" style="color: #cc7832;">this</span>.getYearOfBirth();
}
<span class="hljs-keyword" style="color: #cc7832;">const</span> bob = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Bob"</span>, <span class="hljs-number" style="color: #6897bb;">25</span>);
<span class="hljs-built_in">console</span>.log(bob+<span class="hljs-string" style="color: #6a8759;">"!"</span>);   <span class="hljs-comment" style="color: grey;">// &gt;&gt; Bob was born in 1996!</span>
</pre>
<h2 id="mcetoc_1go1kjd5kjh">Inheritance</h2>
<ul>
<li>Prototype properties are inherited over several levels</li>
<li>Inheritance is set up by
<ul>
<li>calling the base constructor function to initialize the new object :</li>
</ul>
</li>
</ul>
<p><code>function Student(name, age, university) {</code><br><code>Person.call(this, name, age);</code><br><code>// ...</code><br><code>}</code></p>
<ul>
<li style="list-style-type: none;">
<ul>
<li>setting the prototype object of the base constructor function as the prototype of the prototype object of the sub constructor function:</li>
</ul>
</li>
</ul>
<p><code>// Student’s prototype object must be replaced by a new object which</code><br><code>// has Person’s prototype object as prototype</code><br><code>Student.prototype = Object.create(Person.prototype);</code><br><code>Student.prototype.constructor = Student;</code></p>
<p>Example1:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">Person</span>(<span class="hljs-params">name, age</span>) </span>{
  <span class="hljs-keyword" style="color: #cc7832;">this</span>.name = name;
  <span class="hljs-keyword" style="color: #cc7832;">this</span>.age = age;
}
Person.prototype.describe = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">this</span>.name+<span class="hljs-string" style="color: #6a8759;">" is "</span>+<span class="hljs-keyword" style="color: #cc7832;">this</span>.age);
}
Person.prototype.speak = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">phrase</span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">this</span>.name+<span class="hljs-string" style="color: #6a8759;">" says: "</span>+phrase);
}

<span class="hljs-comment" style="color: grey;">// Student extends Person</span>
<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">Student</span>(<span class="hljs-params">name, age, university</span>) </span>{
  Person.call(<span class="hljs-keyword" style="color: #cc7832;">this</span>, name, age);
  <span class="hljs-keyword" style="color: #cc7832;">this</span>.university = university;
}
Student.prototype = <span class="hljs-built_in">Object</span>.create(Person.prototype);
Student.prototype.constructor = Student;

Student.prototype.sleep = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"CHRRRZ Z Z z z..."</span>);
}
Student.prototype.describe = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>()</span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">this</span>.name+<span class="hljs-string" style="color: #6a8759;">" is a student at "</span>+<span class="hljs-keyword" style="color: #cc7832;">this</span>.university);
};
</pre>
<p>Example2:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> bob = <span class="hljs-keyword" style="color: #cc7832;">new</span> Student(<span class="hljs-string" style="color: #6a8759;">"Bob"</span>, <span class="hljs-number" style="color: #6897bb;">25</span>, <span class="hljs-string" style="color: #6a8759;">"BFH"</span>);
<span class="hljs-built_in">console</span>.log(bob <span class="hljs-keyword" style="color: #cc7832;">instanceof</span> Student); <span class="hljs-comment" style="color: grey;">// &gt;&gt; true</span>
<span class="hljs-built_in">console</span>.log(bob <span class="hljs-keyword" style="color: #cc7832;">instanceof</span> Person); <span class="hljs-comment" style="color: grey;">// &gt;&gt; true</span>
bob.speak(<span class="hljs-string" style="color: #6a8759;">"Hi"</span>);
bob.describe();
bob.sleep();
<span class="hljs-comment" style="color: grey;">// &gt;&gt; Bob says: Hi</span>
<span class="hljs-comment" style="color: grey;">// &gt;&gt; Bob is a student at BFH</span>
<span class="hljs-comment" style="color: grey;">// &gt;&gt; CHRRRZ Z Z z z...</span></pre>
<h3 id="mcetoc_1go1kjd5kji">Inheritance Helper Function</h3>
<p>Using a helper function simpliﬁes inheritance and makes it less error prone:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// Helper to correctly set up the prototype chain</span>
<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">extend</span>(<span class="hljs-params">base, sub</span>) </span>{
  <span class="hljs-keyword" style="color: #cc7832;">const</span> origProto = sub.prototype;
  sub.prototype = <span class="hljs-built_in">Object</span>.create(base.prototype);
  <span class="hljs-keyword" style="color: #cc7832;">for</span> (<span class="hljs-keyword" style="color: #cc7832;">let</span> key <span class="hljs-keyword" style="color: #cc7832;">in</span> origProto) {
    sub.prototype[key] = origProto[key];
  }
  <span class="hljs-built_in">Object</span>.defineProperty(sub.prototype, <span class="hljs-string" style="color: #6a8759;">'constructor'</span>, {
    enumerable: <span class="hljs-literal" style="color: #6897bb;">false</span>,
    value: sub
  });
}
<span class="hljs-comment" style="color: grey;">//----------------------------------------</span>

<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">Prof</span>(<span class="hljs-params">name, age</span>) </span>{
  Person.call(<span class="hljs-keyword" style="color: #cc7832;">this</span>, name, age);
}
Prof.prototype.describe = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"Prof. "</span>+<span class="hljs-keyword" style="color: #cc7832;">this</span>.name+<span class="hljs-string" style="color: #6a8759;">" is "</span>+<span class="hljs-keyword" style="color: #cc7832;">this</span>.age+<span class="hljs-string" style="color: #6a8759;">"years old"</span>);
}
extend(Person, Prof);
</pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Difference between heap and stack</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/difference-between-heap-and-stack.html"/>
        <id>https://www.finecloud.ch/difference-between-heap-and-stack.html</id>
            <category term="software development"/>
            <category term="dev"/>

        <updated>2023-01-21T13:27:07+01:00</updated>
            <summary>
                <![CDATA[
                    In this Post I try to explain the difference between the heap and the stack. It's just a very high level amateur explanation, there is a lot more to read and learn about this Topics. This Drawing helps me a lot to understand the basic&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gna4n2a12f">Overview</a></li>
<li><a href="#mcetoc_1gna4n2a12g">Key Difference Between Stack and Heap Memory</a></li>
<li><a href="#what-is-a-stack">What is a Stack?</a></li>
<li><a href="#what-is-heap">What is Heap?</a></li>
</ul>
</div>
<p>In this Post I try to explain the difference between the heap and the stack. It's just a very high level amateur explanation, there is a lot more to read and learn about this Topics.</p>
<h2 id="mcetoc_1gna4n2a12f">Overview</h2>
<p>This Drawing helps me a lot to understand the basic difference between the heap and the stack and as well how they interact together.</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/75/HeapAndStack-2.png" alt="" width="721" height="361" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/75/responsive/HeapAndStack-2-xs.png 300w ,https://www.finecloud.ch/media/posts/75/responsive/HeapAndStack-2-sm.png 480w ,https://www.finecloud.ch/media/posts/75/responsive/HeapAndStack-2-md.png 768w ,https://www.finecloud.ch/media/posts/75/responsive/HeapAndStack-2-lg.png 1024w ,https://www.finecloud.ch/media/posts/75/responsive/HeapAndStack-2-xl.png 1360w ,https://www.finecloud.ch/media/posts/75/responsive/HeapAndStack-2-2xl.png 1600w"></figure>
<p>The Heap is unstructured, this means that the Objects are laying somewhere around in the memory.</p>
<h2 id="mcetoc_1gna4n2a12g">Key Difference Between Stack and Heap Memory</h2>
<ul>
<li>Stack is a linear data structure whereas Heap is a hierarchical data structure.</li>
<li>Stack memory will never become fragmented whereas Heap memory can become fragmented as blocks of memory are first allocated and then freed.</li>
<li>Stack accesses local variables only while Heap allows you to access variables globally.</li>
<li>Stack variables can’t be resized whereas Heap variables can be resized.</li>
<li>Stack memory is allocated in a contiguous block whereas Heap memory is allocated in any random order.</li>
<li>Stack doesn’t require to de-allocate variables whereas in Heap de-allocation is needed.</li>
<li>Stack allocation and deallocation are done by compiler instructions whereas Heap allocation and deallocation is done by the programmer.</li>
</ul>
<h2 id="what-is-a-stack">What is a Stack?</h2>
<p>A stack is a special area of computer’s memory which stores temporary variables created by a function. In stack, variables are declared, stored and initialized during runtime.</p>
<p>It is a temporary storage memory. When the computing task is complete, the memory of the variable will be automatically erased. The stack section mostly contains methods, local variable, and reference variables.</p>
<h2 id="what-is-heap">What is Heap?</h2>
<p>The heap is a memory used by programming languages to store global variables. By default, all global variable are stored in heap memory space. It supports Dynamic memory allocation.</p>
<p>The heap is not managed automatically for you and is not as tightly managed by the CPU. It is more like a free-floating region of memory.</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>JavaScript arrays</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/javascript-arrays.html"/>
        <id>https://www.finecloud.ch/javascript-arrays.html</id>
            <category term="software development"/>
            <category term="javascript"/>
            <category term="dev"/>
            <category term="array"/>

        <updated>2023-01-17T20:13:15+01:00</updated>
            <summary>
                <![CDATA[
                    Array An array combines multiple values in a single variable Arrays are helpful if the number of values is huge or dynamic Each value of an array has a unique numerical index // Normal variables hold exactly one value const colorA = "blue"; const colorB&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gn0hhd5uff">Array</a></li>
<li><a href="#mcetoc_1gn0hhd5ufg">Creating an Array</a></li>
<li><a href="#mcetoc_1gn0hhd5ufh">Modifying an Array</a></li>
<li><a href="#mcetoc_1gn0icm1fj8">FIFO and LIFO</a></li>
<li><a href="#mcetoc_1gn0icm1fj9">Loop Through an Array</a></li>
<li><a href="#mcetoc_1gn0icm1fja">Arrays are Objects</a></li>
</ul>
</div>
<h2 id="mcetoc_1gn0hhd5uff">Array</h2>
<ul>
<li>An array combines multiple values in a single variable</li>
<li>Arrays are helpful if the number of values is huge or dynamic</li>
<li>Each value of an array has a unique numerical index</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// Normal variables hold exactly one value</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> colorA = <span class="hljs-string" style="color: #6a8759;">"blue"</span>;
<span class="hljs-keyword" style="color: #cc7832;">const</span> colorB = <span class="hljs-string" style="color: #6a8759;">"red"</span>;
<span class="hljs-keyword" style="color: #cc7832;">const</span> colorC = <span class="hljs-string" style="color: #6a8759;">"yellow"</span>;

<span class="hljs-comment" style="color: grey;">// An array variable can hold more than one value</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> colors = [<span class="hljs-string" style="color: #6a8759;">"blue"</span>, <span class="hljs-string" style="color: #6a8759;">"red"</span>, <span class="hljs-string" style="color: #6a8759;">"yellow"</span>];

<span class="hljs-comment" style="color: grey;">// Each value of the array can be accessed by a numerical index</span>
<span class="hljs-built_in">console</span>.log(colors[<span class="hljs-number" style="color: #6897bb;">0</span>]);  <span class="hljs-comment" style="color: grey;">// &gt;&gt; blue</span>
<span class="hljs-built_in">console</span>.log(colors[<span class="hljs-number" style="color: #6897bb;">1</span>]);  <span class="hljs-comment" style="color: grey;">// &gt;&gt; red</span>
<span class="hljs-built_in">console</span>.log(colors[<span class="hljs-number" style="color: #6897bb;">2</span>]);  <span class="hljs-comment" style="color: grey;">// &gt;&gt; yellow</span>
</pre>
<h2 id="mcetoc_1gn0hhd5ufg">Creating an Array</h2>
<ul>
<li>An array can be created as a literal or by using the array constructor (not recommended)</li>
<li>The values of an array may have different types</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// Array literal (recommended)</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> a = [<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>, <span class="hljs-string" style="color: #6a8759;">"four"</span>];

<span class="hljs-comment" style="color: grey;">// Array constructor (not recommended)</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> b = <span class="hljs-keyword" style="color: #cc7832;">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string" style="color: #6a8759;">"Apple"</span>, <span class="hljs-string" style="color: #6a8759;">"Mango"</span>, <span class="hljs-string" style="color: #6a8759;">"Kiwi"</span>);

<span class="hljs-keyword" style="color: #cc7832;">const</span> c = <span class="hljs-keyword" style="color: #cc7832;">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number" style="color: #6897bb;">3</span>, <span class="hljs-number" style="color: #6897bb;">4</span>);  <span class="hljs-comment" style="color: grey;">// creates [3, 4]</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> d = <span class="hljs-keyword" style="color: #cc7832;">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number" style="color: #6897bb;">3</span>);     <span class="hljs-comment" style="color: grey;">// creates [, , ] (three empty solots)</span>

<span class="hljs-comment" style="color: grey;">// Array with different types</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> e = [<span class="hljs-string" style="color: #6a8759;">"Apple"</span>, <span class="hljs-number" style="color: #6897bb;">5</span>, <span class="hljs-literal" style="color: #6897bb;">true</span>, <span class="hljs-number" style="color: #6897bb;">4.25</span>, <span class="hljs-literal" style="color: #6897bb;">null</span>];
</pre>
<h2 id="mcetoc_1gn0hhd5ufh">Modifying an Array</h2>
<ul>
<li>Elements can be modiﬁed and inserted using the index operator</li>
<li>In addition, there are many useful methods to work with arrays (see developer.mozilla.org)</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> a = [<span class="hljs-number" style="color: #6897bb;">7</span>, <span class="hljs-number" style="color: #6897bb;">8</span>, <span class="hljs-number" style="color: #6897bb;">40</span>];

<span class="hljs-comment" style="color: grey;">// Change value</span>
a[<span class="hljs-number" style="color: #6897bb;">2</span>] = <span class="hljs-number" style="color: #6897bb;">45</span>;              <span class="hljs-comment" style="color: grey;">// [7, 8, 45]</span>

<span class="hljs-comment" style="color: grey;">// Insert new values</span>
a[a.length] = <span class="hljs-number" style="color: #6897bb;">17</span>;       <span class="hljs-comment" style="color: grey;">// [7, 8, 45, 17]</span>
a[<span class="hljs-number" style="color: #6897bb;">6</span>] = <span class="hljs-number" style="color: #6897bb;">23</span>;              <span class="hljs-comment" style="color: grey;">// [7, 8, 45, 17, , , 23] (length: 7)</span>
<span class="hljs-built_in">console</span>.log(a[<span class="hljs-number" style="color: #6897bb;">5</span>]);      <span class="hljs-comment" style="color: grey;">// &gt;&gt; undefined</span>

<span class="hljs-comment" style="color: grey;">// Remove some elements</span>
a.splice(<span class="hljs-number" style="color: #6897bb;">2</span>, <span class="hljs-number" style="color: #6897bb;">4</span>);         <span class="hljs-comment" style="color: grey;">// [7, 8, 23]</span>

<span class="hljs-comment" style="color: grey;">// Use array as stack</span>
a.push(<span class="hljs-number" style="color: #6897bb;">12</span>);             <span class="hljs-comment" style="color: grey;">// [7, 8, 23, 12]</span>
<span class="hljs-built_in">console</span>.log(a.pop());   <span class="hljs-comment" style="color: grey;">// &gt;&gt; 12  (a: [7, 8, 23])</span>
</pre>
<h2 id="mcetoc_1gn0icm1fj8">FIFO and LIFO</h2>
<p>No these are not Dogs. It's about two different concepts and the main difference between a Queue and a Stack:</p>
<ul>
<li>FIFO = first in first out -&gt; that's a queue</li>
<li>LIFO = last in first out -&gt; that's a stack</li>
</ul>
<p>In JavaScript we use <code>push</code> to put's it on top of stack and <code>pop</code> to pull an element from the top of a stack </p>
<h2 id="mcetoc_1gn0icm1fj9">Loop Through an Array</h2>
<p>There are different ways to iterate over the elements of an array:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> colors = [<span class="hljs-string" style="color: #6a8759;">"blue"</span>, <span class="hljs-string" style="color: #6a8759;">"red"</span>, , <span class="hljs-string" style="color: #6a8759;">"black"</span>];

<span class="hljs-comment" style="color: grey;">// Using for loop</span>
<span class="hljs-keyword" style="color: #cc7832;">for</span> (<span class="hljs-keyword" style="color: #cc7832;">let</span> i = <span class="hljs-number" style="color: #6897bb;">0</span>; i &lt; a.length; i++) {      <span class="hljs-comment" style="color: grey;">// &gt;&gt; 0 -&gt; blue</span>
  <span class="hljs-built_in">console</span>.log(i+<span class="hljs-string" style="color: #6a8759;">" -&gt; "</span>+a[i]);         <span class="hljs-comment" style="color: grey;">// &gt;&gt; 1 -&gt; red</span>
}                                         <span class="hljs-comment" style="color: grey;">// &gt;&gt; 2 -&gt; undefined</span>
                                          <span class="hljs-comment" style="color: grey;">// &gt;&gt; 3 -&gt; black</span>

<span class="hljs-comment" style="color: grey;">// Using for...of loop</span>
<span class="hljs-keyword" style="color: #cc7832;">for</span> (<span class="hljs-keyword" style="color: #cc7832;">let</span> color <span class="hljs-keyword" style="color: #cc7832;">of</span> colors) {               <span class="hljs-comment" style="color: grey;">// &gt;&gt; blue</span>
  <span class="hljs-built_in">console</span>.log(color);                     <span class="hljs-comment" style="color: grey;">// &gt;&gt; red</span>
}                                         <span class="hljs-comment" style="color: grey;">// &gt;&gt; undefined</span>
                                          <span class="hljs-comment" style="color: grey;">// &gt;&gt; black</span>

<span class="hljs-comment" style="color: grey;">// Using forEach method (empty slots are skipped)</span>
a.forEach(<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">item, index</span>) </span>{         <span class="hljs-comment" style="color: grey;">// &gt;&gt; 0 -&gt; blue</span>
  <span class="hljs-built_in">console</span>.log(index+<span class="hljs-string" style="color: #6a8759;">" -&gt; "</span>+item);     <span class="hljs-comment" style="color: grey;">// &gt;&gt; 1 -&gt; red</span>
});                                       <span class="hljs-comment" style="color: grey;">// &gt;&gt; 3 -&gt; black</span>
</pre>
<h2 id="mcetoc_1gn0icm1fja">Arrays are Objects</h2>
<ul>
<li>Arrays in JavaScript are based on numerical indexes</li>
<li>Named indexes access properties of an object</li>
<li>Since arrays are objects, both types of indexes can be used but address different concepts</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> colors = [<span class="hljs-string" style="color: #6a8759;">"blue"</span>, <span class="hljs-string" style="color: #6a8759;">"red"</span>, <span class="hljs-string" style="color: #6a8759;">"black"</span>];
<span class="hljs-built_in">console</span>.log(colors.length);               <span class="hljs-comment" style="color: grey;">// &gt;&gt; 3</span>

<span class="hljs-comment" style="color: grey;">// Named indexes address object properties and not array values</span>
colors[<span class="hljs-string" style="color: #6a8759;">"favorite"</span>] = <span class="hljs-string" style="color: #6a8759;">"pink"</span>;
<span class="hljs-built_in">console</span>.log(colors.favorite);             <span class="hljs-comment" style="color: grey;">// &gt;&gt; pink</span>
<span class="hljs-built_in">console</span>.log(colors.length);               <span class="hljs-comment" style="color: grey;">// &gt;&gt; 3 (still!)</span>

colors.forEach(<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">item, index</span>) </span>{    <span class="hljs-comment" style="color: grey;">// &gt;&gt; 0 -&gt; blue</span>
  <span class="hljs-built_in">console</span>.log(index+<span class="hljs-string" style="color: #6a8759;">" -&gt; "</span>+item);     <span class="hljs-comment" style="color: grey;">// &gt;&gt; 1 -&gt; red</span>
});                                       <span class="hljs-comment" style="color: grey;">// &gt;&gt; 2 -&gt; black</span>

<span class="hljs-keyword" style="color: #cc7832;">for</span> (<span class="hljs-keyword" style="color: #cc7832;">let</span> i <span class="hljs-keyword" style="color: #cc7832;">in</span> colors) {                   <span class="hljs-comment" style="color: grey;">// &gt;&gt; 0 -&gt; blue</span>
  <span class="hljs-built_in">console</span>.log(i+<span class="hljs-string" style="color: #6a8759;">" -&gt; "</span>+colors[i]);    <span class="hljs-comment" style="color: grey;">// &gt;&gt; 1 -&gt; red</span>
}                                         <span class="hljs-comment" style="color: grey;">// &gt;&gt; 2 -&gt; black</span>
                                          <span class="hljs-comment" style="color: grey;">// &gt;&gt; favorite -&gt; pink</span>
</pre>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>JavaScript functions</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/javascript-functions.html"/>
        <id>https://www.finecloud.ch/javascript-functions.html</id>
            <category term="software development"/>
            <category term="javascript"/>
            <category term="dev"/>

        <updated>2023-01-17T19:41:43+01:00</updated>
            <summary>
                <![CDATA[
                    Function Expression A function expression starts with the keyword function followed by the function arguments in parentheses and the function body in curly braces: const square = function(x) { return x * x; }; console.log(square(4)); // &gt;&gt; 16 Function Scope Each function deﬁnes a scope&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gn00tl6e8l">Function Expression</a></li>
<li><a href="#mcetoc_1gn018lrv9b">Function Scope</a></li>
<li><a href="#mcetoc_1gn018lrv9c">Lexical Scope</a></li>
<li><a href="#mcetoc_1gn02tcrha3">Nested Scope</a></li>
<li><a href="#mcetoc_1gn02tcrha4">Functions are Objects</a></li>
<li><a href="#mcetoc_1gn036mefbt">Closure</a></li>
<li><a href="#mcetoc_1gn036mefbu">Function Declaration</a></li>
<li><a href="#mcetoc_1gn0ggrqvcq">Function Declarations are Hoisted</a></li>
</ul>
</div>
<h2 id="mcetoc_1gn00tl6e8l">Function Expression</h2>
<p>A function expression starts with the keyword function followed by the function arguments in parentheses and the function body in curly braces:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> square = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">x</span>) </span>{
  <span class="hljs-keyword" style="color: #cc7832;">return</span> x * x;
};

<span class="hljs-built_in">console</span>.log(square(<span class="hljs-number" style="color: #6897bb;">4</span>));  <span class="hljs-comment" style="color: grey;">// &gt;&gt; 16</span>
</pre>
<h2 id="mcetoc_1gn018lrv9b">Function Scope</h2>
<ul>
<li>Each function deﬁnes a scope</li>
<li>Local variables of a function are not visible outside of the function</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> a = <span class="hljs-string" style="color: #6a8759;">"Hello "</span>;          <span class="hljs-comment" style="color: grey;">// a has global scope</span>

<span class="hljs-keyword" style="color: #cc7832;">const</span> f = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">b</span>) </span>{      <span class="hljs-comment" style="color: grey;">// b is local to f</span>
  <span class="hljs-keyword" style="color: #cc7832;">const</span> c = <span class="hljs-string" style="color: #6a8759;">"!"</span>;             <span class="hljs-comment" style="color: grey;">// c is local to f</span>
  <span class="hljs-built_in">console</span>.log(a+b+c);
};

f(<span class="hljs-string" style="color: #6a8759;">"World"</span>);                 <span class="hljs-comment" style="color: grey;">// &gt;&gt; Hello World!</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">typeof</span> b);      <span class="hljs-comment" style="color: grey;">// &gt;&gt; undefined</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">typeof</span> c);      <span class="hljs-comment" style="color: grey;">// &gt;&gt; undefined</span></pre>
<h2 id="mcetoc_1gn018lrv9c">Lexical Scope</h2>
<p>Variables have lexical (static) scope, i.e., the scope of a variable is determined by the code context of the variable:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> a = <span class="hljs-number" style="color: #6897bb;">2</span>;

<span class="hljs-keyword" style="color: #cc7832;">const</span> f = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">b</span>) </span>{
  <span class="hljs-keyword" style="color: #cc7832;">return</span> a+b;
};

<span class="hljs-built_in">console</span>.log(f(<span class="hljs-number" style="color: #6897bb;">7</span>));      <span class="hljs-comment" style="color: grey;">// &gt;&gt; 9</span>

<span class="hljs-keyword" style="color: #cc7832;">const</span> g = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{
  <span class="hljs-keyword" style="color: #cc7832;">const</span> a = <span class="hljs-number" style="color: #6897bb;">5</span>;          <span class="hljs-comment" style="color: grey;">// a is hiding the global variable inside g</span>
  <span class="hljs-keyword" style="color: #cc7832;">return</span> f(<span class="hljs-number" style="color: #6897bb;">7</span>);          <span class="hljs-comment" style="color: grey;">// but the global variable is used inside f</span>
};
<span class="hljs-built_in">console</span>.log(g());       <span class="hljs-comment" style="color: grey;">// &gt;&gt; 9</span>
</pre>
<h2 id="mcetoc_1gn02tcrha3">Nested Scope</h2>
<ul>
<li>Blocks and functions can be created inside other blocks and functions</li>
<li>Each local scope can access the variables from the surrounding scopes</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> a = <span class="hljs-number" style="color: #6897bb;">2</span>;

<span class="hljs-keyword" style="color: #cc7832;">const</span> f = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">b</span>) </span>{
  <span class="hljs-keyword" style="color: #cc7832;">let</span> x = <span class="hljs-number" style="color: #6897bb;">1</span>;

  <span class="hljs-keyword" style="color: #cc7832;">const</span> g = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{    <span class="hljs-comment" style="color: grey;">// g has access to the local variables of f and to</span>
    x *= a;                 <span class="hljs-comment" style="color: grey;">// the variables of the global scope</span>
  };

  <span class="hljs-keyword" style="color: #cc7832;">while</span> (x &lt; b) g();
  <span class="hljs-keyword" style="color: #cc7832;">return</span> x;
};
<span class="hljs-built_in">console</span>.log(f(<span class="hljs-number" style="color: #6897bb;">100</span>))        <span class="hljs-comment" style="color: grey;">// &gt;&gt; 128</span>
</pre>
<h2 id="mcetoc_1gn02tcrha4">Functions are Objects</h2>
<p>Functions are objects, hence they can be used as arguments and return values of other functions (higher-order functions)</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// Function as argument</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> repeat = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">action, n</span>) </span>{
  <span class="hljs-keyword" style="color: #cc7832;">for</span> (<span class="hljs-keyword" style="color: #cc7832;">let</span> i = <span class="hljs-number" style="color: #6897bb;">0</span>; i &lt; n; i++) action();
};

<span class="hljs-keyword" style="color: #cc7832;">const</span> sayHello = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"Hello"</span>);
}
repeat(sayHello, <span class="hljs-number" style="color: #6897bb;">3</span>);                   <span class="hljs-comment" style="color: grey;">// &gt;&gt; Hello Hello Hello</span>

<span class="hljs-comment" style="color: grey;">// Function as return value</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> formatter = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">prefix, suffix</span>) </span>{
  <span class="hljs-keyword" style="color: #cc7832;">return</span> <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">s</span>) </span>{
    <span class="hljs-keyword" style="color: #cc7832;">return</span> prefix+s+suffix;
  }
};

<span class="hljs-keyword" style="color: #cc7832;">const</span> format = formatter(<span class="hljs-string" style="color: #6a8759;">"'"</span>, <span class="hljs-string" style="color: #6a8759;">"!'"</span>);
<span class="hljs-built_in">console</span>.log(format(<span class="hljs-string" style="color: #6a8759;">"Hello World"</span>));    <span class="hljs-comment" style="color: grey;">// &gt;&gt; 'Hello World!'</span>
</pre>
<h2 id="mcetoc_1gn036mefbt">Closure</h2>
<p>A function that references a speciﬁc instance of a local variable in an enclosing function is called a closure:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> counter = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>(<span class="hljs-params">init</span>) </span>{
  <span class="hljs-keyword" style="color: #cc7832;">let</span> val = <span class="hljs-built_in">Number</span>(init);
  <span class="hljs-keyword" style="color: #cc7832;">return</span> <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{
    <span class="hljs-keyword" style="color: #cc7832;">return</span> ++val;
  };
};

<span class="hljs-keyword" style="color: #cc7832;">const</span> countA = counter(<span class="hljs-number" style="color: #6897bb;">12</span>);    <span class="hljs-comment" style="color: grey;">// countA references a specific instance of val</span>
<span class="hljs-built_in">console</span>.log(countA());         <span class="hljs-comment" style="color: grey;">// &gt;&gt; 13</span>
<span class="hljs-built_in">console</span>.log(countA());         <span class="hljs-comment" style="color: grey;">// &gt;&gt; 14</span>

<span class="hljs-keyword" style="color: #cc7832;">const</span> countB = counter(<span class="hljs-string" style="color: #6a8759;">"6"</span>);   <span class="hljs-comment" style="color: grey;">// countB references another instance of val</span>
<span class="hljs-built_in">console</span>.log(countB());         <span class="hljs-comment" style="color: grey;">// &gt;&gt; 7</span>
<span class="hljs-built_in">console</span>.log(countA());         <span class="hljs-comment" style="color: grey;">// &gt;&gt; 15</span>
</pre>
<h2 id="mcetoc_1gn036mefbu">Function Declaration</h2>
<p>A function declaration deﬁnes a variable which points to the given function:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// Declare f to be a function</span>
<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">f</span>() </span>{
  <span class="hljs-keyword" style="color: #cc7832;">return</span> <span class="hljs-string" style="color: #6a8759;">"I'm a chicken"</span>;
}

<span class="hljs-built_in">console</span>.log(f());      <span class="hljs-comment" style="color: grey;">// &gt;&gt; I'm a chicken</span>

<span class="hljs-comment" style="color: grey;">// The variable f can be reassigned</span>
f = <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span>() </span>{
  <span class="hljs-keyword" style="color: #cc7832;">return</span> <span class="hljs-string" style="color: #6a8759;">"I'm a fox"</span>;
}

<span class="hljs-built_in">console</span>.log(f());      <span class="hljs-comment" style="color: grey;">// &gt;&gt; I'm a fox</span>
</pre>
<h2 id="mcetoc_1gn0ggrqvcq">Function Declarations are Hoisted</h2>
<p>Function declarations are not part of the regular top-to-bottom ﬂow of control:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// The function f can be used before it is declared</span>
<span class="hljs-built_in">console</span>.log(f(<span class="hljs-number" style="color: #6897bb;">4</span>));     <span class="hljs-comment" style="color: grey;">// &gt;&gt; 48</span>

<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">f</span>(<span class="hljs-params">a</span>) </span>{
  <span class="hljs-keyword" style="color: #cc7832;">return</span> g() * a;
};

<span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">function</span> <span class="hljs-title" style="color: #ffc66d;">g</span>() </span>{
  <span class="hljs-keyword" style="color: #cc7832;">return</span> <span class="hljs-number" style="color: #6897bb;">12</span>;
}
</pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>JavaScript basics</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/javascript-basics.html"/>
        <id>https://www.finecloud.ch/javascript-basics.html</id>
            <category term="software development"/>
            <category term="javascript"/>
            <category term="dev"/>

        <updated>2023-01-17T19:50:27+01:00</updated>
            <summary>
                <![CDATA[
                    What JavaScript is A scripting language originally designed for web browsers Object-oriented, however prototype-based and not class-based Supporting ﬁrst-class functions A multi-paradigm language, supports imperative, object-oriented and functional programming style Untyped Moving from an interpreted language to just-in-time compilation Nowadays used for server-side programming too&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gmvv0co91">What JavaScript is</a></li>
<li><a href="#mcetoc_1gmvve8qg1r">JavaScript and the Browser</a></li>
<li><a href="#mcetoc_1gmvve8qg1s">Node.js</a></li>
<li><a href="#mcetoc_1gn00enet3r">Variable Declaration and Value Assignment</a></li>
<li><a href="#mcetoc_1gn00enet3s">JavaScript is untyped</a></li>
<li><a href="#mcetoc_1gn00tl6e8i">Block Scope</a></li>
<li><a href="#mcetoc_1gn00tl6e8j">Equality and Identicalness</a></li>
</ul>
</div>
<h2 id="mcetoc_1gmvv0co91">What JavaScript is</h2>
<ul>
<li>A scripting language originally designed for web browsers</li>
<li>Object-oriented, however prototype-based and not class-based</li>
<li>Supporting ﬁrst-class functions</li>
<li>A multi-paradigm language, supports imperative, object-oriented and functional programming style</li>
<li>Untyped</li>
<li>Moving from an interpreted language to just-in-time compilation</li>
<li>Nowadays used for server-side programming too</li>
<li>Relying on a host/run-time environment (web browser, Node.js)</li>
</ul>
<h2 id="mcetoc_1gmvve8qg1r">JavaScript and the Browser</h2>
<ul>
<li>The browser is the most common host environment</li>
<li>It provides a graphical user interface (via DOM)</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="xml"><span class="hljs-meta" style="color: #bbb529;">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">title</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">title</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">script</span>&gt;</span><span class="javascript">
<span class="hljs-comment" style="color: grey;">// Output to the console</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-string" style="color: #6a8759;">"Hello world"</span>);
</span><span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">html</span>&gt;<br></span></span></pre>
<h2 id="mcetoc_1gmvve8qg1s">Node.js</h2>
<ul>
<li>Node.js is a server-side host environment</li>
<li>Initially conceived to facilitate asynchronous I/O</li>
</ul>
<pre class="hljs"><span class="hljs-built_in">let</span> x = Math.<span class="hljs-built_in">floor</span>((Math.<span class="hljs-built_in">random</span>() * <span class="hljs-number">10</span>) + <span class="hljs-number">1</span>);
console.<span class="hljs-built_in">log</span>(<span class="hljs-string">"Your random number is: "</span> + x);</pre>
<p>this can be executed with:</p>
<pre>$ node example.js<br>Your random number is: 42</pre>
<h2 id="mcetoc_1gn00enet3r">Variable Declaration and Value Assignment</h2>
<ul>
<li>Variables are declared using the let keyword or const if no reassignment is needed</li>
<li>The old var keyword shouldn’t be used anymore</li>
</ul>
<blockquote>
<p>Tip: always use const. Only need let if you really need to change the variable later on</p>
</blockquote>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">// Declare a variable</span>
<span class="hljs-keyword" style="color: #cc7832;">let</span> x;
<span class="hljs-built_in">console</span>.log(x); <span class="hljs-comment" style="color: grey;">// &gt;&gt; undefined</span>
<span class="hljs-comment" style="color: grey;">// Assign a value to a variable</span>
x = <span class="hljs-number" style="color: #6897bb;">42</span>;
<span class="hljs-built_in">console</span>.log(x); <span class="hljs-comment" style="color: grey;">// &gt;&gt; 42</span>
<span class="hljs-comment" style="color: grey;">// Declare and assign in one stroke</span>
<span class="hljs-keyword" style="color: #cc7832;">let</span> y = 2;
<span class="hljs-comment" style="color: grey;">// Variables declared using ’let’ can be reassigned</span>
y = 1;
<span class="hljs-comment" style="color: grey;">// Variables declared using ’const’ cannot be reassigned</span>
<span class="hljs-keyword" style="color: #cc7832;">const</span> z = 99;
z = <span class="hljs-number" style="color: #6897bb;">16</span>; <span class="hljs-comment" style="color: grey;">// ERROR</span></pre>
<h2 id="mcetoc_1gn00enet3s">JavaScript is untyped</h2>
<p>So JavaScript has no Types? Well it has, but not before runtime. JavaScript is dynamically typed, i.e., the type of a variable is determined at runtime and may change during program execution.</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">let</span> x = <span class="hljs-number" style="color: #6897bb;">12</span>;
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">typeof</span> x);  <span class="hljs-comment" style="color: grey;">// &gt;&gt; number</span>

<span class="hljs-comment" style="color: grey;">// Values of different types can be assigned to a variable</span>
x = <span class="hljs-string" style="color: #6a8759;">"Hello World"</span>;
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">typeof</span> x);  <span class="hljs-comment" style="color: grey;">// &gt;&gt; string</span>

<span class="hljs-comment" style="color: grey;">// Automatic type conversion</span>
<span class="hljs-keyword" style="color: #cc7832;">let</span> y = <span class="hljs-number" style="color: #6897bb;">12</span>+<span class="hljs-string" style="color: #6a8759;">"10"</span>;
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">typeof</span> y);  <span class="hljs-comment" style="color: grey;">// &gt;&gt; string ('1210')</span>
y = <span class="hljs-number" style="color: #6897bb;">12</span>-<span class="hljs-string" style="color: #6a8759;">"10"</span>;
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">typeof</span> y);  <span class="hljs-comment" style="color: grey;">// &gt;&gt; number (2)</span>

<span class="hljs-comment" style="color: grey;">// Explicit type conversion with Number(), String() and Boolean()</span>
<span class="hljs-keyword" style="color: #cc7832;">let</span> z = <span class="hljs-number" style="color: #6897bb;">12</span>+<span class="hljs-built_in">Number</span>(<span class="hljs-string" style="color: #6a8759;">"10"</span>);
<span class="hljs-built_in">console</span>.log(<span class="hljs-keyword" style="color: #cc7832;">typeof</span> z);  <span class="hljs-comment" style="color: grey;">// &gt;&gt; number</span>
<span class="hljs-built_in">console</span>.log(z);         <span class="hljs-comment" style="color: grey;">// &gt;&gt; 22</span></pre>
<h2 id="mcetoc_1gn00tl6e8i">Block Scope</h2>
<ul>
<li>Variables declared with let and const are block-scoped</li>
<li>Before ES6, JavaScript had no block scope and hence variables declared with var are not block-scoped</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;">{
    <span class="hljs-keyword" style="color: #cc7832;">let</span> x = <span class="hljs-number" style="color: #6897bb;">12</span>;
    <span class="hljs-keyword" style="color: #cc7832;">const</span> y = <span class="hljs-number" style="color: #6897bb;">13</span>;
}
<span class="hljs-comment" style="color: grey;">// x and y cannot be used here</span>

{
    <span class="hljs-keyword" style="color: #cc7832;">var</span> z = <span class="hljs-number" style="color: #6897bb;">14</span>;
}
<span class="hljs-built_in">console</span>.log(z);  <span class="hljs-comment" style="color: grey;">// &gt;&gt; 14</span>
</pre>
<h2 id="mcetoc_1gn00tl6e8j">Equality and Identicalness</h2>
<ul>
<li>== and != compare only values (equality)</li>
<li>=== and !== compare values and types (identicalness)</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">const</span> a = <span class="hljs-number" style="color: #6897bb;">7</span>;
<span class="hljs-keyword" style="color: #cc7832;">const</span> b = <span class="hljs-string" style="color: #6a8759;">"7"</span>;
<span class="hljs-comment" style="color: grey;">// a and b are equivalent...</span>
<span class="hljs-built_in">console</span>.log(a == b);                          <span class="hljs-comment" style="color: grey;">// &gt;&gt; true</span>
<span class="hljs-comment" style="color: grey;">// ... but not identical (number vs. string)</span>
<span class="hljs-built_in">console</span>.log(a === b);                         <span class="hljs-comment" style="color: grey;">// &gt;&gt; false</span>
<span class="hljs-built_in">console</span>.log(a === <span class="hljs-built_in">parseInt</span>(b));               <span class="hljs-comment" style="color: grey;">// &gt;&gt; true</span>


<span class="hljs-keyword" style="color: #cc7832;">const</span> x = <span class="hljs-number" style="color: #6897bb;">0</span>;
<span class="hljs-keyword" style="color: #cc7832;">const</span> y = <span class="hljs-literal" style="color: #6897bb;">false</span>;
<span class="hljs-comment" style="color: grey;">// x and y are equivalent...</span>
<span class="hljs-built_in">console</span>.log(x == y);                          <span class="hljs-comment" style="color: grey;">// &gt;&gt; true</span>
<span class="hljs-comment" style="color: grey;">// ...but not identical (number vs. boolean)</span>
<span class="hljs-built_in">console</span>.log(x === y);                         <span class="hljs-comment" style="color: grey;">// &gt;&gt; false</span>
</pre>
<h2>Strict mode</h2>
<p>The <code class="w3-codespan">"use strict"</code> directive was new in ECMAScript version 5. It is not a statement, but a literal expression, ignored by earlier versions of JavaScript. The purpose of <code class="w3-codespan">"use strict"</code> is to indicate that the code should be executed in "strict mode". With strict mode, you can not, for example, use undeclared variables. All modern browsers support "use strict". The numbers in the table specify the first browser version that fully supports the directive. <strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit;">You can use strict mode in all your programs. It helps you to write cleaner code, like preventing you from using undeclared variables.</span></strong></p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Deploy your Java Web App to Heroku</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/deploy-your-java-web-app-to-heroku.html"/>
        <id>https://www.finecloud.ch/deploy-your-java-web-app-to-heroku.html</id>
            <category term="tools"/>
            <category term="tomcat"/>
            <category term="software development"/>
            <category term="shell"/>
            <category term="servlet"/>
            <category term="linux"/>
            <category term="java"/>
            <category term="heroku"/>
            <category term="git"/>
            <category term="dev"/>

        <updated>2022-12-23T06:30:35+01:00</updated>
            <summary>
                <![CDATA[
                    Requirements and Preparation Unfortunately Heroku currently only Supports Tomcat version 9.x. As a consequence you're not able to use the Java Jakarta Servlets, since they are only supported with Tomcat version 10.x. As a consequence you need to replace all your Jakarta Servlet imports with&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gkum5rlmdf">Requirements and Preparation</a>
<ul>
<li><a href="#mcetoc_1gkum5rlmdg">Build the App</a></li>
<li><a href="#mcetoc_1gkum5rlmdh">Deploy to Heroku</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1gkum5rlmdf">Requirements and Preparation</h2>
<p>Unfortunately Heroku currently only Supports Tomcat version 9.x. As a consequence you're not able to use the Java Jakarta Servlets, since they are only supported with Tomcat version 10.x.<br><br>As a consequence you need to replace all your Jakarta Servlet imports with the "old-school" Javax Serverlets:</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #f0f0f0; color: #444444;">find . -type f -name <span class="hljs-string" style="color: #880000;">"*.java"</span> -print0 | xargs -0 sed -i <span class="hljs-string" style="color: #880000;">''</span> <span class="hljs-_">-e</span> <span class="hljs-string" style="color: #880000;">'s/import jakarta/import javax/g'</span></pre>
<p><br>Delete those dependencies from your pom.xml:</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #f0f0f0; color: #444444;"><span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">groupId</span>&gt;</span>jakarta.servlet<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">groupId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">artifactId</span>&gt;</span>jakarta.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">version</span>&gt;</span>${servlet.version}<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">version</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">scope</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">groupId</span>&gt;</span>org.glassfish.web<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">groupId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">version</span>&gt;</span>${jstl.version}<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">dependency</span>&gt;</span></pre>
<p><br>Add those dependencies to your pom.xml:</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #f0f0f0; color: #444444;"><span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">groupId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">groupId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">dependency</span>&gt;</span></pre>
<p><br>we also need the Heroku web-runner packet in the pom.xml:</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #f0f0f0; color: #444444;"><span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">plugin</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">groupId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">artifactId</span>&gt;</span>maven-dependency-plugin<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">version</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">executions</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">execution</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">phase</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">goals</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">goal</span>&gt;</span>copy<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">goal</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">goals</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">configuration</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">artifactItems</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">artifactItem</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">groupId</span>&gt;</span>com.heroku<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">groupId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">artifactId</span>&gt;</span>webapp-runner<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">version</span>&gt;</span>9.0.69.1<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">version</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">destFileName</span>&gt;</span>webapp-runner.jar<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">destFileName</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">artifactItem</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">artifactItems</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">configuration</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">execution</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">executions</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="font-weight: bold;">plugin</span>&gt;</span></pre>
<p><br>let's also change the Jakarta xml header on the web.xml file from:</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #f0f0f0; color: #444444;"><span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">web-app</span> <span class="hljs-attr">version</span>=<span class="hljs-string" style="color: #880000;">"5.0"</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string" style="color: #880000;">"https://jakarta.ee/xml/ns/jakartaee"</span>
<span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string" style="color: #880000;">"http://www.w3.org/2001/XMLSchema-instance"</span>
<span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string" style="color: #880000;">"https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd"</span>&gt;</span>
</pre>
<p>to:</p>
<pre class="hljs" style="display: block; overflow-x: auto; padding: 0.5em; background: #f0f0f0; color: #444444;"><span class="hljs-tag">&lt;<span class="hljs-name" style="font-weight: bold;">web-app</span> <span class="hljs-attr">version</span>=<span class="hljs-string" style="color: #880000;">"4.0"</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string" style="color: #880000;">"http://xmlns.jcp.org/xml/ns/javaee"</span>
<span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string" style="color: #880000;">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string" style="color: #880000;">"http://xmlns.jcp.org/xml/ns/javaee
http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>&gt;</span></pre>
<h3 id="mcetoc_1gkum5rlmdg"><br>Build the App</h3>
<p>Browse to the root folder of your Java Application:<br><code>mvn clean package</code><br><br>next run:<br><code>java -jar target/dependency/webapp-runner.jar target/*.war</code><br><br>That’s it. Your application should start up on port 8080. If this works as expected, your ready to deploy your App to Heroku.</p>
<h3 id="mcetoc_1gkum5rlmdh">Deploy to Heroku</h3>
<p>Create a Procfile in the root folder of your Application:<br><code>echo 'web: java $JAVA_OPTS -jar target/dependency/webapp-runner.jar --port $PORT target/*.war' &gt; Procfile</code></p>
<p>We also need to declare the Java version to Heroku:<br><code>echo 'java.runtime.version=17' &gt; system.properties</code><br><br></p>
<p>Commit your changes to Git:<br><br><code>git init</code><br><code>git add .</code><br><code>git commit -m "Ready to deploy"</code><br><br><br>Create the app and deploy your code:<br><br><code>heroku create</code><code>--region eu</code><code></code><br><code>git push heroku main</code><br><br><br>Your web app should now be up and running on Heroku. Open it in your browser with:<br><br><code>heroku open</code><br><br></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Take care of your SSH identities</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/take-care-of-your-ssh-keys.html"/>
        <id>https://www.finecloud.ch/take-care-of-your-ssh-keys.html</id>
            <category term="tools"/>
            <category term="ssh"/>
            <category term="shell"/>
            <category term="security"/>
            <category term="network"/>
            <category term="linux"/>
            <category term="bash"/>

        <updated>2022-11-22T15:37:51+01:00</updated>
            <summary>
                <![CDATA[
                    Did you know that your ssh Client sends the server all your public keys, one by one, until the server accepts one, when you try to authenticate via public key? Don't believe me? Try it out yourself: ssh whoami.filippo.io Someone could use this to find&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Did you know that your ssh Client sends the server all your public keys, one by one, until the server accepts one, when you try to authenticate via public key?</p>
<p>Don't believe me? Try it out yourself: </p>
<pre><code>ssh whoami.filippo.io</code></pre>
<p>Someone could use this to find out which public keys you have installed on your Client. You don't what this, don't you? So how can we avoid the leak of our Clients Public Keys? There is an easy fix, just add this at the end of your <code>~/.ssh/config</code> file:</p>
<pre><code>Host *</code><br><code>    PubkeyAuthentication no</code><br><code>    IdentitiesOnly yes</code></pre>
<p>Also make sure you don't use just one key for all connections. I hope don't use one password for all your logins - so why should you use one key for all your logins?</p>
<p>It is recommended to use one specific key for each host:</p>
<pre><code>Host github.com</code><br><code>    PubkeyAuthentication yes</code><br><code>    IdentityFile ~/.ssh/github_id_ed25519</code></pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Backup OPNsense to Nextcloud</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/opnsense-backup-to-nextcloud.html"/>
        <id>https://www.finecloud.ch/opnsense-backup-to-nextcloud.html</id>
            <category term="tools"/>
            <category term="opnsense"/>
            <category term="nextcloud"/>
            <category term="network"/>
            <category term="linux"/>
            <category term="firewall"/>
            <category term="backup"/>

        <updated>2022-11-03T09:49:00+01:00</updated>
            <summary>
                <![CDATA[
                    What is OPNsense? OPNsense® is an open source, easy-to-use and easy-to-build FreeBSD based firewall and routing platform. OPNsense includes most of the features available in expensive commercial firewalls, and more in many cases. It brings the rich feature set of commercial offerings with the benefits&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1ggu9idgo5i">What is OPNsense?</a></li>
<li><a href="#mcetoc_1ggu9idgo5j">Why OPNsense?</a></li>
<li><a href="#mcetoc_1ggu9idgo5k">Backup your OPNsense configuration to your Nextcloud</a>
<ul>
<li><a href="#mcetoc_1ggu9idgo5l">1. Create a new user</a></li>
<li><a href="#mcetoc_1ggu9idgo5m">2. Create an Access Token</a></li>
<li><a href="#mcetoc_1ggu9idgo5n">3. Install Nextcloud Backup Plugin</a></li>
<li><a href="#mcetoc_1ggu9idgo5o">4. Connect OPNsense with Nextcloud</a></li>
<li><a href="#mcetoc_1ggu9idgo5p">5. Verify the Configuration Upload</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1ggu9idgo5i">What is OPNsense?</h2>
<p><a class="reference external" href="https://opnsense.org">OPNsense®</a> is an open source, easy-to-use and easy-to-build FreeBSD based firewall and routing platform.</p>
<p>OPNsense includes most of the features available in expensive commercial firewalls, and more in many cases. It brings the rich feature set of commercial offerings with the benefits of open and verifiable sources.</p>
<h2 id="mcetoc_1ggu9idgo5j">Why OPNsense?</h2>
<p>The feature set of OPNsense includes high-end features such as forward caching proxy, traffic shaping, intrusion detection and easy OpenVPN client setup. The latest release is based on a recent FreeBSD for long-term support and uses a newly developed MVC-framework based on Phalcon. OPNsense’s focus on security brings unique features such as the option to use LibreSSL instead of OpenSSL (selectable in the GUI).<br><br>The robust and reliable update mechanism gives OPNsense the ability to provide important security updates in a timely fashion.</p>
<h2 id="mcetoc_1ggu9idgo5k">Backup your OPNsense configuration to your Nextcloud</h2>
<p>In OPNsense you can backup your configuration directly and automatically to Nextcloud, using the backup feature. Every backup will be encrypted with the same algorithm used in the manual backup so it’s quite easy to restore to a new installed machine.</p>
<p>After set-up, the backup feature will run a first backup of the OPNsense configuration file. Then, if the configuration is subsequently changed, a new backup will be run. Only one backup is run per day after configuration changes.</p>
<div id="step-create-a-new-user" class="section">
<h3 id="mcetoc_1ggu9idgo5l">1. Create a new user<a class="headerlink" href="https://docs.opnsense.org/manual/how-tos/cloud_backup.html#step-create-a-new-user" title="Permalink to this headline"></a></h3>
<p>Click on the user icon top right and click “Users”. In the new page, enter an username and a password into the boxes and click create to create a new user.</p>
</div>
<div id="step-create-an-access-token" class="section">
<h3 id="mcetoc_1ggu9idgo5m">2. Create an Access Token<a class="headerlink" href="https://docs.opnsense.org/manual/how-tos/cloud_backup.html#step-create-an-access-token" title="Permalink to this headline"></a></h3>
<figure class="post__image">Close the modal dialog and remove the default files. Then open the Settings menu (also in the menu top right). Switch to security and generate a App password.
<img loading="lazy"  src="https://www.finecloud.ch/media/posts/69/Screenshot-2022-11-03-at-09.19.23.png" alt="" width="931" height="933" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.19.23-xs.png 300w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.19.23-sm.png 480w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.19.23-md.png 768w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.19.23-lg.png 1024w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.19.23-xl.png 1360w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.19.23-2xl.png 1600w"></figure><br>
<p>Copy and store the generated password.</p>
</div>
<div id="step-connect-opnsense-with-nextcloud" class="section">
<h3 id="mcetoc_1ggu9idgo5n">3. Install Nextcloud Backup Plugin</h3>
<p>Go to <em><span class="menuselection">System ‣ Firmware ‣ Plugins</span></em> and install the <em>os-nextcloud-backup</em> plugin</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/69/Screenshot-2022-11-03-at-09.24.39.png" alt="" width="1915" height="537" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.24.39-xs.png 300w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.24.39-sm.png 480w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.24.39-md.png 768w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.24.39-lg.png 1024w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.24.39-xl.png 1360w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.24.39-2xl.png 1600w"></figure>
<h3 id="mcetoc_1ggu9idgo5o">4. Connect OPNsense with Nextcloud<a class="headerlink" href="https://docs.opnsense.org/manual/how-tos/cloud_backup.html#step-connect-opnsense-with-nextcloud" title="Permalink to this headline"></a></h3>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/69/Screenshot-2022-11-03-at-09.32.01.png" alt="" width="727" height="432" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.32.01-xs.png 300w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.32.01-sm.png 480w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.32.01-md.png 768w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.32.01-lg.png 1024w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.32.01-xl.png 1360w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.32.01-2xl.png 1600w"></figure><br>
<p>Scroll to the Nextcloud Section in <em><span class="menuselection">System ‣ Configuration ‣ Backups</span></em> and enter the following values:</p>
<div class="wy-table-responsive">
<table class="docutils align-default"><colgroup><col><col></colgroup>
<tbody>
<tr class="row-odd">
<td>
<p>Enable</p>
</td>
<td>
<p>checked</p>
</td>
</tr>
<tr class="row-even">
<td>
<p>URL</p>
</td>
<td>
<p>Base URL of your Nextcloud installation like <a class="reference external" href="https://cloud.example.com">https://cloud.example.com</a></p>
</td>
</tr>
<tr class="row-odd">
<td>
<p>User</p>
</td>
<td>
<p>your choosen username</p>
</td>
</tr>
<tr class="row-even">
<td>
<p>Password</p>
</td>
<td>
<p>paste your app password from step 2</p>
</td>
</tr>
<tr>
<td>
<p>Encryption Passowrd</p>
</td>
<td>
<p>define a Password to encrypt the config file</p>
</td>
</tr>
<tr class="row-odd">
<td>
<p>Backup Directory</p>
</td>
<td>
<p>a name consisting of alphanumeric characters (keep default)</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="step-verify-the-configuration-upload" class="section">
<h3 id="mcetoc_1ggu9idgo5p">5. Verify the Configuration Upload<a class="headerlink" href="https://docs.opnsense.org/manual/how-tos/cloud_backup.html#step-verify-the-configuration-upload" title="Permalink to this headline"></a></h3>
<p>When everything worked, you will see the newly created directory after saving the settings:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/69/Screenshot-2022-11-03-at-09.38.41.png" alt="" width="292" height="114" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.38.41-xs.png 300w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.38.41-sm.png 480w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.38.41-md.png 768w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.38.41-lg.png 1024w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.38.41-xl.png 1360w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.38.41-2xl.png 1600w"></figure>
<figure class="post__image">If you open it, you will see at lease a single backed up configuration file:
<img loading="lazy"  src="https://www.finecloud.ch/media/posts/69/Screenshot-2022-11-03-at-09.39.22.png" alt="" width="819" height="351" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.39.22-xs.png 300w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.39.22-sm.png 480w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.39.22-md.png 768w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.39.22-lg.png 1024w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.39.22-xl.png 1360w ,https://www.finecloud.ch/media/posts/69/responsive/Screenshot-2022-11-03-at-09.39.22-2xl.png 1600w"></figure><br>
<p id="references" class="rubric"></p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Maven getting started</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/maven-getting-started.html"/>
        <id>https://www.finecloud.ch/maven-getting-started.html</id>
            <category term="software development"/>
            <category term="maven"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-11-03T16:59:36+01:00</updated>
            <summary>
                <![CDATA[
                    What is Maven? Declarative build management tool for automated builds Standardized directory structure Declarative dependency management Works with an XML control file (POM - Project Object Model) Open source, written in Java, for Java projects Pure command line tool IDEs offer integration Why Maven? Uniform&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1ggd2611qj0">What is Maven?</a></li>
<li><a href="#mcetoc_1ggd2611qj1">Why Maven?</a></li>
<li><a href="#mcetoc_1ggd2611qj2">Components</a></li>
<li><a href="#mcetoc_1ggd2611qj3">Build lifecycle</a></li>
<li><a href="#mcetoc_1ggd2611qj4">POM (Project Object Model) file</a></li>
<li><a href="#mcetoc_1ggd2611qj5">Project coordinates</a></li>
<li><a href="#mcetoc_1ggd443kjlt">Packaging</a></li>
<li><a href="#mcetoc_1ggd2611qj6">Naming conventions</a>
<ul>
<li><a href="#mcetoc_1ggd2611qj7">groupId</a></li>
<li><a href="#mcetoc_1ggd2611qj8">artifactId</a></li>
</ul>
</li>
<li><a href="#mcetoc_1ggd443kjlu">Standard directory layout</a></li>
<li><a href="#mcetoc_1ggd8kpb6ob">Dependencies</a>
<ul>
<li><a href="#mcetoc_1ggd8kpb6oc">Scope</a></li>
<li><a href="#mcetoc_1ggd9jq2mqi">Transitive dependencies</a></li>
</ul>
</li>
<li><a href="#mcetoc_1ggd9jq2mqj">Project inheritance</a></li>
<li><a href="#mcetoc_1ggd9jq2mqk">Project aggregation (Multi Module)</a></li>
<li><a href="#mcetoc_1ggd9tb9jr2">Properties</a></li>
<li><a href="#mcetoc_1ggv3g3smf5">Version structure</a>
<ul>
<li><a href="#mcetoc_1ggv3g3smf6">SNAPSHOT Version</a></li>
</ul>
</li>
<li><a href="#mcetoc_1ggv3g3smf7">Version resolution transitive dependencies</a></li>
<li><a href="#mcetoc_1ggv3g3smf8">Keeping POM clean</a></li>
</ul>
</div>
<h2 id="mcetoc_1ggd2611qj0">What is Maven?</h2>
<ul>
<li>Declarative build management tool for automated builds</li>
<li>Standardized directory structure</li>
<li>Declarative dependency management</li>
<li>Works with an XML control file (POM - Project Object Model)</li>
<li>Open source, written in Java, for Java projects</li>
<li>Pure command line tool</li>
<li>IDEs offer integration</li>
</ul>
<h2 id="mcetoc_1ggd2611qj1">Why Maven?</h2>
<ul>
<li>Uniform build in the project, but also across multiple projects.</li>
<li>Dependency management</li>
<li>Independent of an IDE</li>
<li>Basis for rapid familiarization of new developers</li>
<li>Basis for Continuous Integration/Continuous Deployment (DevOps)</li>
<li>Industry standard for Java applications</li>
</ul>
<h2 id="mcetoc_1ggd2611qj2">Components</h2>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/68/Screenshot-2022-10-27-at-17.17.05.png" alt="" width="851" height="555" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-17.17.05-xs.png 300w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-17.17.05-sm.png 480w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-17.17.05-md.png 768w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-17.17.05-lg.png 1024w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-17.17.05-xl.png 1360w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-17.17.05-2xl.png 1600w"></figure>
<h2 id="mcetoc_1ggd2611qj3">Build lifecycle</h2>
<ul>
<li>Each Build Phase has its own Plugin. M<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">aven delegates the work of each build phase to plugins.</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Plugins provide Goals, which do the actual work</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Goals can be assigned to one or more build phases</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Certain plugins/goals are assigned by Maven by default</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">You can assign plugins/goals to specific build phases in the project object model itself</span></li>
</ul>
<h2 id="mcetoc_1ggd2611qj4">POM (Project Object Model) file</h2>
<ul>
<li>The POM declaratively describes the build including all dependencies.</li>
<li>POM is an XML file that describes the Maven project.</li>
<li>Maven project usually creates an artifact (jar, war, ear, ...)</li>
</ul>
<p>Minimal POM example file:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="php"><span class="hljs-meta" style="color: #bbb529;">&lt;?</span>xml version=<span class="hljs-string" style="color: #6a8759;">"1.0"</span> encoding=<span class="hljs-string" style="color: #6a8759;">"UTF-8"</span><span class="hljs-meta" style="color: #bbb529;">?&gt;</span></span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string" style="color: #6a8759;">"http://maven.apache.org/POM/4.0.0"</span>
         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string" style="color: #6a8759;">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string" style="color: #6a8759;">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">modelVersion</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>com.test<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">project</span>&gt;</span></pre>
<h2 id="mcetoc_1ggd2611qj5">Project coordinates</h2>
<p>The project coordinates consists of groupId, artifactId and the version</p>
<ul>
<li>Maven project coordinates form a kind of address for a Maven artifact</li>
<li>They consist of:<br><code>&lt;groupId&gt;com.test&lt;/groupId&gt;</code><br><code>&lt;artifactId&gt;my-app&lt;/artifactId&gt;</code><br><code>&lt;version&gt;1.0.0&lt;/version&gt;</code></li>
<li>The combination of the three parts shall be globally unique!</li>
<li>Using the project coordinates, the dependencies are fetched from the repository fetched</li>
<li>All three parts are mandatory</li>
</ul>
<h2 id="mcetoc_1ggd443kjlt">Packaging</h2>
<ul>
<li>Packaging defines the shape of the generated artifact</li>
<li>Packaging:<br><code>&lt;packaging&gt;jar&lt;/packaging&gt;</code></li>
<li>Not specified: default is jar.</li>
<li>Other possible values: pom, maven-plugin, ejb, war, ear, rar</li>
</ul>
<h2 id="mcetoc_1ggd2611qj6">Naming conventions</h2>
<h3 id="mcetoc_1ggd2611qj7">groupId</h3>
<ul>
<li>Identifies the project globally → unique namespace required.</li>
<li>The Java package naming conventions are used.</li>
<li>Reverse Internet domain name, which one has under one's own control<br>has, e.g. com.example</li>
<li>After that, freely selectable, uniquely within domain, e.g. com.example.dev</li>
</ul>
<h3 id="mcetoc_1ggd2611qj8">artifactId</h3>
<ul>
<li>Identifies the concrete build artifact (jar, war, ear, ...).</li>
<li>E.g. todoapp</li>
</ul>
<h2 id="mcetoc_1ggd443kjlu">Standard directory layout</h2>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/68/Screenshot-2022-10-27-at-18.09.08.png" alt="" width="283" height="430" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-18.09.08-xs.png 300w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-18.09.08-sm.png 480w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-18.09.08-md.png 768w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-18.09.08-lg.png 1024w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-18.09.08-xl.png 1360w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-18.09.08-2xl.png 1600w"></figure>
<p>Legend to the layout:</p>
<table class="table table-striped" border="1">
<tbody>
<tr class="a">
<td align="left"><code>src/main/java</code></td>
<td align="left">Application/Library sources</td>
</tr>
<tr class="b">
<td align="left"><code>src/main/resources</code></td>
<td align="left">Application/Library resources</td>
</tr>
<tr class="a">
<td align="left"><code>src/main/filters</code></td>
<td align="left">Resource filter files</td>
</tr>
<tr class="b">
<td align="left"><code>src/main/webapp</code></td>
<td align="left">Web application sources</td>
</tr>
<tr class="a">
<td align="left"><code>src/test/java</code></td>
<td align="left">Test sources</td>
</tr>
<tr class="b">
<td align="left"><code>src/test/resources</code></td>
<td align="left">Test resources</td>
</tr>
<tr class="a">
<td align="left"><code>src/test/filters</code></td>
<td align="left">Test resource filter files</td>
</tr>
<tr class="b">
<td align="left"><code>src/it</code></td>
<td align="left">Integration Tests (primarily for plugins)</td>
</tr>
<tr class="a">
<td align="left"><code>src/assembly</code></td>
<td align="left">Assembly descriptors</td>
</tr>
<tr class="b">
<td align="left"><code>src/site</code></td>
<td align="left">Site</td>
</tr>
<tr class="a">
<td align="left"><code>LICENSE.txt</code></td>
<td align="left">Project's license</td>
</tr>
<tr class="b">
<td align="left"><code>NOTICE.txt</code></td>
<td align="left">Notices and attributions required by libraries that the project depends on</td>
</tr>
<tr class="a">
<td align="left"><code>README.txt</code></td>
<td align="left">Project's readme</td>
</tr>
</tbody>
</table>
<h2 id="mcetoc_1ggd8kpb6ob">Dependencies</h2>
<ul>
<li>Dependency management is the central function of Maven</li>
<li>Management of the required libraries</li>
<li>Dependencies required by libraries themselves are added automatically (without specifying them) → transitive dependencies.</li>
<li>Maven automatically downloads dependencies and transitive dependencies.</li>
<li>The downloaded dependencies are available for compilation.<br>available</li>
<li>The downloaded dependencies are packed into the artifacts</li>
</ul>
<p>example of a dependency declaration in a POM file:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">dependencies</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">dependency</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>
	<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">dependency</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">dependency</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>
	<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">dependency</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">dependency</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">scope</span>&gt;</span>
	<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">dependencies</span>&gt;</span></pre>
<p>You can also list all dependencies with this command: </p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;"># mvn dependency:tree                                                                                                          </span>
[INFO] Scanning <span class="hljs-keyword" style="color: #cc7832;">for</span> projects...
[INFO] 
[INFO] --------------------------&lt; com.example:demo &gt;--------------------------
[INFO] Building demo 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-dependency-plugin:3.3.0:tree (default-cli) @ demo ---
[INFO] com.example:demo:jar:0.0.1-SNAPSHOT
[INFO] +- org.springframework.boot:spring-boot-starter-web:jar:2.7.5:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:2.7.5:compile
[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:2.7.5:compile
[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:1.2.11:compile
[INFO] |  |  |  |  \- ch.qos.logback:logback-core:jar:1.2.11:compile
[INFO] |  |  |  +- org.apache.logging.log4j:<span class="hljs-built_in">log</span>4j-to-slf4j:jar:2.17.2:compile
[INFO] |  |  |  |  \- org.apache.logging.log4j:<span class="hljs-built_in">log</span>4j-api:jar:2.17.2:compile
[INFO] |  |  |  \- org.slf4j:jul-to-slf4j:jar:1.7.36:compile
[INFO] |  |  +- jakarta.annotation:jakarta.annotation-api:jar:1.3.5:compile
[INFO] |  |  \- org.yaml:snakeyaml:jar:1.30:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter-json:jar:2.7.5:compile
[INFO] |  |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.13.4.2:compile
[INFO] |  |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.13.4:compile
[INFO] |  |  |  \- com.fasterxml.jackson.core:jackson-core:jar:2.13.4:compile
[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.13.4:compile
[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.13.4:compile
[INFO] |  |  \- com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.13.4:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter-tomcat:jar:2.7.5:compile
[INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-core:jar:9.0.68:compile
[INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-el:jar:9.0.68:compile
[INFO] |  |  \- org.apache.tomcat.embed:tomcat-embed-websocket:jar:9.0.68:compile
[INFO] |  +- org.springframework:spring-web:jar:5.3.23:compile
[INFO] |  |  \- org.springframework:spring-beans:jar:5.3.23:compile
[INFO] |  \- org.springframework:spring-webmvc:jar:5.3.23:compile
[INFO] |     +- org.springframework:spring-aop:jar:5.3.23:compile
[INFO] |     +- org.springframework:spring-context:jar:5.3.23:compile
[INFO] |     \- org.springframework:spring-expression:jar:5.3.23:compile
[INFO] +- org.springframework.boot:spring-boot-devtools:jar:2.7.5:runtime
[INFO] |  +- org.springframework.boot:spring-boot:jar:2.7.5:compile
[INFO] |  \- org.springframework.boot:spring-boot-autoconfigure:jar:2.7.5:compile
[INFO] \- org.springframework.boot:spring-boot-starter-test:jar:2.7.5:<span class="hljs-built_in">test</span>
[INFO]    +- org.springframework.boot:spring-boot-test:jar:2.7.5:<span class="hljs-built_in">test</span>
[INFO]    +- org.springframework.boot:spring-boot-test-autoconfigure:jar:2.7.5:<span class="hljs-built_in">test</span>
[INFO]    +- com.jayway.jsonpath:json-path:jar:2.7.0:<span class="hljs-built_in">test</span>
[INFO]    |  +- net.minidev:json-smart:jar:2.4.8:<span class="hljs-built_in">test</span>
[INFO]    |  |  \- net.minidev:accessors-smart:jar:2.4.8:<span class="hljs-built_in">test</span>
[INFO]    |  |     \- org.ow2.asm:asm:jar:9.1:<span class="hljs-built_in">test</span>
[INFO]    |  \- org.slf4j:slf4j-api:jar:1.7.36:compile
[INFO]    +- jakarta.xml.bind:jakarta.xml.bind-api:jar:2.3.3:<span class="hljs-built_in">test</span>
[INFO]    |  \- jakarta.activation:jakarta.activation-api:jar:1.2.2:<span class="hljs-built_in">test</span>
[INFO]    +- org.assertj:assertj-core:jar:3.22.0:<span class="hljs-built_in">test</span>
[INFO]    +- org.hamcrest:hamcrest:jar:2.2:<span class="hljs-built_in">test</span>
[INFO]    +- org.junit.jupiter:junit-jupiter:jar:5.8.2:<span class="hljs-built_in">test</span>
[INFO]    |  +- org.junit.jupiter:junit-jupiter-api:jar:5.8.2:<span class="hljs-built_in">test</span>
[INFO]    |  |  +- org.opentest4j:opentest4j:jar:1.2.0:<span class="hljs-built_in">test</span>
[INFO]    |  |  +- org.junit.platform:junit-platform-commons:jar:1.8.2:<span class="hljs-built_in">test</span>
[INFO]    |  |  \- org.apiguardian:apiguardian-api:jar:1.1.2:<span class="hljs-built_in">test</span>
[INFO]    |  +- org.junit.jupiter:junit-jupiter-params:jar:5.8.2:<span class="hljs-built_in">test</span>
[INFO]    |  \- org.junit.jupiter:junit-jupiter-engine:jar:5.8.2:<span class="hljs-built_in">test</span>
[INFO]    |     \- org.junit.platform:junit-platform-engine:jar:1.8.2:<span class="hljs-built_in">test</span>
[INFO]    +- org.mockito:mockito-core:jar:4.5.1:<span class="hljs-built_in">test</span>
[INFO]    |  +- net.bytebuddy:byte-buddy:jar:1.12.18:<span class="hljs-built_in">test</span>
[INFO]    |  +- net.bytebuddy:byte-buddy-agent:jar:1.12.18:<span class="hljs-built_in">test</span>
[INFO]    |  \- org.objenesis:objenesis:jar:3.2:<span class="hljs-built_in">test</span>
[INFO]    +- org.mockito:mockito-junit-jupiter:jar:4.5.1:<span class="hljs-built_in">test</span>
[INFO]    +- org.skyscreamer:jsonassert:jar:1.5.1:<span class="hljs-built_in">test</span>
[INFO]    |  \- com.vaadin.external.google:android-json:jar:0.0.20131108.vaadin1:<span class="hljs-built_in">test</span>
[INFO]    +- org.springframework:spring-core:jar:5.3.23:compile
[INFO]    |  \- org.springframework:spring-jcl:jar:5.3.23:compile
[INFO]    +- org.springframework:spring-test:jar:5.3.23:<span class="hljs-built_in">test</span>
[INFO]    \- org.xmlunit:xmlunit-core:jar:2.9.0:<span class="hljs-built_in">test</span>
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  1.256 s
[INFO] Finished at: 2022-10-27T19:47:12+02:00
[INFO] ------------------------------------------------------------------------
</pre>
<h3 id="mcetoc_1ggd8kpb6oc">Scope</h3>
<p>The scope of a dependency specifies in which classpaths it is provided by Maven.<br>(classpaths change depending on the build phase):</p>
<ul>
<li><strong>compile</strong>: Default Scope, Dependencies are available in all classpaths</li>
<li><strong>test</strong>: Only during test</li>
<li><strong>provided</strong>: Only available in compile and test classpaths, dependency must be provided at runtime (e.g., by the servlet container)</li>
<li><strong>runtime</strong>: Only during runtime and test, but not for compile</li>
<li><strong>other</strong> (not so important)</li>
</ul>
<h3 id="mcetoc_1ggd9jq2mqi">Transitive dependencies</h3>
<ul>
<li>Dependencies required by the dependencies we declare.</li>
<li>Are automatically downloaded by Maven and added to the classpath</li>
<li>Attention: You can also use these transitive dependencies directly in the code.<br>→ please do not do this!</li>
<li>Explicitly enter each dependency that you use yourself in the code as a dependency in the POM</li>
</ul>
<p>Finding out if you are using a transitive dependency in your code:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;"># mvn dependency:analyze                                                                                                             </span>
[INFO] Scanning <span class="hljs-keyword" style="color: #cc7832;">for</span> projects...
[INFO] 
[INFO] --------------------------&lt; com.example:demo &gt;--------------------------
[INFO] Building demo 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] &gt;&gt;&gt; maven-dependency-plugin:3.3.0:analyze (default-cli) &gt; <span class="hljs-built_in">test</span>-compile @ demo &gt;&gt;&gt;
[INFO] 
[INFO] --- maven-resources-plugin:3.2.0:resources (default-resources) @ demo ---
[INFO] Using <span class="hljs-string" style="color: #6a8759;">'UTF-8'</span> encoding to copy filtered resources.
[INFO] Using <span class="hljs-string" style="color: #6a8759;">'UTF-8'</span> encoding to copy filtered properties files.
[INFO] Copying 1 resource
[INFO] Copying 0 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.10.1:compile (default-compile) @ demo ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 1 <span class="hljs-built_in">source</span> file to /Users/Dave/Downloads/demo/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:3.2.0:<span class="hljs-built_in">test</span>Resources (default-testResources) @ demo ---
[INFO] Using <span class="hljs-string" style="color: #6a8759;">'UTF-8'</span> encoding to copy filtered resources.
[INFO] Using <span class="hljs-string" style="color: #6a8759;">'UTF-8'</span> encoding to copy filtered properties files.
[INFO] skip non existing resourceDirectory /Users/Dave/Downloads/demo/src/<span class="hljs-built_in">test</span>/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.10.1:<span class="hljs-built_in">test</span>Compile (default-testCompile) @ demo ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 1 <span class="hljs-built_in">source</span> file to /Users/Dave/Downloads/demo/target/<span class="hljs-built_in">test</span>-classes
[INFO] 
[INFO] &lt;&lt;&lt; maven-dependency-plugin:3.3.0:analyze (default-cli) &lt; <span class="hljs-built_in">test</span>-compile @ demo &lt;&lt;&lt;
[INFO] 
[INFO] 
[INFO] --- maven-dependency-plugin:3.3.0:analyze (default-cli) @ demo ---
[WARNING] Used undeclared dependencies found:
[WARNING]    org.springframework.boot:spring-boot:jar:2.7.5:compile
[WARNING]    org.junit.jupiter:junit-jupiter-api:jar:5.8.2:<span class="hljs-built_in">test</span>
[WARNING]    org.springframework.boot:spring-boot-test:jar:2.7.5:<span class="hljs-built_in">test</span>
[WARNING]    org.springframework.boot:spring-boot-autoconfigure:jar:2.7.5:compile
[WARNING] Unused declared dependencies found:
[WARNING]    org.springframework.boot:spring-boot-starter-web:jar:2.7.5:compile
[WARNING]    org.springframework.boot:spring-boot-devtools:jar:2.7.5:runtime
[WARNING]    org.springframework.boot:spring-boot-starter-test:jar:2.7.5:<span class="hljs-built_in">test</span>
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.113 s
[INFO] Finished at: 2022-10-27T19:50:29+02:00
[INFO] ------------------------------------------------------------------------
</pre>
<h2 id="mcetoc_1ggd9jq2mqj">Project inheritance</h2>
<p>POMs an also inherit, this is for example needed for a Spring Boot-Application. This allows you for example, to standardize the libraries used and their versions across multiple projects or Maven modules.</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/68/inheritance.png" alt="" width="1024" height="754" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/68/responsive/inheritance-xs.png 300w ,https://www.finecloud.ch/media/posts/68/responsive/inheritance-sm.png 480w ,https://www.finecloud.ch/media/posts/68/responsive/inheritance-md.png 768w ,https://www.finecloud.ch/media/posts/68/responsive/inheritance-lg.png 1024w ,https://www.finecloud.ch/media/posts/68/responsive/inheritance-xl.png 1360w ,https://www.finecloud.ch/media/posts/68/responsive/inheritance-2xl.png 1600w"></figure>
<h2 id="mcetoc_1ggd9jq2mqk">Project aggregation (Multi Module)</h2>
<p>Also a POM can aggregate multiple POMs as Modules</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/68/Screenshot-2022-10-27-at-20.01.00.png" alt="" width="275" height="400" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-20.01.00-xs.png 300w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-20.01.00-sm.png 480w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-20.01.00-md.png 768w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-20.01.00-lg.png 1024w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-20.01.00-xl.png 1360w ,https://www.finecloud.ch/media/posts/68/responsive/Screenshot-2022-10-27-at-20.01.00-2xl.png 1600w"></figure>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>com.test<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>example-maven-multimodule<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">version</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">packaging</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">modules</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">module</span>&gt;</span>module1<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">module</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">module</span>&gt;</span>module2<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">module</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">module</span>&gt;</span>module3<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">module</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">modules</span>&gt;</span></pre>
<h2 id="mcetoc_1ggd9tb9jr2">Properties</h2>
<p>Properties are placeholders and can be addressed via ${&lt;propertyname&gt;}.</p>
<p>Example:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">properties</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">java.version</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">commons-pool2.version</span>&gt;</span>2.6.0<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">commons-pool2.version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">properties</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">dependency</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">version</span>&gt;</span>${commons-pool2.version}<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">dependency</span>&gt;</span></pre>
<h2 id="mcetoc_1ggv3g3smf5">Version structure</h2>
<ul>
<li>A version must always be specified</li>
<li>Maven basically leaves the structure of a version free</li>
<li>Recommended approach: semantic versioning (<a href="https://semver.org/">https://semver.org/</a>)
<ul>
<li><code>&lt;Major&gt;.&lt;Minor&gt;.&lt;Bugfix&gt;-&lt;Qualifier&gt;-&lt;Buildnumber&gt;</code></li>
<li>Major: increment when API changes.</li>
<li>Minor: increment if new features are included, but same API.</li>
<li>Bugfix: increment, if only something was fixed</li>
<li>Qualifier: Optional.</li>
<li>Build number: Optional.</li>
<li>Example: &lt;version&gt;2.4.18&lt;/version&gt;</li>
</ul>
</li>
</ul>
<h3 id="mcetoc_1ggv3g3smf6">SNAPSHOT Version</h3>
<ul>
<li>The qualifier SNAPSHOT is used during the development of a version<br>is used</li>
<li>Example: 1.0-SNAPSHOT → means that the 1.0 version of the software is being<br>is being developed</li>
<li>A version with SNAPSHOT qualifier is always considered to be older than<br>the same one without the qualifier</li>
<li>Special rules apply for version resolution, Maven usually fetches a snapshot version once per day from the repository, unless you specify "-U".</li>
<li>Example: <code>mvn -U clean install</code> also fetches the most recent snapshot<br>versions from the repository</li>
</ul>
<h2 id="mcetoc_1ggv3g3smf7">Version resolution transitive dependencies</h2>
<ul>
<li>Multiple transitive dependencies can contain the same artifact in different<br>different versions, but can only have exactly one version of a transitive dependency in the classpath.</li>
<li>Resolution is performed according to the "nearest definition" principle:
<ul>
<li>The version in the dependency tree that is closest to one's own project<br>Tree is taken</li>
<li>If two versions are equally close, the one found first is taken</li>
<li>Example: Dependency D appears twice in the dependency tree:
<ul>
<li>A → B → C → D (version 2.0)</li>
<li>A → E → D (version 1.0)</li>
<li>Version 1.0 of D is taken, since closer to own project (A).</li>
</ul>
</li>
</ul>
</li>
<li>One can explicitly specify a particular version of a transitive dependency<br>specify:
<ul>
<li>Include it explicitly as a dependency in your own POM.</li>
<li>Via Dependency Management</li>
</ul>
</li>
</ul>
<h2 id="mcetoc_1ggv3g3smf8">Keeping POM clean</h2>
<ul>
<li>Find out unclean dependencies:
<ul>
<li><code>mvn dependency:analyze</code></li>
<li>check out <a href="https://maven.apache.org/plugins/maven-dependency-plugin/analyze-mojo.html">https://maven.apache.org/plugins/maven-dependency-plugin/analyze-mojo.html</a></li>
</ul>
</li>
<li>Lists dependencies that:
<ul>
<li>Used and declared (--&gt; ok)</li>
<li>Used but are not declared in their own pom (--&gt; nok)</li>
<li>Are not used but are declared (--&gt; potentially remnant, clean up)</li>
</ul>
</li>
</ul>
            ]]>
        </content>
    </entry>
</feed>
