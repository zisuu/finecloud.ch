<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Finecloud</title>
    <link href="https://www.finecloud.ch/feed.xml" rel="self" />
    <link href="https://www.finecloud.ch" />
    <updated>2022-07-09T15:53:17+02:00</updated>
    <author>
        <name>Finecloud</name>
    </author>
    <id>https://www.finecloud.ch</id>

    <entry>
        <title>Java Namenskonventionen</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-namenskonventionen.html"/>
        <id>https://www.finecloud.ch/java-namenskonventionen.html</id>
            <category term="softwareentwicklung"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-07-09T15:53:17+02:00</updated>
            <summary>
                <![CDATA[
                    In diesem Blog fasse ich die Java Namenskonventionen kurz zusammen: Typ Namenskonvention Beispiele Class Sollte mit Grossbuchstaben beginnen und sollte ein Substantiv wie Farbe, Knopf, System, Faden usw. sein. Verwenden Sie geeignete Wörter anstelle von Akronymen. public class Employee { //code snippet } Interface Sollte&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In diesem Blog fasse ich die Java Namenskonventionen kurz zusammen:</p>
<table class="alt" style="border-collapse: collapse; border-color: #000000; border-style: solid; width: 100%; height: 1446.8px;" border="1">
<tbody>
<tr style="height: 79.1562px;">
<th style="width: 17.4037%; height: 79.1562px;"><strong>Typ</strong></th>
<th style="width: 55.3495%; height: 79.1562px;"><strong>Namenskonvention</strong></th>
<th style="width: 27.2468%; height: 79.1562px;"><strong>Beispiele</strong></th>
</tr>
<tr style="height: 165.547px;">
<td style="width: 17.4037%; height: 165.547px;">Class</td>
<td style="width: 55.3495%; height: 165.547px;">Sollte mit Grossbuchstaben beginnen und<br>sollte ein Substantiv wie Farbe, Knopf, System, Faden usw. sein. Verwenden Sie geeignete Wörter anstelle von Akronymen.</td>
<td style="width: 27.2468%; height: 165.547px;"><code>public class <strong>Employee</strong></code><br><code>{</code><br><code>//code snippet</code><br><code>}</code></td>
</tr>
<tr style="height: 165.547px;">
<td style="width: 17.4037%; height: 165.547px;">Interface</td>
<td style="width: 55.3495%; height: 165.547px;">Sollte mit dem Grossbuchstaben beginnen und sollte ein Adjektiv wie Runnable, Remote, ActionListener sein. Verwenden Sie geeignete Wörter anstelle von Akronymen.</td>
<td style="width: 27.2468%; height: 165.547px;"><code>interface <strong>Printable</strong>{//code snippet}</code></td>
</tr>
<tr style="height: 251.938px;">
<td style="width: 17.4037%; height: 251.938px;">Method</td>
<td style="width: 55.3495%; height: 251.938px;">Sollte mit Kleinbuchstaben beginnen und sollte ein Verb wie main(), print(), println() sein. Wenn der Name mehrere Wörter enthält, beginnen Sie ihn mit einem Kleinbuchstaben, gefolgt von einem Grossbuchstaben, z. B. actionPerformed().</td>
<td style="width: 27.2468%; height: 251.938px;"><code>class Employee</code><br><code>{</code><br><code>// method</code><br><code>void <strong>draw()</strong></code><br><code>{</code><br><code>//code snippet</code><br><code>}</code><br><code>}</code></td>
</tr>
<tr style="height: 338.328px;">
<td style="width: 17.4037%; height: 338.328px;">Variable</td>
<td style="width: 55.3495%; height: 338.328px;">Sollte mit einem Kleinbuchstaben beginnen, z. B. ID, Name und sollte nicht mit Sonderzeichen wie &amp; (kaufmännisches Und), $ (Dollar), _ (Unterstrich) beginnen. Wenn der Name mehrere Wörter enthält, beginnen Sie ihn mit dem Kleinbuchstaben, gefolgt von einem Grossbuchstaben, z. B. Vorname, Nachname. Vermeiden Sie die Verwendung von Ein-Zeichen-Variablen wie x, y, z.</td>
<td style="width: 27.2468%; height: 338.328px;"><code>class Employee</code><br><code>{</code><br><code>// variable</code><br><code>int <strong>id</strong>;</code><br><code>//code snippet</code><br><code>}</code></td>
</tr>
<tr style="height: 223.141px;">
<td style="width: 17.4037%; height: 223.141px;">Package</td>
<td style="width: 55.3495%; height: 223.141px;">Sollte ein Kleinbuchstabe sein, z. B. java, lang. Wenn der Name mehrere Wörter enthält, sollten sie durch Punkte (.) getrennt werden, z. B. java.util, java.lang.</td>
<td style="width: 27.2468%; height: 223.141px;"><code>//package</code><br><code>package <strong>com.javatpoint;</strong></code><br><code>class Employee</code><br><code>{</code><br><code>//code snippet</code><br><code>}</code></td>
</tr>
<tr style="height: 223.141px;">
<td style="width: 17.4037%; height: 223.141px;">Constant</td>
<td style="width: 55.3495%; height: 223.141px;">Sollte in Großbuchstaben wie ROT, GELB sein. Wenn der Name mehrere Wörter enthält, sollten sie durch einen Unterstrich (_) getrennt werden, z. B. MAX_PRIORITY.<br>Es darf Ziffern enthalten, jedoch nicht als erster Buchstabe.</td>
<td style="width: 27.2468%; height: 223.141px;"><code>class Employee</code><br><code>{</code><br><code>//constant</code><br><code>static final int <strong>MIN_AGE</strong> = 18;</code><br><code>//code snippet</code><br><code>}</code></td>
</tr>
</tbody>
</table>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Unterschiede zwischen Proxmox Containers und Docker</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/unterschiede-zwischen-proxmox-containers-und-docker.html"/>
        <id>https://www.finecloud.ch/unterschiede-zwischen-proxmox-containers-und-docker.html</id>
            <category term="virtualisierung"/>
            <category term="proxmox"/>
            <category term="lxd"/>
            <category term="lxc"/>
            <category term="linux"/>
            <category term="kvm"/>
            <category term="docker"/>
            <category term="container"/>

        <updated>2022-07-08T16:43:37+02:00</updated>
            <summary>
                <![CDATA[
                    LXC LXC ist ein Userspace Interface zur Eindämmung des Linux-Kernels und kann verwendet werden für Systemvirtualisierung. Durch eine mächtige API und einfache Tools ermöglicht es Linux Benutzern einfache Erstellung und Verwaltung von System Container. LXC ermöglicht ein komplettes OS in einem Container zu betreiben. LXD&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g7f40muo25">LXC</a></li>
<li><a href="#mcetoc_1g7f40muo26">LXD</a></li>
<li><a href="#mcetoc_1g7f40muo27">Proxmox Containers</a></li>
<li><a href="#mcetoc_1g7f40muo28">Docker</a></li>
</ul>
</div>
<h2 id="mcetoc_1g7f40muo25">LXC</h2>
<p>LXC ist ein Userspace Interface zur Eindämmung des Linux-Kernels und kann verwendet werden für Systemvirtualisierung. Durch eine mächtige API und einfache Tools ermöglicht es Linux Benutzern einfache Erstellung und Verwaltung von System Container. LXC ermöglicht ein komplettes OS in einem Container zu betreiben.</p>
<h2 id="mcetoc_1g7f40muo26">LXD</h2>
<p>LXD ist auf LXC Aufgebaut und bietet neue und bessere Benutzererfahrung. Unter der Haube verwendet LXD LXC durch liblxc und dessen Go binding für das Erstellen und Verwalten von Container. Es ist im Grunde eine Alternative zu den Tools und dem Verteilungsvorlagensystem von LXC mit den zusätzlichen Funktionen, die sich aus der Steuerbarkeit über das Netzwerk ergeben.</p>
<h2 id="mcetoc_1g7f40muo27">Proxmox Containers</h2>
<p>Als Proxmox Container werden Container bezeichnet, die mit dem Proxmox Container Toolkit (pct) erstellt und verwaltet werden. Sie zielen auch auf die Systemvirtualisierung ab und verwenden LXC als Grundlage des Containerangebots. Das Proxmox Container Toolkit (pct) ist eng mit Proxmox VE gekoppelt. Das bedeutet, dass es Cluster-Setups kennt und dieselben Netzwerk- und Speicherressourcen wie virtuelle QEMU-Maschinen (VMs) verwenden kann. Sie können sogar die Proxmox VE-Firewall verwenden, Backups erstellen und wiederherstellen oder Container mit dem HA-Framework verwalten. Mit der Proxmox VE API lässt sich alles über das Netzwerk steuern.</p>
<h2 id="mcetoc_1g7f40muo28">Docker</h2>
<p>Docker zielt darauf ab, eine einzelne Anwendung in einer isolierten, in sich geschlossenen Umgebung zu laufen. Diese werden im Allgemeinen als „Anwendungscontainer“ und nicht als „Systemcontainer“ bezeichnet. Sie verwalten eine Docker-Instanz über den Host mithilfe der Docker Engine-Befehlszeilenschnittstelle. Es wird nicht empfohlen, Docker direkt auf Ihrem Proxmox VE-Host auszuführen. <strong>Wenn man also einen Anwendungscontainer ausführen möchte mit z.B. Docker-Images, sollte man diese am besten in einer Proxmox Qemu-VM ausführen.</strong></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Citrix ADC (NetScaler) Backup mit Ansible</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/citrix-adc-backup-mit-ansible.html"/>
        <id>https://www.finecloud.ch/citrix-adc-backup-mit-ansible.html</id>
            <category term="tools"/>
            <category term="ssh"/>
            <category term="infrastructure as code"/>
            <category term="iac"/>
            <category term="citrix netscaler"/>
            <category term="citrix adc"/>
            <category term="ansible"/>

        <updated>2022-07-08T16:13:45+02:00</updated>
            <summary>
                <![CDATA[
                    Beschreibung Citrix ADC, bis vor einer Weile noch als Citrix NetScaler bekannt ist eine Netzwerk Appliance welche als Access Gateway und Proxy verwendet werden kann. In diesem Artikel werden wir ein kleines Ansible Playbook schreiben, mit welchem man einen Citrix ADC sichern kann. Als erster&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g7f244jrl8">Beschreibung</a></li>
<li><a href="#mcetoc_1g7f244jrl9">Ansible Config</a></li>
<li><a href="#mcetoc_1g7f244jrla">Inventar</a></li>
<li><a href="#mcetoc_1g7f244jrlb">Playbook</a></li>
<li><a href="#mcetoc_1g7f244jrlc">Rolle citrix_adc</a></li>
<li><a href="#mcetoc_1g7f244jrld">Secrets</a></li>
<li><a href="#mcetoc_1g7f244jrle">Run</a></li>
</ul>
</div>
<h2 id="mcetoc_1g7f244jrl8">Beschreibung</h2>
<p>Citrix ADC, bis vor einer Weile noch als Citrix NetScaler bekannt ist eine Netzwerk Appliance welche als Access Gateway und Proxy verwendet werden kann. In diesem Artikel werden wir ein kleines Ansible Playbook schreiben, mit welchem man einen Citrix ADC sichern kann.</p>
<h2 id="mcetoc_1g7f244jrl9">Ansible Config</h2>
<p>Als erster Schritt definieren wir die Ansible Konfiguration: <code>ansible.cfg</code></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-section" style="color: #ffc66d;">[defaults]</span>
<span class="hljs-attr">interpreter_python</span>=auto_silent
<span class="hljs-section" style="color: #ffc66d;">
[ssh_connection]</span>
<span class="hljs-comment" style="color: grey;"># allows new host keys once</span>
<span class="hljs-attr">ssh_args</span> = -o StrictHostKeyChecking=accept-new</pre>
<p>Dabei ist wichtig das du deine Secrets mit dem <span class="hljs-attr"><code>vault_password_file</code> verschlüsselst.</span></p>
<h2 id="mcetoc_1g7f244jrla">Inventar</h2>
<p>Nun erstellen wir uns eine Datei <code>inventory.yaml </code>mit dem folgenden Inhalt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-meta" style="color: #bbb529;">---</span>
<span class="hljs-comment" style="color: grey;"># yamllint disable rule:line-length</span>

<span class="hljs-attr">all:</span>
<span class="hljs-attr">  hosts:</span>
<span class="hljs-attr">  children:</span>
<span class="hljs-attr">    citrix_adc:</span>
<span class="hljs-attr">      hosts:</span>
        netscaler01
        netscaler02</pre>
<p>die Hosts müssen dabei natürlich den FQDN Namen deiner ADCs entsprechen.</p>
<h2 id="mcetoc_1g7f244jrlb">Playbook</h2>
<p>Auch das Playbook selbst ist nicht sehr spannend, von hier aus werden wir dann die Rolle mit dem eigentlich spannenden Inhalt anstossen: <code>playbook.yaml</code></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-meta" style="color: #bbb529;">---</span>

<span class="hljs-attr">- hosts:</span> citrix_adc
<span class="hljs-attr">  gather_facts:</span> <span class="hljs-literal" style="color: #6897bb;">false</span>
<span class="hljs-attr">  roles:</span>
<span class="hljs-bullet" style="color: #6897bb;">    -</span> citrix_adc</pre>
<h2 id="mcetoc_1g7f244jrlc">Rolle citrix_adc</h2>
<p>Nun kommt der Spannende Inhalt, wir erstellen nun folgende Ordnerstruktur und main.yaml Dateien:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">└── roles
    └── citrix_adc
        ├── tasks
        │   └── main.yaml
        └── vars
            └── main.yaml</pre>
<p>der Inhalt der <code>task/main.yaml</code> Datei ist wiefolgt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-meta" style="color: #bbb529;">---</span>
<span class="hljs-comment" style="color: grey;"># yamllint disable rule:line-length</span>

<span class="hljs-attr">- name:</span> Delete all old backups from local
<span class="hljs-attr">  delegate_to:</span> localhost
<span class="hljs-attr">  file:</span>
<span class="hljs-attr">    path:</span> <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-template-variable" style="color: #629755;">{{ dest_path }}</span>/<span class="hljs-template-variable" style="color: #629755;">{{ inventory_hostname }}</span>"</span>
<span class="hljs-attr">    state:</span> absent

<span class="hljs-attr">- name:</span> Generate new Citrix ADC system backup
<span class="hljs-attr">  delegate_to:</span> localhost
<span class="hljs-attr">  command:</span> ssh -l backuper {{ inventory_hostname }} <span class="hljs-string" style="color: #6a8759;">"create system backup -level full <span class="hljs-template-variable" style="color: #629755;">{{ backup_file }}</span>"</span>
<span class="hljs-attr">  register:</span> command_result
<span class="hljs-attr">  failed_when:</span> <span class="hljs-string" style="color: #6a8759;">"'Resource already exists' in command_result.stdout"</span>

<span class="hljs-attr">- name:</span> Create new empty directory
<span class="hljs-attr">  delegate_to:</span> localhost
<span class="hljs-attr">  file:</span>
<span class="hljs-attr">    path:</span> <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-template-variable" style="color: #629755;">{{ dest_path }}</span>/<span class="hljs-template-variable" style="color: #629755;">{{ inventory_hostname }}</span>"</span>
<span class="hljs-attr">    state:</span> directory
<span class="hljs-attr">    mode:</span> <span class="hljs-string" style="color: #6a8759;">'0755'</span>

<span class="hljs-attr">- name:</span> Download backup file from Citrix ADC to local folder
<span class="hljs-attr">  delegate_to:</span> localhost
<span class="hljs-attr">  command:</span> /bin/scp backuper@{{ inventory_hostname }}:/var/ns_sys_backup/{{ backup_file }}.tgz {{ dest_path }}/{{ inventory_hostname }}/{{ backup_file }}.tgz

<span class="hljs-attr">- name:</span> delete backup from ADC
<span class="hljs-attr">  delegate_to:</span> localhost
<span class="hljs-attr">  command:</span> ssh -l backuper {{ inventory_hostname }} <span class="hljs-string" style="color: #6a8759;">"rm backup <span class="hljs-template-variable" style="color: #629755;">{{ backup_file }}</span>.tgz"</span></pre>
<p>der Inhalt der <code>vars/main.yaml</code> Datei ist wiefolgt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-meta" style="color: #bbb529;">---</span>
<span class="hljs-comment" style="color: grey;"># yamllint disable rule:line-length</span>

<span class="hljs-attr">dest_path:</span> <span class="hljs-string" style="color: #6a8759;">"/var/git/ndcb-data"</span>
<span class="hljs-attr">backup_file:</span> <span class="hljs-string" style="color: #6a8759;">"backup_full_<span class="hljs-template-variable" style="color: #629755;">{{ inventory_hostname }}</span>_<span class="hljs-template-variable" style="color: #629755;">{{ lookup('pipe','date +%Y-%m-%d-%H') }}</span>"<br></span></pre>
<h2 id="mcetoc_1g7f244jrld">Secrets</h2>
<p>Was noch fehlt sind die Secrets. Wir werden jedoch in diesem Fall gar keine Secrets verwenden, sondern direkt mit SSH-Key Authentifizieren. Dazu mussst du auf deinem Gerät einen neues SSH-Key Pair generieren und anschliessend wie folgt auf den Citrix ADCs als <em>authorized keys</em> erlauben:</p>
<ol>
<li>Auf ADCs einloggen und unter diesem Pfad dein PublicKey eintragen: /nsconfig/ssh/authorized_keys :
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">ssh-rsa AAAAB3NzaC1.....</pre>
</li>
<li>Anschliessend kannst du den Citrix ADC Host neustarten (z.b. wenn er nur im Seconday Mode ist), noch einfacher ist, wenn du einfach den sshd Service neustartest, was auf dem Citrix ADC relativ brachial ist:
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-built_in">kill</span> -HUP `cat /var/run/sshd.pid`</pre>
</li>
</ol>
<h2 id="mcetoc_1g7f244jrle">Run</h2>
<p>Das Playbook kann nun wiefolgt ausgeführt werden:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">ansible-playbook playbook.yaml -i inventory.yaml</pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>JVM und JDK unter der Haube</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/jvm-und-jdk-unter-der-haube.html"/>
        <id>https://www.finecloud.ch/jvm-und-jdk-unter-der-haube.html</id>
            <category term="softwareentwicklung"/>
            <category term="java"/>
            <category term="dev"/>
            <category term="classloader"/>

        <updated>2022-07-07T09:04:56+02:00</updated>
            <summary>
                <![CDATA[
                    Woher lädt Java eigentlich seine JDK Klassen? Beim Start einer Applikation kann mit -cp ein Klassenpfad angegeben werden, in welchem sich Klassen befinden, die man verwenden möchte. Das ist das normale Vorgehen, wie man Klassen integriert. Doch woher hat das JDK seine eigenen Klassen? Um&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g7bnagbudlj">Woher lädt Java eigentlich seine JDK Klassen?</a></li>
<li><a href="#mcetoc_1g7bnagbudlk">Kann man durch eine eigene java.lang.Integer Klasse die Integer JDK Klasse ersetzen?</a></li>
<li><a href="#mcetoc_1g7bnagbudll">Garbage Collection</a></li>
<li><a href="#mcetoc_1g7bnagbudlm">Speicherlecks</a></li>
<li><a href="#mcetoc_1g7bnagbudln">Weiche und schwache Referenzen</a></li>
</ul>
</div>
<h2 id="mcetoc_1g7bnagbudlj">Woher lädt Java eigentlich seine JDK Klassen?</h2>
<p>Beim Start einer Applikation kann mit -cp ein Klassenpfad angegeben werden, in welchem sich Klassen befinden, die man verwenden möchte. Das ist das normale Vorgehen, wie man Klassen integriert. Doch woher hat das JDK seine eigenen Klassen?</p>
<p>Um das zu verstehen müssen wir uns zuerst mit dem Classloader befassen. Classloader sind selbst Java-Objekte mit denen man interagieren kann. Es gibt grundsätzlich mindestens drei Classloader:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/46/classloader.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/46/responsive/classloader-xs.png 300w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-sm.png 480w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-md.png 768w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-lg.png 1024w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-xl.png 1360w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-2xl.png 1600w"  alt="" width="311" height="391"></figure>
<ul>
<li><em>Bootstrap-Classloader</em>: lädt die JDK-Klassen</li>
<li><em>Extension-Classloader</em>: lädt Klassen, die in Javas Erweiterungsverzeichnis liegen. In diesem selten genutzten Verzeichnis können Erweiterungen des JDKs abgelegt werden, die jeder Anwendung zur Verfügung stehen, ohne dass sie sie in den eigenen Klassenpfad aufnehmen müsste. Der Default ist das Erweiterungsverzeichnis im Java-Installationsverzeichnis unter lib/ext zu finden.</li>
<li><em>System-Classpath-Classloader</em>: Der Classloader der Anwendung. Er lädt die Klassen welche mit -cp im angegebenen Verzeichnis liegen.</li>
</ul>
<h2 id="mcetoc_1g7bnagbudlk">Kann man durch eine eigene java.lang.Integer Klasse die Integer JDK Klasse ersetzen?</h2>
<p>Diese drei Klassloader stehen in einer hierarchischen Beziehung miteinander. Wenn man nun in seiner Applikation Klassen lädt, geschieht das immer mit dem System-Classpath-Classloader. Im ersten Schritt fragt jeder Classloader bei seinem übergeordneten Classsloader nach, ob dieser die Klasse laden kann. Diese Reihenfolge ist extrem wichtig, denn sie privilegiert die JDK Klassen. Eine Klasse, die dem Bootstrap-Classloader bekannt ist, kann deshalb niemals durch eine andere Klasse desselben Namens verdrängt werden. Etwas komplizierter ist das bei den Serverlet-Container.</p>
<h2 id="mcetoc_1g7bnagbudll">Garbage Collection</h2>
<p>Jedes erzeugte Java-Objekt belegt Speicher und der JVM steht nur eine begrenzte Speichermenge zur Verfügung. Es muss also eine Möglichkeit geben, Objekte wieder aus dem Speicher zu entfernen, wenn diese nicht mehr benötigt werden. Ansonsten wird jede Java-Anwendung irgendwann mit einem <em>OutOfMemoryError</em> beendet. Dieser Mechanismus nennt sich Garbage Collection.</p>
<p>Andere systemnähere Programmiersprachen haben keinen solchen Mechanismus und überlassen diese Aufgabe dem Entwickler selbst. Viele moderne Sprachen bieten mittlerweile eine automatische Garbage Collection an, aber Java war eine der ersten mit diesem Feature.</p>
<p>Welche Objekte nicht mehr verwendet werden, findet der Garbage Collector heraus, indem er Referenzen untersucht. Dazu geht er von den Garbage Collection Roots aus und folgt allen Referenzen von diesen Objekten aus. Alle Objekte, die von einer Root referenziert werden, werden als noch aktiv markiert. Objekte, die von diesen Objekten aus referenziert werden, werden ebenfalls markiert usw. Garbage Collection Roots können Class-Objekte, lebende Threads, Lokale Variablen und Parameter, Monitor-Objekte, JNI-Variablen und spezielle JVM-Objekte sein. Rekursiv werden so alle Objekte markiert, die von einer Garbage Collection Root direkt oder indirekt erreichbar sind. Anschliessend werden alle Objekte die nicht von einer Root aus erreichbar sind aus dem Speichern entfernt. Dieses Vorgehen nennt sich <em>Mark and Sweep Collection</em>. Die echten Abläufe der Garbage Collection sind noch etwas komplexer als hier beschrieben.</p>
<h2 id="mcetoc_1g7bnagbudlm">Speicherlecks</h2>
<p>Speicherlecks in Java kommen fast immer daher, dass man Objekte mit einer der Garbage Collection Roots verbinden und nicht wieder von dort entfernen. Am häufigsten passiert das mit statischen Variablen. Es ist leicht zu vergessen, dass ihr Inhalt nicht von selbst aus dem Speicher entfernt wird, im Unterschied zu Instanzvariablen. So kann man unbeabsichtigt viel Speicher belegen, indem man ein grosses Objekt in einer statischen Variablen hält, obwohl es bereits nicht mehr benötigt wird. Dabei handelt es sich aber nicht um ein Speicherleck, denn der belegte Speicher bleibt konstant und wächst mit der Zeit nicht mehr an. Ein echtes Speicherleck kann dadurch entstehen, dass man eine Collection in einem statischen Feld hält, der immer weiter Objekte hinzugefügt werden:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> class <span class="hljs-title" style="color: #ffc66d;">Speicherleck</span><span class="hljs-params">()</span></span>{
    <span class="hljs-keyword" style="color: #cc7832;">private</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">final</span> Map&lt;String, Speicherleck&gt; cache = <span class="hljs-keyword" style="color: #cc7832;">new</span> HashMap&lt;&gt;();
    <span class="hljs-keyword" style="color: #cc7832;">private</span> String name;

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-title" style="color: #ffc66d;">Speicherleck</span><span class="hljs-params">(String name)</span></span>{
        <span class="hljs-keyword" style="color: #cc7832;">this</span>.name = name;
        cache.put(name, <span class="hljs-keyword" style="color: #cc7832;">this</span>);
    }
}</pre>
<p>Jede Instanz der Klasse Speicherleck, die jemals erzeugt wird, wird in der statischen map cache gespeichert, aber nie wieder von dort entfernt. Das führt dazu, dass keine Instanz von Speicherleck jemals vom Garbage Collector entsorg werden kann, denn alle Instanzen werden von einem statischen Feld referenziert. Es kann natürlich sein, dass Sie diese Objekte wirklich noch brauchen, aber häufiger handelt es sich bei solchen Konstrukten um einen Fehler.</p>
<p>Weitere Quellen für Speicherlecks in Java sind ThreadLocals, Variablen, die direkt mit einem Thread verbunden sind. Die genauen Mechanismen, wie es zu einem Speicherleck kommen kann, sind sehr ähnlich wie bei statischen Feldern: Solange der Thread lebendig ist, kann der Inhalt eines ThreadLocal nicht aus dem Speicher entfernt werden. Eine wachsende Collection dort hat deshalb denselben zerstörerischen Effekt wie in einem Statischen Feld.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>GUIs mit JavaFX</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/guis-mit-javafx.html"/>
        <id>https://www.finecloud.ch/guis-mit-javafx.html</id>
            <category term="vscode"/>
            <category term="softwareentwicklung"/>
            <category term="javafx"/>
            <category term="java"/>
            <category term="gui"/>
            <category term="dev"/>

        <updated>2022-07-05T14:38:13+02:00</updated>
            <summary>
                <![CDATA[
                    Einführung JavaFX ist das modernste in der Java SE integrierte GUI-Framework zum Erstellen grafischer Benutzeroberflächen (GUI: Graphical User Interface). JavaFX ist eine reine Java-Bibliothek, die zwar, auch deklarative Definitionen von GUIs über XML ermöglicht, die aber im Kern aus Java-Klassen besteht. Seit Java 8 liegt&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g72m7p9tbq6">Einführung</a></li>
<li><a href="#mcetoc_1g72m7p9tbq7">Installation</a>
<ul>
<li><a href="#mcetoc_1g72m7p9tbq8">VSCode</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g72m7p9tbq9">Architektur von JavaFX</a>
<ul>
<li><a href="#mcetoc_1g72m7p9tbqa">Stage</a></li>
<li><a href="#mcetoc_1g72m7p9tbqb">Scene</a></li>
<li><a href="#mcetoc_1g72no33dbv0">Node Typen</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g72no33dbv1">GUI Komponenten</a>
<ul>
<li><a href="#mcetoc_1g72no33dbv2">Beschriftungen</a></li>
<li><a href="#mcetoc_1g72no33dbv3">Schaltflächen</a>
<ul>
<li><a href="#mcetoc_1g775qiifdbg">Buttons</a></li>
<li><a href="#mcetoc_1g775qiifdbh">Radiobuttons</a></li>
<li><a href="#mcetoc_1g775qiifdbi">Toggle-Buttons</a></li>
<li><a href="#u16.4.3">Checkboxen </a></li>
<li><a href="#u16.4.3">Choiceboxen</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g72no33dbv4">Eingabefelder</a></li>
<li><a href="#mcetoc_1g775qiifdbj">Menüs</a></li>
<li><a href="#mcetoc_1g775qiifdbk">Weitere Standardkomponenten</a></li>
<li><a href="#u16.4.7">Geometrische Komponenten</a></li>
<li><a href="#mcetoc_1g775qiifdbl">Diagramme</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1g72m7p9tbq6">Einführung</h2>
<p>JavaFX ist das modernste in der Java SE integrierte GUI-Framework zum Erstellen grafischer Benutzeroberflächen (<span class="italic">GUI: Graphical User Interface</span>). JavaFX ist eine reine Java-Bibliothek, die zwar, auch deklarative Definitionen von GUIs über XML ermöglicht, die aber im Kern aus Java-Klassen besteht.</p>
<h2 id="mcetoc_1g72m7p9tbq7">Installation</h2>
<p class="standard">Seit Java 8 liegt das JavaFX-SDK dem JDK bei. Allerdings kann es sein, dass Sie die JavaFX-Bibliothek explizit dem Klassenpfad hinzufügen müssen. Zu finden ist die entsprechende JAR-Datei unter <span class="italic">&lt;JRE_HOME&gt;/lib/ext/jfxrt.jar</span>, wobei <span class="italic">&lt;JRE_HOME&gt;</span> für das root-Verzeichnis Ihrer JRE-Installation steht.</p>
<p class="standard">Die Versionsnummer von JavaFX ist seit Java/JavaFX 8 an die Version von Java angepasst.</p>
<h3 id="mcetoc_1g72m7p9tbq8">VSCode</h3>
<p>Damit man JavaFX in VSCode nutzen kann, müssen wir uns JavaFX zuerst <a href="https://gluonhq.com/products/javafx/" rel="nofollow">von hier</a> herunterladen. Anschliessend entpacken wir die Archivdatei.</p>
<p>In unserem VSCode Java Projekt müssen wir nun die JavaFX Libs einbinden: Um JavaFX als Abhängigkeiten zum Projekt hinzuzufügen, kann man einfach alle JAR-Dateien aus dem lib-Ordner des heruntergeladenen JavaFX-SDK kopieren, zum Beispiel /Users/your-user/Downloads/javafx-sdk-18.0.2/lib/ in die lib-Ordner Ihres Projekts. Alternativ kann man auch über den Java Projects Explorer hinzufügen. Dazu klickt man auf die Schaltfläche + neben den referenzierten Bibliotheken und wählt die JARs der JavaFX-Bibliothek aus, um sie hinzuzufügen.</p>
<p>Als letzter Schritt müssen wir VSCode beibringen, dass wir das Java Programm mit Parameter an die Java VM übergeben und ausführen wollen. Dazu erstellen wir in unserem Projekt im Ordner <code>.vscode</code> eine Datei namens <code>launch.json</code> mit dem folgenden Inhalt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=<span class="hljs-number" style="color: #6897bb;">830387</span>
    <span class="hljs-string" style="color: #6a8759;">"version"</span>: <span class="hljs-string" style="color: #6a8759;">"0.2.0"</span>,
    <span class="hljs-attr">"configurations"</span>: [
        {
            <span class="hljs-attr">"type"</span>: <span class="hljs-string" style="color: #6a8759;">"java"</span>,
            <span class="hljs-attr">"name"</span>: <span class="hljs-string" style="color: #6a8759;">"Launch BeispielAnwendung"</span>,
            <span class="hljs-attr">"request"</span>: <span class="hljs-string" style="color: #6a8759;">"launch"</span>,
            <span class="hljs-attr">"mainClass"</span>: <span class="hljs-string" style="color: #6a8759;">"app.Kap16.BeispielAnwendung"</span>,
            <span class="hljs-attr">"projectName"</span>: <span class="hljs-string" style="color: #6a8759;">"labproject_3808de47"</span>,
            <span class="hljs-attr">"vmArgs"</span>: <span class="hljs-string" style="color: #6a8759;">"--module-path /Users/Dave/Downloads/javafx-sdk-18.0.1/lib/ --add-modules javafx.controls,javafx.fxml"</span>
        }
}</pre>
<p>Entscheidend ist die Angabe der <code>vmArgs</code>. Eine detailliertere Anleitung ist <a href="https://openjfx.io/openjfx-docs/#install-javafx" rel="nofollow">hier</a> zu finden.</p>
<h2 id="mcetoc_1g72m7p9tbq9">Architektur von JavaFX</h2>
<p>Am einfachsten wir schauen uns zuerst ein Beispiel an:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">package</span> app.Kap16;

<span class="hljs-keyword" style="color: #cc7832;">import</span> javafx.application.Application;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javafx.stage.Stage;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javafx.scene.Scene;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javafx.scene.control.Button;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javafx.scene.layout.BorderPane;

<span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">BeispielAnwendung</span> <span class="hljs-keyword" style="color: #cc7832;">extends</span> <span class="hljs-title" style="color: #ffc66d;">Application</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        launch(args);
   }

    <span class="hljs-meta" style="color: #bbb529;">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">start</span><span class="hljs-params">(Stage stage)</span> <span class="hljs-keyword" style="color: #cc7832;">throws</span> Exception </span>{
        stage.setTitle(<span class="hljs-string" style="color: #6a8759;">"Beispielanwendung"</span>);
            Button button = <span class="hljs-keyword" style="color: #cc7832;">new</span> Button();
            button.setText(<span class="hljs-string" style="color: #6a8759;">"Klick mich"</span>);
            BorderPane root = <span class="hljs-keyword" style="color: #cc7832;">new</span> BorderPane();
            root.setCenter(button);
            Scene scene = <span class="hljs-keyword" style="color: #cc7832;">new</span> Scene(root, <span class="hljs-number" style="color: #6897bb;">300</span>, <span class="hljs-number" style="color: #6897bb;">250</span>);
            stage.setScene(scene);
            stage.show();
        }
}</pre>
<p>Die Ausgabe bei der Ausführung:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-03-at-20.39.58.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-2xl.png 1600w"  alt="" width="333" height="310"></figure>
<h3 id="mcetoc_1g72m7p9tbqa">Stage</h3>
<p>Der Einstiegspunkt jeder JavaFX-Anwendung ist die javafx.application.Application Klasse. Application repräsentiert die Anwendungsklasse und stellt ein Fenster mit Rahmen, Systemmenü und Standardschaltflächen zur Verfügung. Die einzige Methode, die dabei überschrieben werden muss, ist die Methode start(), die als Parameter ein Objekt vom Typ javafx.stage.Stage übergeben bekommt.<br><br>Stage bildet an dieser Stelle das Hauptfenster der Anwendung, das alle weiteren Komponenten enthält. Die Methode start() dient dazu, den Inhalt dieses Fensters zu definieren. Um die Anwendung zu starten, reicht es, in der main-Methode die statische Methode launch() aufzurufen, die von Application bereitgestellt wird. Ausserdem darf man nicht vergessen, die Methode show() an dem Stage-Objekt aufzurufen, sonst wird das entsprechende Fenster gar nicht angezeigt.</p>
<h3 id="mcetoc_1g72m7p9tbqb">Scene</h3>
<p>Über einzelne Scenes (Instanzen der Klasse javax.scene.Scene) wird definiert, welche Komponenten in einer Anwendung dargestellt werden. Innerhalb einer Scene werden die einzelnen Komponenten als Knoten (nodes) in einer Baumstruktur verwaltet, dem sogenannten Scene Graph. Nodes können ihrerseits mehrere andere Nodes als Kindelemente enthalten, aber nur ein Elternelement haben. Bei Nodes mit Kindelementen spricht man von Branch Nodes, bei Nodes ohne Kindelemente von Leaf Nodes.</p>
<h3 id="mcetoc_1g72no33dbv0">Node Typen</h3>
<p>Die Basisklasse für alle Scene Graph Elemente bildet die Klasse javafx.scene.Node. Ihr folgt eine ganze Hierarchie an Unterklassen. Diese lassen sich in fünf Hauptkategorien unterteilen:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/45/ClassNode.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/45/responsive/ClassNode-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-2xl.png 1600w"  alt="" width="684" height="216"></figure>
<ul>
<li>Parent: alle Nodes, die Kindelemente haben können</li>
<li>Canvas: Grafikoperationen, mit der sogenannten Canvas-API kann man zweidimensionale Grafiken zeichnen</li>
<li>Shape: Oberklasse verschiedener geometrischer Formen</li>
<li>ImageView: Darstellung von Bildern</li>
<li>MediaView: Integration von Audio- und Videokomponenten</li>
</ul>
<h2 id="mcetoc_1g72no33dbv1">GUI Komponenten</h2>
<h3 id="mcetoc_1g72no33dbv2">Beschriftungen</h3>
<p>Die Klasse javafx.scene.control wird verwendet um Beschriftungen zu GUI Elementen benötigt werden. Den Text der Beschriftung setzen Sie dabei entweder über den Konstruktor oder über die Methode setText():</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Label label = <span class="hljs-keyword" style="color: #cc7832;">new</span> Label(<span class="hljs-string" style="color: #6a8759;">"Beschriftung"</span>);</pre>
<h3 id="mcetoc_1g72no33dbv3">Schaltflächen</h3>
<h4 id="mcetoc_1g775qiifdbg">Buttons</h4>
<p>Buttons bezeichnen einfache Schaltflächen. Repräsentiert werden Buttons durch die Klasse Button. Eine einfache Schaltfläche lässt sich folgendermassen erzeugen (gleiches Ergebnis wie oben):</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Button button = <span class="hljs-keyword" style="color: #cc7832;">new</span> Button(<span class="hljs-string" style="color: #6a8759;">"Klick mich"</span>);</pre>
<h4 id="mcetoc_1g775qiifdbh">Radiobuttons</h4>
<p>Radiobuttons eignen sich gut für Entweder-oder-Auswahlen. Repräsentiert werden Radiobuttons durch die Klasse RadioButton. Mit Hilfe der Klasse ToggleGroup können (und sollten) die einzelnen Radiobuttons ausserdem in Gruppen zusammengefasst werden. Innerhalb einer solchen Gruppe ist dann sichergestellt, dass jeweils nur ein Radiobutton ausgewählt werden kann. Über setSelected() lässt sich zudem der Radiobutton bestimmen, der (vor)selektiert werden soll. Im folgenden Beispiel wird eine ToggleGroup mit drei Radiobuttons erstellt, von denen der Radiobutton mit der Aufschrift Gelb vorselektiert ist:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">            ToggleGroup group = <span class="hljs-keyword" style="color: #cc7832;">new</span> ToggleGroup();
            RadioButton radioButton1 = <span class="hljs-keyword" style="color: #cc7832;">new</span> RadioButton(<span class="hljs-string" style="color: #6a8759;">"Gelb"</span>);
            radioButton1.setToggleGroup(group);
            radioButton1.setSelected(<span class="hljs-keyword" style="color: #cc7832;">true</span>);
            RadioButton radioButton2 = <span class="hljs-keyword" style="color: #cc7832;">new</span> RadioButton(<span class="hljs-string" style="color: #6a8759;">"Blau"</span>);
            radioButton2.setToggleGroup(group);
            RadioButton radioButton3 = <span class="hljs-keyword" style="color: #cc7832;">new</span> RadioButton(<span class="hljs-string" style="color: #6a8759;">"Grün"</span>);
            radioButton3.setToggleGroup(group);</pre>
<figure class="post__image"><br><img loading="lazy"  src="https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-06.32.10.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-2xl.png 1600w"  alt="" width="427" height="94"></figure>
<h4 id="mcetoc_1g775qiifdbi">Toggle-Buttons</h4>
<p>Toggle-Buttons (Klasse ToggleButton) eignen sich gut, wenn Sie eine Schaltfläche benötigen, die zwei Zustände darstellen kann (beispielsweise »An« und »Aus«). Über die Methode setSelected(), die einen booleschen Wert entgegennimmt, können Sie dabei zwischen beiden Zuständen wechseln und über isSelected() den aktuellen Zustand ermitteln. Wie Radiobuttons können auch Toggle-Buttons innerhalb einer Gruppe definiert werden. Im Unterschied zu Radiobuttons, bei denen immer genau einer der Buttons ausgewählt ist, ist es bei Toggle-Buttons also innerhalb einer Gruppe nicht zwingend notwendig, dass überhaupt ein Button ausgewählt ist. Standardmässig ist jedoch der erste Button einer Gruppe vorausgewählt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">            ToggleGroup group2 = <span class="hljs-keyword" style="color: #cc7832;">new</span> ToggleGroup();
            ToggleButton toggleButtonOne = <span class="hljs-keyword" style="color: #cc7832;">new</span> ToggleButton(<span class="hljs-string" style="color: #6a8759;">"Option1"</span>);
            toggleButtonOne.setToggleGroup(group2);
            toggleButtonOne.setSelected(<span class="hljs-keyword" style="color: #cc7832;">true</span>);
            ToggleButton toggleButtonTwo = <span class="hljs-keyword" style="color: #cc7832;">new</span> ToggleButton(<span class="hljs-string" style="color: #6a8759;">"Option2"</span>);
            toggleButtonTwo.setToggleGroup(group2);
            ToggleButton toggleButtonThree = <span class="hljs-keyword" style="color: #cc7832;">new</span> ToggleButton(<span class="hljs-string" style="color: #6a8759;">"Option3"</span>);
            toggleButtonThree.setToggleGroup(group2);</pre>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-06.44.26.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-2xl.png 1600w"  alt="" width="423" height="93"></figure>
<h4 id="u16.4.3">Checkboxen </h4>
<p>Checkboxen (Klasse CheckBox) bezeichnen Kästchen, über die bestimmte Auswahlen getroffen werden können. Ob eine Checkbox selektiert ist oder nicht, kann programmatisch über die Methode setSelected() bestimmt werden. Des Weiteren kann eine Checkbox über setIndeterminate() als »definiert« oder als »undefiniert« markiert werden. Beide Methoden erwarten jeweils einen booleschen Wert, in der Kombination ergeben sich so insgesamt drei (sichtbare) verschiedene Zustände pro Checkbox:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">            CheckBox checkBox1 = <span class="hljs-keyword" style="color: #cc7832;">new</span> CheckBox(<span class="hljs-string" style="color: #6a8759;">"Option1"</span>);
            checkBox1.setSelected(<span class="hljs-keyword" style="color: #cc7832;">false</span>);
            CheckBox checkBox2 = <span class="hljs-keyword" style="color: #cc7832;">new</span> CheckBox(<span class="hljs-string" style="color: #6a8759;">"Option2"</span>);
            checkBox2.setSelected(<span class="hljs-keyword" style="color: #cc7832;">true</span>);
            CheckBox checkBox3 = <span class="hljs-keyword" style="color: #cc7832;">new</span> CheckBox(<span class="hljs-string" style="color: #6a8759;">"Option3"</span>);
            checkBox3.setSelected(<span class="hljs-keyword" style="color: #cc7832;">true</span>);
            checkBox3.setIndeterminate(<span class="hljs-keyword" style="color: #cc7832;">true</span>);</pre>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-06.50.34.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-2xl.png 1600w"  alt="" width="386" height="85"></figure>
<h4 id="u16.4.3">Choiceboxen</h4>
<p>Bei einer Choicebox handelt es sich um eine Aufklappliste, aus der genau ein Wert ausgewählt werden kann. Choiceboxen werden durch die Klasse ChoiceBox repräsentiert. Zu beachten ist dabei, dass die einzelnen Elemente, die ausgewählt werden können, über die Methode setItems() in Form einer ObservableList hinzugefügt werden müssen. Eine ObservableList unterscheidet sich von normalen Listen, darin, dass Änderungen an einer solchen Liste von der jeweiligen GUI-Komponente wahrgenommen werden und sich direkt auf die grafische Darstellung auswirken. Eine solche ObservableList erzeugen Sie beispielsweise wie in folgendem Listing über die Helferklasse FXCollections:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">            ChoiceBox&lt;String&gt; choiceBox = <span class="hljs-keyword" style="color: #cc7832;">new</span> ChoiceBox&lt;String&gt;();
            ObservableList&lt;String&gt; farben = FXCollections.observableArrayList(<span class="hljs-string" style="color: #6a8759;">"Rot"</span>, <span class="hljs-string" style="color: #6a8759;">"Blau"</span>, <span class="hljs-string" style="color: #6a8759;">"Grün"</span>);
            choiceBox.setItems(farben);
            farben.add(<span class="hljs-string" style="color: #6a8759;">"Orange"</span>);</pre>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-06.57.00.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-2xl.png 1600w"  alt="" width="370" height="217"></figure><br><br>Zunächst wird hierbei eine ObservableList mit den Werten "Rot", "Blau" und "Grün" angelegt, dann über setItems() der Choicebox hinzugefügt und anschliessend um ein weiteres Element ("Orange") ergänzt. Diese Änderung wirkt sich direkt auf die Choicebox aus: Es stehen anschliessend vier Werte in der Choicebox zur Verfügung.</p>
<h3 id="mcetoc_1g72no33dbv4">Eingabefelder</h3>
<p>Neben Schaltflächen, über die in der Regel bestimmte Aktionen ausgelöst oder Selektionen getroffen werden, benötigen Sie ausserdem Komponenten, über die die Nutzer Eingaben tätigen können. Dazu zählen unter anderem einzeilige Textfelder, Passwortfelder oder mehrzeilige Textfelder. Textfelder und Passwortfelder sehen auf den ersten Blick gleich aus und verfügen auch über ähnliche Methoden. Das wundert wenig, da PasswordField eine Subklasse von TextField ist. Der einzige sichtbare Unterschied ist, dass jedes Textzeichen, das Sie eingeben, bei einem Passwortfeld durch ein Bullet-Symbol auf dem Bildschirm dargestellt wird:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">            TextField text = <span class="hljs-keyword" style="color: #cc7832;">new</span> TextField();
            text.setPromptText(<span class="hljs-string" style="color: #6a8759;">"Benutzername"</span>);
            PasswordField password = <span class="hljs-keyword" style="color: #cc7832;">new</span> PasswordField();
            password.setPromptText(<span class="hljs-string" style="color: #6a8759;">"Passwort"</span>);</pre>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-07.37.47.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-2xl.png 1600w"  alt="" width="369" height="91"></figure>
<p>Ausserdem ist es bei einer Instanz von PasswordField im Gegensatz zu reinen TextField-Instanzen nicht möglich, den Text aus dem Feld zu kopieren oder auszuschneiden: Die Methoden copy() und cut() funktionieren hier nicht.</p>
<p>Für mehrzeilige Textfelder kann die Klasse TextArea verwendet werden.</p>
<h3 id="mcetoc_1g775qiifdbj">Menüs</h3>
<p>Für das Erstellen von Menüs kommen mehrere Klassen zum Einsatz: Das Menü selbst wird mit Hilfe der Klasse Menu dargestellt, die einzelnen Menüeinträge durch die Klasse MenuItem. Hier gibt es beispielsweise die Sonderformen CheckMenuItem und RadioMenuItem, die jeweils über eine Checkbox respektive einen Radiobutton verfügen. Da Menu selbst auch eine Unterklasse von MenuItem ist, lassen sich Menüs zudem auf sehr einfache Weise schachteln.</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">            MenuBar menuBar = <span class="hljs-keyword" style="color: #cc7832;">new</span> MenuBar();
            Menu menu = <span class="hljs-keyword" style="color: #cc7832;">new</span> Menu(<span class="hljs-string" style="color: #6a8759;">"Datei"</span>);
            MenuItem menuItem = <span class="hljs-keyword" style="color: #cc7832;">new</span> MenuItem(<span class="hljs-string" style="color: #6a8759;">"Neu"</span>);
            CheckMenuItem checkMenuItem = <span class="hljs-keyword" style="color: #cc7832;">new</span> CheckMenuItem(<span class="hljs-string" style="color: #6a8759;">"Auswahl"</span>);
            menu.getItems().add(menuItem);
            menu.getItems().add(checkMenuItem);
            menuBar.getMenus().add(menu);</pre>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-05-at-14.30.06.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-2xl.png 1600w"  alt="" width="339" height="137"></figure>
<h3 id="mcetoc_1g775qiifdbk">Weitere Standardkomponenten</h3>
<p>Weitere Komponenten sind <a href="https://docs.oracle.com/javafx/2/api/" target="_blank" rel="nofollow noopener noreferrer">hier</a> zu finden.</p>
<h3 id="u16.4.7" class="t3">Geometrische Komponenten</h3>
<p>Im Paket javafx.scene.shape findet man eine ganze Reihe geometrischer Formen wie Kreise (Klasse Circle), Pfade (Klasse Path), Rechtecke (Klasse Rectangle), Ellipsen (Klasse Ellipse) und einfachen Text (Klasse Text).</p>
<h3 id="mcetoc_1g775qiifdbl">Diagramme</h3>
<p>Im JavaFX-SDK sind verschiedene Diagrammformen enthalten (Paket javafx.scene.chart). Diese reichen von einfachen Balkendiagrammen (BarChart) und Tortendiagrammen (PieChart) über Liniendiagramme (LineChart) bis hin zu spezielleren Diagrammformen wie BubbleChart, ScatterChart und AreaChart.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Kubernetes auf Proxmox mit Ansible und Terraform (Teil 2)</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/kubernetes-auf-proxmox-mit-ansible-und-terraform-teil-2.html"/>
        <id>https://www.finecloud.ch/kubernetes-auf-proxmox-mit-ansible-und-terraform-teil-2.html</id>
            <category term="terraform"/>
            <category term="proxmox"/>
            <category term="openebs"/>
            <category term="minio"/>
            <category term="metallb"/>
            <category term="kubernetes"/>
            <category term="kubeadm"/>
            <category term="k8s"/>
            <category term="istio"/>
            <category term="containerd"/>
            <category term="container"/>
            <category term="calico"/>
            <category term="ansible"/>

        <updated>2022-07-05T14:44:19+02:00</updated>
            <summary>
                <![CDATA[
                    Dieser Post wurde aus dem Original (https://datastrophic.io/kubernetes-homelab-with-proxmox-kubeadm-calico-openebs-and-metallb/)auf Deutsch übersetzt und leicht angepasst. Nachdem wir im ersten Teil mit Terraform die VMs für unseren K8s Cluster deployed haben, werden wir nun mit Ansible die folgenden K8s Komponenten in den worker Nodes und dem Controller installieren: Die&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g6umq8onb0g">Einleitung</a></li>
<li><a href="#mcetoc_1g6umq8onb0h">Voraussetzungen</a></li>
<li><a href="#mcetoc_1g6umq8onb0i">Vorbereitungen</a></li>
<li><a href="#mcetoc_1g6uqq0ncb8i">Notwendige Software</a>
<ul>
<li><a href="#mcetoc_1g6uqq0ncb8j">Volume Provisioning mit OpenEBS</a></li>
<li><a href="#mcetoc_1g6uqq0ncb8k">LoadBalancer mit MetalLB</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g6uqq0ncb8l">Installation überprüfen</a></li>
<li><a href="#kubernetes-dashboard">Kubernetes Dashboard</a></li>
</ul>
</div>
<p>Dieser Post wurde aus dem Original (<a href="https://datastrophic.io/kubernetes-homelab-with-proxmox-kubeadm-calico-openebs-and-metallb/">https://datastrophic.io/kubernetes-homelab-with-proxmox-kubeadm-calico-openebs-and-metallb/</a>)auf Deutsch übersetzt und leicht angepasst.</p>
<h2 id="mcetoc_1g6umq8onb0g">Einleitung</h2>
<p>Nachdem wir im ersten Teil mit Terraform die VMs für unseren K8s Cluster deployed haben, werden wir nun mit Ansible die folgenden K8s Komponenten in den worker Nodes und dem Controller installieren:</p>
<ul dir="auto">
<li><code>kubeadm</code> für das Kubernetes Cluster bootstrapping</li>
<li><code>containerd</code> als container runtime</li>
<li><code>Calico</code> für das Pod networking</li>
<li><code>MetalLB</code>  verwenden wir als <code>LoadBalancer</code> service type</li>
<li><code>OpenEBS</code> für das Volume provisioning</li>
<li><code>Istio</code> für ingress und traffic management</li>
</ul>
<p>Die Kubernetes-Distribution der Wahl ist in diesem Fall Vanilla Open Source Kubernetes, das mit dem kubeadm-Tool für Cluster-Bootstrapping geliefert wird. Vanilla Kubernetes hat einen grösseren Fussabdruck im Vergleich zu k3s und eignet sich deshalb nicht gut für Umgebungen mit eingeschränkten Ressourcen. Es ist jedoch herstellerunabhängig und vollständig Open-Source, hat keine Modifikationen und sowohl die API-Änderungen als auch die Tools haben die gleiche Release-Kadenz, sodass das Risiko von Inkompatibilitäten oder Verzögerungen geringer ist.</p>
<h2 id="mcetoc_1g6umq8onb0h">Voraussetzungen</h2>
<ul>
<li>Cluster VMs sollten bereits provisioniert und erreichbar sein via SSH</li>
<li>empfohlen ist Ubuntu 20.04 als Cluster OS zu verwenden</li>
<li>der Benutzer (in unserem Fall <em>ubuntu</em>) sollte Superuser Berechtigungen haben auf den Cluster Nodes</li>
<li>Ansible ist lokal bei dir installiert</li>
</ul>
<h2 id="mcetoc_1g6umq8onb0i">Vorbereitungen</h2>
<p class="msg--info msg">Lade dir die Terraform und Ansible Files von <a href="https://github.com/datastrophic/kubernetes-deployment/tree/master/proxmox/" rel="nofollow">diesem Git Repo</a> herunter.</p>
<p>Die Variablen in  <code>ansible/group_vars/all</code> sollten noch überprüft werden:</p>
<div>
<ul>
<li><code>pod_subnet</code></li>
<li><code>service_subnet</code></li>
<li><code>dns</code></li>
<li><code>metallb_address_range</code></li>
</ul>
</div>
<p>Weiter musst du die IPs deiner VMs in dieser Datei nachtragen: <code>ansible/inventory.yaml</code></p>
<p>Vor der Bereitstellung von Kubernetes selbst müssen die Cluster-Knoten zusätzlich konfiguriert und Software installiert werden:</p>
<ul>
<li>Knoten müssen Swap deaktiviert, iptables aktiviert haben und Weiterleitung und überbrückten Datenverkehr gemäss Bootstrapping-Clustern mit kubeadm zulassen.</li>
<li>Auf den Knoten muss die Containerlaufzeit installiert sein. Die gängigste Containerlaufzeit, die in verschiedenen Cloud- und Anbieter-Kubernetes-Distributionen verwendet wird, ist containerd, also werden wir sie verwenden.</li>
<li>Weitere Informationen darüber, warum wir Docker nicht verwenden werden, findest du in <a href="https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/" rel="nofollow">Don’t Panic: Kubernetes and Docker</a>.</li>
<li>Auf Knoten müssen die folgenden Pakete installiert sein: kubelet, kubectl und kubeadm. Diese können über den Standard-Paketmanager wie apt installiert werden.</li>
</ul>
<p>Es gibt ein dediziertes Playbook zum Bootstrapping der Knoten mit allen erforderlichen Konfigurationen und Abhängigkeiten, die unter ansible/bootstrap.yaml verfügbar sind. Überprüfe die Standardeinstellungen und führe das Playbook wie folgt aus:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-section" style="color: #ffc66d;">#~$ ansible-playbook -i ansible/inventory.yaml ansible/bootstrap.yaml -u ubuntu</span>
[<span class="hljs-symbol" style="color: #6897bb;">WARNING</span>]: <span class="hljs-link" style="color: #629755;">Invalid characters were found in group names but not replaced, use -vvvv to see details</span>

PLAY [Bootstrapping hosts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
ok: [control-plane-0.k8s.cluster]
ok: [worker-1.k8s.cluster]
ok: [worker-0.k8s.cluster]
ok: [worker-2.k8s.cluster]

TASK [commons : install common packages] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [worker-0.k8s.cluster]

TASK [commons : disable swap] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [control-plane-0.k8s.cluster]

TASK [commons : disable swap in fstab] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>*
ok: [worker-2.k8s.cluster]
ok: [control-plane-0.k8s.cluster]
ok: [worker-0.k8s.cluster]
ok: [worker-1.k8s.cluster]

TASK [commons : enable br_netfilter] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [control-plane-0.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]

TASK [commons : ensure iptables enabled] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [worker-1.k8s.cluster]
changed: [control-plane-0.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]

TASK [commons : enable port forward] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [control-plane-0.k8s.cluster]

TASK [container-runtime : create config and data dirs] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [worker-2.k8s.cluster] =&gt; (item=/etc/containerd)
changed: [control-plane-0.k8s.cluster] =&gt; (item=/etc/containerd)
changed: [worker-1.k8s.cluster] =&gt; (item=/etc/containerd)
changed: [worker-0.k8s.cluster] =&gt; (item=/etc/containerd)
changed: [control-plane-0.k8s.cluster] =&gt; (item=/tmp/containerd)
changed: [worker-2.k8s.cluster] =&gt; (item=/tmp/containerd)
changed: [worker-1.k8s.cluster] =&gt; (item=/tmp/containerd)
changed: [worker-0.k8s.cluster] =&gt; (item=/tmp/containerd)

TASK [container-runtime : download and install runc] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
changed: [worker-1.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [control-plane-0.k8s.cluster]
changed: [worker-0.k8s.cluster]

TASK [container-runtime : download and install crictl] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [worker-1.k8s.cluster]
changed: [control-plane-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-0.k8s.cluster]

TASK [container-runtime : download containerd] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [worker-0.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [control-plane-0.k8s.cluster]
changed: [worker-2.k8s.cluster]

TASK [container-runtime : copy containerd binaries] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [control-plane-0.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]

TASK [container-runtime : copy containerd config] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [control-plane-0.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]

TASK [container-runtime : create containerd systemd service] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [worker-2.k8s.cluster]

TASK [container-runtime : reload systemd] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
ok: [worker-1.k8s.cluster]
ok: [worker-0.k8s.cluster]
ok: [worker-2.k8s.cluster]
ok: [control-plane-0.k8s.cluster]

TASK [container-runtime : enable containerd systemd service] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]

TASK [container-runtime : start containerd service] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [worker-0.k8s.cluster]
changed: [control-plane-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]

TASK [kubernetes-packages : adding Kubernetes repository apt key] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [control-plane-0.k8s.cluster]

TASK [kubernetes-packages : adding Kubernetes deb repository] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [worker-1.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [control-plane-0.k8s.cluster]

TASK [kubernetes-packages : installing Kubernetes packages] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [control-plane-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-1.k8s.cluster]

TASK [kubernetes-packages : hold kubeadm, kubectl, kubelet] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [worker-0.k8s.cluster] =&gt; (item=kubeadm)
changed: [worker-1.k8s.cluster] =&gt; (item=kubeadm)
changed: [control-plane-0.k8s.cluster] =&gt; (item=kubeadm)
changed: [worker-2.k8s.cluster] =&gt; (item=kubeadm)
changed: [worker-0.k8s.cluster] =&gt; (item=kubectl)
changed: [worker-1.k8s.cluster] =&gt; (item=kubectl)
changed: [worker-2.k8s.cluster] =&gt; (item=kubectl)
changed: [control-plane-0.k8s.cluster] =&gt; (item=kubectl)
changed: [worker-0.k8s.cluster] =&gt; (item=kubelet)
changed: [worker-1.k8s.cluster] =&gt; (item=kubelet)
changed: [worker-2.k8s.cluster] =&gt; (item=kubelet)
changed: [control-plane-0.k8s.cluster] =&gt; (item=kubelet)

PLAY RECAP <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
control-plane-0.k8s.cluster : ok=21  changed=18  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 
worker-0.k8s.cluster    : ok=21  changed=18  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 
worker-1.k8s.cluster    : ok=21  changed=18  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 
worker-2.k8s.cluster    : ok=21  changed=18  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 </pre>
<p>Sobald alle Voraussetzungen erfüllt sind, können wir kubeadm für das Cluster-Bootstrapping verwenden. Die Installation des Kubernetes-Clusters besteht aus zwei Hauptschritten: Bootstrapping der Steuerungsebene und Joining zu den Worker-Knoten. Wir können dies tun, indem wir das Playbook ansible/kubernetes-install.yaml ausführen:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-section" style="color: #ffc66d;">#~$ ansible-playbook -i ansible/inventory.yaml ansible/kubernetes-install.yaml -u ubuntu</span>
[<span class="hljs-symbol" style="color: #6897bb;">WARNING</span>]: <span class="hljs-link" style="color: #629755;">Invalid characters were found in group names but not replaced, use -vvvv to see details</span>

PLAY [Bootstrap Kubernetes Control Plane] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
ok: [control-plane-0.k8s.cluster]

TASK [kubeadm-init : copy kubeadm init config] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [control-plane-0.k8s.cluster]

TASK [kubeadm-init : running kubeadm init] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
changed: [control-plane-0.k8s.cluster]

TASK [calico : copy Calico manifests] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
changed: [control-plane-0.k8s.cluster]

TASK [calico : install Calico] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster]

PLAY [Retrieve join token and certificate hash] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
ok: [control-plane-0.k8s.cluster]

TASK [kubeadm-join-config : create local dir for token and cert hash] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [control-plane-0.k8s.cluster -&gt; localhost]

TASK [kubeadm-join-config : kubeadm token generate] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [control-plane-0.k8s.cluster]

TASK [kubeadm-join-config : generate cert hash] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
changed: [control-plane-0.k8s.cluster]

TASK [kubeadm-join-config : persist token locally] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster -&gt; localhost]

TASK [kubeadm-join-config : persist cert hash locally] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [control-plane-0.k8s.cluster -&gt; localhost]

PLAY [Join Kubernetes worker nodes] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
ok: [worker-1.k8s.cluster]
ok: [worker-2.k8s.cluster]
ok: [worker-0.k8s.cluster]

TASK [kubeadm-join : copy kubeadm join config] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [worker-0.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [worker-2.k8s.cluster]

TASK [kubeadm-join : running kubeadm join] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
changed: [worker-1.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-0.k8s.cluster]

PLAY [Copy kubeconfig from remote] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
ok: [control-plane-0.k8s.cluster]

TASK [fetching] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster]

PLAY RECAP <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
control-plane-0.k8s.cluster : ok=13  changed=10  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 
worker-0.k8s.cluster    : ok=3  changed=2  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 
worker-1.k8s.cluster    : ok=3  changed=2  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 
worker-2.k8s.cluster    : ok=3  changed=2  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 </pre>
<p>Das Playbook führt kubeadm init auf den Knoten der Steuerungsebene aus und verwendet eine deklarative Clusterkonfiguration, die die bevorzugte Methode zum Konfigurieren von kubeadm ist. Die Konfigurationsvorlage ist unter ansible/roles/kubeadm-init/templates/kubeadm.yaml verfügbar. Sobald der Bootstrap der Steuerungsebene abgeschlossen ist, ruft Ansible ein Token und einen Zertifikat-Hash ab, die für die Authentifizierung der Worker-Knoten beim API-Server erforderlich sind, und führt kubeadm join auf den Worker-Knoten aus.<br><br>Das Playbook stellt Calico für die Clusternetzwerke bereit. Die Wahl von Calico ist motiviert, weil es die am weitesten verbreitete Netzwerk- und Sicherheitslösung für Kubernetes ist (zum Zeitpunkt des Schreibens).<br><br>Sobald die Playbook-Ausführung abgeschlossen ist, wird eine kubeconfig-Datei admin.conf in das aktuelle Verzeichnis geholt. Um zu überprüfen, ob der Cluster gebootet und verbunden ist, führe Folgendes aus:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">#~$  kubectl --kubeconfig=admin.conf get nodes</span>
NAME                          STATUS   ROLES                  AGE     VERSION
control-plane-0.k8s.cluster   Ready    control-plane,master   3m30s   v1.21.6
worker-0                      Ready    &lt;none&gt;                 2m54s   v1.21.6
worker-1                      Ready    &lt;none&gt;                 2m55s   v1.21.6
worker-2                      Ready    &lt;none&gt;                 2m55s   v1.21.6</pre>
<blockquote>
<p>es ist empfohlen die Location der admin.conf Datei als env. Variabel zu exportieren, damit man die Datei nicht jedesmal mit --kubeconfig mitgeben muss:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">export KUBECONFIG=<span class="hljs-variable" style="color: #629755;">$(pwd)</span>/<span class="hljs-literal" style="color: #6897bb;">admin</span>.conf</pre>
</blockquote>
<h2 id="mcetoc_1g6uqq0ncb8i">Notwendige Software</h2>
<p>Wenn der Kubernetes-Cluster eingerichtet und ausgeführt wird, können wir jetzt Container darauf bereitstellen und ausführen. Ein paar wesentliche Teile des voll funktionsfähigen Clusters fehlen jedoch noch: die dynamische Volume-Bereitstellung und die Unterstützung für Dienste welche einen LoadBalancer benötigen.</p>
<h3 id="mcetoc_1g6uqq0ncb8j">Volume Provisioning mit OpenEBS</h3>
<p>Die Volume Provisioner-Lösung ist sowohl in Situationen nützlich, in denen Anwendungen von Drittanbietern eine Standard-StorageClass zum Bereitstellen von PersistentVolumes benötigen, als auch in Situationen, in denen eine Datenreplikation für Hochverfügbarkeitsgarantien erforderlich ist.<br><br>Die Verwendung von OpenEBS für das Home-Lab-Setup erscheint vernünftig, da es lokale Engines für die Bereitstellung von PersistentVolumes bereitstellt, die direkt von den lokalen Festplatten auf Hosts unterstützt werden. Wenn eine Datenreplikation erforderlich ist, verfügt OpenEBS über mehrere Replicated Engines, deren Leistung jedoch unterschiedlich ist.<br><br>Um eine minimale Installation mit hostlokalen PersistentVolumes bereitzustellen, bietet OpenEBS eine „Lite“-Version:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">#~$ kubectl apply -f https://openebs.github.io/charts/openebs-operator-lite.yaml</span>
namespace/openebs created
serviceaccount/openebs-maya-operator created
clusterrole.rbac.authorization.k8s.io/openebs-maya-operator created
clusterrolebinding.rbac.authorization.k8s.io/openebs-maya-operator created
customresourcedefinition.apiextensions.k8s.io/blockdevices.openebs.io created
customresourcedefinition.apiextensions.k8s.io/blockdeviceclaims.openebs.io created
configmap/openebs-ndm-config created
daemonset.apps/openebs-ndm created
deployment.apps/openebs-ndm-operator created
deployment.apps/openebs-ndm-cluster-exporter created
service/openebs-ndm-cluster-exporter-service created
daemonset.apps/openebs-ndm-node-exporter created
service/openebs-ndm-node-exporter-service created
deployment.apps/openebs-localpv-provisioner created</pre>
<p>Sobald der Operator installiert ist, erstellen wir eine StorageClass und setzen diese als Standard. Das ermöglicht die Verwendung von OpenEBS für die Volume-Bereitstellung, ohne dass jedes Mal die StorageClass für PersistentVolumes angegeben werden muss:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl apply <span class="hljs-_">-f</span> https://openebs.github.io/charts/openebs-operator-lite.yaml
namespace/openebs created
serviceaccount/openebs-maya-operator created
clusterrole.rbac.authorization.k8s.io/openebs-maya-operator created
clusterrolebinding.rbac.authorization.k8s.io/openebs-maya-operator created
customresourcedefinition.apiextensions.k8s.io/blockdevices.openebs.io created
customresourcedefinition.apiextensions.k8s.io/blockdeviceclaims.openebs.io created
configmap/openebs-ndm-config created
daemonset.apps/openebs-ndm created
deployment.apps/openebs-ndm-operator created
deployment.apps/openebs-ndm-cluster-exporter created
service/openebs-ndm-cluster-exporter-service created
daemonset.apps/openebs-ndm-node-exporter created
service/openebs-ndm-node-exporter-service created
deployment.apps/openebs-localpv-provisioner created
Dave@ChuckNorris[08:37:02]~/github/homelab$ kubectl apply <span class="hljs-_">-f</span> - &lt;&lt;EOF
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: openebs-hostpath
  annotations:
    storageclass.kubernetes.io/is-default-class: <span class="hljs-string" style="color: #6a8759;">"true"</span>
    openebs.io/cas-type: <span class="hljs-built_in">local</span>
    cas.openebs.io/config: |
      - name: StorageType
        value: <span class="hljs-string" style="color: #6a8759;">"hostpath"</span>
      - name: BasePath
        value: <span class="hljs-string" style="color: #6a8759;">"/var/openebs/local/"</span>
provisioner: openebs.io/<span class="hljs-built_in">local</span>
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete
EOF
storageclass.storage.k8s.io/openebs-hostpath created</pre>
<h3 id="mcetoc_1g6uqq0ncb8k">LoadBalancer mit MetalLB</h3>
<p>Eine letzte fehlende Funktionalität im bereitgestellten Cluster ist die Möglichkeit, Dienste vom Typ LoadBalancer für das lokale Netzwerk verfügbar zu machen. Bei der Ausführung in der Cloud wird diese Funktionalität von den Kubernetes-Integrationen mit Cloud-Anbietern bereitgestellt, und entsprechende netzwerkseitige Load Balancer werden über den Infrastrukturanbieter bereitgestellt. Bei der Ausführung auf Bare Metal ist eine solche Integration in Kubernetes standardmässig nicht verfügbar.<br><br>MetalLB ist die am weitesten verbreitete Lösung für den NetzwerkLB.<br><br>Die MetalLB-Installation wird über eine ConfigMap konfiguriert und kann mehrere Adresspools enthalten:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attr">apiVersion:</span> v1
<span class="hljs-attr">kind:</span> ConfigMap
<span class="hljs-attr">metadata:</span>
<span class="hljs-attr">  namespace:</span> metallb-system
<span class="hljs-attr">  name:</span> config
<span class="hljs-attr">data:</span>
<span class="hljs-attr">  config:</span> <span class="hljs-string" style="color: #6a8759;">|
</span><span class="hljs-attr">    address-pools:</span>
<span class="hljs-attr">    - name:</span> default
<span class="hljs-attr">      protocol:</span> layer2
<span class="hljs-attr">      addresses:</span>
<span class="hljs-bullet" style="color: #6897bb;">      -</span> <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-template-variable" style="color: #629755;">{{ lab.metallb_address_range }}</span>"</span> </pre>
<p>Die obere Vorlage ist Teil des Ansible-Playbooks <code>ansible/metallb.yaml</code>, das die MetalLB installiert und konfiguriert, um Adressen aus der in <code>group_vars</code> angegebenen Variable <code>lab.metallb_address_range</code> zuzuweisen. Der Adressbereich muss für die Zielumgebung relevant sein (Teil des reservierten statischen Adressbereichs, der im Abschnitt zum Bereitstellungslayout beschrieben ist, damit die Adressen zugewiesen werden können. Um MetalLB zu installieren, führe Folgendes aus:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ ansible-playbook -i ansible/inventory.yaml ansible/metallb.yaml -u ubuntu
[<span class="hljs-symbol" style="color: #6897bb;">WARNING</span>]: <span class="hljs-link" style="color: #629755;">Invalid characters were found in group names but not replaced, use -vvvv to see details</span>

PLAY [Install MetalLB] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
ok: [control-plane-0.k8s.cluster]

TASK [metallb : copy MetalLB manifests] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [control-plane-0.k8s.cluster]

TASK [metallb : copy MetalLB config] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>*
changed: [control-plane-0.k8s.cluster]

TASK [metallb : create namespace] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster]

TASK [metallb : install MetalLB config] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [control-plane-0.k8s.cluster]

TASK [metallb : install MetalLB] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [control-plane-0.k8s.cluster]

PLAY RECAP <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
control-plane-0.k8s.cluster : ok=6    changed=5    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  </pre>
<h2 id="mcetoc_1g6uqq0ncb8l">Installation überprüfen</h2>
<p>Um die Installation zu überprüfen, erstellen wir eine MinIO-Bereitstellung mit einem PersistentVolume für die Speicherung und stellen die Bereitstellung dem lokalen Netzwerk über den LoadBalancer-Diensttyp zur Verfügung. Das Beispiel basiert auf den Kubernetes-Speicherbeispielen.</p>
<ol>
<li>Erstellen ein PersistentVolumeClaim:<br>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl apply <span class="hljs-_">-f</span> - &lt;&lt;EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
EOF
persistentvolumeclaim/minio-pv-claim created</pre>
</li>
<li>Erstelle ein Deployment:<br>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl apply <span class="hljs-_">-f</span> - &lt;&lt;EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio-deployment
spec:
  selector:
    matchLabels:
      app: minio
  strategy:
    <span class="hljs-built_in">type</span>: Recreate
  template:
    metadata:
      labels:
        app: minio
    spec:
      volumes:
      - name: storage
EOF       mountPath: <span class="hljs-string" style="color: #6a8759;">"/storage"</span>Ytim
deployment.apps/minio-deployment created</pre>
</li>
<li>Überprüfe ob der PersistentVolumeClaim an das PersistentVolume gebunden ist und dies erstellt wurde:<br>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl get pvc
NAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS       AGE
minio-pv-claim   Bound    pvc-8cb55047-43b6-4ab8<span class="hljs-_">-a</span>8cb-20dc1ecf1979   1Gi        RWO            openebs-hostpath   3m4s</pre>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl get pv
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                    STORAGECLASS       REASON   AGE
pvc-8cb55047-43b6-4ab8<span class="hljs-_">-a</span>8cb-20dc1ecf1979   1Gi        RWO            Delete           Bound    default/minio-pv-claim   openebs-hostpath            28s</pre>
</li>
<li>Überprüfe, ob das Deployment erfolgreich war:<br>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl describe deployment minio-deployment
Name:               minio-deployment
Namespace:          default
CreationTimestamp:  Sat, 02 Jul 2022 08:54:36 +0200
Labels:             &lt;none&gt;
Annotations:        deployment.kubernetes.io/revision: 1
Selector:           app=minio
Replicas:           1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:       Recreate
M<span class="hljs-keyword" style="color: #cc7832;">in</span>ReadySeconds:    0
Pod Template:
  Labels:  app=minio
  Containers:
   minio:
    Image:       minio/minio:latest
    Ports:       9000/TCP, 9001/TCP
    Host Ports:  9000/TCP, 9001/TCP
    Args:
      server
      /storage
      --console-address
      :9001
    Environment:
      MINIO_ACCESS_KEY:  minio
      MINIO_SECRET_KEY:  minio123
    Mounts:
      /storage from storage (rw)
  Volumes:
   storage:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim <span class="hljs-keyword" style="color: #cc7832;">in</span> the same namespace)
    ClaimName:  minio-pv-claim
    ReadOnly:   <span class="hljs-literal" style="color: #6897bb;">false</span>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  &lt;none&gt;
NewReplicaSet:   minio-deployment-59659f9655 (1/1 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  56s   deployment-controller  Scaled up replica <span class="hljs-built_in">set</span> minio-deployment-59659f9655 to 1</pre>
</li>
<li>Stelle das Deployment via Service vom Typ LoadBalancer zur Verfügung:<br>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl apply <span class="hljs-_">-f</span> - &lt;&lt;EOF
apiVersion: v1
kind: Service
metadata:
  name: minio
spec:
  ports:
  - name: http
    port: 9000
    protocol: TCP
    targetPort: 9000
  - name: http-ui
    port: 9001
    protocol: TCP
    targetPort: 9001
  selector:
    app: minio
  <span class="hljs-built_in">type</span>: LoadBalancer
EOF</pre>
</li>
<li>Überprüfe, ob der Service erstellt wurde und eine Externe IP erhalten hat:<br>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl get service minio
NAME    TYPE           CLUSTER-IP      EXTERNAL-IP      PORT(S)                         AGE
minio   LoadBalancer   10.97.129.247   192.168.30.150   9000:31713/TCP,9001:32327/TCP   10s</pre>
</li>
</ol>
<p>Die externe IP Adresse sollte in dem Anfangs definierten lokalen Subnetz Range sein. Du kannst nun via Browser die MinIO Konsole öffnen (in meinem Fall war die URL: <a href="http://192.168.30.150:9001/login">http://192.168.30.150:9001/login</a>) und dich mit Benutzer <em>minio</em> und Passwort <em>minio123</em> einloggen. Erstelle anschliessend ein Test Bucket, damit wir später auch überprüfen können ob die Daten persistent im Volume gespeichert werden:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/44/Screenshot-2022-07-02-at-17.03.04.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-xs.png 300w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-sm.png 480w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-md.png 768w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-lg.png 1024w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-xl.png 1360w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-2xl.png 1600w"  alt="" width="680" height="637"></figure>
<p>Nun können wir direkt überprüfen, ob das Test-Bucket (testsetsetsgsdgfsdgagbadfg) im PersistentVolume gespeichert wurde:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl <span class="hljs-built_in">exec</span> deploy/minio-deployment -- bash -c <span class="hljs-string" style="color: #6a8759;">"ls -la /storage"</span>
drwxrwxrwx 4 root root 4096 Jul  2 06:59 .
drwxr-xr-x 1 root root 4096 Jul  2 06:54 ..
drwxr-xr-x 8 root root 4096 Jul  2 06:54 .minio.sys
drwxr-xr-x 5 root root 4096 Jul  2 15:06 testsetsetsgsdgfsdgagbadfg</pre>
<p>Damit können wir sicher sein, dass die Daten im Testbucket im PersistentVolume landen.</p>
<p>Als letzter Schritt werden wir das Kubernetes Dashboard deployen, damit kann man den Gesamten K8s Cluster als WebUI bedienen.</p>
<h2 id="kubernetes-dashboard">Kubernetes Dashboard</h2>
<p>Das Kubernetes-Dashboard ist die unverzichtbare Mindestlösung für die Beobachtbarkeit. Das Kubernetes-Dashboard verfügt über eine entsprechende Installationsanleitung, und hier konzentrieren wir uns auf die entsprechenden RBAC-Berechtigungen für den verwendeten ServiceAccount.<br><br>Zuerst installieren wir das Kubernetes Dashboard:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl apply <span class="hljs-_">-f</span> https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml
namespace/kubernetes-dashboard created
serviceaccount/kubernetes-dashboard created
service/kubernetes-dashboard created
secret/kubernetes-dashboard-certs created
secret/kubernetes-dashboard-csrf created
secret/kubernetes-dashboard-key-holder created
configmap/kubernetes-dashboard-settings created
role.rbac.authorization.k8s.io/kubernetes-dashboard created
clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created
rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
deployment.apps/kubernetes-dashboard created
service/dashboard-metrics-scraper created
deployment.apps/dashboard-metrics-scraper created</pre>
<p>Während das Kubernetes-Dashboard das Erstellen neuer Ressourcen und das Bearbeiten vorhandener Ressourcen ermöglicht, ist die Verwendung im schreibgeschützten Modus sicherer und würde keine Sicherheitsrisiken mit sich bringen, falls jemand Zugriff auf die Benutzeroberfläche erhält. Der Sichtbarkeitsbereich des Dashboards wird über RBAC der darauf zugreifenden Benutzer gesteuert.<br><br>Der konservativste Ansatz wäre, eine Aggregated ClusterRole basierend auf der Standard-Viewer-Rolle zu verwenden und sie bei Bedarf mit zusätzlichen Regeln zu erweitern:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">kubectl apply <span class="hljs-_">-f</span> - &lt;&lt;EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dashboard-viewer
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.authorization.k8s.io/aggregate-to-view: <span class="hljs-string" style="color: #6a8759;">"true"</span>
  - matchLabels:
      rbac.homelab.k8s.io/aggregate-to-view: <span class="hljs-string" style="color: #6a8759;">"true"</span>
rules: []

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dashboard-extended-view
  labels:
    rbac.homelab.k8s.io/aggregate-to-view: <span class="hljs-string" style="color: #6a8759;">"true"</span>
rules:
- apiGroups:
  - <span class="hljs-string" style="color: #6a8759;">""</span>
  resources:
  - nodes
  - extensions
  - apps
  - batch
  - storage
  - networking
  verbs:
  - get
  - list
  - watch
EOF</pre>
<p>Die ClusterRole bietet erweiterte Anzeigeberechtigungen, erlaubt aber immer noch nicht das Anzeigen von Secrets und Ressourcen aus der API-Gruppe rbac.authorization.k8s.io. Wir erstellen uns nun ein dedizierter ServiceAccount und binden den Account an die erstellte ClusterRole:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">kubectl apply <span class="hljs-_">-f</span> - &lt;&lt;EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dashboard-viewer
  namespace: kubernetes-dashboard

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dashboard-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dashboard-viewer
subjects:
- kind: ServiceAccount
  name: dashboard-viewer
  namespace: kubernetes-dashboard
EOF
</pre>
<p>Auf das Dashboard kann entweder über den kubectl-Proxy oder über die Portweiterleitung zugegriffen werden:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">kubectl -n kubernetes-dashboard port-forward service/kubernetes-dashboard 8443:443</pre>
<p>Das Dashboard kann nun unter dieser URL erreicht werden: <a href="https://localhost:8443/">https://localhost:8443/</a> :</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/44/Screenshot-2022-07-02-at-17.25.57.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-xs.png 300w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-sm.png 480w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-md.png 768w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-lg.png 1024w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-xl.png 1360w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-2xl.png 1600w"  alt="" width="1474" height="380"></figure>
<p>Um das ServiceAccount-Token für den Zugriff auf das Dashboard zu ermitteln, führen wir Folgendes aus:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/dashboard-viewer -o jsonpath=<span class="hljs-string" style="color: #6a8759;">"{.secrets[0].name}"</span>) -o go-template=<span class="hljs-string" style="color: #6a8759;">"{{.data.token | base64decode}}"</span></pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Kubernetes auf Proxmox mit Ansible und Terraform (Teil 1)</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/kubernetes-auf-proxmox-mit-ansible-und-terraform.html"/>
        <id>https://www.finecloud.ch/kubernetes-auf-proxmox-mit-ansible-und-terraform.html</id>
            <category term="virtualisierung"/>
            <category term="unix"/>
            <category term="tools"/>
            <category term="terraform"/>
            <category term="ssh"/>
            <category term="shell"/>
            <category term="proxmox"/>
            <category term="network"/>
            <category term="linux"/>
            <category term="kvm"/>
            <category term="kubernetes"/>
            <category term="k8s"/>
            <category term="iac"/>
            <category term="ansible"/>

        <updated>2022-07-01T21:57:04+02:00</updated>
            <summary>
                <![CDATA[
                    Einleitung In ersten Teil werden wir ein cloud-init Template erstellen, welches wir dann mit Terraform nutzen um die K8S VMs zu erzeugen. Damit wir mit Terraform unsere Kubernetes Nodes deployen können, brauchen wir ein Template. Das kann man entweder bereits mit Ansible machen, sieh dir&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g6tl57b7ar2">Einleitung</a></li>
<li><a href="#mcetoc_1g6tb05kfaqf">Template Erstellen</a></li>
<li><a href="#mcetoc_1g6tb05kfaqg">Terraform IaC</a>
<ul>
<li><a href="#mcetoc_1g6tb05kfaqh">Proxmox vorbereiten für Terraform</a></li>
<li><a href="#mcetoc_1g6tb05kfaqi">Terraform ausführen</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1g6tl57b7ar2">Einleitung</h2>
<p>In ersten Teil werden wir ein cloud-init Template erstellen, welches wir dann mit Terraform nutzen um die K8S VMs zu erzeugen.</p>
<h2 id="mcetoc_1g6tb05kfaqf">Template Erstellen</h2>
<p>Damit wir mit Terraform unsere Kubernetes Nodes deployen können, brauchen wir ein Template. Das kann man entweder bereits mit Ansible machen, sieh dir <a href="https://github.com/datastrophic/kubernetes-deployment/blob/master/proxmox/README.md" rel="nofollow">diesen Blog Artikel</a> an. Was mit daran aber nicht gefällt ist folgendes:</p>
<blockquote>
<p>The playbook should be run as root on the PVE host itself.</p>
</blockquote>
<p>Echt jetzt? als root direkt auf dem Proxmox Host - d.h. zuerst noch Ansible auf Proxmox installieren? mhhh, nee danke.</p>
<p>Deshalb habe ich mich entschieden das Template lieber von Hand zu erstellen, da ich will den <strong>Ansible overhead nicht auf meinem Proxmox will und schon gar nicht als root ein Playboook ausführen.</strong></p>
<p>Logge dich mit deinem Admin User <strong>(nicht root - man arbeitet nie mit root)</strong> auf einer deiner Proxmox Hosts ein und führe folgende Befehle aus, um das Ubuntu Template für unsere K8s Nodes zu erstellen:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">wget https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img -P /tmp/
mv /tmp/focal-server-cloudimg-amd64.img /tmp/ubuntu-2004-server-amd64.qcow2
qm create 1001 --name ubuntu-2004-cloudinit-template --memory 4096 --net0 virtio,bridge=vmbr0
qm importdisk 1001 /tmp/ubuntu-2004-server-amd64.qcow2 <span class="hljs-built_in">local</span>-zfs
qm <span class="hljs-built_in">set</span> 1001 --scsihw virtio-scsi-pci --scsi0 <span class="hljs-built_in">local</span>-zfs:vm-1001-disk-0
qm <span class="hljs-built_in">set</span> 1001 --ide2 <span class="hljs-built_in">local</span>-zfs:cloudinit
qm <span class="hljs-built_in">set</span> 1001 --boot c --bootdisk scsi0
qm <span class="hljs-built_in">set</span> 1001 --serial0 socket --vga serial0
qm template 1001
</pre>
<h2 id="mcetoc_1g6tb05kfaqg">Terraform IaC</h2>
<p>Nun bereiten wir den Terraform Infrastructure-as-Code vor. Dazu erstellen wir zuerst eine neue Datei Namens <code>main.tf</code> mit dem folgenden Inhalt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">resource <span class="hljs-string" style="color: #6a8759;">"proxmox_vm_qemu"</span> <span class="hljs-string" style="color: #6a8759;">"control_plane"</span> {
  <span class="hljs-attr">count</span>             = <span class="hljs-number" style="color: #6897bb;">1</span>
  <span class="hljs-attr">name</span>              = <span class="hljs-string" style="color: #6a8759;">"control-plane-<span class="hljs-subst">${count.index}</span>.k8s.cluster"</span>
  <span class="hljs-attr">target_node</span>       = <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-subst">${var.pm_node}</span>"</span>

  <span class="hljs-attr">clone</span>             = <span class="hljs-string" style="color: #6a8759;">"ubuntu-2004-cloudinit-template"</span>

  <span class="hljs-attr">os_type</span>           = <span class="hljs-string" style="color: #6a8759;">"cloud-init"</span>
  <span class="hljs-attr">cores</span>             = <span class="hljs-number" style="color: #6897bb;">4</span>
  <span class="hljs-attr">sockets</span>           = <span class="hljs-string" style="color: #6a8759;">"1"</span>
  <span class="hljs-attr">cpu</span>               = <span class="hljs-string" style="color: #6a8759;">"host"</span>
  <span class="hljs-attr">memory</span>            = <span class="hljs-number" style="color: #6897bb;">2048</span>
  <span class="hljs-attr">scsihw</span>            = <span class="hljs-string" style="color: #6a8759;">"virtio-scsi-pci"</span>
  <span class="hljs-attr">bootdisk</span>          = <span class="hljs-string" style="color: #6a8759;">"scsi0"</span>

  disk {
    <span class="hljs-attr">size</span>            = <span class="hljs-string" style="color: #6a8759;">"20G"</span>
    <span class="hljs-attr">type</span>            = <span class="hljs-string" style="color: #6a8759;">"scsi"</span>
    <span class="hljs-attr">storage</span>         = <span class="hljs-string" style="color: #6a8759;">"local-lvm"</span>
    <span class="hljs-attr">iothread</span>        = <span class="hljs-number" style="color: #6897bb;">1</span>
  }

  network {
    <span class="hljs-attr">model</span>           = <span class="hljs-string" style="color: #6a8759;">"virtio"</span>
    <span class="hljs-attr">bridge</span>          = <span class="hljs-string" style="color: #6a8759;">"vmbr0"</span>
  }

  <span class="hljs-comment" style="color: grey;"># cloud-init settings</span>
  <span class="hljs-comment" style="color: grey;"># adjust the ip and gateway addresses as needed</span>
  <span class="hljs-attr">ipconfig0</span>         = <span class="hljs-string" style="color: #6a8759;">"ip=192.168.0.11<span class="hljs-subst">${count.index}</span>/24,gw=192.168.0.1"</span>
  <span class="hljs-attr">sshkeys</span> = file(<span class="hljs-string" style="color: #6a8759;">"<span class="hljs-subst">${var.ssh_key_file}</span>"</span>)
}

resource <span class="hljs-string" style="color: #6a8759;">"proxmox_vm_qemu"</span> <span class="hljs-string" style="color: #6a8759;">"worker_nodes"</span> {
  <span class="hljs-attr">count</span>             = <span class="hljs-number" style="color: #6897bb;">3</span>
  <span class="hljs-attr">name</span>              = <span class="hljs-string" style="color: #6a8759;">"worker-<span class="hljs-subst">${count.index}</span>.k8s.cluster"</span>
  <span class="hljs-attr">target_node</span>       = <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-subst">${var.pm_node}</span>"</span>

  <span class="hljs-attr">clone</span>             = <span class="hljs-string" style="color: #6a8759;">"ubuntu-2004-cloudinit-template"</span>

  <span class="hljs-attr">os_type</span>           = <span class="hljs-string" style="color: #6a8759;">"cloud-init"</span>
  <span class="hljs-attr">cores</span>             = <span class="hljs-number" style="color: #6897bb;">4</span>
  <span class="hljs-attr">sockets</span>           = <span class="hljs-string" style="color: #6a8759;">"1"</span>
  <span class="hljs-attr">cpu</span>               = <span class="hljs-string" style="color: #6a8759;">"host"</span>
  <span class="hljs-attr">memory</span>            = <span class="hljs-number" style="color: #6897bb;">4098</span>
  <span class="hljs-attr">scsihw</span>            = <span class="hljs-string" style="color: #6a8759;">"virtio-scsi-pci"</span>
  <span class="hljs-attr">bootdisk</span>          = <span class="hljs-string" style="color: #6a8759;">"scsi0"</span>

  disk {
    <span class="hljs-attr">size</span>            = <span class="hljs-string" style="color: #6a8759;">"20G"</span>
    <span class="hljs-attr">type</span>            = <span class="hljs-string" style="color: #6a8759;">"scsi"</span>
    <span class="hljs-attr">storage</span>         = <span class="hljs-string" style="color: #6a8759;">"local-lvm"</span>
    <span class="hljs-attr">iothread</span>        = <span class="hljs-number" style="color: #6897bb;">1</span>
  }

  network {
    <span class="hljs-attr">model</span>           = <span class="hljs-string" style="color: #6a8759;">"virtio"</span>
    <span class="hljs-attr">bridge</span>          = <span class="hljs-string" style="color: #6a8759;">"vmbr0"</span>
  }

  <span class="hljs-comment" style="color: grey;"># cloud-init settings</span>
  <span class="hljs-comment" style="color: grey;"># adjust the ip and gateway addresses as needed</span>
  <span class="hljs-attr">ipconfig0</span>         = <span class="hljs-string" style="color: #6a8759;">"ip=192.168.0.12<span class="hljs-subst">${count.index}</span>/24,gw=192.168.0.1"</span>
  <span class="hljs-attr">sshkeys</span> = file(<span class="hljs-string" style="color: #6a8759;">"<span class="hljs-subst">${var.ssh_key_file}</span>"</span>)
}
</pre>
<ul>
<li><code>clone</code> muss der eindeutige Name der Template VM sein, welche wir im letzten Schritt erstellen haben</li>
<li><code>ipconfig0</code> muss das Subnetz sein in welchem die VMs laufen sollen. In diesem Fall weisen wir den VMs statische IPs zu in einem realen, externen Netzwerk, sodass diese Hosts ohne NAT Routing auskommen und aus Sicht der anderen Hosts "ganz normal" aussehen.</li>
<li><span class="hljs-attr"><code>storage</code> musst du evt. anpassen, je nachdem was du bei dir für ein Dateisystem hast. Bei ZFS musst du local-zfs angeben usw.</span></li>
</ul>
<p>Weiter benötigen wir eine Datei mit den Variabeln, <code>variables.tf</code> mit dem Folgenden Inhalt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">variable <span class="hljs-string" style="color: #6a8759;">"pm_api_url"</span> {
  default = <span class="hljs-string" style="color: #6a8759;">"https://proxmox.lab.local/api2/json"</span>
}

variable <span class="hljs-string" style="color: #6a8759;">"pm_node"</span> {
  default = <span class="hljs-string" style="color: #6a8759;">"pve"</span>
}

<span class="hljs-comment" style="color: grey;"># variable "pm_user" {</span>
<span class="hljs-comment" style="color: grey;">#   default = ""</span>
<span class="hljs-comment" style="color: grey;"># }</span>

<span class="hljs-comment" style="color: grey;"># variable "pm_password" {</span>
<span class="hljs-comment" style="color: grey;">#   default = ""</span>
<span class="hljs-comment" style="color: grey;"># }</span>

variable <span class="hljs-string" style="color: #6a8759;">"ssh_key_file"</span> {
  default = <span class="hljs-string" style="color: #6a8759;">"~/.ssh/id_rsa.pub"</span>
}</pre>
<ul>
<li><code>pm_api_url</code> muss deine Proxmox URL sein, wenn du kein DNS und kein reverse proxy hast, muss du die IP verwenden und Port 8006.</li>
<li><code>pm_node</code> ist der Node deines Proxmox Clusters, auf welchem du dieses Terrafrom plan ausführen willst.</li>
<li><code>ssh_key_file</code> dein ssh key mit welchem du dann auf die K8S VMs verbinden kannst.</li>
</ul>
<p>Die letzte Datei welche wir noch brauchen ist die provider.tf mit diesem Inhalt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">terraform {
  required_providers {
    proxmox = {
      <span class="hljs-built_in">source</span> = <span class="hljs-string" style="color: #6a8759;">"Telmate/proxmox"</span>
      version = <span class="hljs-string" style="color: #6a8759;">"2.9.10"</span>
    }
  }
}

provider <span class="hljs-string" style="color: #6a8759;">"proxmox"</span> {
  pm_parallel       = 1
  pm_tls_insecure   = <span class="hljs-literal" style="color: #6897bb;">false</span>
  pm_api_url        = var.pm_api_url
<span class="hljs-comment" style="color: grey;">#   pm_password       = var.pm_password</span>
<span class="hljs-comment" style="color: grey;">#   pm_user           = var.pm_user</span>
}</pre>
<h3 id="mcetoc_1g6tb05kfaqh">Proxmox vorbereiten für Terraform</h3>
<p>Damit wir Proxmox mit Terraform steuern können, müssen wir zuerst noch ein paar Anpassungen machen. Dazu gehört folgendes (direkt auf dem Poxmox Host via CLI ausführen):</p>
<ul>
<li>Neue Rolle erstellen für den zukünftigen Terraform-Benutzer</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Benutzer „terraform-prov@pve“ erstellen</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Dem Benutzer terraform-prov die Rolle TERRAFORM-PROV hinzufügen</span></li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">pveum role add TerraformProv -privs <span class="hljs-string" style="color: #6a8759;">"VM.Allocate VM.Clone VM.Config.CDROM VM.Config.CPU VM.Config.Cloudinit VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network VM.Config.Options VM.Monitor VM.Audit VM.PowerMgmt Datastore.AllocateSpace Datastore.Audit"</span>
pveum user add terraform-prov@pve
pveum aclmod / -user terraform-prov@pve -role TerraformProv
pveum passwd terraform-prov@pve</pre>
<h3 id="mcetoc_1g6tb05kfaqi">Terraform ausführen</h3>
<p>Wenn du dich fragst, wieso ich beim Letzten Schritt <code style="font-weight: var(--font-weight-normal);">pm_user</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> und </span><code style="font-weight: var(--font-weight-normal);">pm_password</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> auskommentiert habe: man sollte nie Secrets nie in eine Datei schreiben! Wir lösen das, indem wir die folgenden env. Variabeln definieren (lokal auf deinem Gerät ausführen, auf welchem du Terraform verwenden willst):</span><span class="pl-k"><br></span></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-built_in">#~/github/homelab/terraform$ export</span> PM_USER=<span class="hljs-string" style="color: #6a8759;">"terraform-prov@pve"</span>
<span class="hljs-built_in">#~/github/homelab/terraform$ export</span> PM_PASS=<span class="hljs-string" style="color: #6a8759;">"password"</span></pre>
<p>Zuerst machen wir ein terraform init, um alle benötigten Komponenten zu installieren und das neue Terraform Repo zu initieren<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> (lokal auf deinem Gerät ausführen, auf welchem du Terraform verwenden willst):</span></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~/github/homelab/terraform$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding telmate/proxmox versions matching <span class="hljs-string" style="color: #6a8759;">"2.9.10"</span>...
- Installing telmate/proxmox v2.<span class="hljs-number" style="color: #6897bb;">9</span>.<span class="hljs-number" style="color: #6897bb;">10</span>...
- Installed telmate/proxmox v2.<span class="hljs-number" style="color: #6897bb;">9</span>.<span class="hljs-number" style="color: #6897bb;">10</span> (self-signed, key ID xxxx)

Partner and community providers are signed by their developers.
If youd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run <span class="hljs-string" style="color: #6a8759;">"terraform init"</span> in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running <span class="hljs-string" style="color: #6a8759;">"terraform plan"</span> to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.</pre>
<p>Als nächster Schritt erstellen mit terraform plan, einen terraform Plan und schreiben diese in eine Datei,<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> (lokal auf deinem Gerät ausführen, auf welchem du Terraform verwenden willst)</span>:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~/github/homelab/terraform$ terraform plan -out plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  <span class="hljs-comment" style="color: grey;"># proxmox_vm_qemu.control_plane[0] will be created</span>
  + resource <span class="hljs-string" style="color: #6a8759;">"proxmox_vm_qemu"</span> <span class="hljs-string" style="color: #6a8759;">"control_plane"</span> {
      + additional_<span class="hljs-built_in">wait</span>           = 0
      + agent                     = 0
      + automatic_reboot          = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + balloon                   = 0
      + bios                      = <span class="hljs-string" style="color: #6a8759;">"seabios"</span>
      + boot                      = <span class="hljs-string" style="color: #6a8759;">"c"</span>
      + bootdisk                  = <span class="hljs-string" style="color: #6a8759;">"scsi0"</span>
      + <span class="hljs-built_in">clone</span>                     = <span class="hljs-string" style="color: #6a8759;">"ubuntu-2004-cloudinit-template"</span>
      + <span class="hljs-built_in">clone</span>_<span class="hljs-built_in">wait</span>                = 0
      + cores                     = 4
      + cpu                       = <span class="hljs-string" style="color: #6a8759;">"host"</span>
      + default_ipv4_address      = (known after apply)
      + define_connection_info    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + force_create              = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + full_<span class="hljs-built_in">clone</span>                = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + guest_agent_ready_timeout = 100
      + hotplug                   = <span class="hljs-string" style="color: #6a8759;">"network,disk,usb"</span>
      + id                        = (known after apply)
      + ipconfig0                 = <span class="hljs-string" style="color: #6a8759;">"ip=192.168.0.0/24,gw=192.168.0.254"</span>
      + kvm                       = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + memory                    = 2048
      + name                      = <span class="hljs-string" style="color: #6a8759;">"control-plane-0.k8s.cluster"</span>
      + nameserver                = (known after apply)
      + numa                      = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + onboot                    = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + oncreate                  = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + os_<span class="hljs-built_in">type</span>                   = <span class="hljs-string" style="color: #6a8759;">"cloud-init"</span>
      + preprovision              = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + reboot_required           = (known after apply)
      + scsihw                    = <span class="hljs-string" style="color: #6a8759;">"virtio-scsi-pci"</span>
      + searchdomain              = (known after apply)
      + sockets                   = 1
      + ssh_host                  = (known after apply)
      + ssh_port                  = (known after apply)
      + sshkeys                   = &lt;&lt;-EOT
            ssh-rsa xxxx
        EOT
      + tablet                    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + target_node               = <span class="hljs-string" style="color: #6a8759;">"pve"</span>
      + unused_disk               = (known after apply)
      + vcpus                     = 0
      + vlan                      = -1
      + vmid                      = (known after apply)

      + disk {
          + backup       = 0
          + cache        = <span class="hljs-string" style="color: #6a8759;">"none"</span>
          + file         = (known after apply)
          + format       = (known after apply)
          + iothread     = 1
          + mbps         = 0
          + mbps_rd      = 0
          + mbps_rd_max  = 0
          + mbps_wr      = 0
          + mbps_wr_max  = 0
          + media        = (known after apply)
          + replicate    = 0
          + size         = <span class="hljs-string" style="color: #6a8759;">"20G"</span>
          + slot         = (known after apply)
          + ssd          = 0
          + storage      = <span class="hljs-string" style="color: #6a8759;">"local-zfs"</span>
          + storage_<span class="hljs-built_in">type</span> = (known after apply)
          + <span class="hljs-built_in">type</span>         = <span class="hljs-string" style="color: #6a8759;">"scsi"</span>
          + volume       = (known after apply)
        }

      + network {
          + bridge    = <span class="hljs-string" style="color: #6a8759;">"vmbr0"</span>
          + firewall  = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + link_down = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + macaddr   = (known after apply)
          + model     = <span class="hljs-string" style="color: #6a8759;">"virtio"</span>
          + queues    = (known after apply)
          + rate      = (known after apply)
          + tag       = 30
        }
    }

  <span class="hljs-comment" style="color: grey;"># proxmox_vm_qemu.worker_nodes[0] will be created</span>
  + resource <span class="hljs-string" style="color: #6a8759;">"proxmox_vm_qemu"</span> <span class="hljs-string" style="color: #6a8759;">"worker_nodes"</span> {
      + additional_<span class="hljs-built_in">wait</span>           = 0
      + agent                     = 0
      + automatic_reboot          = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + balloon                   = 0
      + bios                      = <span class="hljs-string" style="color: #6a8759;">"seabios"</span>
      + boot                      = <span class="hljs-string" style="color: #6a8759;">"c"</span>
      + bootdisk                  = <span class="hljs-string" style="color: #6a8759;">"scsi0"</span>
      + <span class="hljs-built_in">clone</span>                     = <span class="hljs-string" style="color: #6a8759;">"ubuntu-2004-cloudinit-template"</span>
      + <span class="hljs-built_in">clone</span>_<span class="hljs-built_in">wait</span>                = 0
      + cores                     = 4
      + cpu                       = <span class="hljs-string" style="color: #6a8759;">"host"</span>
      + default_ipv4_address      = (known after apply)
      + define_connection_info    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + force_create              = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + full_<span class="hljs-built_in">clone</span>                = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + guest_agent_ready_timeout = 100
      + hotplug                   = <span class="hljs-string" style="color: #6a8759;">"network,disk,usb"</span>
      + id                        = (known after apply)
      + ipconfig0                 = <span class="hljs-string" style="color: #6a8759;">"ip=192.168.0.0/24,gw=192.168.0.254"</span>
      + kvm                       = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + memory                    = 4098
      + name                      = <span class="hljs-string" style="color: #6a8759;">"worker-0.k8s.cluster"</span>
      + nameserver                = (known after apply)
      + numa                      = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + onboot                    = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + oncreate                  = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + os_<span class="hljs-built_in">type</span>                   = <span class="hljs-string" style="color: #6a8759;">"cloud-init"</span>
      + preprovision              = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + reboot_required           = (known after apply)
      + scsihw                    = <span class="hljs-string" style="color: #6a8759;">"virtio-scsi-pci"</span>
      + searchdomain              = (known after apply)
      + sockets                   = 1
      + ssh_host                  = (known after apply)
      + ssh_port                  = (known after apply)
      + sshkeys                   = &lt;&lt;-EOT
            ssh-rsa xxx
        EOT
      + tablet                    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + target_node               = <span class="hljs-string" style="color: #6a8759;">"pve"</span>
      + unused_disk               = (known after apply)
      + vcpus                     = 0
      + vlan                      = -1
      + vmid                      = (known after apply)

      + disk {
          + backup       = 0
          + cache        = <span class="hljs-string" style="color: #6a8759;">"none"</span>
          + file         = (known after apply)
          + format       = (known after apply)
          + iothread     = 1
          + mbps         = 0
          + mbps_rd      = 0
          + mbps_rd_max  = 0
          + mbps_wr      = 0
          + mbps_wr_max  = 0
          + media        = (known after apply)
          + replicate    = 0
          + size         = <span class="hljs-string" style="color: #6a8759;">"20G"</span>
          + slot         = (known after apply)
          + ssd          = 0
          + storage      = <span class="hljs-string" style="color: #6a8759;">"local-zfs"</span>
          + storage_<span class="hljs-built_in">type</span> = (known after apply)
          + <span class="hljs-built_in">type</span>         = <span class="hljs-string" style="color: #6a8759;">"scsi"</span>
          + volume       = (known after apply)
        }

      + network {
          + bridge    = <span class="hljs-string" style="color: #6a8759;">"vmbr0"</span>
          + firewall  = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + link_down = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + macaddr   = (known after apply)
          + model     = <span class="hljs-string" style="color: #6a8759;">"virtio"</span>
          + queues    = (known after apply)
          + rate      = (known after apply)
          + tag       = 30
        }
    }

  <span class="hljs-comment" style="color: grey;"># proxmox_vm_qemu.worker_nodes[1] will be created</span>
  + resource <span class="hljs-string" style="color: #6a8759;">"proxmox_vm_qemu"</span> <span class="hljs-string" style="color: #6a8759;">"worker_nodes"</span> {
      + additional_<span class="hljs-built_in">wait</span>           = 0
      + agent                     = 0
      + automatic_reboot          = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + balloon                   = 0
      + bios                      = <span class="hljs-string" style="color: #6a8759;">"seabios"</span>
      + boot                      = <span class="hljs-string" style="color: #6a8759;">"c"</span>
      + bootdisk                  = <span class="hljs-string" style="color: #6a8759;">"scsi0"</span>
      + <span class="hljs-built_in">clone</span>                     = <span class="hljs-string" style="color: #6a8759;">"ubuntu-2004-cloudinit-template"</span>
      + <span class="hljs-built_in">clone</span>_<span class="hljs-built_in">wait</span>                = 0
      + cores                     = 4
      + cpu                       = <span class="hljs-string" style="color: #6a8759;">"host"</span>
      + default_ipv4_address      = (known after apply)
      + define_connection_info    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + force_create              = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + full_<span class="hljs-built_in">clone</span>                = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + guest_agent_ready_timeout = 100
      + hotplug                   = <span class="hljs-string" style="color: #6a8759;">"network,disk,usb"</span>
      + id                        = (known after apply)
      + ipconfig0                 = <span class="hljs-string" style="color: #6a8759;">"ip=192.168.0.1/24,gw=192.168.0.254"</span>
      + kvm                       = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + memory                    = 4098
      + name                      = <span class="hljs-string" style="color: #6a8759;">"worker-1.k8s.cluster"</span>
      + nameserver                = (known after apply)
      + numa                      = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + onboot                    = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + oncreate                  = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + os_<span class="hljs-built_in">type</span>                   = <span class="hljs-string" style="color: #6a8759;">"cloud-init"</span>
      + preprovision              = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + reboot_required           = (known after apply)
      + scsihw                    = <span class="hljs-string" style="color: #6a8759;">"virtio-scsi-pci"</span>
      + searchdomain              = (known after apply)
      + sockets                   = 1
      + ssh_host                  = (known after apply)
      + ssh_port                  = (known after apply)
      + sshkeys                   = &lt;&lt;-EOT
            ssh-rsa xxx
        EOT
      + tablet                    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + target_node               = <span class="hljs-string" style="color: #6a8759;">"pve"</span>
      + unused_disk               = (known after apply)
      + vcpus                     = 0
      + vlan                      = -1
      + vmid                      = (known after apply)

      + disk {
          + backup       = 0
          + cache        = <span class="hljs-string" style="color: #6a8759;">"none"</span>
          + file         = (known after apply)
          + format       = (known after apply)
          + iothread     = 1
          + mbps         = 0
          + mbps_rd      = 0
          + mbps_rd_max  = 0
          + mbps_wr      = 0
          + mbps_wr_max  = 0
          + media        = (known after apply)
          + replicate    = 0
          + size         = <span class="hljs-string" style="color: #6a8759;">"20G"</span>
          + slot         = (known after apply)
          + ssd          = 0
          + storage      = <span class="hljs-string" style="color: #6a8759;">"local-zfs"</span>
          + storage_<span class="hljs-built_in">type</span> = (known after apply)
          + <span class="hljs-built_in">type</span>         = <span class="hljs-string" style="color: #6a8759;">"scsi"</span>
          + volume       = (known after apply)
        }

      + network {
          + bridge    = <span class="hljs-string" style="color: #6a8759;">"vmbr0"</span>
          + firewall  = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + link_down = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + macaddr   = (known after apply)
          + model     = <span class="hljs-string" style="color: #6a8759;">"virtio"</span>
          + queues    = (known after apply)
          + rate      = (known after apply)
          + tag       = 30
        }
    }

  <span class="hljs-comment" style="color: grey;"># proxmox_vm_qemu.worker_nodes[2] will be created</span>
  + resource <span class="hljs-string" style="color: #6a8759;">"proxmox_vm_qemu"</span> <span class="hljs-string" style="color: #6a8759;">"worker_nodes"</span> {
      + additional_<span class="hljs-built_in">wait</span>           = 0
      + agent                     = 0
      + automatic_reboot          = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + balloon                   = 0
      + bios                      = <span class="hljs-string" style="color: #6a8759;">"seabios"</span>
      + boot                      = <span class="hljs-string" style="color: #6a8759;">"c"</span>
      + bootdisk                  = <span class="hljs-string" style="color: #6a8759;">"scsi0"</span>
      + <span class="hljs-built_in">clone</span>                     = <span class="hljs-string" style="color: #6a8759;">"ubuntu-2004-cloudinit-template"</span>
      + <span class="hljs-built_in">clone</span>_<span class="hljs-built_in">wait</span>                = 0
      + cores                     = 4
      + cpu                       = <span class="hljs-string" style="color: #6a8759;">"host"</span>
      + default_ipv4_address      = (known after apply)
      + define_connection_info    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + force_create              = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + full_<span class="hljs-built_in">clone</span>                = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + guest_agent_ready_timeout = 100
      + hotplug                   = <span class="hljs-string" style="color: #6a8759;">"network,disk,usb"</span>
      + id                        = (known after apply)
      + ipconfig0                 = <span class="hljs-string" style="color: #6a8759;">"ip=192.168.0.2/24,gw=192.168.0.254"</span>
      + kvm                       = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + memory                    = 4098
      + name                      = <span class="hljs-string" style="color: #6a8759;">"worker-2.k8s.cluster"</span>
      + nameserver                = (known after apply)
      + numa                      = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + onboot                    = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + oncreate                  = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + os_<span class="hljs-built_in">type</span>                   = <span class="hljs-string" style="color: #6a8759;">"cloud-init"</span>
      + preprovision              = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + reboot_required           = (known after apply)
      + scsihw                    = <span class="hljs-string" style="color: #6a8759;">"virtio-scsi-pci"</span>
      + searchdomain              = (known after apply)
      + sockets                   = 1
      + ssh_host                  = (known after apply)
      + ssh_port                  = (known after apply)
      + sshkeys                   = &lt;&lt;-EOT
            ssh-rsa xxx
        EOT
      + tablet                    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + target_node               = <span class="hljs-string" style="color: #6a8759;">"pve"</span>
      + unused_disk               = (known after apply)
      + vcpus                     = 0
      + vlan                      = -1
      + vmid                      = (known after apply)

      + disk {
          + backup       = 0
          + cache        = <span class="hljs-string" style="color: #6a8759;">"none"</span>
          + file         = (known after apply)
          + format       = (known after apply)
          + iothread     = 1
          + mbps         = 0
          + mbps_rd      = 0
          + mbps_rd_max  = 0
          + mbps_wr      = 0
          + mbps_wr_max  = 0
          + media        = (known after apply)
          + replicate    = 0
          + size         = <span class="hljs-string" style="color: #6a8759;">"20G"</span>
          + slot         = (known after apply)
          + ssd          = 0
          + storage      = <span class="hljs-string" style="color: #6a8759;">"local-zfs"</span>
          + storage_<span class="hljs-built_in">type</span> = (known after apply)
          + <span class="hljs-built_in">type</span>         = <span class="hljs-string" style="color: #6a8759;">"scsi"</span>
          + volume       = (known after apply)
        }

      + network {
          + bridge    = <span class="hljs-string" style="color: #6a8759;">"vmbr0"</span>
          + firewall  = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + link_down = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + macaddr   = (known after apply)
          + model     = <span class="hljs-string" style="color: #6a8759;">"virtio"</span>
          + queues    = (known after apply)
          + rate      = (known after apply)
          + tag       = 30
        }
    }

Plan: 4 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: plan

To perform exactly these actions, run the following <span class="hljs-built_in">command</span> to apply:
    terraform apply <span class="hljs-string" style="color: #6a8759;">"plan"</span></pre>
<p>Wir führen nun den Plan aus, dabei werden die Ressourcen wie geplant angelegt, <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> (lokal auf deinem Gerät ausführen, auf welchem du Terraform verwenden willst)</span>:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~/github/homelab/terraform$ terraform apply <span class="hljs-string" style="color: #6a8759;">"plan"</span>
proxmox_vm_qemu.worker_nodes[2]: Creating...
proxmox_vm_qemu.worker_nodes[1]: Creating...
proxmox_vm_qemu.worker_nodes[0]: Creating...
proxmox_vm_qemu.control_plane[0]: Creating...
proxmox_vm_qemu.worker_nodes[0]: Still creating... [10s elapsed]
proxmox_vm_qemu.worker_nodes[1]: Still creating... [10s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [10s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [10s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [20s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [20s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [20s elapsed]
proxmox_vm_qemu.worker_nodes[1]: Still creating... [20s elapsed]
proxmox_vm_qemu.worker_nodes[1]: Still creating... [30s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [30s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [30s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [30s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [40s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [40s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [40s elapsed]
proxmox_vm_qemu.worker_nodes[1]: Still creating... [40s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [50s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [50s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [50s elapsed]
proxmox_vm_qemu.worker_nodes[1]: Still creating... [50s elapsed]
proxmox_vm_qemu.worker_nodes[1]: Creation complete after 59s [id=mrprmx/qemu/105]
proxmox_vm_qemu.control_plane[0]: Still creating... [1m0s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [1m0s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [1m0s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [1m10s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [1m10s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [1m10s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [1m20s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [1m20s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [1m20s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [1m30s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [1m30s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [1m30s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [1m40s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [1m40s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [1m40s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [1m50s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [1m50s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [1m50s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Creation complete after 1m57s [id=mrprmx/qemu/106]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [2m0s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [2m0s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [2m10s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [2m10s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [2m20s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [2m20s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [2m30s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [2m30s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [2m40s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [2m40s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [2m50s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [2m50s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Creation complete after 2m56s [id=mrprmx/qemu/107]
proxmox_vm_qemu.control_plane[0]: Still creating... [3m0s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [3m10s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [3m20s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [3m30s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [3m40s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [3m50s elapsed]
proxmox_vm_qemu.control_plane[0]: Creation complete after 3m54s [id=mrprmx/qemu/108]

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.</pre>
<p> </p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java und DBs</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/die-java-db.html"/>
        <id>https://www.finecloud.ch/die-java-db.html</id>
            <category term="sql"/>
            <category term="softwareentwicklung"/>
            <category term="jpa"/>
            <category term="jdbc"/>
            <category term="java"/>
            <category term="dev"/>
            <category term="database"/>
            <category term="acid"/>

        <updated>2022-06-28T12:08:33+02:00</updated>
            <summary>
                <![CDATA[
                    Java kommt von Haus aus mit einer relationalen Open-Source-Datenbank, der Apache-Derby-Datenbank, welche in reinem Java geschrieben ist und sich dadurch nicht nur als eigener Prozess betreiben lässt, sondern auch als Embeded Bestandteil einer Java Anwendung betrieben werden kann. Das ist jedoch für den produktiven Betrieb&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g6kqqqii9tr">DDL</a></li>
<li><a href="#mcetoc_1g6kqqqii9ts">SQL</a></li>
<li><a href="#mcetoc_1g6kqqqii9tt">Transaktionen</a>
<ul>
<li><a href="#mcetoc_1g6kqqqii9tu">ACID-Kriterien</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g6kr8o3v9u1">JDBC</a></li>
<li><a href="#mcetoc_1g6ks69ho9u3">JPA</a></li>
</ul>
</div>
<p>Java kommt von Haus aus mit einer relationalen Open-Source-Datenbank, der Apache-Derby-Datenbank, welche in reinem Java geschrieben ist und sich dadurch nicht nur als eigener Prozess betreiben lässt, sondern auch als Embeded Bestandteil einer Java Anwendung betrieben werden kann.</p>
<p>Das ist jedoch für den produktiven Betrieb nicht empfohlen. Für testgetriebene Entwicklung ist es jedoch sehr praktisch.</p>
<p>Eine relationale Datenbank zeichnet sich dadurch aus, das Sie eine strenge Struktur vorgibt, wie die Daten aussehen müssen. Die grösste Dateneinheit ist die Tabelle. Jede Tabelle besteht aus Spalten. Eine Spalte hat jeweils einen Namen und einen Datentyp. Der Datentyp einer Spalte kann nur aus einer vorgegebenen Liste von primitiven Datentypen gewählt werden.</p>
<p>Genauso wichtig wie die Tabellen selbst, sind die Beziehungen zwischen ihnen. Da eine Tabelle keine komplexen Datentypen als Spalten enthalten kann, werden Beziehungen zwischen Datenbankeinträgen durch Schlüsselbezeichnungen (Fremdschlüssel) von einer Tabelle zur anderen dargestellt.  Ein Eintrag in einer Tabelle, deren Inhalt von einer anderen Tabelle abhängt, enthält dabei einen Verweis auf den Eintrag der Ursprungs-Tabelle. Dafür muss ein eindeutiger Schlüssel des übergeordneten Eintrags verwendet werden, meist ein ID-Feld, dessen einziger Zweck es ist, ein eindeutiger Schlüssel zu sein, der primary key (Primärschlüssel).</p>
<p>Die Datenbank kann sicherstellen, dass für diese Art von Beziehung keine fehlerhaften Werte eingetragen werden können. Wenn im Feld Kunde_ID ein Schlüssel steht, zu dem kein passender Eintrag in der Tabelle Kunde existiert, kann die Transaktion nicht abgeschlossen werden, weil die Konsistenz der Daten verletzt würde. Genauso kann ein Kunde nicht gelöscht werden, ohne dass gleichzeitig seine Bestellungen gelöscht würden, denn sonst würde zu dem nun herrenlosen Bestellungen kein Kunde existieren und wieder wäre die Konsistenz nicht mehr vorhanden. Diese Art von Beschränkungen auf den Daten einer Datenbank nennt man einen Constraint.</p>
<h2 id="mcetoc_1g6kqqqii9tr">DDL</h2>
<p>Die <em>Data Definition Language</em> wird verwendet, um die Struktur einer Datenbank anzulegen, also Tabellen, Spalten, Constraints und mehr.</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">CREATE</span> <span class="hljs-keyword" style="color: #cc7832;">TABLE</span> Kunde (
    <span class="hljs-keyword" style="color: #cc7832;">id</span>            <span class="hljs-built_in">INTEGER</span>      PRIMARY <span class="hljs-keyword" style="color: #cc7832;">KEY</span>,
    vorname       <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number" style="color: #6897bb;">50</span>) <span class="hljs-keyword" style="color: #cc7832;">NOT</span> <span class="hljs-literal" style="color: #6897bb;">NULL</span>,
    nachname      <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number" style="color: #6897bb;">75</span>) <span class="hljs-keyword" style="color: #cc7832;">NOT</span> <span class="hljs-literal" style="color: #6897bb;">NULL</span>,
    strasse       <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number" style="color: #6897bb;">50</span>) <span class="hljs-keyword" style="color: #cc7832;">NOT</span> <span class="hljs-literal" style="color: #6897bb;">NULL</span>,
    …
);</pre>
<h2 id="mcetoc_1g6kqqqii9ts">SQL</h2>
<p>Die Structured Query Language, dient dazu, Daten in einer Datenbank zu bearbeiten und wiederzufinden. SQL ist ein extrem mächtiges Werkzeug, denn Datenbanken sind so auf das Durchsuchen grosser Datenbestände optimiert, dass sie gerade komplexe Anfragen oft schneller verarbeiten können, als eine Anwendung eine Liste im Speicher nach denselben Kriterien durchsuchen kann.</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">SELECT</span> <span class="hljs-keyword" style="color: #cc7832;">SUM</span>(best.gesamtpreis) 
  <span class="hljs-keyword" style="color: #cc7832;">FROM</span> Bestellung best
  <span class="hljs-keyword" style="color: #cc7832;">JOIN</span> Kunde k <span class="hljs-keyword" style="color: #cc7832;">ON</span> (best.kunde_id = k.id)
 <span class="hljs-keyword" style="color: #cc7832;">WHERE</span> k.id = <span class="hljs-number" style="color: #6897bb;">1</span>
   <span class="hljs-keyword" style="color: #cc7832;">AND</span> best.datum <span class="hljs-keyword" style="color: #cc7832;">BETWEEN</span> <span class="hljs-string" style="color: #6a8759;">'01/01/2016'</span> <span class="hljs-keyword" style="color: #cc7832;">AND</span> <span class="hljs-string" style="color: #6a8759;">'12/31/2016'</span></pre>
<h2 id="mcetoc_1g6kqqqii9tt">Transaktionen</h2>
<p>Änderungen an relationalen Datenbanken werden als Transaktionen gruppiert und müssen die ACID Kriterien erfüllen.</p>
<h3 id="mcetoc_1g6kqqqii9tu">ACID-Kriterien</h3>
<ul>
<li><strong>A</strong>tomicity: Jede Transaktion muss atomar sein, es werden entweder alle dazugehörigen Schreibvorgänge ausgeführt, oder keiner. Zudem ist sichergestellt, dass die von einer Transaktion betroffenen Datensätze nicht zwischenzeitlich von einer anderen Transaktion manipuliert wurden.</li>
<li><strong>C</strong>onsistency: Am Ende einer Transaktion ist sichergestellt, dass bestimmte Konsistenzregeln, die Sie auf der Datenbank konfigurieren können, eingehalten werden. Man kann durch diese Regeln nicht alle logischen Einschränkungen einer Anwendung abbilden, aber man kann verhindern, dass zu einem Benutzer mehrere Einkaufswagen existieren, oder umgekehrt.</li>
<li><strong>I</strong>solation: Jede Transaktion wird isoliert von allen anderen Transaktionen ausgeführt, so dass der Effekt für das Gesamtsystem so ist, als würden die Transaktionen nacheinander verarbeitet.</li>
<li><strong>D</strong>urability: Für alle abgeschlossenen Transaktionen ist garantiert, dass die Daten dauerhaft gespeichert sind, auch wenn die Datenbank abstürzt.</li>
</ul>
<h2 id="mcetoc_1g6kr8o3v9u1">JDBC</h2>
<p>Der Zugriff mit Java auf eine Datenbank erfolgt durch die JDBC (Java Database Connectivity)-API. Die API sorgt dafür, dass der Java Entwickler auf alle DBs, egal welchen Hersteller auf die exakt gleiche Weise zugreifen kann. Das ermöglicht dass die Datenbank ausgetauscht wird, ohne das dafür der Java Code angepasst werden muss. Alle verbreiteten Datenbanken werden direkt mit JDBC-Treiber ausgeliefert.</p>
<p>JDBC ermöglicht es, aus einer Java Anwendung heraus direkt DDL- und SQL-Anweisungen auf die DB auszuführen. Das Einzige was man wissen muss, ist, wie man die Verbindung zum DB-Server konfiguriert. Dazu wird ein URL-Format verwendet:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attribute" style="color: #6a8759;">jdbc</span>:<span class="hljs-attribute" style="color: #6a8759;">mysql</span>:<span class="hljs-comment" style="color: grey;">//192.168.1.1:3306/meineDatenbank</span></pre>
<p>Der erste Teil der URL, das Protokoll, ist immer gleich (jdbc). Der zweite Teil identifiziert den zu verwendenden Treiber und die Verbindungsinformationen zur Datenbank.</p>
<h2 id="mcetoc_1g6ks69ho9u3">JPA</h2>
<p>Die Java Persistence API setzt auf JDBC auf und ist heute der standard Weg, aus einer Java-Anwendung auf eine DB zuzugreifen. Die JPA ist Bestandteil von JEE. Sie ermöglicht nicht nur die Kommunikation mit einer DB, sie nimmt auch noch den Arbeitsschritt ORM (Object Relational Mapping) ab, also die Abbildung von Tabellenzeilen auf Java-Objekte. Für den Datenbankzugriff durch die JPA schreibt man eine ganz normale Java Klasse, die man durch eine Reihe von Annotationen zu einer JPA-Entität macht (eine Klasse, die mit der DB-Tabelle verbunden ist):</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-meta" style="color: #bbb529;">@Entity</span>
<span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">Kunde</span> </span>{
    <span class="hljs-meta" style="color: #bbb529;">@Id</span>
    <span class="hljs-meta" style="color: #bbb529;">@GeneratedValue</span>(strategy = GenerationType.TABLE)
    <span class="hljs-keyword" style="color: #cc7832;">private</span> <span class="hljs-keyword" style="color: #cc7832;">int</span> id;
    <span class="hljs-keyword" style="color: #cc7832;">private</span> String vorname;
    <span class="hljs-keyword" style="color: #cc7832;">private</span> String nachname;
    …

    <span class="hljs-meta" style="color: #bbb529;">@OneToMany</span>()
    <span class="hljs-keyword" style="color: #cc7832;">private</span> <span class="hljs-keyword" style="color: #cc7832;">final</span> List&lt;Kunde&gt; freunde = <span class="hljs-keyword" style="color: #cc7832;">new</span> ArrayList&lt;Kunde&gt;();

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">int</span> <span class="hljs-title" style="color: #ffc66d;">getId</span><span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword" style="color: #cc7832;">return</span> id;
    }

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">setId</span><span class="hljs-params">(<span class="hljs-keyword" style="color: #cc7832;">int</span> id)</span> </span>{
      <span class="hljs-keyword" style="color: #cc7832;">this</span>.id = id;
    }
    …
}</pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>HTTP Response Status Codes</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/http-response-status-codes.html"/>
        <id>https://www.finecloud.ch/http-response-status-codes.html</id>
            <category term="statuscode"/>
            <category term="softwareentwicklung"/>
            <category term="rfc9110"/>
            <category term="network"/>
            <category term="java"/>
            <category term="http"/>
            <category term="dev"/>

        <updated>2022-06-27T06:35:21+02:00</updated>
            <summary>
                <![CDATA[
                    Die erste Ziffer des Status-Codes definiert die Klasse der Response. Die letzten zwei Ziffern haben keine Bedeutung für die Kategorisierung. Es gibt fünf unterschiedliche Response Klassen: Nachfolgend eine Zusammenstellung der häufigsten HTTP-Codes denen man im Alltag begegnet: HTTP-Statuscode Bedeutung 200 OK Der Request wurde ohne&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Die erste Ziffer des Status-Codes definiert die Klasse der Response. Die letzten zwei Ziffern haben keine Bedeutung für die Kategorisierung.</p>
<p>Es gibt fünf unterschiedliche Response Klassen:</p>
<ul>
<li id="section-15-3.1" class="normal"><strong>1xx (Informational)</strong>: Der Request wurde entgegengenommen, der Prozess geht weiter.</li>
<li><strong>2xx (Successful)</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: Der Request ist angekommen und wurde korrekt interpretiert und ist damit akzeptiert.</span></li>
<li><strong>3xx (Redirection)</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: Weitere Schritte sind notwendig um den Request abzuschliessen.</span></li>
<li><strong>4xx (Client Error)</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: Der Request hat Syntaxfehler oder kann aus anderen Gründen nicht angenommen werden.</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> </span><strong>5xx (Server Error)</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: Der Server hatte ein Fehler beim Versuch den Request zu beantworten.</span></li>
</ul>
<p>Nachfolgend eine Zusammenstellung der häufigsten HTTP-Codes denen man im Alltag begegnet:</p>
<table id="t14.1">
<thead>
<tr>
<th>
<p><strong>HTTP-Statuscode</strong></p>
</th>
<th>
<p><strong>Bedeutung</strong></p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<p>200 OK</p>
</td>
<td>
<p>Der Request wurde ohne Fehler verarbeitet.</p>
</td>
</tr>
<tr>
<td>
<p>400 Bad Request</p>
</td>
<td>
<p>Der empfangene Request war fehlerhaft. Wenn du aus einem Browser zugreifst, solltest du diese Meldung nicht sehen.</p>
</td>
</tr>
<tr>
<td>
<p>401 Unauthorized</p>
</td>
<td>
<p>Die angefragte Ressource ist nur für angemeldete Benutzer freigegeben, aber der Anfragende ist nicht angemeldet.</p>
</td>
</tr>
<tr>
<td>
<p>403 Forbidden</p>
</td>
<td>
<p>Die Ressource ist nur für angemeldete Benutzer mit bestimmten Rechten freigegeben. Der Benutzer ist zwar angemeldet, besitzt aber nicht die notwendigen Rechte.</p>
</td>
</tr>
<tr>
<td>
<p>404 Not Found</p>
</td>
<td>
<p>Die angefragte Ressource konnte nicht gefunden werden.</p>
</td>
</tr>
<tr>
<td>
<p>405 Method Not Allowed</p>
</td>
<td>
<p>Die verwendete HTTP-Methode wird von dieser Ressource nicht unterstützt. Im Servlet bedeutet das, dass die do…-Methode nicht implementiert ist.</p>
</td>
</tr>
<tr>
<td>
<p>500 Internal Server Error</p>
</td>
<td>
<p>Bei der Verarbeitung des Requests ist im Server ein Fehler aufgetreten. Diesen Fehler bekommen Sie zu sehen, wenn Ihr Servlet eine Exception wirft.</p>
</td>
</tr>
</tbody>
</table>
<p>Ausführlichere Angaben zu den HTTP Status Codes findest du im <a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-status-codes" rel="nofollow">RFC9110</a>.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>HTTP Methoden - RFC9110</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/http-methoden-rfc9110.html"/>
        <id>https://www.finecloud.ch/http-methoden-rfc9110.html</id>
            <category term="softwareentwicklung"/>
            <category term="servlet"/>
            <category term="rfc9110"/>
            <category term="java"/>
            <category term="http"/>
            <category term="dev"/>

        <updated>2022-06-25T10:55:55+02:00</updated>
            <summary>
                <![CDATA[
                    Was geschieht eigentlich wenn ich eine Webseite aufrufe? Wir überspringen den Ersten Teil mit DNS und gehen davon aus, dass die URL bereits im DNS Cache ist. Um diese Frage zu beantworten, müssen wir uns mit den Grundlagen des HTTP-Protokolls befassen. Der Aufruf der Webseite&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Was geschieht eigentlich wenn ich eine Webseite aufrufe?</h2>
<p>Wir überspringen den Ersten Teil mit DNS und gehen davon aus, dass die URL bereits im DNS Cache ist. Um diese Frage zu beantworten, müssen wir uns mit den Grundlagen des HTTP-Protokolls befassen.</p>
<h3>Der Standard HTTP-Request</h3>
<p>Der Aufruf der Webseite beginnt im Browser. Dieser öffnet eine Netzwerkverbindung zur eingegebenen Adresse. Für diesen Schritt ist aber noch nicht die gesamte URL relevant, nur Servername (oder die IP-Adresse) und Port werden benötigt. Über diese Netzwerkverbindung wird ein HTTP-Request gesendet. HTTP ist ein textbasiertes Protokoll, deswegen kann man einfach einsehen, wie dieser Request aussieht:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">GET <span class="hljs-regexp">/servlet-1.0-SNAPSHOT/</span> HTTP/<span class="hljs-number" style="color: #6897bb;">1.1</span>
<span class="hljs-string" style="color: #6a8759;">Host:</span> <span class="hljs-string" style="color: #6a8759;">localhost:</span><span class="hljs-number" style="color: #6897bb;">8080</span>
User-<span class="hljs-string" style="color: #6a8759;">Agent:</span> Mozilla<span class="hljs-regexp">/5.0 (Macintosh; Intel Mac OS X 10.15; rv:101.0) Gecko/</span><span class="hljs-number" style="color: #6897bb;">20100101</span> Firefox/<span class="hljs-number" style="color: #6897bb;">101.0</span>
<span class="hljs-string" style="color: #6a8759;">Accept:</span> text<span class="hljs-regexp">/html,application/</span>xhtml+xml,application<span class="hljs-regexp">/xml;q=0.9,image/</span>avif,image<span class="hljs-regexp">/webp,*/</span>*;q=<span class="hljs-number" style="color: #6897bb;">0.8</span>
Accept-<span class="hljs-string" style="color: #6a8759;">Language:</span> en-US,en;q=<span class="hljs-number" style="color: #6897bb;">0.5</span>
Accept-<span class="hljs-string" style="color: #6a8759;">Encoding:</span> gzip, deflate, br
<span class="hljs-string" style="color: #6a8759;">Connection:</span> keep-alive</pre>
<p>Die erste Zeile des Requests enthält die wichtigsten Informationen:</p>
<ul>
<li>die relative Adresse der angesprochenen Ressource auf dem Server: /servlet-1.0-SNAPSHOT. Anhand dieses Pfades bestimmt der Server, welche Datei er ausliefern oder welches Servlet er ansprechen soll.</li>
<li>was mit dieser Ressource passieren soll. GET bedeutet, sie soll an den Anfragenden gesendet werden.</li>
<li>die verwendete Version des HTTP-Protokolls: HTTP/1.1. Diese Information ist für  eine funktionierende Kommunikation zwischen Client und Server wesentlich.</li>
</ul>
<p>Alle weiteren Zeilen des Requests sind sogenannte Header. Sie transportieren zusätzliche Informationen, die der Server bei seiner Arbeit berücksichtigen sollte, aber nicht unbedingt muss. So enthält zum Beispiel der Header Accept-Language die Vorliebe des Benutzers, in welcher Sprache er den angefragten Inhalt sehen möchte. Der Server kann diese Information aber ignorieren und den Inhalt in einer völlig anderen Sprache zurückliefern.<br><br>In den Headern werden auch Cookies übertragen, kleine Textstücke, die ein Server im Browser hinterlegen kann und die bei weiteren Anfragen an denselben Server vom Browser an den Server zurückgesendet werden. Cookies sind die verbreitete Möglichkeit für den Server, zu bestimmen, ob zwei Anfragen vom selben Client stammen. Das HTTP-Protokoll ist zustandslos, jede Anfrage ist völlig unabhängig von allen anderen Anfragen. Wenn der Server also Informationen zwischen zwei Requests speichern muss, dann geschieht das üblicherweise durch Cookies. Im Servlet-Container werden diese durch das Session-Objekt abgebildet.</p>
<h3>Weitere HTTP-Methoden</h3>
<p>Alle server müssen zwingend die GET und HEAD Methoden unterstützen, alle anderen Methoden sind Optional:</p>
<table id="table-4" class="left" style="width: 100%; height: 539.625px;">
<thead>
<tr style="height: 79.1562px;">
<th class="text-left" style="width: 20.6007%; height: 79.1562px;"><strong>Method Name</strong></th>
<th class="text-left" style="width: 79.2568%; height: 79.1562px;"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">GET</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Transfer a current representation of the target resource.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">HEAD</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Same as GET, but do not transfer the response content.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">POST</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Perform resource-specific processing on the request content.</td>
</tr>
<tr style="height: 79.1562px;">
<td class="text-left" style="width: 20.6007%; height: 79.1562px;">PUT</td>
<td class="text-left" style="width: 79.2568%; height: 79.1562px;">Replace all current representations of the target resource with the request content.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">DELETE</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Remove all current representations of the target resource.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">CONNECT</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Establish a tunnel to the server identified by the target resource.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">OPTIONS</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Describe the communication options for the target resource.</td>
</tr>
<tr style="height: 79.1562px;">
<td class="text-left" style="width: 20.6007%; height: 79.1562px;">TRACE</td>
<td class="text-left" style="width: 79.2568%; height: 79.1562px;">Perform a message loop-back test along the path to the target resource.</td>
</tr>
</tbody>
</table>
<p>Quelle: <a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-methods" rel="nofollow">RFC9110</a></p>
<p>Von diesen Methoden sind GET, HEAD und POST die mit grossem Abstand häufiger verwendeten. Die meisten Anwendungen kommen ohne PUT und DELETE aus, und wenn diese Methoden doch verwendet werden, dann nur unter starken Sicherheitsvorkehrungen. Es bedarf nicht viel Fantasie, das Missbrauchspotenzial zu erkennen, wenn jeder Dateien auf Ihrem Server anlegen und löschen könnte.</p>
<h3>Verarbeitung im Servlet-Container</h3>
<p>Der Servlet-Container empfängt diesen HTTP-Request und erzeugt daraus ein Objekt der Klasse <em>HttpServletRequest</em>. Durch dieses Objekt sind alle Daten zugänglich, die im Request gesendet wurden.</p>
<p>Als Nächstes ermittelt der Servlet-Container anhand der Adresse in der ersten Request-Zeile, an welche Anwendung und welche Ressource der Request adressiert ist. Die Anwendung wird durch den ersten Teil der Adresse identifiziert, der Teil /servlet-1.0-SNAPSHOT, identifiziert die Ressource. Das kann ein Servlet sein, dessen <em>urlPatterns-Attribut</em> passt, oder bei einem GET-Request eine statische Ressource dieses Namens, die im Wurzelverzeichnis des WARs liegt.<br><br>Unter /servlet-1.0-SNAPSHOT antwortet ein Servlet. Falls noch keine Instanz dieses Servlets erzeugt wurde, erzeugt der Container nun eine. Es wird nicht für jeden Request eine neue Servlet-Instanz erzeugt, deshalb sollten man niemals Daten, die zu einem Request gehören, in Instanzvariablen speichern, denn diese könnten in einem anderen Request weiterverwendet werden.<br><br>Nun endlich so weit: Das Servlet wird aufgerufen.</p>
<p id="table.of.methods"></p>
            ]]>
        </content>
    </entry>
</feed>
