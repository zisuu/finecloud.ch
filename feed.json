{
    "version": "https://jsonfeed.org/version/1",
    "title": "Finecloud",
    "description": "",
    "home_page_url": "https://www.finecloud.ch",
    "feed_url": "https://www.finecloud.ch/feed.json",
    "user_comment": "",
    "icon": "https://www.finecloud.ch/media/website/cloud.png",
    "author": {
        "name": "Finecloud"
    },
    "items": [
        {
            "id": "https://www.finecloud.ch/imperativ-vs-deklarativ.html",
            "url": "https://www.finecloud.ch/imperativ-vs-deklarativ.html",
            "title": "Imperativ vs. Deklarativ",
            "summary": "Immer wieder stösst man im Bereich Infrastructure as Code (IaC) auf die Begriffe imperativ und deklarativ. Doch was bedeuten diese Begriffe? Ist Terraform wirklich deklarativ und Ansible nicht? Diese beiden Begriffe sind nicht einfach Buzzwords, sondern wesentliche Design-Patterns von IaC. Beim deklarativen Ansatz definiert der&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g8sg1qh415e\">Glossar: Imperativ / Deklarativ</a></li>\n<li><a href=\"#mcetoc_1g8sg1qh415f\">Erwartung und Vorurteil</a></li>\n<li><a href=\"#mcetoc_1g8sg1qh415g\">Der Irrtum</a></li>\n<li><a href=\"#mcetoc_1g8sg1qh415h\">Meine Ansicht</a></li>\n</ul>\n</div>\n<p>Immer wieder stösst man im Bereich Infrastructure as Code (IaC) auf die Begriffe imperativ und deklarativ. Doch was bedeuten diese Begriffe? Ist Terraform wirklich deklarativ und Ansible nicht? Diese beiden Begriffe sind nicht einfach Buzzwords, sondern wesentliche Design-Patterns von IaC.</p>\n<h2 id=\"mcetoc_1g8sg1qh415e\">Glossar: Imperativ / Deklarativ</h2>\n<div class=\"page\" title=\"Page 8\">\n<div class=\"layoutArea\">\n<div class=\"column\">\n<p>Beim deklarativen Ansatz definiert der Entwickler den Endzustand und lässt das IaC Tool ermitteln, wie dieser Zustand erreicht werden soll. Im Gegensatz dazu definiert beim imperativen Ansatz der Entwickler den Prozess, mit welchem vom Ist-Zustand aus der Soll-Zustand erreicht wird. <strong>Der Hauptunterschied ist, dass imperative Programme einen Control-Flow haben und deklarative nicht.</strong> Das lässt sich einfach herausfinden indem man die IaC Anweisungen. Verfügen diese über Error-Checks und Überprüfungen ob etwas korrekt ausgeführt wurde, dann handelt es sich um einen Control-Flow.</p>\n<p>Ein einfaches Beispiel einer imperativen Anweisung:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> cluster_exists:\n  echo <span class=\"hljs-string\" style=\"color: #6a8759;\">\"you already created that cluster\"</span>\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">else</span>:\n  echo <span class=\"hljs-string\" style=\"color: #6a8759;\">\"I'm creating a cluster for you\"</span></pre>\n<p>Auf der anderen Seite verfügt der deklarative Ansatz über keinen Control-Flow, das braucht es dort gar nicht, weil sich Terraform selbst um die Logik und den Control-Flow kümmert, deshalb muss sich der Anwender keine Gedanken darüber machen wie der Soll zustand erreicht wird, er muss nur definieren wie der Soll Zustand am Ende sein soll.</p>\n<p>Ein einfaches Beispiel einer deklarativen Anweisung:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">terraform {\n  required_providers {\n    aws = {\n      source  = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"~&gt; 4.16\"</span>\n    }\n  }\n\n  required_version = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"&gt;= 1.2.0\"</span>\n}\n\nprovider <span class=\"hljs-string\" style=\"color: #6a8759;\">\"aws\"</span> {\n  region  = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"us-west-2\"</span>\n}\n\nresource <span class=\"hljs-string\" style=\"color: #6a8759;\">\"aws_instance\"</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"app_server\"</span> {\n  ami           = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ami-830c94e3\"</span>\n  instance_type = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"t2.micro\"</span>\n\n  tags = {\n    Name = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"ExampleAppServerInstance\"</span>\n  }\n}\n</pre>\n<p>Der deklarative Ansatz reduziert den Code Umfang erheblich und vermindert damit auch die Fehleranfälligkeit. Zudem muss man sich nicht selbst mit dauern ändernden Cloud APIs herumschlagen.</p>\n<h2 id=\"mcetoc_1g8sg1qh415f\">Erwartung und Vorurteil</h2>\n<p>Die meisten Leute mit denen man über IaC spricht haben die Tendenz zu glauben das ein IaC Tool deklarativ sein muss. Was sehr komisch ist, sind aussagen wie:</p>\n<blockquote>\n<p>Terraform ist deklarativ, Pulumi, Ansible und AWS CDK nicht, deshalb ist Terraform besser als die anderen.</p>\n</blockquote>\n<p>Leute mit solchen Aussagen verraten das sie keine Ahnung haben wovon sie sprechen.</p>\n<h2 id=\"mcetoc_1g8sg1qh415g\">Der Irrtum</h2>\n<p>Das Hauptproblem in der ganzen imperativ vs. deklarativ Debatte besteht darin, das die meisten Leute meinen, wenn man eine Configurations-Sprache, wie zum Beispiel die DSL Sprachen von Terraform, HCL verwendet das automatisch etwas deklarativ macht.</p>\n<p>IaC Tools wie Terraform, Ansible, Pulumi, AWS CDK usw. machen sich alle DAG zu nutzen. DAG steht für <a href=\"https://www.bigdata-insider.de/was-ist-ein-directed-acyclic-graph-dag-a-1075296/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Directed acyclic graph:</a></p>\n<blockquote>\n<p>Ein Directed Acyclic Graph (DAG) ist eine abstrakte Struktur, die aus Knoten und Kanten besteht. Die Kanten bilden die Verbindungen zwischen den Knoten und besitzen eine Richtung. Schleifen sind in der Struktur ausgeschlossen. Folgt man der Richtung der Kanten, gelangt man von einem Startpunkt (Startknoten) zu einem Zielknoten und niemals zurück an den Ausgangsknoten. Es entsteht eine topologische Ordnung. Mit DAGs lassen sich beispielsweise kausale Zusammenhänge gut darstellen.  </p>\n</blockquote>\n<p>Pulumi, und Terraform erstellen nicht nur ein DAG, sondern ermöglichen es auch, das erstellte Diagramm zu untersuchen! Pulumi verfügt über den Pulumi-Stack-Graph-Befehl und Terraform über den Terraform-Graph-Befehl.<br><br>Dieses Diagramm wird erstellt, wenn man ein Terraform- oder Pulumi-Programm erstellt, und <strong>wird dann von den Engines des jeweiligen Tools ausgeführt, die dieses Diagramm bei jeder Tool-Instanziierung idempotent ausführen.</strong></p>\n<p>Idempotent bedeutet, dass man dieselben Ergebnisse erwarten kann, wenn man immer wieder dasselbe ausführt. <strong>Jedes Infrastruktur als Code-Tool ist (wenn man es korrekt einsetzt) deklarativ und idempotent.</strong> Konfigurationsmanagement-Tools sind im Allgemeinen idempotent, aber nicht unbedingt deklarativ.</p>\n<p>Wieso glauben aber so viele Leute das Pulumi, Ansible und CDK imperativ sind? Die Antwort ist, das die meisten Leute dabei nicht an das eigentliche Tool denken, sondern nur an die Sprache welche verwendet wird. Konfigurationssprachen machen deklarative Zustände leicht verständlich, da Sie keine Bedingungen in Konfigurationssprachen verwenden können, ohne eine Templating Sprache zu verwenden, oder grosse Änderungen an einer DSL vorzunehmen.<br><br>Mit Ansible, Pulumi und AWS CDK kann man jedoch Bedingungen nach Herzenslust verwenden, da sie imperative Sprachen als primäre Authoring-Erfahrung verwenden.</p>\n<p>Nehmen wir das folgende Snippet von Ansible code als Beispiel:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">  - name: Set super_group variable for RedHat\n    set_fact:\n      super_group: wheel\n    when: ansible_os_family == <span class=\"hljs-string\" style=\"color: #6a8759;\">\"RedHat\"</span>  \n<span class=\"hljs-attr\">  - name:</span> Set super_group variable for Debian\n<span class=\"hljs-attr\">    set_fact:</span>\n<span class=\"hljs-attr\">      super_group:</span> sudo\n<span class=\"hljs-attr\">    when:</span> ansible_os_family == <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Debian\"</span>\n<span class=\"hljs-attr\">  - name:</span> Add local linux user {{ username }}\n    user:\n      name: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ username }}</span>\"</span>\n      groups: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ super_group }}</span>\"</span>\n      append: <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      password_lock: <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      shell: /bin/bash\n      create_home: <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      generate_ssh_key: <span class=\"hljs-literal\" style=\"color: #6897bb;\">true</span>\n      state: present</pre>\n<p>Hier kann man sehen, das eine <em>when</em> Bedingung definiert ist und dort entschieden wird, ob die Variable <em><span class=\"hljs-attr\">super_group:</span> sudo </em>oder<em> wheel</em> gesetzt wird, oder garnicht. Anschliessend wird ein neuer Linux User erstellt. Es handelt sich in offensichtlich insgesamt um eine imperative Operation, zuerst wird anhand der OS Family eine Variable gesetzt und dann der Benutzer erstellt. Aber damit nicht genug: das Resultat, dieser imerpativen Operation <strong>ist deklarativ.</strong> Damit versuchen wir den Irrtum nun aufzulösen: <strong>Pulumi und Ansible und wie die Tools alle heissen sind als solches, (als Tool) alle deklarativ. Die Sprache jedoch, in welcher man die Infrastruktur beschreibt wird bei Pulumi und Ansible in einer imperativen Form geschrieben.</strong></p>\n<h2>Das Problem mit imperativen Anweisungen</h2>\n<p>Das Problem bei manchen Ansible Playbooks ist, dass diese nicht idempotent geschrieben wurden. Was bitte schön ist <span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Idempotenz? </span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Idempotenz bezeichnet die Unveränderbarkeit des Ergebnisses bei einer mehrfachen Verknüpfung oder Funktionsanwendung. Idempotenz ist erreicht, wenn ein IaC-Task nach wiederholtem Ausführen immer dasselbe Resultat erzeugt. Erst durch idempotente Tasks wird ein Gesamtautomatisierungsprozess auch für mehrere Ausführungen robust und zuverlässig.</span></p>\n<p><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">Wenn man unsorgfältige Ansible Tasks verfasst, kann das dazu führen, dass diese bei wiederholtem ausführen nicht dieselben Resultate erzeugen, im Vergleich zu Terraform, wo dies aufgrund der strikten DSL nicht passieren kann.</span></p>\n<h2>Das Problem mit deklarativen Anweisungen</h2>\n<p>Im Gegensatz dazu gibt es bei Terraform keine wirklich ausgereifte Möglichkeit den Control-Flow zu bearbeiten. Es gibt zwar mechanismen wie das count argument oder ein for_each, das führt dann aber beispielsweise zu folgendem Code:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">count = var.enabled ? <span class=\"hljs-number\" style=\"color: #6897bb;\">1</span> : length([some list of resources or datasources])</pre>\n<p>Diese Anweisung ist nichts anderes als die <span class=\"hljs-attr\"><em>when</em> oder <em>state</em> Anweisung im oberen Ansible Beispielcode. Nur ist dieser Code hier deutlich schwerer lesbar und wenige verständlich.</span></p>\n<h2 id=\"mcetoc_1g8sg1qh415h\">Meine Ansicht</h2>\n<p>Anstatt imperativ und deklarativ mit falsch, richtig, besser oder schlechter zu bewerten, sollten wir uns bewusst werden, das wir in den meisten Fällen im IaC Bereich immer mit beidem zu tun haben. Je nach Tool oder Configurations Sprache direkter oder indirekter. Letztendlich erlauben Tools wie Ansible und Pulumi aus meiner Sicht höchste flexibilität und Anpassbarkeit des Control-Flows. Tools wie Terraform hingegen sind ungeeignet für mofizierungen des Control-Flows. Deshalb macht es meiner Meinung nach am meisten Sinn, das Tool oder die Konfigurations-Sprache zu verwenden, welche für den jeweiligen Use-Case am besten geeignet ist. Grundsätzlich lässt sich jede Aufgabe mit entweder dem imperativen oder deklarativen Ansatz lösen. Es gibt aber Aufgaben, die deutlich einfacher mit dem einen oder dem anderen Ansatz gelöst werden können. Es gilt daher situativ zu entscheiden, welcher Ansatz sich für welche Aufgaben am besten eignet und diese dann geschickt zu kombinieren. Beispielsweise kann man Terraform einsetzen, um Basis-VMs direkt von einem Template ausgehend zu erstellen. Nachfolgend kann man dann z.b. je nach OS Familie Ansible einsetzen, um Software-Installationen und Konfigurationen auf dem VMs vorzunehmen.</p>\n</div>\n</div>\n</div>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "tools",
                   "terraform",
                   "pulumi",
                   "infrastructure as code",
                   "imperativ",
                   "iac",
                   "deklarativ",
                   "ansible"
            ],
            "date_published": "2022-07-26T05:41:23+02:00",
            "date_modified": "2022-07-26T07:56:34+02:00"
        },
        {
            "id": "https://www.finecloud.ch/monitor-proxmox-mit-grafana-und-prometheus.html",
            "url": "https://www.finecloud.ch/monitor-proxmox-mit-grafana-und-prometheus.html",
            "title": "Monitor Proxmox mit Grafana und Prometheus",
            "summary": "Obwohl Proxmox selbst ja sehr gute Monitoring Informationen direkt auf dem eigenen WebUI anzeigt werde ich um Grafana und Prometheus besser kennen zu lernen diese Tools nutzen um meinen Proxmox Host zu überwachen. Mit der Open-Source-Software von Grafana kann man Metriken, Protokolle und Ablaufverfolgungen, visualisieren,&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g8ncv1m65n\">Grafana</a>\n<ul>\n<li><a href=\"#mcetoc_1g8ncv1m65o\">Was ist Grafana?</a></li>\n<li><a href=\"#mcetoc_1g8oet5nkph\">Installation</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1g8ncv1m65p\">Prometheus</a></li>\n<li><a href=\"#mcetoc_1g8ncv1m65q\">Was ist Prometheus?</a>\n<ul>\n<li><a href=\"#features\">Features</a></li>\n<li><a href=\"#mcetoc_1g8oet5nkpi\">Installation</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1g8oet5nkpj\">Proxmox</a></li>\n<li><a href=\"#mcetoc_1g8oet5nkpk\">Konfiguration von Grafana und Prometheus</a></li>\n</ul>\n</div>\n<p>Obwohl Proxmox selbst ja sehr gute Monitoring Informationen direkt auf dem eigenen WebUI anzeigt werde ich um Grafana und Prometheus besser kennen zu lernen diese Tools nutzen um meinen Proxmox Host zu überwachen.</p>\n<h2 id=\"mcetoc_1g8ncv1m65n\">Grafana</h2>\n<h3 id=\"mcetoc_1g8ncv1m65o\">Was ist Grafana?</h3>\n<p>Mit der Open-Source-Software von <a href=\"https://grafana.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grafana</a> kann man Metriken, Protokolle und Ablaufverfolgungen, visualisieren, warnen und untersuchen. Grafana OSS stellt Tools zur Verfügung, mit denen man seine <em>time-series database</em> (TSDB) in aufschlussreiche Diagramme und Visualisierungen umwandeln kann.</p>\n<h3 id=\"mcetoc_1g8oet5nkph\">Installation</h3>\n<p>Da ich Grafana selbst als Test in meinem Homelab ausprobieren will möchte ich möglichst wenig Zeit in das Setup investieren und das ganze auch so schlank als möglich halten. Deshalb habe ich mit dazu entschieden Grafana als LXC Container zu installieren. Dazu erstelle ich als erster Schritt einen neuen LXC Container mit den folgenden Specs:</p>\n<ul>\n<li>Template: Debian 11</li>\n<li>Disk: 10GB (können wir jederzeit noch vergrössern)</li>\n<li>Cores: 2</li>\n<li>Memory: 1024 MiB</li>\n<li>Swap: 1024 MiB</li>\n</ul>\n<p>Als nächster Schritt loggen wir uns in den LXC Container ein und fügen die Grafana Repos hinzu und installieren Grafana auch gleich:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">sudo apt-get install -y apt-transport-https gnupg\nsudo apt-get install -y software-properties-common wget\nwget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"deb https://packages.grafana.com/oss/deb stable main\"</span> | sudo tee <span class=\"hljs-_\">-a</span> /etc/apt/sources.list.d/grafana.list\nsudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install grafana\nsudo systemctl daemon-reload\nsudo systemctl start grafana-server\nsudo systemctl status grafana-server\nsudo systemctl <span class=\"hljs-built_in\">enable</span> grafana-server.service</pre>\n<p>Wenn alles geklappt hat, sollte Grafana nun unter dieser URL erreichbar sein: <a href=\"http://LXC-Container-IP-Adresse:3000/login\" rel=\"nofollow\">http://&lt;<em>LXC-Container-IP-Adresse</em>&gt;:3000/login</a> Einloggen kann man mit dem default Login:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">username: admin\npassword: admin\n</pre>\n<h2 id=\"mcetoc_1g8ncv1m65p\">Prometheus</h2>\n<h2 id=\"mcetoc_1g8ncv1m65q\">Was ist Prometheus?</h2>\n<p>Prometheus ist ein Open-Source-Systems für Monitoring und Alerting, das ursprünglich bei SoundCloud entwickelt wurde. Seit seiner Gründung im Jahr 2012 haben viele Unternehmen und Organisationen Prometheus übernommen, und das Projekt hat eine sehr aktive Entwickler- und Benutzergemeinschaft. Es ist jetzt ein eigenständiges Open-Source-Projekt und wird unabhängig von einem Unternehmen gepflegt. Um dies zu betonen und die Governance-Struktur des Projekts zu verdeutlichen, trat Prometheus 2016 als zweites gehostetes Projekt nach Kubernetes der Cloud Native Computing Foundation bei.<br><br>Prometheus sammelt und speichert seine Metriken als Zeitreihendaten (time series data), d. h. Metrikinformationen werden mit dem Zeitstempel gespeichert, zu dem sie aufgezeichnet wurden, zusammen mit optionalen Schlüssel-Wert-Paaren, die als Labels bezeichnet werden.<br><br>Ausführlichere Übersichten über Prometheus finden Sie in den Ressourcen, die im Medienbereich verlinkt sind.</p>\n<h3 id=\"features\">Features<a class=\"header-anchor\" href=\"https://prometheus.io/docs/introduction/overview/#features\" name=\"features\"></a></h3>\n<p>Prometheus's Features sind:</p>\n<ul>\n<li>ein multi-dimensionales daten model mit Zeitreihendaten, die durch Metriknamen und Schlüssel/Wert-Paare identifiziert werden</li>\n<li>PromQL, eine flexible Abfragesprache, um diese Dimensionalität zu nutzen<br>keine Abhängigkeit von verteilter Speicherung; einzelne Serverknoten sind autonom</li>\n<li>Die Erfassung von Zeitreihen erfolgt über ein Pull-Modell über HTTP</li>\n<li>Das Pushen von Zeitreihen wird über ein zwischengeschaltetes Gateway unterstützt</li>\n<li>Ziele werden über die Diensterkennung oder die statische Konfiguration erkannt<br>mehrere Modi der Grafik- und Dashboard-Unterstützung</li>\n</ul>\n<h3 id=\"mcetoc_1g8oet5nkpi\">Installation</h3>\n<p>Wie zuvor Grafana installieren wir nun auch Prometheus als LXC Container:</p>\n<ul>\n<li>Template: Debian 11</li>\n<li>Disk: 10GB (können wir jederzeit noch vergrössern)</li>\n<li>Cores: 2</li>\n<li>Memory: 2048 MiB</li>\n<li>Swap: 2048 MiB</li>\n</ul>\n<p>Als nächster Schritt loggen wir uns in den LXC Container ein und fügen die Grafana Repos hinzu und installieren Grafana auch gleich:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">apt-get install -y curl sudo\nmkdir -p /etc/prometheus\nmkdir -p /var/lib/prometheus\nwget https://github.com/prometheus/prometheus/releases/download/v2.37.0/prometheus-2.37.0.linux-amd64.tar.gz\ntar -xvf prometheus-2.37.0.linux-amd64.tar.gz\n<span class=\"hljs-built_in\">cd</span> prometheus-2.37.0.linux-amd64\nmv prometheus promtool /usr/<span class=\"hljs-built_in\">local</span>/bin/\nmv consoles/ console_libraries/ /etc/prometheus/\nmv prometheus.yml /etc/prometheus/prometheus.yml</pre>\n<p>Weiter erstellen wir den Prometheus Systemd Service und aktivieren diesen:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">service_path=<span class=\"hljs-string\" style=\"color: #6a8759;\">\"/etc/systemd/system/prometheus.service\"</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=root\nRestart=always\nType=simple\nExecStart=/usr/local/bin/prometheus \\\n    --config.file=/etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path=/var/lib/prometheus/ \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.listen-address=0.0.0.0:9090\n\n[Install]\nWantedBy=multi-user.target\"</span> &gt; <span class=\"hljs-variable\" style=\"color: #629755;\">$service_path</span>\nsudo systemctl <span class=\"hljs-built_in\">enable</span> --now prometheus</pre>\n<p>Wenn alles geklappt hat, sollte Prometheus nun unter dieser URL erreichbar sein: <a href=\"http://LXC-Container-IP-Adresse:9090\" rel=\"nofollow\">http://&lt;<em>LXC-Container-IP-Adresse</em>&gt;:9090</a></p>\n<h2 id=\"mcetoc_1g8oet5nkpj\">Proxmox</h2>\n<p>Zuerst müssen wir auf Proxmox einen neuen User anlegen mit welchem wir von Prometheus her authentifizieren können. Damit wir den Service als deamon laufen lassen können, müssen wir den User zudem auf OS Ebene installieren, jedoch ohne Shell:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">pveum user add prometheus@pve\npveum aclmod / -user prometheus@pve -role PVEAuditor<br>pveum passwd <a href=\"mailto:prometheus@pve\">prometheus@pve</a><br>useradd -c \"pve exporter\" -m -s /bin/false prometheus</pre>\n<p>Damit wir nun den Proxmox mit Grafana und Prometheus Überwachen können, müssen wir auf dem Proxmox selbst den proxmox-pve-exporter installieren:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">sudo apt install python3-pip\nsudo pip install prometheus-pve-exporter</pre>\n<p>auf dem Proxmox Host erstellen wir zudem eine neue Datei mit dem folgenden Inhalt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">sudo vi /etc/prometheus/pve.yml<br>default:\n    user: prometheus@pve\n    password: your_password_here\n    verify_ssl: <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span></pre>\n<p>Weiter brauchen wir auf dem Proxmox Host ein Systemd Service Config File:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">sudo tee /etc/systemd/system/prometheus-pve-exporter.service&lt;&lt;EOF\n[Unit]\nDescription=Prometheus exporter <span class=\"hljs-keyword\" style=\"color: #cc7832;\">for</span> Proxmox VE\nDocumentation=https://github.com/znerol/prometheus-pve-exporter\n\n[Service]\nRestart=always\nUser=prometheus\nExecStart=/usr/<span class=\"hljs-built_in\">local</span>/bin/pve_exporter /etc/prometheus/pve.yml\n\n[Install]\nWantedBy=multi-user.target\nEOF</pre>\n<p>Nun erstellen wir eine weitere Config Datei:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">sudo vi /etc/prometheus/prometheus.yml\n- job_name: <span class=\"hljs-string\" style=\"color: #6a8759;\">'proxmox'</span>\n  metrics_path: /pve\n  static_configs:\n  - targets: [<span class=\"hljs-string\" style=\"color: #6a8759;\">'&lt;proxmox-ip&lt;:9221'</span>]</pre>\n<p>und starten den Prometheus Service neu:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">sudo systemctl restart prometheus</pre>\n<h2 id=\"mcetoc_1g8oet5nkpk\">Konfiguration von Grafana und Prometheus</h2>\n<p>Dazu loggen wir uns nun auf Grafana ein und klicken auf \"Add data source\":</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-09.03.53.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-2xl.png 1600w\"  alt=\"\" width=\"3360\" height=\"1766\"></figure>\n<p>und wir wählen Prometheus als Datenquelle aus:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-09.04.29.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-2xl.png 1600w\"  alt=\"\" width=\"3360\" height=\"1766\"></figure>\n<p>und geben die Angaben unseres Prometheus LXC Containers an:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-16.35.52.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-2xl.png 1600w\"  alt=\"\" width=\"3360\" height=\"1766\"></figure>\n<p>anschliessend klicken wir auf \"Save &amp; Test\". Nun importieren wir ein bereits bestehendes Grafana Dashboard. Dazu gehen wir auf Dashboards -&gt; + Import</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-17.01.18.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-2xl.png 1600w\"  alt=\"\" width=\"3360\" height=\"1766\"></figure>\n<p>Dort geben wir die ID (10347) des existierenden Dashboards an und importieren es, indem wir auf Load klicken:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-17.04.08-2.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-2xl.png 1600w\"  alt=\"\" width=\"1794\" height=\"1206\"></figure>\n<p>Anschliessend verändert sich die Ansicht. Die einzige Anpassung die wir hier benötigen die die Auswahl der Datenquelle (letzter Schritt), dort wählen wir unser Prometheus aus und klicken dann auf Import:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-17.05.53.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-2xl.png 1600w\"  alt=\"\" width=\"1860\" height=\"1418\"></figure>\n<p>Anschliessend sollte unser Dashboard nach einer Weile die Daten des PVE Exporters wunderschön und detailliert aufbereitet anzeigen:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/52/screenshot.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/52/responsive/screenshot-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-2xl.png 1600w\"  alt=\"\" width=\"3676\" height=\"1846\"></figure>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "virtualisierung",
                   "proxmox",
                   "prometheus",
                   "monitoring",
                   "lxc",
                   "linux",
                   "grafana",
                   "container"
            ],
            "date_published": "2022-07-23T05:56:14+02:00",
            "date_modified": "2022-07-24T18:00:23+02:00"
        },
        {
            "id": "https://www.finecloud.ch/capture-groups-in-java.html",
            "url": "https://www.finecloud.ch/capture-groups-in-java.html",
            "title": "Capture Groups in Java",
            "summary": "Capture Groups Im letzten Post haben wir einen kleinen Einstieg in Regex mit Java gemacht. Nun sehen wir uns an, wie man Regex Pattern in Java mittels Capture Groups anwenden kann: String regex = \"(1[-.\\\\s])?(\\\\d{3}[-.\\\\s]?)(\\\\d{3}[-.\\\\s]?)\\\\d{4}\"; String phoneNumber = \"12.523.231.4234\"; Pattern pat = Pattern.compile(regex); Matcher mat =&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g7tfqiu92l\">Capture Groups</a></li>\n<li><a href=\"#mcetoc_1g7tfr24a2o\">Not Capture Groups</a></li>\n<li><a href=\"#mcetoc_1g7tfqiu92m\">Named Capture Groups</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g7tfqiu92l\">Capture Groups</h2>\n<p><a href=\"https://www.finecloud.ch/einstieg-in-regex-mit-java.html\" rel=\"nofollow\">Im letzten Post</a> haben wir einen kleinen Einstieg in Regex mit Java gemacht. Nun sehen wir uns an, wie man Regex Pattern in Java mittels Capture Groups anwenden kann:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">        String regex = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"(1[-.\\\\s])?(\\\\d{3}[-.\\\\s]?)(\\\\d{3}[-.\\\\s]?)\\\\d{4}\"</span>;\n        String phoneNumber = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"12.523.231.4234\"</span>;\n        Pattern pat = Pattern.compile(regex);\n        Matcher mat = pat.matcher(phoneNumber);\n\n        <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (mat.matches()){\n            //System.out.format(\"entire String: %s\\n\", mat.group(0));\n            System.out.format(\"Country Code: %s\\n\", mat.group(2));\n            System.out.format(\"Area Code: %s\\n\", mat.group(4));\n            System.out.format(\"Exchange Code: %s\\n\", mat.group(6));\n            System.out.format(\"Line number Code: %s\\n\", mat.group(7));\n        }</pre>\n<p>Damit können wir nun die einzelnen Nummern-Teile extrahieren und separat behandeln:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">Country Code: 12\nArea Code: 523\nExchange Code: 231\nLine number Code: 4234</pre>\n<h2 id=\"mcetoc_1g7tfr24a2o\">Not Capture Groups</h2>\n<p>Im Beispiel oben werden die Klammern fortlaufend nummeriert, jede Klammer wird von links nach rechts aufsteigend nummeriert, dabei werden auch die embeded Gruppen mitgezählt. Das hat den Nachteil das es etwas unübersichtlich wird, welche Nummer hat nun die Klammer in der Mitte. Dabei interessieren uns ja eigentlich immer nur die embeded Gruppen. Das können wir optimieren, indem wir bei den Klammern welche uns nicht interessieren ein '?:' direkt nach dem Öffnen der Klammer angeben. Das bedeutet dann soviel wir <em>not Capture Group</em>. Damit wird für die Klammern keine Gruppennummer vergeben:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">        String regex = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"(?:(\\\\d{1,2})[-.\\\\s])?(?:(\\\\d{3})[-.\\\\s]?)(?:(\\\\d{3})[-.\\\\s]?)(\\\\d{4})\"</span>;\n        String phoneNumber = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"12.523.231.4234\"</span>;\n\n        Pattern pat = Pattern.compile(regex);\n        Matcher mat = pat.matcher(phoneNumber);\n\n        <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (mat.matches()){\n            <span class=\"hljs-comment\" style=\"color: grey;\">//System.out.format(\"entire String: %s\\n\", mat.group(0));</span>\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Country Code: %s\\n\"</span>, mat.group(<span class=\"hljs-number\" style=\"color: #6897bb;\">1</span>));\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Area Code: %s\\n\"</span>, mat.group(<span class=\"hljs-number\" style=\"color: #6897bb;\">2</span>));\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Exchange Code: %s\\n\"</span>, mat.group(<span class=\"hljs-number\" style=\"color: #6897bb;\">3</span>));\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Line number Code: %s\\n\"</span>, mat.group(<span class=\"hljs-number\" style=\"color: #6897bb;\">4</span>));\n        }</pre>\n<h2 id=\"mcetoc_1g7tfqiu92m\">Named Capture Groups</h2>\n<p>Noch mehr Optimieren können wir das mit Named Capture Groups:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">        String regex = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"(?:(?&lt;countryCode&gt;\\\\d{1,2})[-.\\\\s])?(?:(?&lt;areaCode&gt;\\\\d{3})[-.\\\\s]?)(?:(?&lt;exchangeCode&gt;\\\\d{3})[-.\\\\s]?)(?&lt;lineNumber&gt;\\\\d{4})\"</span>;\n        String phoneNumber = <span class=\"hljs-string\" style=\"color: #6a8759;\">\"12.523.231.4234\"</span>;\n\n        Pattern pat = Pattern.compile(regex);\n        Matcher mat = pat.matcher(phoneNumber);\n\n        <span class=\"hljs-keyword\" style=\"color: #cc7832;\">if</span> (mat.matches()){\n            <span class=\"hljs-comment\" style=\"color: grey;\">//System.out.format(\"entire String: %s\\n\", mat.group(0));</span>\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Country Code: %s\\n\"</span>, mat.group(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"countryCode\"</span>));\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Area Code: %s\\n\"</span>, mat.group(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"areaCode\"</span>));\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Exchange Code: %s\\n\"</span>, mat.group(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"exchangeCode\"</span>));\n            System.out.format(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Line number Code: %s\\n\"</span>, mat.group(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"lineNumber\"</span>));\n        }</pre>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "regex",
                   "java basics",
                   "java",
                   "dev"
            ],
            "date_published": "2022-07-14T06:02:10+02:00",
            "date_modified": "2022-07-14T06:35:45+02:00"
        },
        {
            "id": "https://www.finecloud.ch/einstieg-in-regex-mit-java.html",
            "url": "https://www.finecloud.ch/einstieg-in-regex-mit-java.html",
            "title": "Einstieg in Regex mit Java",
            "summary": "Was ist Regex? Regex steht für Regular expressions und ist eine Technik, Technologie und Sprache an und für sich, die verwendet werden kann zum Ausdrücken von Textmustern mit Symbolen. Und diese Symbole sind selbst Text. Damit lassen wir verschiedene Textteile und Zeichen andere Textfolgen darstellen. In&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g7qsl72t8a\">Was ist Regex?</a></li>\n<li><a href=\"#mcetoc_1g7qsl72t8b\">Einfaches Beispiel</a></li>\n<li><a href=\"#mcetoc_1g7qsl72t8c\">Negieren</a></li>\n<li><a href=\"#mcetoc_1g7qsl72t8d\">Anzahl Buchstaben</a></li>\n<li><a href=\"#mcetoc_1g7tdih5q2e\">Anzahl Zahlen</a></li>\n<li><a href=\"#mcetoc_1g7tdih5q2f\">Buchstaben und Zahlenfolge</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g7qsl72t8a\">Was ist Regex?</h2>\n<p>Regex steht für Regular expressions und  ist eine Technik, Technologie und Sprache an und für sich, die verwendet werden kann zum Ausdrücken von Textmustern mit Symbolen. Und diese Symbole sind selbst Text. Damit lassen wir verschiedene Textteile und Zeichen andere Textfolgen darstellen.</p>\n<h2 id=\"mcetoc_1g7qsl72t8b\">Einfaches Beispiel</h2>\n<p>In Java kann Regex Beispielsweise bei Strings angewendet werden, dazu verwenden wir die Methode <em>String.matches. </em>Das einfachste Beispiel, ist wenn wir mit Regex in einem String nach einem String suchen:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"cat\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"cat\"</span>));\n    }\n}</pre>\n<p>Der Output ist ein Boolean Wert, in diesem Fall <em>true. </em>Was aber wenn wir nun eines der beiden cat gross schreiben? Der Boolean wird <em>false</em> sein, ausser wir passen den Regex Pattern so an, dass er Gross- und Kleinbuchstaben berücksichtigt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Cat\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"[Cc]at\"</span>));\n    }\n}\n</pre>\n<p>mit den eckigen Klammern [ ] kann eine OR Verknüpfung zwischen Zeichen definiert werden.</p>\n<p>Wenn wir ein Pattern wollen, um zu prüfen ob das Wort mit einem Buchstaben von a bis f startet könnten wir entweder alle Buchstaben in der eckigen Klammer ausschreiben. Dafür gibt es glücklicherweise eine schönere Möglichkeit, wir können Ranges angeben:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Fat\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"[a-fA-F]at\"</span>));\n    }\n}</pre>\n<h2 id=\"mcetoc_1g7qsl72t8c\">Negieren</h2>\n<p>Was wenn wir einen Pattern wollen der prüft ob etwas <strong>nicht</strong> zutrifft. Zum Beispiel ob der Erste Buchstaben des Wortes nicht ein Buchstabe von a bis f ist:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Fat\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"[^a-fA-F]at\"</span>));\n    }\n}</pre>\n<p>Das Ergebnis ist nun <em>false</em>. Das Zeichen am Anfang nennt sich \"Caret\".</p>\n<h2 id=\"mcetoc_1g7qsl72t8d\">Anzahl Buchstaben</h2>\n<p>Wenn wir nun ein Pattern suchen, der prüft ob unser String aus nur drei latinischen Buchstaben besteht: </p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Fat\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\w\\\\w\\\\w\"</span>));\n    }\n}</pre>\n<p>Der reine Regex Pattern besteht nur aus einem \\ (Backslash). Damit wir diesen in Java nutzen können, müssen wir jedoch den Backslash mit einem zweiten Backslash escapen, damit Java den Backslash nicht als Java, sondern als Regex Pattern erkennen kann.</p>\n<p class=\"msg msg--highlight \">Der Regex-Pattern für Buchstaben (\\w) wertet nicht nur Buchstaben von a bis z als Valid, sondern auch Zahlen und '_' (underscore).</p>\n<h2 id=\"mcetoc_1g7tdih5q2e\">Anzahl Zahlen</h2>\n<p>Dasselbe geht auch, wenn wir einen Pattern für die Anzahl Zahlen definieren:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"521\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\d\\\\d\\\\d\"</span>));\n    }\n}</pre>\n<h2 id=\"mcetoc_1g7tdih5q2f\">Buchstaben und Zahlenfolge</h2>\n<p>Was wenn wir nun eine Sammlung von Nummern auf das folgende Format prüfen müssen: <em>523-231-4444</em> (alle Zahlen sind erlaubt). Wir könnten dazu einfach aus Faulheit folgenden Pattern definieren:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523-231-4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d\"</span>));\n    }\n}</pre>\n<p>Das ist ein Valider Pattern der die Problemstellung löst. Allerdings geht das schöner und einfacher mit dem Quantifier { }:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523-231-4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\d{3}-\\d{3}-\\d{4}\"</span>));\n    }\n}</pre>\n<p>Viel besser oder? Was wenn wir nun nicht nur die Bindestriche, sondern auch z.B. Punkte als Trennzeichen akzeptieren wollen? Dann können wir eine Or Verknüpfung machen anhand des oberen Beispiels:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523-231.4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\d{3}[-.]\\d{3}[-.]\\d{4}\"</span>));\n    }\n}</pre>\n<p>Was ist nun wenn wir Leerzeichen (523-231.4444) zwischen den Nummern als Valid behandeln wollen? Theoretisch können wir nun in der Or Verknüpfung (in den eckigen Klammern) einfach ein Leerzeichen einfügen. Das funktioniert, ist aber Optisch nicht ideal, da das Leerzeichen schnell übersehen wird. Expliziter geht das mit \\s als Regex Zeichen für einen Leerschlag:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523 231.4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\d{3}[-.\\\\s]\\\\d{3}[-.\\\\s]\\\\d{4}\"</span>));\n    }\n}</pre>\n<p>Wenn mehr als ein Leerschlag, Bindestrich oder Punkt erlaubt ist, kann hinter der \"Or\"-Klammer einfach ein Plus angefügt werden:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523 ..231  4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\d{3}[-.\\\\s]+\\\\d{3}[-.\\\\s]+\\\\d{4}\"</span>));\n    }\n}</pre>\n<p>Was wenn keines, eines oder mehrere dieser \"Or\"-Verknüpften Zeichen erlaubt sein sollen? Wir verwenden '*' anstelle von '+':</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523231 .4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\d{3}[-.\\\\s]*\\\\d{3}[-.\\\\s]*\\\\d{4}\"</span>));\n    }\n}</pre>\n<p>Was ist nun wenn wir genau nur eines oder keines dieser Zeichen erlauben wollen? Wir verwenden '?' anstelle von '*':</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523231-4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\d{3}[-.\\\\s]?\\\\d{3}[-.\\\\s]?\\\\d{4}\"</span>));\n    }\n}</pre>\n<p>Was, wenn wir in der letzten Zahlenfolge nur 3 oder 4 Zeichen erlauben wollen? </p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523231-4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"\\\\d{3}[-.\\\\s]?\\\\d{3}[-.\\\\s]?\\\\d{3,4}\"</span>));\n    }\n}</pre>\n<p>Wenn wir mindestens drei Stellen brauchen, aber es auch unbeschränkt mehr sein dürfen, können wir die zweite Zahl nach dem Komma einfach weglassen. Was wir weiter optimieren können ist, dass wir die Wiederholungen von Regex Statements zusammenfassen und nur einmal deklarieren. Dazu löschen wir eines der beiden \"\\d{3}[-.\\s]?\" Statements und setzen es im runde Klammern, gefolgt von Spitzen klammern, in der wir die Anzahl Wiederholungen angeben, in diesem Fall 2:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">RegexPractice</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        System.out.println(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"523 231 4444\"</span>.matches(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"(\\\\d{3}[-.\\\\s]?){2}\\\\d{3,}\"</span>));\n    }\n}</pre>\n<p>Genial, oder?</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "regex",
                   "java basics",
                   "java",
                   "dev"
            ],
            "date_published": "2022-07-13T05:50:09+02:00",
            "date_modified": "2022-07-14T05:55:53+02:00"
        },
        {
            "id": "https://www.finecloud.ch/java-access-modifier.html",
            "url": "https://www.finecloud.ch/java-access-modifier.html",
            "title": "Java Access-Modifier",
            "summary": "Sobald ein Feld sichtbar ist, bedeutet das auch, das es gelesen und beschrieben werden kann. Die Access-Modifier steuern, von wo auf Felder und Methoden eines Objekts zugegriffen werden kann: Modifier Wer darf zugreifen? public Auf public-Objekte/Felder und Methoden darf ohne Einschränkungen von überall aus zugegriffen&hellip;",
            "content_html": "<p>Sobald ein Feld sichtbar ist, bedeutet das auch, das es gelesen und beschrieben werden kann. Die Access-Modifier steuern, von wo auf Felder und Methoden eines Objekts zugegriffen werden kann:</p>\n<table style=\"border-collapse: collapse; width: 100%; height: 309.391px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 24.4301%; height: 50.3594px;\"><strong>Modifier</strong></td>\n<td style=\"width: 75.5699%; height: 50.3594px;\"><strong>Wer darf zugreifen?</strong></td>\n</tr>\n<tr style=\"height: 107.953px;\">\n<td style=\"width: 24.4301%; height: 107.953px;\">public</td>\n<td style=\"width: 75.5699%; height: 107.953px;\">Auf <em>public-Objekte/Felder und Methoden </em>darf ohne Einschränkungen von überall aus zugegriffen werden.</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 24.4301%; height: 50.3594px;\">protected</td>\n<td style=\"width: 75.5699%; height: 50.3594px;\">Zugriff ist erlaubt für Klassen, die im gleichen Package liegen, sowie für Klassen, die von dieser Klasse erben.</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 24.4301%; height: 50.3594px;\">- (nur Package)</td>\n<td style=\"width: 75.5699%; height: 50.3594px;\">Wenn keinen Access-Modifier definiert wird, dann ist das Feld oder die Methode für alle Klassen sichtbar, die im gleichen Package liegen.<br>Dies ist aber kein Schutz gegen Zugriffe von ausserhalb auf Ihre Klasse: Packages in Java sind offen, d. h. jeder kann eine weitere Klasse in Ihrem Package deklarieren und von dort auf diese Felder zugreifen.</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 24.4301%; height: 50.3594px;\">private</td>\n<td style=\"width: 75.5699%; height: 50.3594px;\">Nur die Klasse selbst darf auf <em>private</em>-Felder zugreifen. Wie alle Access-Modifier wirkt auch <em>private</em> auf Klassenebene. Das bedeutet, dass ein Objekt auf <em>private</em>-Member eines anderen Objekts des gleichen Typs zugreifen kann.</td>\n</tr>\n</tbody>\n</table>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "java basics",
                   "java",
                   "dev",
                   "access modifier"
            ],
            "date_published": "2022-07-10T06:30:41+02:00",
            "date_modified": "2022-07-10T06:31:08+02:00"
        },
        {
            "id": "https://www.finecloud.ch/java-namenskonventionen.html",
            "url": "https://www.finecloud.ch/java-namenskonventionen.html",
            "title": "Java Namenskonventionen",
            "summary": "In diesem Blog fasse ich die Java Namenskonventionen kurz zusammen: Typ Namenskonvention Beispiele Class Sollte mit Grossbuchstaben beginnen und sollte ein Substantiv wie Farbe, Knopf, System, Faden usw. sein. Verwenden Sie geeignete Wörter anstelle von Akronymen. public class Employee { //code snippet } Interface Sollte&hellip;",
            "content_html": "<p>In diesem Blog fasse ich die Java Namenskonventionen kurz zusammen:</p>\n<table class=\"alt\" style=\"border-collapse: collapse; border-color: #000000; border-style: solid; width: 100%; height: 1446.8px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 79.1562px;\">\n<th style=\"width: 17.4037%; height: 79.1562px;\"><strong>Typ</strong></th>\n<th style=\"width: 55.3495%; height: 79.1562px;\"><strong>Namenskonvention</strong></th>\n<th style=\"width: 27.2468%; height: 79.1562px;\"><strong>Beispiele</strong></th>\n</tr>\n<tr style=\"height: 165.547px;\">\n<td style=\"width: 17.4037%; height: 165.547px;\">Class</td>\n<td style=\"width: 55.3495%; height: 165.547px;\">Sollte mit Grossbuchstaben beginnen und<br>sollte ein Substantiv wie Farbe, Knopf, System, Faden usw. sein. Verwenden Sie geeignete Wörter anstelle von Akronymen.</td>\n<td style=\"width: 27.2468%; height: 165.547px;\"><code>public class <strong>Employee</strong></code><br><code>{</code><br><code>//code snippet</code><br><code>}</code></td>\n</tr>\n<tr style=\"height: 165.547px;\">\n<td style=\"width: 17.4037%; height: 165.547px;\">Interface</td>\n<td style=\"width: 55.3495%; height: 165.547px;\">Sollte mit dem Grossbuchstaben beginnen und sollte ein Adjektiv wie Runnable, Remote, ActionListener sein. Verwenden Sie geeignete Wörter anstelle von Akronymen.</td>\n<td style=\"width: 27.2468%; height: 165.547px;\"><code>interface <strong>Printable</strong>{//code snippet}</code></td>\n</tr>\n<tr style=\"height: 251.938px;\">\n<td style=\"width: 17.4037%; height: 251.938px;\">Method</td>\n<td style=\"width: 55.3495%; height: 251.938px;\">Sollte mit Kleinbuchstaben beginnen und sollte ein Verb wie main(), print(), println() sein. Wenn der Name mehrere Wörter enthält, beginnen Sie ihn mit einem Kleinbuchstaben, gefolgt von einem Grossbuchstaben, z. B. actionPerformed().</td>\n<td style=\"width: 27.2468%; height: 251.938px;\"><code>class Employee</code><br><code>{</code><br><code>// method</code><br><code>void <strong>draw()</strong></code><br><code>{</code><br><code>//code snippet</code><br><code>}</code><br><code>}</code></td>\n</tr>\n<tr style=\"height: 338.328px;\">\n<td style=\"width: 17.4037%; height: 338.328px;\">Variable</td>\n<td style=\"width: 55.3495%; height: 338.328px;\">Sollte mit einem Kleinbuchstaben beginnen, z. B. ID, Name und sollte nicht mit Sonderzeichen wie &amp; (kaufmännisches Und), $ (Dollar), _ (Unterstrich) beginnen. Wenn der Name mehrere Wörter enthält, beginnen Sie ihn mit dem Kleinbuchstaben, gefolgt von einem Grossbuchstaben, z. B. Vorname, Nachname. Vermeiden Sie die Verwendung von Ein-Zeichen-Variablen wie x, y, z.</td>\n<td style=\"width: 27.2468%; height: 338.328px;\"><code>class Employee</code><br><code>{</code><br><code>// variable</code><br><code>int <strong>id</strong>;</code><br><code>//code snippet</code><br><code>}</code></td>\n</tr>\n<tr style=\"height: 223.141px;\">\n<td style=\"width: 17.4037%; height: 223.141px;\">Package</td>\n<td style=\"width: 55.3495%; height: 223.141px;\">Sollte ein Kleinbuchstabe sein, z. B. java, lang. Wenn der Name mehrere Wörter enthält, sollten sie durch Punkte (.) getrennt werden, z. B. java.util, java.lang.</td>\n<td style=\"width: 27.2468%; height: 223.141px;\"><code>//package</code><br><code>package <strong>com.javatpoint;</strong></code><br><code>class Employee</code><br><code>{</code><br><code>//code snippet</code><br><code>}</code></td>\n</tr>\n<tr style=\"height: 223.141px;\">\n<td style=\"width: 17.4037%; height: 223.141px;\">Constant</td>\n<td style=\"width: 55.3495%; height: 223.141px;\">Sollte in Großbuchstaben wie ROT, GELB sein. Wenn der Name mehrere Wörter enthält, sollten sie durch einen Unterstrich (_) getrennt werden, z. B. MAX_PRIORITY.<br>Es darf Ziffern enthalten, jedoch nicht als erster Buchstabe.</td>\n<td style=\"width: 27.2468%; height: 223.141px;\"><code>class Employee</code><br><code>{</code><br><code>//constant</code><br><code>static final int <strong>MIN_AGE</strong> = 18;</code><br><code>//code snippet</code><br><code>}</code></td>\n</tr>\n</tbody>\n</table>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "java basics",
                   "java",
                   "dev"
            ],
            "date_published": "2022-07-09T15:51:07+02:00",
            "date_modified": "2022-07-09T15:53:17+02:00"
        },
        {
            "id": "https://www.finecloud.ch/unterschiede-zwischen-proxmox-containers-und-docker.html",
            "url": "https://www.finecloud.ch/unterschiede-zwischen-proxmox-containers-und-docker.html",
            "title": "Unterschiede zwischen Proxmox Containers und Docker",
            "summary": "LXC LXC ist ein Userspace Interface zur Eindämmung des Linux-Kernels und kann verwendet werden für Systemvirtualisierung. Durch eine mächtige API und einfache Tools ermöglicht es Linux Benutzern einfache Erstellung und Verwaltung von System Container. LXC ermöglicht ein komplettes OS in einem Container zu betreiben. LXD&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g7f40muo25\">LXC</a></li>\n<li><a href=\"#mcetoc_1g7f40muo26\">LXD</a></li>\n<li><a href=\"#mcetoc_1g7f40muo27\">Proxmox Containers</a></li>\n<li><a href=\"#mcetoc_1g7f40muo28\">Docker</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g7f40muo25\">LXC</h2>\n<p>LXC ist ein Userspace Interface zur Eindämmung des Linux-Kernels und kann verwendet werden für Systemvirtualisierung. Durch eine mächtige API und einfache Tools ermöglicht es Linux Benutzern einfache Erstellung und Verwaltung von System Container. LXC ermöglicht ein komplettes OS in einem Container zu betreiben.</p>\n<h2 id=\"mcetoc_1g7f40muo26\">LXD</h2>\n<p>LXD ist auf LXC Aufgebaut und bietet neue und bessere Benutzererfahrung. Unter der Haube verwendet LXD LXC durch liblxc und dessen Go binding für das Erstellen und Verwalten von Container. Es ist im Grunde eine Alternative zu den Tools und dem Verteilungsvorlagensystem von LXC mit den zusätzlichen Funktionen, die sich aus der Steuerbarkeit über das Netzwerk ergeben.</p>\n<h2 id=\"mcetoc_1g7f40muo27\">Proxmox Containers</h2>\n<p>Als Proxmox Container werden Container bezeichnet, die mit dem Proxmox Container Toolkit (pct) erstellt und verwaltet werden. Sie zielen auch auf die Systemvirtualisierung ab und verwenden LXC als Grundlage des Containerangebots. Das Proxmox Container Toolkit (pct) ist eng mit Proxmox VE gekoppelt. Das bedeutet, dass es Cluster-Setups kennt und dieselben Netzwerk- und Speicherressourcen wie virtuelle QEMU-Maschinen (VMs) verwenden kann. Sie können sogar die Proxmox VE-Firewall verwenden, Backups erstellen und wiederherstellen oder Container mit dem HA-Framework verwalten. Mit der Proxmox VE API lässt sich alles über das Netzwerk steuern.</p>\n<h2 id=\"mcetoc_1g7f40muo28\">Docker</h2>\n<p>Docker zielt darauf ab, eine einzelne Anwendung in einer isolierten, in sich geschlossenen Umgebung zu laufen. Diese werden im Allgemeinen als „Anwendungscontainer“ und nicht als „Systemcontainer“ bezeichnet. Sie verwalten eine Docker-Instanz über den Host mithilfe der Docker Engine-Befehlszeilenschnittstelle. Es wird nicht empfohlen, Docker direkt auf Ihrem Proxmox VE-Host auszuführen. <strong>Wenn man also einen Anwendungscontainer ausführen möchte mit z.B. Docker-Images, sollte man diese am besten in einer Proxmox Qemu-VM ausführen.</strong></p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "virtualisierung",
                   "proxmox",
                   "lxd",
                   "lxc",
                   "linux",
                   "kvm",
                   "docker",
                   "container"
            ],
            "date_published": "2022-07-08T16:43:20+02:00",
            "date_modified": "2022-07-08T16:43:37+02:00"
        },
        {
            "id": "https://www.finecloud.ch/citrix-adc-backup-mit-ansible.html",
            "url": "https://www.finecloud.ch/citrix-adc-backup-mit-ansible.html",
            "title": "Citrix ADC (NetScaler) Backup mit Ansible",
            "summary": "Beschreibung Citrix ADC, bis vor einer Weile noch als Citrix NetScaler bekannt ist eine Netzwerk Appliance welche als Access Gateway und Proxy verwendet werden kann. In diesem Artikel werden wir ein kleines Ansible Playbook schreiben, mit welchem man einen Citrix ADC sichern kann. Als erster&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g7f244jrl8\">Beschreibung</a></li>\n<li><a href=\"#mcetoc_1g7f244jrl9\">Ansible Config</a></li>\n<li><a href=\"#mcetoc_1g7f244jrla\">Inventar</a></li>\n<li><a href=\"#mcetoc_1g7f244jrlb\">Playbook</a></li>\n<li><a href=\"#mcetoc_1g7f244jrlc\">Rolle citrix_adc</a></li>\n<li><a href=\"#mcetoc_1g7f244jrld\">Secrets</a></li>\n<li><a href=\"#mcetoc_1g7f244jrle\">Run</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g7f244jrl8\">Beschreibung</h2>\n<p>Citrix ADC, bis vor einer Weile noch als Citrix NetScaler bekannt ist eine Netzwerk Appliance welche als Access Gateway und Proxy verwendet werden kann. In diesem Artikel werden wir ein kleines Ansible Playbook schreiben, mit welchem man einen Citrix ADC sichern kann.</p>\n<h2 id=\"mcetoc_1g7f244jrl9\">Ansible Config</h2>\n<p>Als erster Schritt definieren wir die Ansible Konfiguration: <code>ansible.cfg</code></p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-section\" style=\"color: #ffc66d;\">[defaults]</span>\n<span class=\"hljs-attr\">interpreter_python</span>=auto_silent\n<span class=\"hljs-section\" style=\"color: #ffc66d;\">\n[ssh_connection]</span>\n<span class=\"hljs-comment\" style=\"color: grey;\"># allows new host keys once</span>\n<span class=\"hljs-attr\">ssh_args</span> = -o StrictHostKeyChecking=accept-new</pre>\n<p>Dabei ist wichtig das du deine Secrets mit dem <span class=\"hljs-attr\"><code>vault_password_file</code> verschlüsselst.</span></p>\n<h2 id=\"mcetoc_1g7f244jrla\">Inventar</h2>\n<p>Nun erstellen wir uns eine Datei <code>inventory.yaml </code>mit dem folgenden Inhalt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-meta\" style=\"color: #bbb529;\">---</span>\n<span class=\"hljs-comment\" style=\"color: grey;\"># yamllint disable rule:line-length</span>\n\n<span class=\"hljs-attr\">all:</span>\n<span class=\"hljs-attr\">  hosts:</span>\n<span class=\"hljs-attr\">  children:</span>\n<span class=\"hljs-attr\">    citrix_adc:</span>\n<span class=\"hljs-attr\">      hosts:</span>\n        netscaler01\n        netscaler02</pre>\n<p>die Hosts müssen dabei natürlich den FQDN Namen deiner ADCs entsprechen.</p>\n<h2 id=\"mcetoc_1g7f244jrlb\">Playbook</h2>\n<p>Auch das Playbook selbst ist nicht sehr spannend, von hier aus werden wir dann die Rolle mit dem eigentlich spannenden Inhalt anstossen: <code>playbook.yaml</code></p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-meta\" style=\"color: #bbb529;\">---</span>\n\n<span class=\"hljs-attr\">- hosts:</span> citrix_adc\n<span class=\"hljs-attr\">  gather_facts:</span> <span class=\"hljs-literal\" style=\"color: #6897bb;\">false</span>\n<span class=\"hljs-attr\">  roles:</span>\n<span class=\"hljs-bullet\" style=\"color: #6897bb;\">    -</span> citrix_adc</pre>\n<h2 id=\"mcetoc_1g7f244jrlc\">Rolle citrix_adc</h2>\n<p>Nun kommt der Spannende Inhalt, wir erstellen nun folgende Ordnerstruktur und main.yaml Dateien:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">└── roles\n    └── citrix_adc\n        ├── tasks\n        │   └── main.yaml\n        └── vars\n            └── main.yaml</pre>\n<p>der Inhalt der <code>task/main.yaml</code> Datei ist wiefolgt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-meta\" style=\"color: #bbb529;\">---</span>\n<span class=\"hljs-comment\" style=\"color: grey;\"># yamllint disable rule:line-length</span>\n\n<span class=\"hljs-attr\">- name:</span> Delete all old backups from local\n<span class=\"hljs-attr\">  delegate_to:</span> localhost\n<span class=\"hljs-attr\">  file:</span>\n<span class=\"hljs-attr\">    path:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ dest_path }}</span>/<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ inventory_hostname }}</span>\"</span>\n<span class=\"hljs-attr\">    state:</span> absent\n\n<span class=\"hljs-attr\">- name:</span> Generate new Citrix ADC system backup\n<span class=\"hljs-attr\">  delegate_to:</span> localhost\n<span class=\"hljs-attr\">  command:</span> ssh -l backuper {{ inventory_hostname }} <span class=\"hljs-string\" style=\"color: #6a8759;\">\"create system backup -level full <span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ backup_file }}</span>\"</span>\n<span class=\"hljs-attr\">  register:</span> command_result\n<span class=\"hljs-attr\">  failed_when:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"'Resource already exists' in command_result.stdout\"</span>\n\n<span class=\"hljs-attr\">- name:</span> Create new empty directory\n<span class=\"hljs-attr\">  delegate_to:</span> localhost\n<span class=\"hljs-attr\">  file:</span>\n<span class=\"hljs-attr\">    path:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ dest_path }}</span>/<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ inventory_hostname }}</span>\"</span>\n<span class=\"hljs-attr\">    state:</span> directory\n<span class=\"hljs-attr\">    mode:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">'0755'</span>\n\n<span class=\"hljs-attr\">- name:</span> Download backup file from Citrix ADC to local folder\n<span class=\"hljs-attr\">  delegate_to:</span> localhost\n<span class=\"hljs-attr\">  command:</span> /bin/scp backuper@{{ inventory_hostname }}:/var/ns_sys_backup/{{ backup_file }}.tgz {{ dest_path }}/{{ inventory_hostname }}/{{ backup_file }}.tgz\n\n<span class=\"hljs-attr\">- name:</span> delete backup from ADC\n<span class=\"hljs-attr\">  delegate_to:</span> localhost\n<span class=\"hljs-attr\">  command:</span> ssh -l backuper {{ inventory_hostname }} <span class=\"hljs-string\" style=\"color: #6a8759;\">\"rm backup <span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ backup_file }}</span>.tgz\"</span></pre>\n<p>der Inhalt der <code>vars/main.yaml</code> Datei ist wiefolgt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-meta\" style=\"color: #bbb529;\">---</span>\n<span class=\"hljs-comment\" style=\"color: grey;\"># yamllint disable rule:line-length</span>\n\n<span class=\"hljs-attr\">dest_path:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"/var/git/ndcb-data\"</span>\n<span class=\"hljs-attr\">backup_file:</span> <span class=\"hljs-string\" style=\"color: #6a8759;\">\"backup_full_<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ inventory_hostname }}</span>_<span class=\"hljs-template-variable\" style=\"color: #629755;\">{{ lookup('pipe','date +%Y-%m-%d-%H') }}</span>\"<br></span></pre>\n<h2 id=\"mcetoc_1g7f244jrld\">Secrets</h2>\n<p>Was noch fehlt sind die Secrets. Wir werden jedoch in diesem Fall gar keine Secrets verwenden, sondern direkt mit SSH-Key Authentifizieren. Dazu mussst du auf deinem Gerät einen neues SSH-Key Pair generieren und anschliessend wie folgt auf den Citrix ADCs als <em>authorized keys</em> erlauben:</p>\n<ol>\n<li>Auf ADCs einloggen und unter diesem Pfad dein PublicKey eintragen: /nsconfig/ssh/authorized_keys :\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">ssh-rsa AAAAB3NzaC1.....</pre>\n</li>\n<li>Anschliessend kannst du den Citrix ADC Host neustarten (z.b. wenn er nur im Seconday Mode ist), noch einfacher ist, wenn du einfach den sshd Service neustartest, was auf dem Citrix ADC relativ brachial ist:\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-built_in\">kill</span> -HUP `cat /var/run/sshd.pid`</pre>\n</li>\n</ol>\n<h2 id=\"mcetoc_1g7f244jrle\">Run</h2>\n<p>Das Playbook kann nun wiefolgt ausgeführt werden:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">ansible-playbook playbook.yaml -i inventory.yaml</pre>\n<p> </p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "tools",
                   "ssh",
                   "infrastructure as code",
                   "iac",
                   "citrix netscaler",
                   "citrix adc",
                   "ansible"
            ],
            "date_published": "2022-07-08T15:47:31+02:00",
            "date_modified": "2022-07-08T16:13:45+02:00"
        },
        {
            "id": "https://www.finecloud.ch/jvm-und-jdk-unter-der-haube.html",
            "url": "https://www.finecloud.ch/jvm-und-jdk-unter-der-haube.html",
            "title": "JVM und JDK unter der Haube",
            "summary": "Woher lädt Java eigentlich seine JDK Klassen? Beim Start einer Applikation kann mit -cp ein Klassenpfad angegeben werden, in welchem sich Klassen befinden, die man verwenden möchte. Das ist das normale Vorgehen, wie man Klassen integriert. Doch woher hat das JDK seine eigenen Klassen? Um&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g7bnagbudlj\">Woher lädt Java eigentlich seine JDK Klassen?</a></li>\n<li><a href=\"#mcetoc_1g7bnagbudlk\">Kann man durch eine eigene java.lang.Integer Klasse die Integer JDK Klasse ersetzen?</a></li>\n<li><a href=\"#mcetoc_1g7bnagbudll\">Garbage Collection</a></li>\n<li><a href=\"#mcetoc_1g7bnagbudlm\">Speicherlecks</a></li>\n<li><a href=\"#mcetoc_1g7bnagbudln\">Weiche und schwache Referenzen</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g7bnagbudlj\">Woher lädt Java eigentlich seine JDK Klassen?</h2>\n<p>Beim Start einer Applikation kann mit -cp ein Klassenpfad angegeben werden, in welchem sich Klassen befinden, die man verwenden möchte. Das ist das normale Vorgehen, wie man Klassen integriert. Doch woher hat das JDK seine eigenen Klassen?</p>\n<p>Um das zu verstehen müssen wir uns zuerst mit dem Classloader befassen. Classloader sind selbst Java-Objekte mit denen man interagieren kann. Es gibt grundsätzlich mindestens drei Classloader:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/46/classloader.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/46/responsive/classloader-xs.png 300w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-sm.png 480w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-md.png 768w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-lg.png 1024w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-xl.png 1360w ,https://www.finecloud.ch/media/posts/46/responsive/classloader-2xl.png 1600w\"  alt=\"\" width=\"311\" height=\"391\"></figure>\n<ul>\n<li><em>Bootstrap-Classloader</em>: lädt die JDK-Klassen</li>\n<li><em>Extension-Classloader</em>: lädt Klassen, die in Javas Erweiterungsverzeichnis liegen. In diesem selten genutzten Verzeichnis können Erweiterungen des JDKs abgelegt werden, die jeder Anwendung zur Verfügung stehen, ohne dass sie sie in den eigenen Klassenpfad aufnehmen müsste. Der Default ist das Erweiterungsverzeichnis im Java-Installationsverzeichnis unter lib/ext zu finden.</li>\n<li><em>System-Classpath-Classloader</em>: Der Classloader der Anwendung. Er lädt die Klassen welche mit -cp im angegebenen Verzeichnis liegen.</li>\n</ul>\n<h2 id=\"mcetoc_1g7bnagbudlk\">Kann man durch eine eigene java.lang.Integer Klasse die Integer JDK Klasse ersetzen?</h2>\n<p>Diese drei Klassloader stehen in einer hierarchischen Beziehung miteinander. Wenn man nun in seiner Applikation Klassen lädt, geschieht das immer mit dem System-Classpath-Classloader. Im ersten Schritt fragt jeder Classloader bei seinem übergeordneten Classsloader nach, ob dieser die Klasse laden kann. Diese Reihenfolge ist extrem wichtig, denn sie privilegiert die JDK Klassen. Eine Klasse, die dem Bootstrap-Classloader bekannt ist, kann deshalb niemals durch eine andere Klasse desselben Namens verdrängt werden. Etwas komplizierter ist das bei den Serverlet-Container.</p>\n<h2 id=\"mcetoc_1g7bnagbudll\">Garbage Collection</h2>\n<p>Jedes erzeugte Java-Objekt belegt Speicher und der JVM steht nur eine begrenzte Speichermenge zur Verfügung. Es muss also eine Möglichkeit geben, Objekte wieder aus dem Speicher zu entfernen, wenn diese nicht mehr benötigt werden. Ansonsten wird jede Java-Anwendung irgendwann mit einem <em>OutOfMemoryError</em> beendet. Dieser Mechanismus nennt sich Garbage Collection.</p>\n<p>Andere systemnähere Programmiersprachen haben keinen solchen Mechanismus und überlassen diese Aufgabe dem Entwickler selbst. Viele moderne Sprachen bieten mittlerweile eine automatische Garbage Collection an, aber Java war eine der ersten mit diesem Feature.</p>\n<p>Welche Objekte nicht mehr verwendet werden, findet der Garbage Collector heraus, indem er Referenzen untersucht. Dazu geht er von den Garbage Collection Roots aus und folgt allen Referenzen von diesen Objekten aus. Alle Objekte, die von einer Root referenziert werden, werden als noch aktiv markiert. Objekte, die von diesen Objekten aus referenziert werden, werden ebenfalls markiert usw. Garbage Collection Roots können Class-Objekte, lebende Threads, Lokale Variablen und Parameter, Monitor-Objekte, JNI-Variablen und spezielle JVM-Objekte sein. Rekursiv werden so alle Objekte markiert, die von einer Garbage Collection Root direkt oder indirekt erreichbar sind. Anschliessend werden alle Objekte die nicht von einer Root aus erreichbar sind aus dem Speichern entfernt. Dieses Vorgehen nennt sich <em>Mark and Sweep Collection</em>. Die echten Abläufe der Garbage Collection sind noch etwas komplexer als hier beschrieben.</p>\n<h2 id=\"mcetoc_1g7bnagbudlm\">Speicherlecks</h2>\n<p>Speicherlecks in Java kommen fast immer daher, dass man Objekte mit einer der Garbage Collection Roots verbinden und nicht wieder von dort entfernen. Am häufigsten passiert das mit statischen Variablen. Es ist leicht zu vergessen, dass ihr Inhalt nicht von selbst aus dem Speicher entfernt wird, im Unterschied zu Instanzvariablen. So kann man unbeabsichtigt viel Speicher belegen, indem man ein grosses Objekt in einer statischen Variablen hält, obwohl es bereits nicht mehr benötigt wird. Dabei handelt es sich aber nicht um ein Speicherleck, denn der belegte Speicher bleibt konstant und wächst mit der Zeit nicht mehr an. Ein echtes Speicherleck kann dadurch entstehen, dass man eine Collection in einem statischen Feld hält, der immer weiter Objekte hinzugefügt werden:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> class <span class=\"hljs-title\" style=\"color: #ffc66d;\">Speicherleck</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">private</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">final</span> Map&lt;String, Speicherleck&gt; cache = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> HashMap&lt;&gt;();\n    <span class=\"hljs-keyword\" style=\"color: #cc7832;\">private</span> String name;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Speicherleck</span><span class=\"hljs-params\">(String name)</span></span>{\n        <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>.name = name;\n        cache.put(name, <span class=\"hljs-keyword\" style=\"color: #cc7832;\">this</span>);\n    }\n}</pre>\n<p>Jede Instanz der Klasse Speicherleck, die jemals erzeugt wird, wird in der statischen map cache gespeichert, aber nie wieder von dort entfernt. Das führt dazu, dass keine Instanz von Speicherleck jemals vom Garbage Collector entsorg werden kann, denn alle Instanzen werden von einem statischen Feld referenziert. Es kann natürlich sein, dass Sie diese Objekte wirklich noch brauchen, aber häufiger handelt es sich bei solchen Konstrukten um einen Fehler.</p>\n<p>Weitere Quellen für Speicherlecks in Java sind ThreadLocals, Variablen, die direkt mit einem Thread verbunden sind. Die genauen Mechanismen, wie es zu einem Speicherleck kommen kann, sind sehr ähnlich wie bei statischen Feldern: Solange der Thread lebendig ist, kann der Inhalt eines ThreadLocal nicht aus dem Speicher entfernt werden. Eine wachsende Collection dort hat deshalb denselben zerstörerischen Effekt wie in einem Statischen Feld.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "softwareentwicklung",
                   "java",
                   "dev",
                   "classloader"
            ],
            "date_published": "2022-07-07T08:17:18+02:00",
            "date_modified": "2022-07-07T09:04:56+02:00"
        },
        {
            "id": "https://www.finecloud.ch/guis-mit-javafx.html",
            "url": "https://www.finecloud.ch/guis-mit-javafx.html",
            "title": "GUIs mit JavaFX",
            "summary": "Einführung JavaFX ist das modernste in der Java SE integrierte GUI-Framework zum Erstellen grafischer Benutzeroberflächen (GUI: Graphical User Interface). JavaFX ist eine reine Java-Bibliothek, die zwar, auch deklarative Definitionen von GUIs über XML ermöglicht, die aber im Kern aus Java-Klassen besteht. Seit Java 8 liegt&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1g72m7p9tbq6\">Einführung</a></li>\n<li><a href=\"#mcetoc_1g72m7p9tbq7\">Installation</a>\n<ul>\n<li><a href=\"#mcetoc_1g72m7p9tbq8\">VSCode</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1g72m7p9tbq9\">Architektur von JavaFX</a>\n<ul>\n<li><a href=\"#mcetoc_1g72m7p9tbqa\">Stage</a></li>\n<li><a href=\"#mcetoc_1g72m7p9tbqb\">Scene</a></li>\n<li><a href=\"#mcetoc_1g72no33dbv0\">Node Typen</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1g72no33dbv1\">GUI Komponenten</a>\n<ul>\n<li><a href=\"#mcetoc_1g72no33dbv2\">Beschriftungen</a></li>\n<li><a href=\"#mcetoc_1g72no33dbv3\">Schaltflächen</a>\n<ul>\n<li><a href=\"#mcetoc_1g775qiifdbg\">Buttons</a></li>\n<li><a href=\"#mcetoc_1g775qiifdbh\">Radiobuttons</a></li>\n<li><a href=\"#mcetoc_1g775qiifdbi\">Toggle-Buttons</a></li>\n<li><a href=\"#u16.4.3\">Checkboxen </a></li>\n<li><a href=\"#u16.4.3\">Choiceboxen</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1g72no33dbv4\">Eingabefelder</a></li>\n<li><a href=\"#mcetoc_1g775qiifdbj\">Menüs</a></li>\n<li><a href=\"#mcetoc_1g775qiifdbk\">Weitere Standardkomponenten</a></li>\n<li><a href=\"#u16.4.7\">Geometrische Komponenten</a></li>\n<li><a href=\"#mcetoc_1g775qiifdbl\">Diagramme</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1g72m7p9tbq6\">Einführung</h2>\n<p>JavaFX ist das modernste in der Java SE integrierte GUI-Framework zum Erstellen grafischer Benutzeroberflächen (<span class=\"italic\">GUI: Graphical User Interface</span>). JavaFX ist eine reine Java-Bibliothek, die zwar, auch deklarative Definitionen von GUIs über XML ermöglicht, die aber im Kern aus Java-Klassen besteht.</p>\n<h2 id=\"mcetoc_1g72m7p9tbq7\">Installation</h2>\n<p class=\"standard\">Seit Java 8 liegt das JavaFX-SDK dem JDK bei. Allerdings kann es sein, dass Sie die JavaFX-Bibliothek explizit dem Klassenpfad hinzufügen müssen. Zu finden ist die entsprechende JAR-Datei unter <span class=\"italic\">&lt;JRE_HOME&gt;/lib/ext/jfxrt.jar</span>, wobei <span class=\"italic\">&lt;JRE_HOME&gt;</span> für das root-Verzeichnis Ihrer JRE-Installation steht.</p>\n<p class=\"standard\">Die Versionsnummer von JavaFX ist seit Java/JavaFX 8 an die Version von Java angepasst.</p>\n<h3 id=\"mcetoc_1g72m7p9tbq8\">VSCode</h3>\n<p>Damit man JavaFX in VSCode nutzen kann, müssen wir uns JavaFX zuerst <a href=\"https://gluonhq.com/products/javafx/\" rel=\"nofollow\">von hier</a> herunterladen. Anschliessend entpacken wir die Archivdatei.</p>\n<p>In unserem VSCode Java Projekt müssen wir nun die JavaFX Libs einbinden: Um JavaFX als Abhängigkeiten zum Projekt hinzuzufügen, kann man einfach alle JAR-Dateien aus dem lib-Ordner des heruntergeladenen JavaFX-SDK kopieren, zum Beispiel /Users/your-user/Downloads/javafx-sdk-18.0.2/lib/ in die lib-Ordner Ihres Projekts. Alternativ kann man auch über den Java Projects Explorer hinzufügen. Dazu klickt man auf die Schaltfläche + neben den referenzierten Bibliotheken und wählt die JARs der JavaFX-Bibliothek aus, um sie hinzuzufügen.</p>\n<p>Als letzter Schritt müssen wir VSCode beibringen, dass wir das Java Programm mit Parameter an die Java VM übergeben und ausführen wollen. Dazu erstellen wir in unserem Projekt im Ordner <code>.vscode</code> eine Datei namens <code>launch.json</code> mit dem folgenden Inhalt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=<span class=\"hljs-number\" style=\"color: #6897bb;\">830387</span>\n    <span class=\"hljs-string\" style=\"color: #6a8759;\">\"version\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"0.2.0\"</span>,\n    <span class=\"hljs-attr\">\"configurations\"</span>: [\n        {\n            <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"java\"</span>,\n            <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Launch BeispielAnwendung\"</span>,\n            <span class=\"hljs-attr\">\"request\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"launch\"</span>,\n            <span class=\"hljs-attr\">\"mainClass\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"app.Kap16.BeispielAnwendung\"</span>,\n            <span class=\"hljs-attr\">\"projectName\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"labproject_3808de47\"</span>,\n            <span class=\"hljs-attr\">\"vmArgs\"</span>: <span class=\"hljs-string\" style=\"color: #6a8759;\">\"--module-path /Users/Dave/Downloads/javafx-sdk-18.0.1/lib/ --add-modules javafx.controls,javafx.fxml\"</span>\n        }\n}</pre>\n<p>Entscheidend ist die Angabe der <code>vmArgs</code>. Eine detailliertere Anleitung ist <a href=\"https://openjfx.io/openjfx-docs/#install-javafx\" rel=\"nofollow\">hier</a> zu finden.</p>\n<h2 id=\"mcetoc_1g72m7p9tbq9\">Architektur von JavaFX</h2>\n<p>Am einfachsten wir schauen uns zuerst ein Beispiel an:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">package</span> app.Kap16;\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">import</span> javafx.application.Application;\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">import</span> javafx.stage.Stage;\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">import</span> javafx.scene.Scene;\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">import</span> javafx.scene.control.Button;\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">import</span> javafx.scene.layout.BorderPane;\n\n<span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">class</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">BeispielAnwendung</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">extends</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">Application</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">static</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        launch(args);\n   }\n\n    <span class=\"hljs-meta\" style=\"color: #bbb529;\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: #cc7832;\">public</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">void</span> <span class=\"hljs-title\" style=\"color: #ffc66d;\">start</span><span class=\"hljs-params\">(Stage stage)</span> <span class=\"hljs-keyword\" style=\"color: #cc7832;\">throws</span> Exception </span>{\n        stage.setTitle(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Beispielanwendung\"</span>);\n            Button button = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Button();\n            button.setText(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Klick mich\"</span>);\n            BorderPane root = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> BorderPane();\n            root.setCenter(button);\n            Scene scene = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Scene(root, <span class=\"hljs-number\" style=\"color: #6897bb;\">300</span>, <span class=\"hljs-number\" style=\"color: #6897bb;\">250</span>);\n            stage.setScene(scene);\n            stage.show();\n        }\n}</pre>\n<p>Die Ausgabe bei der Ausführung:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-03-at-20.39.58.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-03-at-20.39.58-2xl.png 1600w\"  alt=\"\" width=\"333\" height=\"310\"></figure>\n<h3 id=\"mcetoc_1g72m7p9tbqa\">Stage</h3>\n<p>Der Einstiegspunkt jeder JavaFX-Anwendung ist die javafx.application.Application Klasse. Application repräsentiert die Anwendungsklasse und stellt ein Fenster mit Rahmen, Systemmenü und Standardschaltflächen zur Verfügung. Die einzige Methode, die dabei überschrieben werden muss, ist die Methode start(), die als Parameter ein Objekt vom Typ javafx.stage.Stage übergeben bekommt.<br><br>Stage bildet an dieser Stelle das Hauptfenster der Anwendung, das alle weiteren Komponenten enthält. Die Methode start() dient dazu, den Inhalt dieses Fensters zu definieren. Um die Anwendung zu starten, reicht es, in der main-Methode die statische Methode launch() aufzurufen, die von Application bereitgestellt wird. Ausserdem darf man nicht vergessen, die Methode show() an dem Stage-Objekt aufzurufen, sonst wird das entsprechende Fenster gar nicht angezeigt.</p>\n<h3 id=\"mcetoc_1g72m7p9tbqb\">Scene</h3>\n<p>Über einzelne Scenes (Instanzen der Klasse javax.scene.Scene) wird definiert, welche Komponenten in einer Anwendung dargestellt werden. Innerhalb einer Scene werden die einzelnen Komponenten als Knoten (nodes) in einer Baumstruktur verwaltet, dem sogenannten Scene Graph. Nodes können ihrerseits mehrere andere Nodes als Kindelemente enthalten, aber nur ein Elternelement haben. Bei Nodes mit Kindelementen spricht man von Branch Nodes, bei Nodes ohne Kindelemente von Leaf Nodes.</p>\n<h3 id=\"mcetoc_1g72no33dbv0\">Node Typen</h3>\n<p>Die Basisklasse für alle Scene Graph Elemente bildet die Klasse javafx.scene.Node. Ihr folgt eine ganze Hierarchie an Unterklassen. Diese lassen sich in fünf Hauptkategorien unterteilen:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/ClassNode.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/ClassNode-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/ClassNode-2xl.png 1600w\"  alt=\"\" width=\"684\" height=\"216\"></figure>\n<ul>\n<li>Parent: alle Nodes, die Kindelemente haben können</li>\n<li>Canvas: Grafikoperationen, mit der sogenannten Canvas-API kann man zweidimensionale Grafiken zeichnen</li>\n<li>Shape: Oberklasse verschiedener geometrischer Formen</li>\n<li>ImageView: Darstellung von Bildern</li>\n<li>MediaView: Integration von Audio- und Videokomponenten</li>\n</ul>\n<h2 id=\"mcetoc_1g72no33dbv1\">GUI Komponenten</h2>\n<h3 id=\"mcetoc_1g72no33dbv2\">Beschriftungen</h3>\n<p>Die Klasse javafx.scene.control wird verwendet um Beschriftungen zu GUI Elementen benötigt werden. Den Text der Beschriftung setzen Sie dabei entweder über den Konstruktor oder über die Methode setText():</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">Label label = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Label(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Beschriftung\"</span>);</pre>\n<h3 id=\"mcetoc_1g72no33dbv3\">Schaltflächen</h3>\n<h4 id=\"mcetoc_1g775qiifdbg\">Buttons</h4>\n<p>Buttons bezeichnen einfache Schaltflächen. Repräsentiert werden Buttons durch die Klasse Button. Eine einfache Schaltfläche lässt sich folgendermassen erzeugen (gleiches Ergebnis wie oben):</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">Button button = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Button(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Klick mich\"</span>);</pre>\n<h4 id=\"mcetoc_1g775qiifdbh\">Radiobuttons</h4>\n<p>Radiobuttons eignen sich gut für Entweder-oder-Auswahlen. Repräsentiert werden Radiobuttons durch die Klasse RadioButton. Mit Hilfe der Klasse ToggleGroup können (und sollten) die einzelnen Radiobuttons ausserdem in Gruppen zusammengefasst werden. Innerhalb einer solchen Gruppe ist dann sichergestellt, dass jeweils nur ein Radiobutton ausgewählt werden kann. Über setSelected() lässt sich zudem der Radiobutton bestimmen, der (vor)selektiert werden soll. Im folgenden Beispiel wird eine ToggleGroup mit drei Radiobuttons erstellt, von denen der Radiobutton mit der Aufschrift Gelb vorselektiert ist:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">            ToggleGroup group = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> ToggleGroup();\n            RadioButton radioButton1 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> RadioButton(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Gelb\"</span>);\n            radioButton1.setToggleGroup(group);\n            radioButton1.setSelected(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">true</span>);\n            RadioButton radioButton2 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> RadioButton(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Blau\"</span>);\n            radioButton2.setToggleGroup(group);\n            RadioButton radioButton3 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> RadioButton(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Grün\"</span>);\n            radioButton3.setToggleGroup(group);</pre>\n<figure class=\"post__image\"><br><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-06.32.10.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.32.10-2xl.png 1600w\"  alt=\"\" width=\"427\" height=\"94\"></figure>\n<h4 id=\"mcetoc_1g775qiifdbi\">Toggle-Buttons</h4>\n<p>Toggle-Buttons (Klasse ToggleButton) eignen sich gut, wenn Sie eine Schaltfläche benötigen, die zwei Zustände darstellen kann (beispielsweise »An« und »Aus«). Über die Methode setSelected(), die einen booleschen Wert entgegennimmt, können Sie dabei zwischen beiden Zuständen wechseln und über isSelected() den aktuellen Zustand ermitteln. Wie Radiobuttons können auch Toggle-Buttons innerhalb einer Gruppe definiert werden. Im Unterschied zu Radiobuttons, bei denen immer genau einer der Buttons ausgewählt ist, ist es bei Toggle-Buttons also innerhalb einer Gruppe nicht zwingend notwendig, dass überhaupt ein Button ausgewählt ist. Standardmässig ist jedoch der erste Button einer Gruppe vorausgewählt:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">            ToggleGroup group2 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> ToggleGroup();\n            ToggleButton toggleButtonOne = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> ToggleButton(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Option1\"</span>);\n            toggleButtonOne.setToggleGroup(group2);\n            toggleButtonOne.setSelected(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">true</span>);\n            ToggleButton toggleButtonTwo = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> ToggleButton(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Option2\"</span>);\n            toggleButtonTwo.setToggleGroup(group2);\n            ToggleButton toggleButtonThree = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> ToggleButton(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Option3\"</span>);\n            toggleButtonThree.setToggleGroup(group2);</pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-06.44.26.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.44.26-2xl.png 1600w\"  alt=\"\" width=\"423\" height=\"93\"></figure>\n<h4 id=\"u16.4.3\">Checkboxen </h4>\n<p>Checkboxen (Klasse CheckBox) bezeichnen Kästchen, über die bestimmte Auswahlen getroffen werden können. Ob eine Checkbox selektiert ist oder nicht, kann programmatisch über die Methode setSelected() bestimmt werden. Des Weiteren kann eine Checkbox über setIndeterminate() als »definiert« oder als »undefiniert« markiert werden. Beide Methoden erwarten jeweils einen booleschen Wert, in der Kombination ergeben sich so insgesamt drei (sichtbare) verschiedene Zustände pro Checkbox:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">            CheckBox checkBox1 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> CheckBox(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Option1\"</span>);\n            checkBox1.setSelected(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">false</span>);\n            CheckBox checkBox2 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> CheckBox(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Option2\"</span>);\n            checkBox2.setSelected(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">true</span>);\n            CheckBox checkBox3 = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> CheckBox(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Option3\"</span>);\n            checkBox3.setSelected(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">true</span>);\n            checkBox3.setIndeterminate(<span class=\"hljs-keyword\" style=\"color: #cc7832;\">true</span>);</pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-06.50.34.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.50.34-2xl.png 1600w\"  alt=\"\" width=\"386\" height=\"85\"></figure>\n<h4 id=\"u16.4.3\">Choiceboxen</h4>\n<p>Bei einer Choicebox handelt es sich um eine Aufklappliste, aus der genau ein Wert ausgewählt werden kann. Choiceboxen werden durch die Klasse ChoiceBox repräsentiert. Zu beachten ist dabei, dass die einzelnen Elemente, die ausgewählt werden können, über die Methode setItems() in Form einer ObservableList hinzugefügt werden müssen. Eine ObservableList unterscheidet sich von normalen Listen, darin, dass Änderungen an einer solchen Liste von der jeweiligen GUI-Komponente wahrgenommen werden und sich direkt auf die grafische Darstellung auswirken. Eine solche ObservableList erzeugen Sie beispielsweise wie in folgendem Listing über die Helferklasse FXCollections:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">            ChoiceBox&lt;String&gt; choiceBox = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> ChoiceBox&lt;String&gt;();\n            ObservableList&lt;String&gt; farben = FXCollections.observableArrayList(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Rot\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Blau\"</span>, <span class=\"hljs-string\" style=\"color: #6a8759;\">\"Grün\"</span>);\n            choiceBox.setItems(farben);\n            farben.add(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Orange\"</span>);</pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-06.57.00.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-06.57.00-2xl.png 1600w\"  alt=\"\" width=\"370\" height=\"217\"></figure><br><br>Zunächst wird hierbei eine ObservableList mit den Werten \"Rot\", \"Blau\" und \"Grün\" angelegt, dann über setItems() der Choicebox hinzugefügt und anschliessend um ein weiteres Element (\"Orange\") ergänzt. Diese Änderung wirkt sich direkt auf die Choicebox aus: Es stehen anschliessend vier Werte in der Choicebox zur Verfügung.</p>\n<h3 id=\"mcetoc_1g72no33dbv4\">Eingabefelder</h3>\n<p>Neben Schaltflächen, über die in der Regel bestimmte Aktionen ausgelöst oder Selektionen getroffen werden, benötigen Sie ausserdem Komponenten, über die die Nutzer Eingaben tätigen können. Dazu zählen unter anderem einzeilige Textfelder, Passwortfelder oder mehrzeilige Textfelder. Textfelder und Passwortfelder sehen auf den ersten Blick gleich aus und verfügen auch über ähnliche Methoden. Das wundert wenig, da PasswordField eine Subklasse von TextField ist. Der einzige sichtbare Unterschied ist, dass jedes Textzeichen, das Sie eingeben, bei einem Passwortfeld durch ein Bullet-Symbol auf dem Bildschirm dargestellt wird:</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">            TextField text = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> TextField();\n            text.setPromptText(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Benutzername\"</span>);\n            PasswordField password = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> PasswordField();\n            password.setPromptText(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Passwort\"</span>);</pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-04-at-07.37.47.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-04-at-07.37.47-2xl.png 1600w\"  alt=\"\" width=\"369\" height=\"91\"></figure>\n<p>Ausserdem ist es bei einer Instanz von PasswordField im Gegensatz zu reinen TextField-Instanzen nicht möglich, den Text aus dem Feld zu kopieren oder auszuschneiden: Die Methoden copy() und cut() funktionieren hier nicht.</p>\n<p>Für mehrzeilige Textfelder kann die Klasse TextArea verwendet werden.</p>\n<h3 id=\"mcetoc_1g775qiifdbj\">Menüs</h3>\n<p>Für das Erstellen von Menüs kommen mehrere Klassen zum Einsatz: Das Menü selbst wird mit Hilfe der Klasse Menu dargestellt, die einzelnen Menüeinträge durch die Klasse MenuItem. Hier gibt es beispielsweise die Sonderformen CheckMenuItem und RadioMenuItem, die jeweils über eine Checkbox respektive einen Radiobutton verfügen. Da Menu selbst auch eine Unterklasse von MenuItem ist, lassen sich Menüs zudem auf sehr einfache Weise schachteln.</p>\n<pre class=\"hljs\" style=\"color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;\">            MenuBar menuBar = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> MenuBar();\n            Menu menu = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> Menu(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Datei\"</span>);\n            MenuItem menuItem = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> MenuItem(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Neu\"</span>);\n            CheckMenuItem checkMenuItem = <span class=\"hljs-keyword\" style=\"color: #cc7832;\">new</span> CheckMenuItem(<span class=\"hljs-string\" style=\"color: #6a8759;\">\"Auswahl\"</span>);\n            menu.getItems().add(menuItem);\n            menu.getItems().add(checkMenuItem);\n            menuBar.getMenus().add(menu);</pre>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://www.finecloud.ch/media/posts/45/Screenshot-2022-07-05-at-14.30.06.png\" sizes=\"100vw\" srcset=\"https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-xs.png 300w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-sm.png 480w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-md.png 768w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-lg.png 1024w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-xl.png 1360w ,https://www.finecloud.ch/media/posts/45/responsive/Screenshot-2022-07-05-at-14.30.06-2xl.png 1600w\"  alt=\"\" width=\"339\" height=\"137\"></figure>\n<h3 id=\"mcetoc_1g775qiifdbk\">Weitere Standardkomponenten</h3>\n<p>Weitere Komponenten sind <a href=\"https://docs.oracle.com/javafx/2/api/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hier</a> zu finden.</p>\n<h3 id=\"u16.4.7\" class=\"t3\">Geometrische Komponenten</h3>\n<p>Im Paket javafx.scene.shape findet man eine ganze Reihe geometrischer Formen wie Kreise (Klasse Circle), Pfade (Klasse Path), Rechtecke (Klasse Rectangle), Ellipsen (Klasse Ellipse) und einfachen Text (Klasse Text).</p>\n<h3 id=\"mcetoc_1g775qiifdbl\">Diagramme</h3>\n<p>Im JavaFX-SDK sind verschiedene Diagrammformen enthalten (Paket javafx.scene.chart). Diese reichen von einfachen Balkendiagrammen (BarChart) und Tortendiagrammen (PieChart) über Liniendiagramme (LineChart) bis hin zu spezielleren Diagrammformen wie BubbleChart, ScatterChart und AreaChart.</p>",
            "author": {
                "name": "Finecloud"
            },
            "tags": [
                   "vscode",
                   "softwareentwicklung",
                   "javafx",
                   "java",
                   "gui",
                   "dev"
            ],
            "date_published": "2022-07-05T14:37:31+02:00",
            "date_modified": "2022-07-05T14:38:13+02:00"
        }
    ]
}
