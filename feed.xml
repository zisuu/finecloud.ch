<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Finecloud</title>
    <link href="https://www.finecloud.ch/feed.xml" rel="self" />
    <link href="https://www.finecloud.ch" />
    <updated>2022-08-30T18:55:35+02:00</updated>
    <author>
        <name>Finecloud</name>
    </author>
    <id>https://www.finecloud.ch</id>

    <entry>
        <title>Java basics: Dates and Time</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-basics-dates-and-time.html"/>
        <id>https://www.finecloud.ch/java-basics-dates-and-time.html</id>
            <category term="unix"/>
            <category term="stream-api"/>
            <category term="software development"/>
            <category term="linux"/>
            <category term="lambda"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-08-30T18:55:35+02:00</updated>
            <summary>
                <![CDATA[
                    Local date Now Let's start with the basics, we just want to represent the date today and print that local date now: public class TimeTest { public static void main(String[] args) { LocalDate now = LocalDate.now(); System.out.println(now); } } output: 2022-08-29 Process finished with exit&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gbmeuk7f4r">Local date</a>
<ul>
<li><a href="#mcetoc_1gbmfa47955">Now</a></li>
<li><a href="#mcetoc_1gbmeuk7f4s">Set a Date</a></li>
<li><a href="#mcetoc_1gbmeuk7f4u">Dates until</a></li>
</ul>
</li>
<li><a href="#mcetoc_1gbmfa47956">Local Time</a>
<ul>
<li><a href="#mcetoc_1gbmgm59995">Now</a></li>
<li><a href="#mcetoc_1gbmgm59996">Set a time</a></li>
</ul>
</li>
<li><a href="#mcetoc_1gbmgm59997">Local date time</a></li>
<li><a href="#mcetoc_1gbmuqcgbb6">Measuring how much time elapsed</a></li>
<li><a href="#mcetoc_1gbmuqcgbb7">Instant</a></li>
<li><a href="#mcetoc_1gbmvuoobba">Time Zones</a></li>
<li><a href="#mcetoc_1gbnqrvhujl">Temporal Adjuster</a></li>
<li><a href="#mcetoc_1gbnqrvhujm">Immutability</a></li>
</ul>
</div>
<h2 id="mcetoc_1gbmeuk7f4r">Local date</h2>
<h3 id="mcetoc_1gbmfa47955">Now</h3>
<p>Let's start with the basics, we just want to represent the date today and print that local date now:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">TimeTest</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        LocalDate now = LocalDate.now();
        System.out.println(now);
    }
}</pre>
<p>output: <br><code>2022-08-29</code><br><br><code>Process finished with exit code 0</code><br><br>What if we want to pick a specific date in the future of today? We can use the plusDays, plusWeeks, plusMonths or plusYears for this:<br><br><code>        System.out.println(now.plusYears(5));</code><br><br>output: <br><code>2027-08-29</code><br><br><code>Process finished with exit code 0</code><br><br>If you want a more generic way you can also use this:<br><br><code>        System.out.println(now.plus(3, ChronoUnit.YEARS));</code><br><br>output:<br><code>2025-08-29</code><br><br><code>Process finished with exit code 0</code><br><br>There is also a minus Method, which does exactly the opposite of the plus method.</p>
<h3 id="mcetoc_1gbmeuk7f4s">Set a Date</h3>
<p>There is a method, which allows you to specify a year, month and a day of month:<br><br><code>        LocalDate newYears = LocalDate.of(2020,1,1);</code><br><code>        System.out.println(newYears);</code><br><br>output:<br><code>2020-01-01</code><br><br><code>Process finished with exit code 0</code><br><br>Let's say that we wanted to know what day of the week was New Year's Day in 2020. That's really easy to do because there are some really convenient methods on our local date classes to give us that kind of information so we can do a get.<br><br><code>        System.out.println(newYears.getDayOfWeek());</code><br><br>output:</p>
<p><code>WEDNESDAY</code><br><br><code>Process finished with exit code 0</code><br><br><br>Same exists for:</p>
<ul>
<li>getDayOfMonth</li>
<li>getDayOfYear</li>
<li>getMonth</li>
</ul>
<h3 id="mcetoc_1gbmeuk7f4u">Dates until</h3>
<p>This returns a stream of local dates between the New Years date and now, for example. We can use the streams API and lambdas on Date: if we do something like a for each, we can print out each of these dates:<br><br><code>        System.out.println(newYears.getDayOfWeek());</code><br><code>        newYears.datesUntil(LocalDate.now())</code><br><code>                .forEach(System.out::println);</code><br><br><br>output: <br><br><code>2020-01-01</code><br><code>2020-01-02</code><br><code>..</code><br><code>2022-08-26</code><br><code>2022-08-27</code><br><code>2022-08-28</code><br><br><code>Process finished with exit code 0</code><br><br>If you didn't want that to generate each and every single day, you can actually specify with an overloaded version of the *datesUntil* method a period, like so:<br><br><code>        newYears.datesUntil(LocalDate.now(), Period.ofMonths(1))</code><br><code>                .forEach(System.out::println);</code><br><br>output:<br><br><code>2020-01-01</code><br><code>2020-02-01</code><br><code>...</code><br><code>2022-06-01</code><br><code>2022-07-01</code><br><code>2022-08-01</code><br><br><code>Process finished with exit code 0</code><br><br></p>
<h2 id="mcetoc_1gbmfa47956">Local Time</h2>
<p>The class local dates is quite similar to the local dates class and very helpful. Basically, all the things that we can do that make sense with local date, we can also do with local time.</p>
<h3 id="mcetoc_1gbmgm59995">Now</h3>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">TimeTestTime</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        LocalTime now = LocalTime.now();
        System.out.println(now);
    }
}</pre>
<p>output:</p>
<p><code>06:17:48.708787</code><br><br><code>Process finished with exit code 0</code><br><br>Please note: <strong>Local date represents literally a date with no time component associated with it. Local time represents a time with no date associated with it.</strong></p>
<h3 id="mcetoc_1gbmgm59996">Set a time</h3>
<p>Of course you can also create a custom time and compere one time object with another:</p>
<p><code>        LocalTime lt1 = LocalTime.of(10,30);</code><br><code>        LocalTime lt2 = LocalTime.of(10,31);</code><br><code>        System.out.println(lt1.equals(lt2));</code></p>
<p>output:</p>
<p><code>false</code><br><br><code>Process finished with exit code 0</code></p>
<h2 id="mcetoc_1gbmgm59997">Local date time</h2>
<p>This class allows us the full culmination of having both the date and the time together. Here we can specify a year, month, day, minute, year, month, day of month, hour, minute, second, nanoseconds. We can even build a local date time out of a local date and a local time, which makes sense, right?</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">TimeTestDateTime</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        LocalDate ld1 = LocalDate.of(<span class="hljs-number" style="color: #6897bb;">2000</span>,<span class="hljs-number" style="color: #6897bb;">1</span>,<span class="hljs-number" style="color: #6897bb;">1</span>);
        LocalTime lt1 = LocalTime.of(<span class="hljs-number" style="color: #6897bb;">10</span>,<span class="hljs-number" style="color: #6897bb;">30</span>);
        LocalDate ld2 = LocalDate.of(<span class="hljs-number" style="color: #6897bb;">2000</span>,<span class="hljs-number" style="color: #6897bb;">1</span>,<span class="hljs-number" style="color: #6897bb;">1</span>);
        LocalTime lt2 = LocalTime.of(<span class="hljs-number" style="color: #6897bb;">10</span>,<span class="hljs-number" style="color: #6897bb;">30</span>);

        LocalDateTime ltd1 = LocalDateTime.of(ld1,lt1);
        LocalDateTime ltd2 = LocalDateTime.of(ld2,lt2);
        System.out.println(ltd1.equals(ltd2));
    }
}</pre>
<p>output:</p>
<p><code>true</code><br><br><code>Process finished with exit code 0</code><br><br></p>
<h2 id="mcetoc_1gbmuqcgbb6">Measuring how much time elapsed</h2>
<p>You can easily just extract the local date from a local date time or the local time from a local date time. Or we can calculate the difference between two dates:</p>
<p><code>        Period diff = Period.between(ld1, ld2);</code><br><code>        System.out.printf("%d years, %d months, %d days%n", diff.getYears(), diff.getMonths(), diff.getDays());</code></p>
<p>output:</p>
<p><code>2 years, 5 months, 9 days</code><br><br><code>Process finished with exit code 0</code></p>
<p>The<em> period </em>method allows us measuring differences in terms of days, weeks, months and years. The first argument is meant to be the starting point or the earlier date, and then the second argument is meant to be the later date.</p>
<p>If we want to measure in smaller terms of just days, lets say we want to know the elapsed hours, minutes, seconds or milliseconds between two times, then we need to use the <em>duration</em> method, just like we used the <em>period</em> method before. For each duration method there is a <em>toX</em> method as well as a <em>toXPart</em> method. The <em>toHoursPart</em> method simply gives us back the actual number for the hours that we were receiving in the original duration object itself when we just called to string on the duration itself. This is just returning back the hours portion of that, whereas the <em>toHours</em> method, actually just takes the total number of seconds for the entire duration and divides it by 3600 being the number of seconds in an hour.</p>
<h2 id="mcetoc_1gbmuqcgbb7">Instant</h2>
<p>Instant is actually quite similar, to local date time, except that local date, local time and local date time are really all meant for human consumption. So if you're writing programs that are going to be dealing with dates and times that are meant for humans to enter or to read, you'd want to be using these classes generally speaking.</p>
<p>On the other hand, though functionally somewhat similar to the local date, time has a different purpose, and that is for machines to share timing with each other.</p>
<p><code>        System.out.println(Instant.now());</code></p>
<p>output:</p>
<p><code>2022-08-30T08:37:45.926007Z</code><br><br><code>Process finished with exit code 0</code></p>
<p>But the instant actually tracks time in terms of seconds. And this is actually part of a legacy in computing that dates back to a specific date in time 1970 January 1st, which is known as epoch time. The creators of the very popular operating system Unix chose to track time in their operating system from that date. And that's around the period of time when Unix was released. So that's kind of the birth time of Unix. And so they just chose 1970 January 1st, and presumably because so many programs written from that period of time forward used this notion of time tracking called the epoch time. It has persisted to this day, which is kind of weird when you really think about it. There may be times as a developer when you need to specify dates and times to other systems. Some of these other systems may require that you pass them date time information using epoch time. And if you need to do that, you can use the instant class to do so.</p>
<h2 id="mcetoc_1gbmvuoobba">Time Zones</h2>
<p>What if you have a WebApp which is used worldwide over different timezones? Which time should you use to save the data? How can you guarantee that the timestamps over different timezones are correctly displayed for each user?</p>
<p>Luckily there is a class to help us: <em>ZonedDateTime</em>. You need to provide a <em>LocalDate</em> or <em>LocalDateTime</em> as well as a <em>ZoneId</em>. If you use <em>ZoneId.systemDefault()</em> then Java uses the Timezone of your local Computer. Keep in mind that most often your software will run on a server and you don't want to use the timezone of your server, because most often your server does not run in the same TimeZone as you are:</p>
<p><code>System.out.println(ZonedDateTime.of(ltd1, ZoneId.systemDefault()));</code></p>
<p>example output:</p>
<p><code>2000-01-01T10:30+01:00[Europe/Zurich]</code><br><br><code>Process finished with exit code 0</code></p>
<p>but we can set the Timezone to anything we want, like so:</p>
<p><code>System.out.println(ZonedDateTime.of(ltd1, ZoneId.of("-5")));</code></p>
<p>output:</p>
<p><code>2000-01-01T10:30-05:00</code></p>
<p>One possible thing which we could do to solve the time difference between users, is that we could normalize the time in one standard time zone, which will typically be UTC. We need to store everything in UTC on the Server.</p>
<p>Let's say that our users want their message to be sent at moon on Christmas. And let's also say that our user lives in Switzerland, this is the information that get's transmitted from their Web browser to our servers. So far we have the information about the xmas date and time, as well as the users TimeZone:</p>
<p><code>        LocalDateTime xmas = LocalDateTime.of(2022,12,25,12,00);</code><br><code>        // Switzerland - GMT+01</code><br><code>        ZonedDateTime zxmas = ZonedDateTime.of(xmas, ZoneId.of("+1"));</code></p>
<p>to normalize this, we can now use this:</p>
<p><code>        System.out.println(zxmas.withZoneSameInstant(ZoneId.of("+0")));</code></p>
<p>output:</p>
<p><code>2022-12-25T11:00Z</code><br><br><code>Process finished with exit code 0</code></p>
<p>And this is finally the information we want to store in the database, if the database does not support TimeZones.</p>
<p><strong>If you have a greenfield approach, or if you can control the database as much as your want, you should go ahead and store the Date, Time and TimeZone information all together in the database.</strong></p>
<h2 id="mcetoc_1gbnqrvhujl">Temporal Adjuster</h2>
<p>This is a weird name as long as you don't know what it is for. This class allows us to make adjustments to time. What does that mean? It means warping time in ways that humans might say in English, like for example, the Friday after next, or the next Thursday and things like that. So let's say you wanted to figure out the next Tuesday from that date on <em>d1:</em></p>
<p><code>System.out.println(ld1.with(TemporalAdjusters.next(DayOfWeek.TUESDAY)));</code></p>
<p>output:</p>
<p><code>2000-01-04</code><br><br><code>Process finished with exit code 0</code></p>
<p>So basically, what this means is from the date that we're specifying here the <em>d1</em>, whatever that date is, create another date that starts at that same point in time <em>d1</em> and then generate a new date, which would represent the next and then whatever day of the week in this particular case. There are a lot more methods on the TermporalAdjusters like <em>lastDayOfYear, lastDayOfMonth, firstInMonth</em> only to name a few.</p>
<h2 id="mcetoc_1gbnqrvhujm">Immutability</h2>
<p>All of these new daytime classes <em>LocalDate, LocalTime, LocalDate, TimeZone, DateTime,</em> et cetera are all designed to be immutable. Immutable is a term that you'll hear from time to time in software development, and it just means that you can't change the properties of that object after it has been created. This is considered to be a very desirable trait of objects frequently in programming, especially when you deal with functional programming styles.</p>
<p>So the <em>DateTime</em> API just embraces the immutable pattern throughout, but that comes with some consequences. That means that when we create an instance of a local data or time or any of these other classes, and we want to change some property of one of those objects, we can't just make a change. Instead, what we can do is we can basically clone an object and change things in the clone as it's being cloned.</p>
<p><code>System.out.println(ld1.withMonth(3).withDayOfMonth(15));</code></p>
<p>output:</p>
<p><code>2000-03-15</code><br><br><code>Process finished with exit code 0</code></p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java basics: Optionals</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-basics-optionals.html"/>
        <id>https://www.finecloud.ch/java-basics-optionals.html</id>
            <category term="stream-api"/>
            <category term="software development"/>
            <category term="optionals"/>
            <category term="lambda"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-08-30T06:00:03+02:00</updated>
            <summary>
                <![CDATA[
                    What are Optionals? For the the number one use case for them has to do with null values. So whenever we're dealing with objects in Java, we store references to objects in variables. And those variables may or may not actually be pointing back to&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gb6umu2h1v">What are Optionals?</a>
<ul>
<li><a href="#mcetoc_1gb6umu2h20">Example Szenario</a></li>
</ul>
</li>
<li><a href="#mcetoc_1gb706fnv3r">of vs ofNullable</a></li>
<li><a href="#mcetoc_1gb7366m97v">get</a></li>
<li><a href="#mcetoc_1gb7366m980">orElseThrow</a></li>
<li><a href="#mcetoc_1gb9laqot5j">orElseGet</a></li>
<li><a href="#mcetoc_1gb9laqot5k">filter</a></li>
<li><a href="#mcetoc_1gbenn3osa4">Map Function on Optionals</a></li>
<li><a href="#mcetoc_1gbenn3osa5">Optionals in APIs and domain models</a></li>
<li><a href="#mcetoc_1gbmefukg4">Returning Optionals instead of throwing Exceptions</a></li>
<li><a href="#mcetoc_1gbmefukg5">List of Optionals</a></li>
</ul>
</div>
<h2 id="mcetoc_1gb6umu2h1v">What are Optionals?</h2>
<p>For the the number one use case for them has to do with null values. So whenever we're dealing with objects in Java, we store references to objects in variables. And those variables may or may not actually be pointing back to an object. For example, we could create a string called message and put a word in it. So in this case, the variable <em>message</em> is pointing to the object, which exist somewhere in memory. But we could also have, <em>message2 p</em>ointing to nothing. And if I try to do something like to call  to upper, and if I run this, that's going to blow up with a null pointer exception. Because I'm trying to reference a method of a a method of an object that really does not exist.<br><br>And we don't like these null pointer exceptions because they cause our programs to stop, and we usually don't want our programs to blow up if we can help it.<br><br>Optionals let us wrap these variables in a little pretty box, and they provide us with some cool methods that can help us to detect whether or not we actually have any value in the box. And if we do, then we can proceed to do things with that value.</p>
<h3 id="mcetoc_1gb6umu2h20">Example Szenario</h3>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">OptionalTest</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        Optional&lt;String&gt; optMsg = Optional.of(<span class="hljs-string" style="color: #6a8759;">"Hello"</span>);
        System.out.println(optMsg);
    }
}</pre>
<p>output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Optional[Hello]

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<p>As you can see, it does print out the word hello, but it's surrounded by this optional thing because the object that we have here is not a string. It is an optional of a string.</p>
<h2 id="mcetoc_1gb706fnv3r"><em>of </em>vs <em>ofNullable</em></h2>
<p>Optional present themselves with this word optional and then brackets and then whatever thing is inside of it. And then it's calling the two string method of whatever object is inside of the optional. Note that optionals are really just wrappers for other objects or for nothing at all.</p>
<p>Here we've got the msg to uppercase, right? Let's say that we wrap this message in an optional. In this particular case, I have to create an optional of the msg to object using the <em>ofNullable </em>Method, because we can see that msg2 is <em>null. </em>Now I can provide an alternative string if that value was actually <em>null</em>. </p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">OptionalTest</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String msg = <span class="hljs-string" style="color: #6a8759;">"Hello"</span>;
        String msg2 = <span class="hljs-keyword" style="color: #cc7832;">null</span>;
        Optional&lt;String&gt; optMsg = Optional.ofNullable(msg2);
        String finalOutput = optMsg.orElse(<span class="hljs-string" style="color: #6a8759;">"alternative"</span>).toUpperCase();
        System.out.println(finalOutput);
    }
}</pre>
<p>output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">ALTERNATIVE

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<p>So the point of all of this is that it should now be impossible to get a null pointer exception as a result of <em>msg2</em> value being <em>null</em> because of the <em>Optional.ofNullable()</em><br><br>So what about the <em>Optional.of()</em> ? Let's run this code:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">OptionalTest</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String msg = <span class="hljs-string" style="color: #6a8759;">"Hello"</span>;
        String msg2 = <span class="hljs-keyword" style="color: #cc7832;">null</span>;
        Optional&lt;String&gt; optMsg = Optional.of(msg2);
        System.out.println(optMsg);
    }
}</pre>
<p>output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Exception in thread <span class="hljs-string" style="color: #6a8759;">"main"</span> java.lang.NullPointerException
	at java.base/java.util.Objects.requireNonNull(Objects.java:<span class="hljs-number" style="color: #6897bb;">208</span>)
	at java.base/java.util.Optional.of(Optional.java:<span class="hljs-number" style="color: #6897bb;">113</span>)
	at section11_loose_ends.datastore.OptionalTest.main(OptionalTest.java:<span class="hljs-number" style="color: #6897bb;">10</span>)

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">1</span></pre>
<p>The reason for that is that this <em>of</em> method is expecting that the value you're passing in to it is not null. So you could use an <em>Optional.of</em> so that you could intentionally test and make sure that the values that you were passing in to it were not null.</p>
<p>You should generally only be using <em>Optional.of</em> in two cases:</p>
<ol>
<li>First case is you're 100% certain that the values that you will be passing into it won't be null.</li>
<li>You're not sure if the values might be <em>null</em> and you're ok with your program blowing up with a null pointer exception. Maybe in some cases you want that to happen, because the variables that shall be passing into the <em>Optional.of </em>99.9% of the time should not be null. And if they are, then you've got bigger problems and you want to know about those problems, right? We don't want our program to just carry on happily when unexpected circumstances occur. In some cases, we want the program to blow up and die with a nice stack trace so that we can learn.</li>
</ol>
<h2 id="mcetoc_1gb7366m97v"><em>get</em></h2>
<p>Let's run this and see what happens:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">OptionalTest</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String msg = <span class="hljs-string" style="color: #6a8759;">"Hello"</span>;
        String msg2 = <span class="hljs-keyword" style="color: #cc7832;">null</span>;
        Optional&lt;String&gt; optMsg = Optional.ofNullable(msg2);
        System.out.println(optMsg.get());
    }
}</pre>
<p>output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Exception in thread <span class="hljs-string" style="color: #6a8759;">"main"</span> java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:<span class="hljs-number" style="color: #6897bb;">143</span>)
	at section11_loose_ends.datastore.OptionalTest.main(OptionalTest.java:<span class="hljs-number" style="color: #6897bb;">11</span>)

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">1</span></pre>
<p>So because we're using the <em>ofNullable</em>, we're not blowing up online ten anymore. When we pass in this <em>null</em> value now, we're blowing up with this <em>get(). </em>It just tries to get the value out. And it doesn't do any checks and it doesn't give us any options. And in that case, to do what we're doing here is really no better than just not using Optionals at all and just having a value that could possibly be null and then trying to use it right? So no advantage to that.</p>
<h2 id="mcetoc_1gb7366m980"><em>orElseThrow</em></h2>
<p>Let's say that we wanted to throw a different type of exception. This works like a supplier function. The thing that I'm going to return, though, will be something that extends runtime exception:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">OptionalTest</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String msg = <span class="hljs-string" style="color: #6a8759;">"Hello"</span>;
        String msg2 = <span class="hljs-keyword" style="color: #cc7832;">null</span>;
        Optional&lt;String&gt; optMsg = Optional.ofNullable(msg2);

        System.out.println(optMsg.orElseThrow(() -&gt; <span class="hljs-keyword" style="color: #cc7832;">new</span> RuntimeException(<span class="hljs-string" style="color: #6a8759;">"Whoops, Nothing found... "</span>)));
    }
}</pre>
<p>output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Exception in thread <span class="hljs-string" style="color: #6a8759;">"main"</span> java.lang.RuntimeException: Whoops, Nothing found... 
	at section11_loose_ends.datastore.OptionalTest.lambda$main$<span class="hljs-number" style="color: #6897bb;">0</span>(OptionalTest.java:<span class="hljs-number" style="color: #6897bb;">11</span>)
	at java.base/java.util.Optional.orElseThrow(Optional.java:<span class="hljs-number" style="color: #6897bb;">403</span>)
	at section11_loose_ends.datastore.OptionalTest.main(OptionalTest.java:<span class="hljs-number" style="color: #6897bb;">11</span>)

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">1</span></pre>
<p>We can call its constructor so that we can pass in some simple message like nothing found. Typically in real life, you don't want to be creating new runtime exceptions like this. You want a first go look through all of the standard exceptions that are already created with Java and see if there's one that's already existing whose name matches with your circumstance. So like if you were looking for a file and you couldn't find one, maybe there's a runtime exception that has something to do with file related exceptions.<br><br>And only after you've looked through all of the standard exceptions and couldn't find one that matches with your circumstance in terms of its name, then you could consider creating your own class that extends runtime exception or exception if that's your case for, like a checked exception or something.</p>
<h2 id="mcetoc_1gb9laqot5j"><em>orElseGet</em></h2>
<p>This Method takes a supplier, which is one of the functional interfaces. It's an interface that represents a method are a function that doesn't take an input, but it supplies things or values.<br><br>We could have a method reference, like maybe there's some method somewhere else in our code that generates passwords. What you could have is something like basically, if they supplied the password, then go ahead and do whatever you were planning to do with the password. But if they did not supply the password, then maybe you're doing this <em>orElseGet</em> and then this <em>orElseGet</em> is pointing at a method reference to some fancy method that can generate new passwords for us each time we call it.</p>
<h2 id="mcetoc_1gb9laqot5k"><em>filter</em></h2>
<p>This filter here works pretty much exactly like the filter in the streams API takes a predicate does the same stuff, except where the filter from the Streams API would return a stream again.</p>
<p>A stream of whatever this filter here returns an optional of whatever. Lets look at this Example:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">OptionalTest_v2</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String msg = <span class="hljs-string" style="color: #6a8759;">"cat"</span>;
        Optional&lt;String&gt; optMsg = Optional.ofNullable(msg);
        System.out.println(optMsg.filter(s -&gt; s.length() &gt; <span class="hljs-number" style="color: #6897bb;">3</span>).orElse(<span class="hljs-string" style="color: #6a8759;">"invalid"</span>));
    }
}</pre>
<p>output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">invalid

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<p>The functionality allows you to use this if you wanted to ensure not only that there should be an object inside of the optional, but you can also have a chance to test that object for some type of property or behavior or whatever. Now, if we want to make sure that we get something more legit to print, which would be some type of a string, we can fall back on our familiar fallback methods like orElse, so we can do an <em>orElse</em> and then say something like "invalid", right?<br><br>Now let's test what happens, though, if we actually put legitimate strings in here and not only one with the length of three:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">OptionalTest_v2</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String msg = <span class="hljs-string" style="color: #6a8759;">"cats"</span>;
        Optional&lt;String&gt; optMsg = Optional.ofNullable(msg);
        System.out.println(optMsg.filter(s -&gt; s.length() &gt; <span class="hljs-number" style="color: #6897bb;">3</span>).orElse(<span class="hljs-string" style="color: #6a8759;">"invalid"</span>));
    }
}</pre>
<p>output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">cats

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<h2 id="mcetoc_1gbenn3osa4">Map Function on Optionals</h2>
<p>What if we have some custom Class or Records of which we want to access specific fields and use Optionals this for? Let's say we have an optional of a person class and we want to obtain just the first name, for example, of this person. Obviously, you can't just call a getfirstName Method on this Object, because this isn't a person that we're working with right, Ii's an optional. So I would have to first peel off the optional layer to get to the person underneath so that I can then get to the first name.<br><br>So I could do a <em>get</em>, which we already know is generally not a good idea or I could do and <em>orElse</em> right. However, now the <em>orElse</em> is wanting me to specify an alternative object that it should return if there wasn't anything in the optional. And that might be a little annoying in this case, because the alternative object isn't the string anymore, it's actually a person. I'd have to supply a whole other person as a backup person and that feels a little awkward. We don't really want to have to do all of that right?</p>
<p>But there's another thing that we could do: there's a map function on optionals, just like from the Streams API. We can use the map function to basically convert or translate whatever our main starring object type was within the stream to something else. So we could go from a stream of strings to a stream of integers or longs or something like that.</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">OptionalTest_v3</span> </span>{
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Car</span><span class="hljs-params">(String make, String model, String color, Year year)</span> </span>{}
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Person</span><span class="hljs-params">(String firstName, String lastName, Car car)</span> </span>{}
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        Person p1 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Tom"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, <span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"X"</span>, <span class="hljs-string" style="color: #6a8759;">"Red"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2018</span>)));
        Person p2 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Jerry"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, <span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"Y"</span>, <span class="hljs-string" style="color: #6a8759;">"White"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2020</span>)));

        Optional&lt;Person&gt; optPerson = Optional.of(p1);
        System.out.println(optPerson.map(person -&gt; person.firstName)); <span class="hljs-comment" style="color: grey;">// traditional lambda expression</span>
        System.out.println(optPerson.map(Person::firstName)); <span class="hljs-comment" style="color: grey;">// using a method reference</span>
    }
}</pre>
<p>output:</p>
<p><code>Optional[Tom]</code><br><code>Optional[Tom]</code><br><br><code>Process finished with exit code 0</code></p>
<p>So we still have an Optional which does not allow Nullable Values. Let's further improve this:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">OptionalTest_v3</span> </span>{
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Car</span><span class="hljs-params">(String make, String model, String color, Year year)</span> </span>{}
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Person</span><span class="hljs-params">(String firstName, String lastName, Car car)</span> </span>{}
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        Person p1 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Tom"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, <span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"X"</span>, <span class="hljs-string" style="color: #6a8759;">"Red"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2018</span>)));
        Person p2 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Jerry"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, <span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"Y"</span>, <span class="hljs-string" style="color: #6a8759;">"White"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2020</span>)));
        Person p3 = <span class="hljs-keyword" style="color: #cc7832;">null</span>;

        Optional&lt;Person&gt; optPerson = Optional.ofNullable(p2);
<span class="hljs-comment" style="color: grey;">//        System.out.println(optPerson.map(person -&gt; person.firstName)); // traditional lambda expression</span>
        System.out.println(optPerson
                .map(Person::car)
                .map(Car::make)
                .orElse(<span class="hljs-string" style="color: #6a8759;">"Unknown firstName"</span>));
    }
}</pre>
<p>output:</p>
<p><code>Tesla</code><br><br><code>Process finished with exit code 0</code></p>
<h2 id="mcetoc_1gbenn3osa5">Optionals in APIs and domain models</h2>
<p>Let's say that you're modeling a person like in the last example and you say, a person will always have to have a <em>firstName</em> and <em>lastName</em>, but they may optionally own a <em>Car</em>. Not everybody owns a car, especially people who live in cities. So owning a car could be considered optional. So you might want to model your <em>Person</em> class with that concept baked right in.</p>
<p>If we go ahead and just make the <em>Car</em> field optional, this leads to the problem that we will get a map inside of a map in our Lambda expression with the method reference of <code>.map(Car::make)</code></p>
<p>We can solve this my using a flatMap:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">OptionalTest_v3</span> </span>{
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Car</span><span class="hljs-params">(String make, String model, String color, Year year)</span> </span>{}
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Person</span><span class="hljs-params">(String firstName, String lastName, Optional&lt;Car&gt; car)</span> </span>{}
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        Person p1 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Tom"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, Optional.of(<span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"X"</span>, <span class="hljs-string" style="color: #6a8759;">"Red"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2018</span>))));
        Person p2 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Jerry"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, Optional.of(<span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"Y"</span>, <span class="hljs-string" style="color: #6a8759;">"White"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2020</span>))));
        Person p3 = <span class="hljs-keyword" style="color: #cc7832;">null</span>;

        Optional&lt;Person&gt; optPerson = Optional.ofNullable(p2);
<span class="hljs-comment" style="color: grey;">//        System.out.println(optPerson.map(person -&gt; person.firstName)); // traditional lambda expression</span>
        System.out.println(optPerson
                .flatMap(Person::car)
                .map(Car::make)
                .orElse(<span class="hljs-string" style="color: #6a8759;">"Unknown firstName"</span>));
    }
}</pre>
<p>output:</p>
<p><code>Tesla</code><br><br><code>Process finished with exit code 0</code></p>
<h2 id="mcetoc_1gbmefukg4">Returning Optionals instead of throwing Exceptions</h2>
<p>A lot of newer APIs that do things like we did before may opt not to throw an exception anymore, but instead to model the API such that it would just return an optional. Lets improve our <em>Repository</em> Class to store People in it and access them by ID.</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RepositoryGeneric_v4</span>&lt;<span class="hljs-title" style="color: #ffc66d;">T</span> <span class="hljs-keyword" style="color: #cc7832;">extends</span> <span class="hljs-title" style="color: #ffc66d;">RepositoryGeneric_v4</span>.<span class="hljs-title" style="color: #ffc66d;">IDable</span>&lt;<span class="hljs-title" style="color: #ffc66d;">V</span>&gt;, <span class="hljs-title" style="color: #ffc66d;">V</span>&gt; </span>{
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Person</span><span class="hljs-params">(String fristName, String lastName, Long id)</span> implements IDable&lt;Long&gt;</span>{};
    <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">interface</span> <span class="hljs-title" style="color: #ffc66d;">IDable</span>&lt;<span class="hljs-title" style="color: #ffc66d;">U</span>&gt; </span>{
        <span class="hljs-function">U <span class="hljs-title" style="color: #ffc66d;">id</span><span class="hljs-params">()</span></span>;
    }
    <span class="hljs-keyword" style="color: #cc7832;">private</span> List&lt;T&gt; records = <span class="hljs-keyword" style="color: #cc7832;">new</span> ArrayList&lt;&gt;();

    <span class="hljs-function">List&lt;T&gt; <span class="hljs-title" style="color: #ffc66d;">findAll</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> records;
    }

    <span class="hljs-function">T <span class="hljs-title" style="color: #ffc66d;">save</span><span class="hljs-params">(T record)</span> </span>{
        records.add(record);
        <span class="hljs-keyword" style="color: #cc7832;">return</span> record;
    }

    <span class="hljs-keyword" style="color: #cc7832;">static</span> &lt;T,V&gt; <span class="hljs-function">V <span class="hljs-title" style="color: #ffc66d;">encrypt</span><span class="hljs-params">(T data, Function&lt;T, V&gt; func)</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> func.apply(data);
    }

    <span class="hljs-function">Optional&lt;T&gt; <span class="hljs-title" style="color: #ffc66d;">findById</span><span class="hljs-params">(<span class="hljs-keyword" style="color: #cc7832;">long</span> id)</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> records.stream().filter(p -&gt; p.id().equals(id)).findFirst();
    }

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        RepositoryGeneric_v4&lt;Person, Long&gt; pRepo = <span class="hljs-keyword" style="color: #cc7832;">new</span> RepositoryGeneric_v4&lt;&gt;();
        pRepo.save(<span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Chuck"</span>, <span class="hljs-string" style="color: #6a8759;">"Norris"</span>, <span class="hljs-number" style="color: #6897bb;">10L</span>));
        pRepo.save(<span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Max"</span>, <span class="hljs-string" style="color: #6a8759;">"Müller"</span>, <span class="hljs-number" style="color: #6897bb;">20L</span>));
        pRepo.save(<span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Hans"</span>, <span class="hljs-string" style="color: #6a8759;">"Wurst"</span>, <span class="hljs-number" style="color: #6897bb;">30L</span>));

        Person foundPerson = pRepo.findById(<span class="hljs-number" style="color: #6897bb;">30L</span>).get();
        System.out.println(foundPerson);

<span class="hljs-comment" style="color: grey;">//        System.out.println(pRepo.findAll());</span>

        System.out.println(RepositoryGeneric_v4.&lt;String, String&gt;encrypt(<span class="hljs-string" style="color: #6a8759;">"Hello"</span>, m -&gt; m.toUpperCase()));
        System.out.println(RepositoryGeneric_v4.&lt;String, Integer&gt;encrypt(<span class="hljs-string" style="color: #6a8759;">"Test"</span>, m -&gt; m.hashCode()));
    }
}</pre>
<p>output:</p>
<p><code>Jerry</code><br><br><code>Process finished with exit code 0</code></p>
<p>What if we now have the Case of an inexistent findById call:</p>
<p><code>        String fName = repo.findById(300L)</code></p>
<p>will return:</p>
<p><code>firstName not found</code><br><br><code>Process finished with exit code 0</code></p>
<p>Isn't that nice? We don't have to deal with an exception where we'd have to use a try catch block and then try it in and then catch it and then do some alternative business because we didn't get the thing that we were looking for the record that we were looking for right now.<br><br>Instead, we can just use the same code for both circumstances of whether or not we found the actual person from the data store from the repository. This is much more concise code than even having to do the try catch block and all of that business and most Java developers don't really care for doing a whole lot of try catch blocks because it just kind of looks nasty.</p>
<h2 id="mcetoc_1gbmefukg5">List of Optionals</h2>
<p>See how you can filter out null Values in a List of Optionals Stream:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">OptionalTest_v5</span> </span>{
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Car</span><span class="hljs-params">(String make, String model, String color, Year year)</span> </span>{}
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Person</span><span class="hljs-params">(Long id, String firstName, String lastName, Optional&lt;Car&gt; car)</span> implements RepositoryGeneric_v4.IDable&lt;Long&gt;, RepositoryGeneric_v4.Saveable </span>{}
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        RepositoryGeneric_v4&lt;Person, Long&gt; repo = <span class="hljs-keyword" style="color: #cc7832;">new</span> RepositoryGeneric_v4&lt;&gt;();
        Person p1 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-number" style="color: #6897bb;">100L</span>, <span class="hljs-string" style="color: #6a8759;">"Tom"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, Optional.of(<span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"X"</span>, <span class="hljs-string" style="color: #6a8759;">"Red"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2018</span>))));
        Person p2 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-number" style="color: #6897bb;">200L</span>, <span class="hljs-string" style="color: #6a8759;">"Jerry"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, Optional.of(<span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"Y"</span>, <span class="hljs-string" style="color: #6a8759;">"White"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2020</span>))));
        Person p3 = <span class="hljs-keyword" style="color: #cc7832;">null</span>;
        Person p4 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-number" style="color: #6897bb;">400L</span>, <span class="hljs-string" style="color: #6a8759;">"Jake"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, Optional.of(<span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"3"</span>, <span class="hljs-string" style="color: #6a8759;">"Blue"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2019</span>))));
        Person p5 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-number" style="color: #6897bb;">500L</span>, <span class="hljs-string" style="color: #6a8759;">"Johnny"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, Optional.of(<span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"S"</span>, <span class="hljs-string" style="color: #6a8759;">"Black"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2021</span>))));

        List&lt;Optional&lt;Person&gt;&gt; people = List.of(Optional.of(p1), Optional.of(p2), Optional.ofNullable(p3), Optional.of(p4), Optional.of(p5));
        people.stream()
                .filter(Optional::isPresent) <span class="hljs-comment" style="color: grey;">// filter out the null's</span>
                .map(Optional::get) <span class="hljs-comment" style="color: grey;">// unwrap the Optionals to the actual Objects</span>
                .map(Person::firstName)
                .forEach(System.out::println);
    }
}</pre>
<p>output:</p>
<p><code>Tom</code><br><code>Jerry</code><br><code>Jake</code><br><code>Johnny</code><br><br><code>Process finished with exit code 0</code><br><br>but you can also use the Stream API directly on an Object, like so:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">OptionalTest_v5</span> </span>{
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Car</span><span class="hljs-params">(String make, String model, String color, Year year)</span> </span>{}
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Person</span><span class="hljs-params">(Long id, String firstName, String lastName, Optional&lt;Car&gt; car)</span> implements RepositoryGeneric_v4.IDable&lt;Long&gt;, RepositoryGeneric_v4.Saveable </span>{}
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        RepositoryGeneric_v4&lt;Person, Long&gt; repo = <span class="hljs-keyword" style="color: #cc7832;">new</span> RepositoryGeneric_v4&lt;&gt;();
        Person p1 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-number" style="color: #6897bb;">100L</span>, <span class="hljs-string" style="color: #6a8759;">"Tom"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, Optional.of(<span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"X"</span>, <span class="hljs-string" style="color: #6a8759;">"Red"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2018</span>))));
        Person p2 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-number" style="color: #6897bb;">200L</span>, <span class="hljs-string" style="color: #6a8759;">"Jerry"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, Optional.of(<span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"Y"</span>, <span class="hljs-string" style="color: #6a8759;">"White"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2020</span>))));
        Person p3 = <span class="hljs-keyword" style="color: #cc7832;">null</span>;
        Person p4 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-number" style="color: #6897bb;">200L</span>, <span class="hljs-string" style="color: #6a8759;">"Jake"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, Optional.of(<span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"3"</span>, <span class="hljs-string" style="color: #6a8759;">"Blue"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2019</span>))));
        Person p5 = <span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-number" style="color: #6897bb;">200L</span>, <span class="hljs-string" style="color: #6a8759;">"Johnny"</span>, <span class="hljs-string" style="color: #6a8759;">"Thumb"</span>, Optional.of(<span class="hljs-keyword" style="color: #cc7832;">new</span> Car(<span class="hljs-string" style="color: #6a8759;">"Tesla"</span>, <span class="hljs-string" style="color: #6a8759;">"S"</span>, <span class="hljs-string" style="color: #6a8759;">"Black"</span>, Year.of(<span class="hljs-number" style="color: #6897bb;">2021</span>))));

        Optional&lt;Person&gt; p11 = Optional.ofNullable(p1);
        p11.stream()
                .map(Person::firstName)
                .forEach(System.out::println);
<span class="hljs-comment" style="color: grey;">//</span>
<span class="hljs-comment" style="color: grey;">//        List&lt;Optional&lt;Person&gt;&gt; people = List.of(Optional.of(p1), Optional.of(p2), Optional.ofNullable(p3), Optional.of(p4), Optional.of(p5));</span>
<span class="hljs-comment" style="color: grey;">//        people.stream()</span>
<span class="hljs-comment" style="color: grey;">//                .filter(Optional::isPresent) // filter out the null's</span>
<span class="hljs-comment" style="color: grey;">//                .map(Optional::get) // unwrap the Optionals to the actual Objects</span>
<span class="hljs-comment" style="color: grey;">//                .map(Person::firstName)</span>
<span class="hljs-comment" style="color: grey;">//                .forEach(System.out::println);</span>
    }
}</pre>
<p>output: </p>
<p><code>Tom</code><br><br><code>Process finished with exit code 0</code></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java basics: Generics</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-basics-generics.html"/>
        <id>https://www.finecloud.ch/java-basics-generics.html</id>
            <category term="software development"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="generics"/>
            <category term="dev"/>

        <updated>2022-08-23T17:29:38+02:00</updated>
            <summary>
                <![CDATA[
                    What are Generics? What if we could write a single sort method that sort the elements in an Integer array, a String array, or an array of any type that supports ordering? Java Generics enable programmers to specify, with a single method declaration, a set&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gb5849tosv">What are Generics?</a></li>
<li><a href="#mcetoc_1gb5849tot0">Example Szenario</a>
<ul>
<li><a href="#mcetoc_1gb5il12127i">The Challenge</a>
<ul>
<li><a href="#mcetoc_1gb5il12127j">The bad way</a></li>
<li><a href="#mcetoc_1gb5il12127k">There's a better way</a></li>
<li><a href="#mcetoc_1gb5il12127l">Associate an ID</a></li>
<li><a href="#mcetoc_1gb5imo5327n">Implement a Get ID method</a></li>
<li><a href="#mcetoc_1gb5l3vod2g2">Implement IDable in person class</a></li>
</ul>
</li>
<li><a href="#mcetoc_1gb5l3vod2g3">Use generics on static methods</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1gb5849tosv">What are Generics?</h2>
<p>What if we could write a single sort method that sort the elements in an Integer array, a String array, or an array of any type that supports ordering?</p>
<p>Java Generics enable programmers to specify, with a single method declaration, a set of related methods, or with a single class declaration, a set of related types.<br><br>Generics also provide compile-time type safety that allows programmers to catch invalid types at compile time.<br><br>You will find them most commonly with collections, although they can be used with more than just collections. Typically, though, when they're used with classes like collections, they allow us to constrain the types of data that can be associated with the class that we are using the generics on.</p>
<p>So in general, generics allow us to kind of constrain what types of data we can associate with a with a class. Additionally, because they allow us to specify those data types, more specifically, they also enable us to avoid, in many cases, needing to cast types any more. We can use generics on methods and things that return data types as well. And in that case, if you use a generic for those methods that can return something, then you have a better shot at not needing to cast whatever the data type was that comes off of those methods.<br><br>And then finally, they can protect us from certain types of runtime errors because if you're not using generics, but you're working with code that is expecting to work with certain data types, we don't have a really strong way of enforcing that. Then you're likely going to be casting data into the assumed types that you need to work with. And if the objects that you're casting aren't actually cast the ball into the data type that you're expecting, you're going to get errors.</p>
<h2 id="mcetoc_1gb5849tot0">Example Szenario</h2>
<p>Lets assume we have the following Java Class:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">import</span> java.util.ArrayList;
<span class="hljs-keyword" style="color: #cc7832;">import</span> java.util.List;

<span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">Repository</span> </span>{
    <span class="hljs-keyword" style="color: #cc7832;">private</span> List&lt;String&gt; records = <span class="hljs-keyword" style="color: #cc7832;">new</span> ArrayList&lt;&gt;();

    <span class="hljs-function">List&lt;String&gt; <span class="hljs-title" style="color: #ffc66d;">findAll</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> records;
    }

    <span class="hljs-function">String <span class="hljs-title" style="color: #ffc66d;">save</span><span class="hljs-params">(String record)</span> </span>{
        records.add(record);
        <span class="hljs-keyword" style="color: #cc7832;">return</span> record;
    }

    <span class="hljs-function">String <span class="hljs-title" style="color: #ffc66d;">findById</span><span class="hljs-params">(<span class="hljs-keyword" style="color: #cc7832;">long</span> id)</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> records.get(Long.valueOf(id).intValue());
    }

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        Repository repo = <span class="hljs-keyword" style="color: #cc7832;">new</span> Repository();
        repo.save(<span class="hljs-string" style="color: #6a8759;">"house"</span>);
        repo.save(<span class="hljs-string" style="color: #6a8759;">"tree"</span>);
        repo.save(<span class="hljs-string" style="color: #6a8759;">"boat"</span>);

        System.out.println(repo.findAll());
    }
}</pre>
<h3 id="mcetoc_1gb5il12127i">The Challenge</h3>
<p>So there we have our collection of Strings like house, tree and boat. What if we wanted this repository to be capable of working with virtually any data type there is right now? Currently it can only store strings.</p>
<h4 id="mcetoc_1gb5il12127j">The bad way</h4>
<p>One way that we could do it would be to remove the &lt;String&gt; notation in the private List declaration and maybe either just not have any generic type at all. Or similarly, just change <em>&lt;String&gt;</em> to <em>&lt;Object&gt;</em>. </p>
<p>I think those two approaches would be functionally similar to each other, if not identical. So what would be the pros and cons to doing that? Well, one potential con of that approach would be that when we retrieve items using the <em>findById </em>in particular, we would then have to cast them to whatever their actual data type was. That kind of opens us up to some runtime errors if we are making assumptions as to what data type we stored in there.</p>
<h4 id="mcetoc_1gb5il12127k">There's a better way</h4>
<p>So the better thing to do would be to make our own classes generic, so we can actually make this repository class generic pretty much exactly the way that the list is set to Type String.</p>
<p>Note: We can make this for a given instance of the repository. Now this is key for a given instance of the repository. We can only use one data type. So if you want to use another data type you have to use, you have to create another instance of the repository.<br><br>So let's see what that would look like: <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">We use a letter typically to refer to our generic, our generic data type. And the most common letter that you will find when doing this is </span><em style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">T</em><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> standing for type. By doing this, we are telling Java that this class is generic. We must use this </span><em style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">T</em><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> in various key places now.</span></p>
<p>All we need to do is replacing each <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">String declaration or Type with the Letter <em>T:</em></span></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">import</span> java.util.ArrayList;
<span class="hljs-keyword" style="color: #cc7832;">import</span> java.util.List;

<span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RepositoryGeneric</span>&lt;<span class="hljs-title" style="color: #ffc66d;">T</span>&gt; </span>{
    <span class="hljs-keyword" style="color: #cc7832;">private</span> List&lt;T&gt; records = <span class="hljs-keyword" style="color: #cc7832;">new</span> ArrayList&lt;&gt;();

    <span class="hljs-function">List&lt;T&gt; <span class="hljs-title" style="color: #ffc66d;">findAll</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> records;
    }

    <span class="hljs-function">T <span class="hljs-title" style="color: #ffc66d;">save</span><span class="hljs-params">(T record)</span> </span>{
        records.add(record);
        <span class="hljs-keyword" style="color: #cc7832;">return</span> record;
    }

    <span class="hljs-function">T <span class="hljs-title" style="color: #ffc66d;">findById</span><span class="hljs-params">(<span class="hljs-keyword" style="color: #cc7832;">long</span> id)</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> records.get(Long.valueOf(id).intValue());
    }

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        RepositoryGeneric repo = <span class="hljs-keyword" style="color: #cc7832;">new</span> RepositoryGeneric();
        repo.save(<span class="hljs-string" style="color: #6a8759;">"house"</span>);
        repo.save(<span class="hljs-string" style="color: #6a8759;">"tree"</span>);
        repo.save(<span class="hljs-string" style="color: #6a8759;">"boat"</span>);

        System.out.println(repo.findAll());
    }
}
</pre>
<p>It still works. Nothing broke. Why? Because Java is replacing <em>&lt;T&gt;</em> with <em>&lt;Object&gt;</em>. 🤣</p>
<p>If we want this repository instance to be truly generic, however, we can go ahead and do that. All we need to do is defining a repository of string like so:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">        RepositoryGeneric&lt;String&gt; repo = <span class="hljs-keyword" style="color: #cc7832;">new</span> RepositoryGeneric&lt;&gt;();</pre>
<p>Now we're creating a repository of string. Obviously, this isn't bringing a whole lot of value in this particular example where we were already working with string, right?<br><br>But what if we also have a record Class that models a Person:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Person</span><span class="hljs-params">(String fristName, String lastName)</span></span>{};</pre>
<p>Lets create another instance of a repository now, but this one will work for person instances, we call it <em>pRepo</em>. If I try to add a String like in the <em>"house"</em> in the existing Repo, I'm getting an error now, and if I hover over this, it's basically just telling me that, I'm trying to supply a string, but I'm really expecting a person:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/58/Screenshot-2022-08-23-at-14.27.30.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/58/responsive/Screenshot-2022-08-23-at-14.27.30-xs.png 300w ,https://www.finecloud.ch/media/posts/58/responsive/Screenshot-2022-08-23-at-14.27.30-sm.png 480w ,https://www.finecloud.ch/media/posts/58/responsive/Screenshot-2022-08-23-at-14.27.30-md.png 768w ,https://www.finecloud.ch/media/posts/58/responsive/Screenshot-2022-08-23-at-14.27.30-lg.png 1024w ,https://www.finecloud.ch/media/posts/58/responsive/Screenshot-2022-08-23-at-14.27.30-xl.png 1360w ,https://www.finecloud.ch/media/posts/58/responsive/Screenshot-2022-08-23-at-14.27.30-2xl.png 1600w"  alt="" width="669" height="325"></figure>
<p>So therefore, whatever I pass in here has to be a person. If we change this and add new Person's everything works, no matter if we have a Repo of Strings or a Repo of Persons:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">import</span> java.util.ArrayList;
<span class="hljs-keyword" style="color: #cc7832;">import</span> java.util.List;

<span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RepositoryGeneric</span>&lt;<span class="hljs-title" style="color: #ffc66d;">T</span>&gt; </span>{
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Person</span><span class="hljs-params">(String fristName, String lastName)</span></span>{};
    <span class="hljs-keyword" style="color: #cc7832;">private</span> List&lt;T&gt; records = <span class="hljs-keyword" style="color: #cc7832;">new</span> ArrayList&lt;&gt;();

    <span class="hljs-function">List&lt;T&gt; <span class="hljs-title" style="color: #ffc66d;">findAll</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> records;
    }

    <span class="hljs-function">T <span class="hljs-title" style="color: #ffc66d;">save</span><span class="hljs-params">(T record)</span> </span>{
        records.add(record);
        <span class="hljs-keyword" style="color: #cc7832;">return</span> record;
    }

    <span class="hljs-function">T <span class="hljs-title" style="color: #ffc66d;">findById</span><span class="hljs-params">(<span class="hljs-keyword" style="color: #cc7832;">long</span> id)</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> records.get(Long.valueOf(id).intValue());
    }

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        RepositoryGeneric&lt;String&gt; repo = <span class="hljs-keyword" style="color: #cc7832;">new</span> RepositoryGeneric&lt;&gt;();
        repo.save(<span class="hljs-string" style="color: #6a8759;">"house"</span>);
        repo.save(<span class="hljs-string" style="color: #6a8759;">"tree"</span>);
        repo.save(<span class="hljs-string" style="color: #6a8759;">"boat"</span>);

        RepositoryGeneric&lt;Person&gt; pRepo = <span class="hljs-keyword" style="color: #cc7832;">new</span> RepositoryGeneric&lt;&gt;();
        pRepo.save(<span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Chuck"</span>, <span class="hljs-string" style="color: #6a8759;">"Norris"</span>));
        pRepo.save(<span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Max"</span>, <span class="hljs-string" style="color: #6a8759;">"Müller"</span>));
        pRepo.save(<span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Hans"</span>, <span class="hljs-string" style="color: #6a8759;">"Wurst"</span>));

        System.out.println(repo.findAll());
        System.out.println(pRepo.findAll());
    }
}
</pre>
<p>output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">[house, tree, boat]
[Person[fristName=Chuck, lastName=Norris], Person[fristName=Max, lastName=Müller], Person[fristName=Hans, lastName=Wurst]]

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<h4 id="mcetoc_1gb5il12127l">Associate an ID</h4>
<p>So now that we have the ability to pass in more complex objects like this person class, a very common thing that we will encounter as professional developers using frameworks that implement the repository pattern is that our objects that will interact with the repository typically will have an ID associated with them.</p>
<p>So let's add an ID property to the person class and execute the program again:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">import</span> java.util.ArrayList;
<span class="hljs-keyword" style="color: #cc7832;">import</span> java.util.List;

<span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RepositoryGeneric</span>&lt;<span class="hljs-title" style="color: #ffc66d;">T</span>&gt; </span>{
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Person</span><span class="hljs-params">(String fristName, String lastName, Long id)</span></span>{};
    <span class="hljs-keyword" style="color: #cc7832;">private</span> List&lt;T&gt; records = <span class="hljs-keyword" style="color: #cc7832;">new</span> ArrayList&lt;&gt;();

    <span class="hljs-function">List&lt;T&gt; <span class="hljs-title" style="color: #ffc66d;">findAll</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> records;
    }

    <span class="hljs-function">T <span class="hljs-title" style="color: #ffc66d;">save</span><span class="hljs-params">(T record)</span> </span>{
        records.add(record);
        <span class="hljs-keyword" style="color: #cc7832;">return</span> record;
    }

    <span class="hljs-function">T <span class="hljs-title" style="color: #ffc66d;">findById</span><span class="hljs-params">(<span class="hljs-keyword" style="color: #cc7832;">long</span> id)</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> records.get(Long.valueOf(id).intValue());
    }

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        RepositoryGeneric&lt;String&gt; repo = <span class="hljs-keyword" style="color: #cc7832;">new</span> RepositoryGeneric&lt;&gt;();
        repo.save(<span class="hljs-string" style="color: #6a8759;">"house"</span>);
        repo.save(<span class="hljs-string" style="color: #6a8759;">"tree"</span>);
        repo.save(<span class="hljs-string" style="color: #6a8759;">"boat"</span>);

        RepositoryGeneric&lt;Person&gt; pRepo = <span class="hljs-keyword" style="color: #cc7832;">new</span> RepositoryGeneric&lt;&gt;();
        pRepo.save(<span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Chuck"</span>, <span class="hljs-string" style="color: #6a8759;">"Norris"</span>, <span class="hljs-number" style="color: #6897bb;">10L</span>));
        pRepo.save(<span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Max"</span>, <span class="hljs-string" style="color: #6a8759;">"Müller"</span>, <span class="hljs-number" style="color: #6897bb;">20L</span>));
        pRepo.save(<span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Hans"</span>, <span class="hljs-string" style="color: #6a8759;">"Wurst"</span>, <span class="hljs-number" style="color: #6897bb;">30L</span>));

        Person foundPerson = pRepo.findById(<span class="hljs-number" style="color: #6897bb;">30L</span>);
        System.out.println(foundPerson);

        System.out.println(repo.findAll());
        System.out.println(pRepo.findAll());
    }
}
</pre>
<p>output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Exception in thread <span class="hljs-string" style="color: #6a8759;">"main"</span> java.lang.IndexOutOfBoundsException: Index <span class="hljs-number" style="color: #6897bb;">30</span> out of bounds <span class="hljs-keyword" style="color: #cc7832;">for</span> length <span class="hljs-number" style="color: #6897bb;">3</span>
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:<span class="hljs-number" style="color: #6897bb;">64</span>)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:<span class="hljs-number" style="color: #6897bb;">70</span>)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:<span class="hljs-number" style="color: #6897bb;">266</span>)
	at java.base/java.util.Objects.checkIndex(Objects.java:<span class="hljs-number" style="color: #6897bb;">359</span>)
	at java.base/java.util.ArrayList.get(ArrayList.java:<span class="hljs-number" style="color: #6897bb;">427</span>)
	at section11_loose_ends.datastore.RepositoryGeneric.findById(RepositoryGeneric.java:<span class="hljs-number" style="color: #6897bb;">20</span>)
	at section11_loose_ends.datastore.RepositoryGeneric.main(RepositoryGeneric.java:<span class="hljs-number" style="color: #6897bb;">34</span>)

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">1</span></pre>
<p>Wow - we got an index out of bounds exception because we ask for Item 30 and there's only three items in here. This is because we implemented <em>findById</em> very simplistic.</p>
<p>But we can not just change <em>finyById</em> to grab the Persons ID, because to allow this we would need to hardcode the Type to Person, which would not bring us more than when we initially had the hardcoded List Type of String.</p>
<h4 id="mcetoc_1gb5imo5327n">Implement a Get ID method</h4>
<p>We could introduce an interface that implements a Get ID method like this:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">    <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">interface</span> <span class="hljs-title" style="color: #ffc66d;">IDable</span>&lt;<span class="hljs-title" style="color: #ffc66d;">T</span>&gt; </span>{
        <span class="hljs-function">T <span class="hljs-title" style="color: #ffc66d;">id</span><span class="hljs-params">()</span></span>;
    }</pre>
<p>To ensure that <em>T</em> needs to be something that implements the <em>IDable</em> interface, I can now come up here and constrain our class a little bit, like so:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RepositoryGeneric</span>&lt;<span class="hljs-title" style="color: #ffc66d;">T</span> <span class="hljs-keyword" style="color: #cc7832;">extends</span> <span class="hljs-title" style="color: #ffc66d;">RepositoryGeneric</span>.<span class="hljs-title" style="color: #ffc66d;">IDable</span>&gt; </span>{</pre>
<p>Now our <em>IDable</em> interface is itself generic, and that means that we could pass in a generic type here as well. But the question would be, what should we pass in? The answer is that up here, we don't have to actually decide a specific data type. We can leave it generic. And this brings us to another little lesson that I want to point out, which is when we are creating generic classes are generic classes or interfaces, whatever. Our generic types can have more than one parameter. So right now, our our repository class has just one parameter, one generic parameter, which is <em>T</em>, but we can actually have multiple generic parameters. And in fact, some of the functional interfaces do in fact, work with two or even three parameters. Like any of the functional interfaces that are called by or binary or something like that, frequently they're going to take at least two parameters, right?  So we can add another parameter to the repository class, and that parameter will be used to specify what the data type is for our IDs.<br><br>So the way we can do that is I'm going to put a comma here and then I'm going to introduce another parameter and I will call this V. We can call it whatever we want:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RepositoryGeneric_v2</span>&lt;<span class="hljs-title" style="color: #ffc66d;">T</span> <span class="hljs-keyword" style="color: #cc7832;">extends</span> <span class="hljs-title" style="color: #ffc66d;">RepositoryGeneric_v2</span>.<span class="hljs-title" style="color: #ffc66d;">IDable</span>&lt;<span class="hljs-title" style="color: #ffc66d;">V</span>&gt;, <span class="hljs-title" style="color: #ffc66d;">V</span>&gt; </span>{</pre>
<p>Note that person is not a class and string are not classes that extend from <em>IDable</em>.<br>Now I can tell you now we're never going to make it happy for string, and that's by design. We're done with string, so I'm going to go ahead and delete all String Stuff. That's never going to work because we didn't write the string class, nor would I care for it to work anyway. But the person class we can do something about.</p>
<h4 id="mcetoc_1gb5l3vod2g2">Implement <em>IDable</em> in person class</h4>
<p><br>And so it is appropriate and correct to actually go ahead and state the actual type that we want tied to this interface here as being type long. This interface, when used in the context of the person class, will have an ID method that is actually showing up as a returning type long:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Person</span><span class="hljs-params">(String fristName, String lastName, Long id)</span> implements IDable&lt;Long&gt;</span>{};</pre>
<p>So now that we've done that, let's come back down to the Person Repo, here we need to pass another argument, since we need two type arguments now. And that makes sense because we now are saying that to create a repository, you need to pass in T and you also have to pass in the right type of IDs. In this case it's long.</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">        RepositoryGeneric_v2&lt;Person, Long&gt; pRepo = <span class="hljs-keyword" style="color: #cc7832;">new</span> RepositoryGeneric_v2&lt;&gt;();</pre>
<p>Lets summarize what we've achieved so far:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">import</span> java.util.ArrayList;
<span class="hljs-keyword" style="color: #cc7832;">import</span> java.util.List;

<span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RepositoryGeneric_v2</span>&lt;<span class="hljs-title" style="color: #ffc66d;">T</span> <span class="hljs-keyword" style="color: #cc7832;">extends</span> <span class="hljs-title" style="color: #ffc66d;">RepositoryGeneric_v2</span>.<span class="hljs-title" style="color: #ffc66d;">IDable</span>&lt;<span class="hljs-title" style="color: #ffc66d;">V</span>&gt;, <span class="hljs-title" style="color: #ffc66d;">V</span>&gt; </span>{
    <span class="hljs-function">record <span class="hljs-title" style="color: #ffc66d;">Person</span><span class="hljs-params">(String fristName, String lastName, Long id)</span> implements IDable&lt;Long&gt;</span>{};
    <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">interface</span> <span class="hljs-title" style="color: #ffc66d;">IDable</span>&lt;<span class="hljs-title" style="color: #ffc66d;">U</span>&gt; </span>{
        <span class="hljs-function">U <span class="hljs-title" style="color: #ffc66d;">id</span><span class="hljs-params">()</span></span>;
    }
    <span class="hljs-keyword" style="color: #cc7832;">private</span> List&lt;T&gt; records = <span class="hljs-keyword" style="color: #cc7832;">new</span> ArrayList&lt;&gt;();

    <span class="hljs-function">List&lt;T&gt; <span class="hljs-title" style="color: #ffc66d;">findAll</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> records;
    }

    <span class="hljs-function">T <span class="hljs-title" style="color: #ffc66d;">save</span><span class="hljs-params">(T record)</span> </span>{
        records.add(record);
        <span class="hljs-keyword" style="color: #cc7832;">return</span> record;
    }

    <span class="hljs-function">T <span class="hljs-title" style="color: #ffc66d;">findById</span><span class="hljs-params">(<span class="hljs-keyword" style="color: #cc7832;">long</span> id)</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> records.stream().filter(p -&gt; p.id().equals(id)).findFirst().orElseThrow();
    }

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        RepositoryGeneric_v2&lt;Person, Long&gt; pRepo = <span class="hljs-keyword" style="color: #cc7832;">new</span> RepositoryGeneric_v2&lt;&gt;();
        pRepo.save(<span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Chuck"</span>, <span class="hljs-string" style="color: #6a8759;">"Norris"</span>, <span class="hljs-number" style="color: #6897bb;">10L</span>));
        pRepo.save(<span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Max"</span>, <span class="hljs-string" style="color: #6a8759;">"Müller"</span>, <span class="hljs-number" style="color: #6897bb;">20L</span>));
        pRepo.save(<span class="hljs-keyword" style="color: #cc7832;">new</span> Person(<span class="hljs-string" style="color: #6a8759;">"Hans"</span>, <span class="hljs-string" style="color: #6a8759;">"Wurst"</span>, <span class="hljs-number" style="color: #6897bb;">30L</span>));

        Person foundPerson = pRepo.findById(<span class="hljs-number" style="color: #6897bb;">30L</span>);
        System.out.println(foundPerson);

<span class="hljs-comment" style="color: grey;">//        System.out.println(pRepo.findAll());</span>
    }
}
</pre>
<p>output: </p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Person[fristName=Hans, lastName=Wurst, id=<span class="hljs-number" style="color: #6897bb;">30</span>]

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<h3 id="mcetoc_1gb5l3vod2g3">Use generics on static methods</h3>
<p>So we're going to create a static method that honestly isn't going to really have anything to do with this existing class. We're going to make a static method that is going to simulate the ability to encode data. So you're going to pass in some data of a type. And then this method will return an encrypted representation of that data. Now, we're not really going to make any real encryption stuff here. This will be fake. But this will allow us to see how we can make generic static methods, which actually can be quite useful at times:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">    <span class="hljs-keyword" style="color: #cc7832;">static</span> &lt;T,V&gt; <span class="hljs-function">V <span class="hljs-title" style="color: #ffc66d;">encrypt</span><span class="hljs-params">(T data, Function&lt;T, V&gt; func)</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> func.apply(data);
    }</pre>
<p>Important to note: The generic type <em>T </em>on the static method has nothing to do with the generic types that may exist on their enclosing class.</p>
<p>This allows us to make things like this:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">        System.out.println(RepositoryGeneric_v3.&lt;String, String&gt;encrypt(<span class="hljs-string" style="color: #6a8759;">"Hello"</span>, m -&gt; m.toUpperCase()));
        System.out.println(RepositoryGeneric_v3.&lt;String, Integer&gt;encrypt(<span class="hljs-string" style="color: #6a8759;">"Test"</span>, m -&gt; m.hashCode()));</pre>
<p>output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">HELLO
<span class="hljs-number" style="color: #6897bb;">2603186</span>

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java basics: Exceptions</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-exceptions.html"/>
        <id>https://www.finecloud.ch/java-exceptions.html</id>
            <category term="try catch"/>
            <category term="software development"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="exceptions"/>
            <category term="exception"/>
            <category term="dev"/>

        <updated>2022-08-23T12:05:05+02:00</updated>
            <summary>
                <![CDATA[
                    What are Exceptions? An exception is an event, commonly it is a problem that arises during the execution of a program. When an Exception occurs the normal program is disrupted and the program/Application terminates abnormally, which is not recommended. Unexpected termination of an Application is&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gb4ofck08p">What are Exceptions?</a></li>
<li><a href="#mcetoc_1gb4ofck08q">Types of Exceptions</a></li>
<li><a href="#mcetoc_1gb4ofck08r">Example Scenario #1</a></li>
<li><a href="#mcetoc_1gb4p2t6m8t">Try / Catch</a></li>
<li><a href="#mcetoc_1gb4q077394">The Exception</a></li>
<li><a href="#mcetoc_1gb4ofck08r">Example Scenario #2</a></li>
<li><a href="#mcetoc_1gb4rqeac9d">Multiple catches</a></li>
<li><a href="#mcetoc_1gb4uonu7kt">Stack Trace</a></li>
<li><a href="#mcetoc_1gb4uonu7ku">Runtime Exceptions</a></li>
<li><a href="#mcetoc_1gb521do8qr">Checked Exceptions</a></li>
<li><a href="#mcetoc_1gb521do8qs">Finally</a></li>
<li><a href="#mcetoc_1gb521do8qt">Optimizing Example Szenario #1</a></li>
</ul>
</div>
<h2 id="mcetoc_1gb4ofck08p">What are Exceptions?</h2>
<p>An exception is an event, commonly it is a problem that arises during the execution of a program. When an Exception occurs the normal program is disrupted and the program/Application terminates abnormally, which is not recommended. Unexpected termination of an Application is never wanted and this is why exceptions should be handled, so that the Application lets the User know that some Error or Problem exists, but the Application itself should not just die without any information.</p>
<p>The most common scenarios where an exception occurs are:</p>
<ul>
<li>the user entered invalid data</li>
<li>a file needs to be opened but cannot be found</li>
<li>a network connection has been lost during communication</li>
<li>the JVM has run out of memory</li>
</ul>
<h2 id="mcetoc_1gb4ofck08q">Types of Exceptions</h2>
<p>There are three main types of Java Exceptions:</p>
<ul>
<li>Checked Exceptions</li>
<li>Runtime Exceptions</li>
<li>Error Exceptions</li>
</ul>
<p>Checked and Runtime Exceptions both extend the same superclass, which is Exception. Exception class itself extends from a superclass called Throwable.</p>
<h2 id="mcetoc_1gb4ofck08r">Example Scenario #1</h2>
<p>Given the following code:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = 0;
        System.out.println(array.length / num);
        System.out.println(array[2]);
    }
}
</pre>
<p>if we execute this application it crashes like this:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Exception in thread <span class="hljs-string" style="color: #6a8759;">"main"</span> java.lang.ArithmeticException: / by zero
	at section11_loose_ends.ExceptionTests.main(ExceptionTests.java:<span class="hljs-number" style="color: #6897bb;">7</span>)

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">1</span></pre>
<p>this should not be surprising, since the fact that a devision by zero is considered to be impossible. <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">And so the JVM generated this arithmetic exception. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">And what happens then is that once we get to this line in that arithmetic exception is thrown. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">The program just dies. </span></p>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">💀</span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> Right then and there.</span></p>
<p>So line six is never even reached because that exception got thrown.</p>
<h2 id="mcetoc_1gb4p2t6m8t">Try / Catch</h2>
<p><span class="" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);" data-purpose="cue-text">What we will do next here is really just for illustrative purposes. </span><span class="" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);" data-purpose="cue-text">This this isn't actually, generally speaking, a good idea, but we</span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> can handle this exception or we can catch this particular exception like this:</span></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = <span class="hljs-number" style="color: #6897bb;">0</span>;
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            System.out.println(array.length / num);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (Exception e) {
            e.printStackTrace();
        }
        System.out.println(array[<span class="hljs-number" style="color: #6897bb;">2</span>]);
    }
</pre>
<div class="transcript--cue-container--wu3UY">
<div class="transcript--cue-container--wu3UY">
<p class="transcript--underline-cue--3osdw" tabindex="-1" role="button" data-purpose="transcript-cue"><span class="" data-purpose="cue-text">This is called a try catch block. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">So now we've got this keyword try. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">So we're now telling the JVM essentially try executing this line. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">And if anything goes wrong, maybe we'll catch it and do something about it down here.</span></p>
</div>
<div class="transcript--cue-container--wu3UY">
<p class="transcript--underline-cue--3osdw" tabindex="-1" role="button" data-purpose="transcript-cue"><span class="" data-purpose="cue-text">So now if I run this again, let's see what happens:</span></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">java.lang.ArithmeticException: / by zero
	at section11_loose_ends.ExceptionTests.main(ExceptionTests.java:<span class="hljs-number" style="color: #6897bb;">8</span>)
three

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So we still have an exception happening here. The divide by zero, but the next line line 10 is executing now. Please note, this is generally not a good idea, this is just for illustrative purposes so that you can learn how exceptions work and how they can be caught and when to catch them and how and why, and all of that.<br><br>So what just happened now is that an exception was still generated in throne when the JVM realised that we were about to attempt a divide by zero operation here. So it generated the arithmetic exception and it threw it. But now that we have this try catch block here, we cut the exception. And so that's why they used these terms to throw and to catch right.</p>
<h2 id="mcetoc_1gb4q077394" tabindex="-1" role="button" data-purpose="transcript-cue">The Exception</h2>
<p tabindex="-1" role="button" data-purpose="transcript-cue">You can think of it as an object, it's an object that's sort of being thrown. And if you set up a catcher to catch it, then you can do something sometimes with that exception. In this particular case, all we're doing with it is simply printing its stack trace. Basically, it's printing the details of the error that occurred. And that's how we get to see this divide by zero.<br><br>Now, previously, before I surrounded this line with a try catch, we were still seeing this, this output here, and that was happening because the exception was being handled by the JVM itself. Beyond the main method here, we're doing all of this inside of one main method. Something called the main method, though. And so what happened before we had this try catch block here is that the exception was thrown and it made its way outside of the main method. And then the JVM were the thing that called our main method handled it. And in its handling of the method, it displayed the stack trace just like we're doing now.<br><br>Now, because we are now handling this method with try and catch here, as soon as we call the division by zero line, the App does not crash because we're handling it and we're not killing the application as a result of it. This allows us to proceed to the next line and print the array content.</p>
<p tabindex="-1" role="button" data-purpose="transcript-cue">But in this particular case, it's not really a good idea at all, because with this divide by zero happening here, we're not able to fix anything. All we're doing is just saying, Oh yeah, that divide by zero occurred. Let's move on. It's kind of like if your house was on fire and you're driving by and you see your house is on fire and you say, Oh, look, my house is on fire and then you just keep driving. 🔥</p>
<p tabindex="-1" role="button" data-purpose="transcript-cue"><strong>We are not really handling the exception in any way.</strong><br><br>All I'm doing is just noting yet there's that exception and I'm printing it out. Oftentimes, the better thing to do in a case like this might be to just let the program die, which would be the default behavior of the JVM.</p>
<h2 id="mcetoc_1gb4ofck08r">Example Scenario #2</h2>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = <span class="hljs-number" style="color: #6897bb;">1</span>;
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            System.out.println(array.length / num);
            System.out.println(array[<span class="hljs-number" style="color: #6897bb;">3</span>]);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (ArrayIndexOutOfBoundsException e) {
            System.out.println(<span class="hljs-string" style="color: #6a8759;">"The array index was thrown here"</span>);
        }
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"You made it to the end"</span>);
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-number" style="color: #6897bb;">3</span>
The array index was thrown here
You made it to the end

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So we are able to say what these catch blocks here, what type of exception we are expecting to catch and then do something accordingly to that. In this example we have something called array index out of bounds exception. So this is a subclass of exception. And one interesting thing we can do with this is we could actually be much more specific in what exception we're actually looking for here.<br><br>So what happens if we change <em>num</em> back to zero?</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = 0;
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            System.out.println(array.length / num);
            System.out.println(array[<span class="hljs-number" style="color: #6897bb;">3</span>]);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (ArrayIndexOutOfBoundsException e) {
            System.out.println(<span class="hljs-string" style="color: #6a8759;">"The array index was thrown here"</span>);
        }
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"You made it to the end"</span>);
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Exception in thread <span class="hljs-string" style="color: #6a8759;">"main"</span> java.lang.ArithmeticException: / by zero
	at section11_loose_ends.ExceptionTests.main(ExceptionTests.java:<span class="hljs-number" style="color: #6897bb;">8</span>)

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">1</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So now we're getting an exception here, and it's the familiar divide by zero exception, which is an arithmetic exception. We're not even making it to the end of the program anymore, even though we've got to try catch block,  we're not making it to the end of the program anymore. And the reason for that is because we are no longer catching this arithmetic exception.</p>
<p tabindex="-1" role="button" data-purpose="transcript-cue"><strong>Well, we never were catching an arithmetic exception. Initially, we were catching just an exception. And now we're catching an array index out of bounds exception. However, since arithmetic exception and array index out of bounds exception, both extend from exception. And we were explicitly catching exception. That catch was handling both types and so many more, by the way.  You can always catch the more generic exception data type.</strong><br><br>Sometimes it can also be a bad thing if you're not aware that that could be happening in general. You do actually want to catch the most specific exception data type that is meaningful for whatever it is that you're doing.</p>
<h2 id="mcetoc_1gb4rqeac9d" tabindex="-1" role="button" data-purpose="transcript-cue">Multiple catches</h2>
<p tabindex="-1" role="button" data-purpose="transcript-cue">We can actually specify multiple catches:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = <span class="hljs-number" style="color: #6897bb;">0</span>;
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            System.out.println(array.length / num);
            System.out.println(array[<span class="hljs-number" style="color: #6897bb;">3</span>]);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (ArrayIndexOutOfBoundsException e) {
            System.out.println(<span class="hljs-string" style="color: #6a8759;">"The array index was thrown here"</span>);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (ArithmeticException e) {
            System.out.println(<span class="hljs-string" style="color: #6a8759;">"This is due to the arithmetic exception being thrown"</span>);
        }
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"You made it to the end"</span>);
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">This is due to the arithmetic exception being thrown
You made it to the end

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">Because we are now handling that exception with this explicit catch here, the program in this case isn't dying. So in general, you can have as many catches as you need to handle, whatever the situations are.<br><br>What if we wanted to do basically the same error handling for both for either of these catches? Sure we just copy-paste the same code for both catches, but you always want to eliminate duplicate code, so we need to consolidate this because otherwise we have duplicated code. So what we can do is actually combine these two bits into one catch block here, and the way we can do that is simply within order. This is called multi-catch:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = <span class="hljs-number" style="color: #6897bb;">0</span>;
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            System.out.println(array.length / num);
            System.out.println(array[<span class="hljs-number" style="color: #6897bb;">3</span>]);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (ArrayIndexOutOfBoundsException | ArithmeticException e ) {
            System.out.printf(<span class="hljs-string" style="color: #6a8759;">"Exception type: %s. Message: %s%n"</span>, e.getClass(), e.getMessage());
            e.printStackTrace();
        }
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"You made it to the end"</span>);
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Exception type: <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">java</span>.<span class="hljs-title" style="color: #ffc66d;">lang</span>.<span class="hljs-title" style="color: #ffc66d;">ArithmeticException</span>. <span class="hljs-title" style="color: #ffc66d;">Message</span>: / <span class="hljs-title" style="color: #ffc66d;">by</span> <span class="hljs-title" style="color: #ffc66d;">zero</span>
<span class="hljs-title" style="color: #ffc66d;">You</span> <span class="hljs-title" style="color: #ffc66d;">made</span> <span class="hljs-title" style="color: #ffc66d;">it</span> <span class="hljs-title" style="color: #ffc66d;">to</span> <span class="hljs-title" style="color: #ffc66d;">the</span> <span class="hljs-title" style="color: #ffc66d;">end</span>
<span class="hljs-title" style="color: #ffc66d;">java</span>.<span class="hljs-title" style="color: #ffc66d;">lang</span>.<span class="hljs-title" style="color: #ffc66d;">ArithmeticException</span>: / <span class="hljs-title" style="color: #ffc66d;">by</span> <span class="hljs-title" style="color: #ffc66d;">zero</span>
	<span class="hljs-title" style="color: #ffc66d;">at</span> <span class="hljs-title" style="color: #ffc66d;">section11_loose_ends</span>.<span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span>.<span class="hljs-title" style="color: #ffc66d;">main</span>(<span class="hljs-title" style="color: #ffc66d;">ExceptionTests</span>.<span class="hljs-title" style="color: #ffc66d;">java</span>:8)

<span class="hljs-title" style="color: #ffc66d;">Process</span> <span class="hljs-title" style="color: #ffc66d;">finished</span> <span class="hljs-title" style="color: #ffc66d;">with</span> <span class="hljs-title" style="color: #ffc66d;">exit</span> <span class="hljs-title" style="color: #ffc66d;">code</span> 0</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">That's at least giving us a little bit more of a hint of what exactly went wrong. Especially since now we're handling it all in the same code with the same single catch. </p>
<h2 id="mcetoc_1gb4uonu7kt" tabindex="-1" role="button" data-purpose="transcript-cue">Stack Trace</h2>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So let's talk a little bit more about the Stack Trace business now. What if we create a new method with all of that code in it? All the try catch business like before, but our main method is still going to be the starting point into our program. So the main method is going to start up and we're going to call this second level method:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v2</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        doSecondLevel();
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"You made it to the end"</span>);
    }

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">private</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">doSecondLevel</span><span class="hljs-params">()</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">int</span> num = <span class="hljs-number" style="color: #6897bb;">0</span>;
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            System.out.println(array.length / num);
            System.out.println(array[<span class="hljs-number" style="color: #6897bb;">3</span>]);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (ArrayIndexOutOfBoundsException | ArithmeticException e ) {
            System.out.printf(<span class="hljs-string" style="color: #6a8759;">"Exception type: %s. Message: %s%n"</span>, e.getClass(), e.getMessage());
            e.printStackTrace();
        }
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">let's run this and see what what we get here:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Exception type: <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">java</span>.<span class="hljs-title" style="color: #ffc66d;">lang</span>.<span class="hljs-title" style="color: #ffc66d;">ArithmeticException</span>. <span class="hljs-title" style="color: #ffc66d;">Message</span>: / <span class="hljs-title" style="color: #ffc66d;">by</span> <span class="hljs-title" style="color: #ffc66d;">zero</span>
<span class="hljs-title" style="color: #ffc66d;">You</span> <span class="hljs-title" style="color: #ffc66d;">made</span> <span class="hljs-title" style="color: #ffc66d;">it</span> <span class="hljs-title" style="color: #ffc66d;">to</span> <span class="hljs-title" style="color: #ffc66d;">the</span> <span class="hljs-title" style="color: #ffc66d;">end</span>
<span class="hljs-title" style="color: #ffc66d;">java</span>.<span class="hljs-title" style="color: #ffc66d;">lang</span>.<span class="hljs-title" style="color: #ffc66d;">ArithmeticException</span>: / <span class="hljs-title" style="color: #ffc66d;">by</span> <span class="hljs-title" style="color: #ffc66d;">zero</span>
	<span class="hljs-title" style="color: #ffc66d;">at</span> <span class="hljs-title" style="color: #ffc66d;">section11_loose_ends</span>.<span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v2</span>.<span class="hljs-title" style="color: #ffc66d;">doSecondLevel</span>(<span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v2</span>.<span class="hljs-title" style="color: #ffc66d;">java</span>:13)
	<span class="hljs-title" style="color: #ffc66d;">at</span> <span class="hljs-title" style="color: #ffc66d;">section11_loose_ends</span>.<span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v2</span>.<span class="hljs-title" style="color: #ffc66d;">main</span>(<span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v2</span>.<span class="hljs-title" style="color: #ffc66d;">java</span>:5)

<span class="hljs-title" style="color: #ffc66d;">Process</span> <span class="hljs-title" style="color: #ffc66d;">finished</span> <span class="hljs-title" style="color: #ffc66d;">with</span> <span class="hljs-title" style="color: #ffc66d;">exit</span> <span class="hljs-title" style="color: #ffc66d;">code</span> 0</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So we got that familiar output, but then we got at exception tests that do second level exception test Java 13, and then we see another line here. Exception tests dot main. So what this is showing us is the tracing of the path that our thread took. A thread is just like this little guy who is actually stepping through each line of our program and executing those lines, and then he can jump to new lines as needed. So when our program is running, the thread will start at line to write and it'll it'll bring in, it'll carry in, so to speak, the any arguments that we passed in. Then it sees Line five do second level and it knows that this is a method call. So then the thread jumps down to the second level method and then it starts executing each of these lines.</p>
<p tabindex="-1" role="button" data-purpose="transcript-cue"><strong>Why are we seeing "you made it to the end" before we are seeing the stack trace?</strong></p>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So just know that the way these stack traces are generated and the timing and order of the thread stuff, you should not expect that to print out in the exact order that you would intuitively assume it would. In this stack trace, we're seeing the most immediate method first. So it's kind of like the most recently called method will be at the top. So it's kind of backward to how a lot of people will tend to think. Intuitively you'll kind of start at the bottom. <strong>Typically, though, with a stack trace, the line of code where the exception occurred will be at the top.</strong></p>
<h2 id="mcetoc_1gb4uonu7ku" tabindex="-1" role="button" data-purpose="transcript-cue">Runtime Exceptions</h2>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So far, we're looking at this array index out of bounds and the arithmetic exception. These two exceptions are actually both runtime exceptions, and that means that they don't actually have to be caught. As you already saw when we first started writing this, I'm going to just comment these out. Java is not forcing us to surround any of these lines with a try catch block.</p>
<p tabindex="-1" role="button" data-purpose="transcript-cue">And that is because of a couple of things. First off, the IDE and Java do not know at this point in time that either of these calls could result in an exception. It won't know that until runtime when we're actually running the the code. And that's one of the reasons why the type of exceptions that can be thrown from these kinds of errors are runtime exceptions. They can't easily be known before you start running. A human could analyze this particular code and see that we're passing a zero in and we're about to try to do a divide by zero. But the JVM can't really see it until you actually do it. And there's no guarantee that every time you divide by this variable that it's always going to be zero.</p>
<h2 id="mcetoc_1gb521do8qr" tabindex="-1" role="button" data-purpose="transcript-cue">Checked Exceptions</h2>
<p tabindex="-1" role="button" data-purpose="transcript-cue">Lets take for example that Code Snippet:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">            Long result = Files.lines(Path.of(<span class="hljs-string" style="color: #6a8759;">"/Users/Dave/Downloads/Hr5m.csv"</span>))</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">We know for a fact the creator of this method line's method knows that it is possible that the path that we are passing into it might not be a valid path. And because he or she knew at the time of writing this method that that could happen. They declared that this method is capable of throwing an IO exception and they made their IO exception class extend not from runtime exception, but directly from exception. And because it extends directly from exception, it is a checked exception, which means that we have to do something with it. And so what we're doing here is we're surrounding all of this code inside of a try catch block:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            <span class="hljs-keyword" style="color: #cc7832;">long</span> startTime = System.currentTimeMillis();
            Long result = Files.lines(Path.of(<span class="hljs-string" style="color: #6a8759;">"/Users/Dave/Downloads/Hr5m.csv"</span>))
                    .skip(<span class="hljs-number" style="color: #6897bb;">1</span>)
<span class="hljs-comment" style="color: grey;">//                    .limit(10)</span>
                    .map(s -&gt; s.split(<span class="hljs-string" style="color: #6a8759;">","</span>))
                    .map(arr -&gt; arr[<span class="hljs-number" style="color: #6897bb;">25</span>])
<span class="hljs-comment" style="color: grey;">//                    .forEach(System.out::println);</span>
                    .collect(Collectors.summingLong(sal -&gt; Long.parseLong(sal)));

            <span class="hljs-keyword" style="color: #cc7832;">long</span> endTime = System.currentTimeMillis();
<span class="hljs-comment" style="color: grey;">//            System.out.println(moneyFormat.format(result));</span>
            System.out.printf(<span class="hljs-string" style="color: #6a8759;">"$%,d.00%n"</span>, result);
            System.out.println(endTime - startTime + <span class="hljs-string" style="color: #6a8759;">"ms"</span>);
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (IOException e) {
            <span class="hljs-keyword" style="color: #cc7832;">throw</span> <span class="hljs-keyword" style="color: #cc7832;">new</span> RuntimeException(e);
        }
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">However, one other way that we could implement this is by adding the throws IOException at the end of the main Method signature:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v4</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword" style="color: #cc7832;">throws</span> IOException </span>{
        Files.lines(Path.of(<span class="hljs-string" style="color: #6a8759;">"blababla"</span>));
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">This looks cleaner, right? But be careful with this. So now the main Method just declared to the JVM as a whole that, there is content that is capable of throwing an IO exception, but the main Method don't want to be the one to handle that. What so what I'm going to do is I'm going to take that particular exception if it is thrown and I'm going to re throw it back to whoever called me. So whatever code calls the main method, will have to handle whatever happens with this exception now. So we're kind of passing the buck on to the code that called this main method, which in this case is the JVM itself. And so the JVM is just going to blow up all the same. So in this particular case, I suppose you're not really losing much in such a simple program like this. However, imagine if we were writing a program with a user interface and we asked the user to select a file, right? Like it's a graphical program right in like a file open dialogue.</p>
<h2 id="mcetoc_1gb521do8qs" tabindex="-1" role="button" data-purpose="transcript-cue">Finally</h2>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">import</span> java.io.IOException;
<span class="hljs-keyword" style="color: #cc7832;">import</span> java.nio.file.Files;
<span class="hljs-keyword" style="color: #cc7832;">import</span> java.nio.file.Path;

<span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v4</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">try</span> {
            Files.lines(Path.of(<span class="hljs-string" style="color: #6a8759;">"blababla"</span>));
        } <span class="hljs-keyword" style="color: #cc7832;">catch</span> (IOException e) {
            e.printStackTrace();
            System.out.println(<span class="hljs-string" style="color: #6a8759;">"We are unable to open the file"</span>);
        } <span class="hljs-keyword" style="color: #cc7832;">finally</span> {
            System.out.println(<span class="hljs-string" style="color: #6a8759;">"Make sure this runs no matter what..."</span>);
        }
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">output:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">java.nio.file.NoSuchFileException: blababla
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:<span class="hljs-number" style="color: #6897bb;">92</span>)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:<span class="hljs-number" style="color: #6897bb;">106</span>)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:<span class="hljs-number" style="color: #6897bb;">111</span>)
	at java.base/sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:<span class="hljs-number" style="color: #6897bb;">181</span>)
	at java.base/java.nio.channels.FileChannel.open(FileChannel.java:<span class="hljs-number" style="color: #6897bb;">298</span>)
	at java.base/java.nio.channels.FileChannel.open(FileChannel.java:<span class="hljs-number" style="color: #6897bb;">357</span>)
	at java.base/java.nio.file.Files.lines(Files.java:<span class="hljs-number" style="color: #6897bb;">4132</span>)
	at java.base/java.nio.file.Files.lines(Files.java:<span class="hljs-number" style="color: #6897bb;">4227</span>)
	at section11_loose_ends.ExceptionTests_v4.main(ExceptionTests_v4.java:<span class="hljs-number" style="color: #6897bb;">10</span>)
We are unable to open the file
Make sure <span class="hljs-keyword" style="color: #cc7832;">this</span> runs no matter what...

Process finished with exit code <span class="hljs-number" style="color: #6897bb;">0</span></pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">So what's happening here is that sometimes depending on what you're trying to do inside of your try block, you may need to clean up or finish up some things before the program completely dies. Because as we've seen here, in many cases with a try catch block, the program is going to just die. Even though you may have that catch, you might be handling things in such a way that the program is still going to just die when it's done, but before it dies, you may want to clean a few things up.<br><br>One example of this would be in some kinds of applications where we might be opening files to read or write to them, or making connections to databases or things of that sort. If something goes wrong with any of those opening of connections and files and stuff, we don't want to just leave the file that we may have been able to open in in in a strange state. We want to ensure that even if something went wrong while we were reading data from somewhere, we still close that connection or closed that file gracefully and we can do that in a final block.<br><br>So what happens with the final block is that any code that we put here is strongly attempted by the JVM to be executed regardless of what went wrong in in the try in the try block.</p>
<h2 id="mcetoc_1gb521do8qt" tabindex="-1" role="button" data-purpose="transcript-cue">Optimizing the Example Szenarios</h2>
<p tabindex="-1" role="button" data-purpose="transcript-cue">What do we do to protect ourselves from this type of situation? And it's actually not that hard to protect ourselves from some of these situations in this particular. For example we could simply just make sure that num can not be zero and that the array length is not exceeded with if blocks:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">ExceptionTests_v5</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        doSecondLevel(<span class="hljs-number" style="color: #6897bb;">0</span>);
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"You made it to the end"</span>);
    }

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">private</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">doSecondLevel</span><span class="hljs-params">(<span class="hljs-keyword" style="color: #cc7832;">int</span> num)</span> </span>{
        String[] array = {<span class="hljs-string" style="color: #6a8759;">"one"</span>, <span class="hljs-string" style="color: #6a8759;">"two"</span>, <span class="hljs-string" style="color: #6a8759;">"three"</span>};
        <span class="hljs-keyword" style="color: #cc7832;">if</span> (num != <span class="hljs-number" style="color: #6897bb;">0</span>) {
            System.out.println(array.length / num);
        }
        <span class="hljs-keyword" style="color: #cc7832;">int</span> index = <span class="hljs-number" style="color: #6897bb;">3</span>;
        <span class="hljs-keyword" style="color: #cc7832;">if</span> (index &lt; array.length) {
            System.out.println(array[<span class="hljs-number" style="color: #6897bb;">3</span>]);
        }
    }
}</pre>
<p tabindex="-1" role="button" data-purpose="transcript-cue">But please, don't put every line wrapped in some defensive if block. You got to try to find a balance.</p>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Visualisiere deine Strava Aktivitäten mit Grafana</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/visualisiere-deine-strava-aktivitaeten-mit-grafana.html"/>
        <id>https://www.finecloud.ch/visualisiere-deine-strava-aktivitaeten-mit-grafana.html</id>
            <category term="strava"/>
            <category term="grafana"/>
            <category term="api"/>

        <updated>2022-08-09T08:41:05+02:00</updated>
            <summary>
                <![CDATA[
                    Was ist Strava Strava ist das soziale Netzwerk für Sportler. Du kannst deine Sport Aktivitäten aufzeichnen und diese wird deinem Strava-Feed hinzugefügt - zusammen mit jenen, die deine Freunde und Followers mit dir teilen. Auf diese Weise könnt ihr eure Wettkampf- und Trainingsaktivitäten gegenseitig verfolgen,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1ga0fla9lcj">Was ist Strava</a></li>
<li><a href="#mcetoc_1ga0fla9lck">Was ist Grafana</a></li>
<li><a href="#mcetoc_1ga0fla9lcl">Wieso das ganze?</a></li>
<li><a href="#mcetoc_1ga0fla9lcm">Features</a></li>
<li><a href="#mcetoc_1ga0fla9lcn">Voraussetzungen</a></li>
<li><a href="#mcetoc_1ga0fla9lco">Setup</a>
<ul>
<li><a href="#mcetoc_1ga0fla9lcp">Strava Plugin</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1ga0fla9lcj">Was ist Strava</h2>
<p><a href="https://www.strava.com/" target="_blank" rel="nofollow noopener noreferrer">Strava</a> ist <strong>das</strong> soziale Netzwerk für Sportler. Du kannst deine Sport Aktivitäten aufzeichnen und diese wird deinem Strava-Feed hinzugefügt - zusammen mit jenen, die deine Freunde und Followers mit dir teilen. Auf diese Weise könnt ihr eure Wettkampf- und Trainingsaktivitäten gegenseitig verfolgen, kommentieren und bei tollen Leistungen Kudos geben.</p>
<h2 id="mcetoc_1ga0fla9lck">Was ist Grafana</h2>
<p>Mit der Open-Source-Software von <a href="https://grafana.com" target="_blank" rel="nofollow noopener noreferrer">Grafana</a> kann man Metriken, Protokolle und Ablaufverfolgungen, visualisieren, warnen und untersuchen. Grafana OSS stellt Tools zur Verfügung, mit denen man seine <em>time-series database</em> (TSDB) in aufschlussreiche Diagramme und Visualisierungen umwandeln kann.</p>
<h2 id="mcetoc_1ga0fla9lcl">Wieso das ganze?</h2>
<p>Weil man's kann. Natürlich hast du bereits bei Gramin wie auch Strava und anderen Portalen gute Dashboards um deine Trainings zu analysieren. Ich finde dieser Anwendungsfall aber doppelt interessant, da ich bei diesem Vorhaben mit Grafana vertrauter machen kann und zudem interessante Daten analysieren kann, welche ich selbst generiert habe.</p>
<h2 id="mcetoc_1ga0fla9lcm">Features</h2>
<p>Das <a href="http://192.168.100.13:3000/plugins/grafana-strava-datasource" target="_blank" rel="nofollow noopener noreferrer">Grafana Plugin für Strava</a> ermöglicht dir folgendes:</p>
<ul>
<li>Abfrage von Aktivitätsstatistiken und Darstellung als Zeitreihendaten</li>
<li>Tabellenformat</li>
<li>Anzeigen der Aktivitäten auf der ganzen Welt mit dem Worldmap-Panel</li>
<li>Visualisierung und Analyse von Aktivitätsdaten wie Herzfrequenz, Geschwindigkeit/Tempo, Leistung, etc.</li>
<li>Unterstützung von Template-Variablen</li>
</ul>
<h2 id="mcetoc_1ga0fla9lcn">Voraussetzungen</h2>
<ol>
<li>Du hast bereits eine fertig installierte Grafana Instanz. Falls du Grafana noch installieren musst, kannst du <a href="https://www.finecloud.ch/monitor-proxmox-mit-grafana-und-prometheus.html#mcetoc_1g8oet5nkph" target="_blank" rel="nofollow noopener noreferrer">hier</a> nachlesen wie das geht.</li>
<li>Du hast das <a href="http://192.168.100.13:3000/plugins/grafana-strava-datasource" target="_blank" rel="nofollow noopener noreferrer">Grafana Plugin für Strava</a> bereits installiert</li>
</ol>
<h2 id="mcetoc_1ga0fla9lco">Setup Strava Plugin</h2>
<p>Bevor wir Daten von Strava anziehen könnnen, musst du auf strava.com mit deinem Account einloggen und dir ein API App Secret erstellen:</p>
<ol>
<li>Nachdem du dich auf <a href="https://www.strava.com/settings/api">https://www.strava.com/settings/api</a> eingeloggt hast, erstelle eine App.</li>
<li>Du solltest nun die Seite "Meine API-Anwendung" sehen. Hier die Erklärung der Begriffe:
<ul>
<li>Category: Die Kategorie für deine Anwendung</li>
<li>Club: Zeigt an, ob du einen Club mit deiner Anwendung verknüpft hast</li>
<li>Client ID: Deine Anmelde-ID</li>
<li>Client Secret: Dein Kundengeheimnis (bitte behandle es vertraulich)</li>
<li>Authorization Token: Dein Autorisierungs-Token, der sich alle sechs Stunden ändert (bitte behandeln Sie dies vertraulich)</li>
<li>Your Refresh-Token: Das Token, das du verwenden kannst, um ein neues Autorisierungs-Token zu erhalten (bitte vertraulich behandeln)</li>
<li>Rate limits: Dein aktuelles Ratenlimit</li>
<li>Authorization Callback Domain: Ändern auf die exakte Grafana URL oder IP von welcher aus du Grafana verwendets, dass wird warscheinlich eine interne URL/IP sein. Füge die URL aber ohne Ports hinzu, also z.b. 192.168.0.10</li>
</ul>
</li>
</ol>
<p>Nun wechseln wir zurück in unser Grafana und erstellen eine neue Strava Data Source:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/55/strava.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/55/responsive/strava-xs.png 300w ,https://www.finecloud.ch/media/posts/55/responsive/strava-sm.png 480w ,https://www.finecloud.ch/media/posts/55/responsive/strava-md.png 768w ,https://www.finecloud.ch/media/posts/55/responsive/strava-lg.png 1024w ,https://www.finecloud.ch/media/posts/55/responsive/strava-xl.png 1360w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2xl.png 1600w"  alt="" width="1835" height="723"></figure>
<p>Wichtig ist das nun zuerst Connect with Strava angewählt wird, damit die OAuth stattfinden kann:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/55/config_2.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/55/responsive/config_2-xs.png 300w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-sm.png 480w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-md.png 768w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-lg.png 1024w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-xl.png 1360w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-2xl.png 1600w"  alt="" width="1686" height="947"></figure>
<p>Anschliessend wirst du nochmals zurück auf den vorherigen Data Source Dialog redirected. Gib dort nochmals deine Client ID und Client Secret ein und klicke danach auf Save &amp; Test. Nun sollte die Meldung kommen "<em>Data source is working</em>".</p>
<p>Nun kannst du in Tab Dashboards noch die Dashboards importieren welche du dann unter Browse anschauen kannst:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/55/strava-2.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/55/responsive/strava-2-xs.png 300w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-sm.png 480w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-md.png 768w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-lg.png 1024w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-xl.png 1360w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-2xl.png 1600w"  alt="" width="2557" height="1341"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>ShellCheck</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/shellcheck.html"/>
        <id>https://www.finecloud.ch/shellcheck.html</id>
            <category term="vscode"/>
            <category term="tools"/>
            <category term="shell"/>
            <category term="linux"/>
            <category term="infrastructure as code"/>
            <category term="iac"/>
            <category term="bash"/>

        <updated>2022-08-05T19:22:39+02:00</updated>
            <summary>
                <![CDATA[
                    Beschreibung ShellCheck ist ein Tool, das Warnungen und Vorschläge für Bash/Sh-Shell-Skripte liefert. Das Tool kann verwendet werden für statische Code Analyse. Idealerweise wird das Tool in einer CI Pipeline integriert. Hier ein Beispiel einer Github Action Pipeline: name: Shellcheck on: pull_request: push: branches: - main&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Beschreibung</h2>
<p><a href="https://www.shellcheck.net/" target="_blank" rel="nofollow noopener noreferrer">ShellCheck</a> ist ein Tool, das Warnungen und Vorschläge für Bash/Sh-Shell-Skripte liefert. Das Tool kann verwendet werden für statische Code Analyse.</p>
<h2>CI Pipeline</h2>
<p>Idealerweise wird das Tool in einer CI Pipeline integriert. Hier ein Beispiel einer Github Action Pipeline:<code></code></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attribute" style="color: #6a8759;">name</span>: Shellcheck

<span class="less"><span class="hljs-attribute" style="color: #6a8759;">on</span>:
  <span class="hljs-attribute" style="color: #6a8759;">pull_request</span>:
  <span class="hljs-attribute" style="color: #6a8759;">push</span>:
    <span class="hljs-attribute" style="color: #6a8759;">branches</span>:
      - main

<span class="hljs-attribute" style="color: #6a8759;">jobs</span>:
  <span class="hljs-attribute" style="color: #6a8759;">shellcheck</span>:
    <span class="hljs-attribute" style="color: #6a8759;">name</span>: Github Actions
    <span class="hljs-attribute" style="color: #6a8759;">runs-on</span>: ubuntu-latest
    <span class="hljs-attribute" style="color: #6a8759;">steps</span>:
    - <span class="hljs-attribute" style="color: #6a8759;">uses</span>: actions/checkout<span class="hljs-variable" style="color: #629755;">@v3</span>
    - <span class="hljs-attribute" style="color: #6a8759;">name</span>: Run Shellcheck
      <span class="hljs-attribute" style="color: #6a8759;">uses</span>: ludeeus/action-shellcheck<span class="hljs-variable" style="color: #629755;">@master</span>
      <span class="hljs-attribute" style="color: #6a8759;">with</span>:
        <span class="hljs-attribute" style="color: #6a8759;">check_together</span>: <span class="hljs-string" style="color: #6a8759;">'yes'</span>
      <span class="hljs-attribute" style="color: #6a8759;">env</span>:
        <span class="hljs-attribute" style="color: #6a8759;">SHELLCHECK_OPTS</span>: --shell bash</span></pre>
<h2>IDE VSCode</h2>
<p>Zudem gibt es auch die Möglichkeit ShellChek direkt in der IDE VSCode zu integrieren: </p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/54//shellcheck.gif" alt="ShellChek" width="1920" height="948"></figure>
<p>Hier gehts zum Marketplace-Item für VSCode: <a href="https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck">https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Imperativ vs. Deklarativ</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/imperativ-vs-deklarativ.html"/>
        <id>https://www.finecloud.ch/imperativ-vs-deklarativ.html</id>
            <category term="tools"/>
            <category term="terraform"/>
            <category term="pulumi"/>
            <category term="infrastructure as code"/>
            <category term="imperative"/>
            <category term="iac"/>
            <category term="declarative"/>
            <category term="ansible"/>

        <updated>2022-07-26T07:59:36+02:00</updated>
            <summary>
                <![CDATA[
                    Immer wieder stösst man im Bereich Infrastructure as Code (IaC) auf die Begriffe imperativ und deklarativ. Doch was bedeuten diese Begriffe? Ist Terraform wirklich deklarativ und Ansible nicht? Diese beiden Begriffe sind nicht einfach Buzzwords, sondern wesentliche Design-Patterns von IaC. Beim deklarativen Ansatz definiert der&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g8sg1qh415e">Glossar: Imperativ / Deklarativ</a></li>
<li><a href="#mcetoc_1g8sg1qh415f">Erwartung und Vorurteil</a></li>
<li><a href="#mcetoc_1g8sg1qh415g">Der Irrtum</a></li>
<li><a href="#mcetoc_1g8sg1qh415h">Meine Ansicht</a></li>
</ul>
</div>
<p>Immer wieder stösst man im Bereich Infrastructure as Code (IaC) auf die Begriffe imperativ und deklarativ. Doch was bedeuten diese Begriffe? Ist Terraform wirklich deklarativ und Ansible nicht? Diese beiden Begriffe sind nicht einfach Buzzwords, sondern wesentliche Design-Patterns von IaC.</p>
<h2 id="mcetoc_1g8sg1qh415e">Glossar: Imperativ / Deklarativ</h2>
<div class="page" title="Page 8">
<div class="layoutArea">
<div class="column">
<p>Beim deklarativen Ansatz definiert der Entwickler den Endzustand und lässt das IaC Tool ermitteln, wie dieser Zustand erreicht werden soll. Im Gegensatz dazu definiert beim imperativen Ansatz der Entwickler den Prozess, mit welchem vom Ist-Zustand aus der Soll-Zustand erreicht wird. <strong>Der Hauptunterschied ist, dass imperative Programme einen Control-Flow haben und deklarative nicht.</strong> Das lässt sich einfach herausfinden indem man die IaC Anweisungen. Verfügen diese über Error-Checks und Überprüfungen ob etwas korrekt ausgeführt wurde, dann handelt es sich um einen Control-Flow.</p>
<p>Ein einfaches Beispiel einer imperativen Anweisung:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">if</span> cluster_exists:
  echo <span class="hljs-string" style="color: #6a8759;">"you already created that cluster"</span>
<span class="hljs-keyword" style="color: #cc7832;">else</span>:
  echo <span class="hljs-string" style="color: #6a8759;">"I'm creating a cluster for you"</span></pre>
<p>Auf der anderen Seite verfügt der deklarative Ansatz über keinen Control-Flow, das braucht es dort gar nicht, weil sich Terraform selbst um die Logik und den Control-Flow kümmert, deshalb muss sich der Anwender keine Gedanken darüber machen wie der Soll-Zustand erreicht wird, er muss nur definieren wie der Soll-Zustand am Ende sein soll.</p>
<p>Ein einfaches Beispiel einer deklarativen Anweisung:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">terraform {
  required_providers {
    aws = {
      source  = <span class="hljs-string" style="color: #6a8759;">"hashicorp/aws"</span>
      version = <span class="hljs-string" style="color: #6a8759;">"~&gt; 4.16"</span>
    }
  }

  required_version = <span class="hljs-string" style="color: #6a8759;">"&gt;= 1.2.0"</span>
}

provider <span class="hljs-string" style="color: #6a8759;">"aws"</span> {
  region  = <span class="hljs-string" style="color: #6a8759;">"us-west-2"</span>
}

resource <span class="hljs-string" style="color: #6a8759;">"aws_instance"</span> <span class="hljs-string" style="color: #6a8759;">"app_server"</span> {
  ami           = <span class="hljs-string" style="color: #6a8759;">"ami-830c94e3"</span>
  instance_type = <span class="hljs-string" style="color: #6a8759;">"t2.micro"</span>

  tags = {
    Name = <span class="hljs-string" style="color: #6a8759;">"ExampleAppServerInstance"</span>
  }
}
</pre>
<p>Der deklarative Ansatz reduziert den Code Umfang erheblich und vermindert damit auch die Fehleranfälligkeit. Zudem muss man sich nicht selbst mit dauern ändernden Cloud APIs herumschlagen.</p>
<h2 id="mcetoc_1g8sg1qh415f">Erwartung und Vorurteil</h2>
<p>Die meisten Leute mit denen man über IaC spricht haben die Tendenz zu glauben das ein IaC Tool deklarativ sein muss. Was sehr komisch ist, sind aussagen wie:</p>
<blockquote>
<p>Terraform ist deklarativ, Pulumi, Ansible und AWS CDK nicht, deshalb ist Terraform besser als die anderen.</p>
</blockquote>
<p>Leute mit solchen Aussagen verraten das sie keine Ahnung haben wovon sie sprechen.</p>
<h2 id="mcetoc_1g8sg1qh415g">Der Irrtum</h2>
<p>Das Hauptproblem in der ganzen imperativ vs. deklarativ Debatte besteht darin, das die meisten Leute meinen, wenn man eine Configurations-Sprache, wie zum Beispiel die DSL Sprachen von Terraform, HCL verwendet das automatisch etwas deklarativ macht.</p>
<p>IaC Tools wie Terraform, Ansible, Pulumi, AWS CDK usw. machen sich alle DAG zu nutzen. DAG steht für <a href="https://www.bigdata-insider.de/was-ist-ein-directed-acyclic-graph-dag-a-1075296/" target="_blank" rel="nofollow noopener noreferrer">Directed acyclic graph:</a></p>
<blockquote>
<p>Ein Directed Acyclic Graph (DAG) ist eine abstrakte Struktur, die aus Knoten und Kanten besteht. Die Kanten bilden die Verbindungen zwischen den Knoten und besitzen eine Richtung. Schleifen sind in der Struktur ausgeschlossen. Folgt man der Richtung der Kanten, gelangt man von einem Startpunkt (Startknoten) zu einem Zielknoten und niemals zurück an den Ausgangsknoten. Es entsteht eine topologische Ordnung. Mit DAGs lassen sich beispielsweise kausale Zusammenhänge gut darstellen.  </p>
</blockquote>
<p>Pulumi, und Terraform erstellen nicht nur ein DAG, sondern ermöglichen es auch, das erstellte Diagramm zu untersuchen! Pulumi verfügt über den Pulumi-Stack-Graph-Befehl und Terraform über den Terraform-Graph-Befehl.<br><br>Dieses Diagramm wird erstellt, wenn man ein Terraform- oder Pulumi-Programm erstellt, und <strong>wird dann von den Engines des jeweiligen Tools ausgeführt, die dieses Diagramm bei jeder Tool-Instanziierung idempotent ausführen.</strong></p>
<p>Idempotent bedeutet, dass man dieselben Ergebnisse erwarten kann, wenn man immer wieder dasselbe ausführt. <strong>Jedes Infrastruktur als Code-Tool ist (wenn man es korrekt einsetzt) deklarativ und idempotent.</strong> Konfigurationsmanagement-Tools sind im Allgemeinen idempotent, aber nicht unbedingt deklarativ.</p>
<p>Wieso glauben aber so viele Leute das Pulumi, Ansible und CDK imperativ sind? Die Antwort ist, das die meisten Leute dabei nicht an das eigentliche Tool denken, sondern nur an die Sprache welche verwendet wird. Konfigurationssprachen machen deklarative Zustände leicht verständlich, da Sie keine Bedingungen in Konfigurationssprachen verwenden können, ohne eine Templating Sprache zu verwenden, oder grosse Änderungen an einer DSL vorzunehmen.<br><br>Mit Ansible, Pulumi und AWS CDK kann man jedoch Bedingungen nach Herzenslust verwenden, da sie imperative Sprachen als primäre Authoring-Erfahrung verwenden.</p>
<p>Nehmen wir das folgende Snippet von Ansible code als Beispiel:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">  - name: Set super_group variable for RedHat
    set_fact:
      super_group: wheel
    when: ansible_os_family == <span class="hljs-string" style="color: #6a8759;">"RedHat"</span>  
<span class="hljs-attr">  - name:</span> Set super_group variable for Debian
<span class="hljs-attr">    set_fact:</span>
<span class="hljs-attr">      super_group:</span> sudo
<span class="hljs-attr">    when:</span> ansible_os_family == <span class="hljs-string" style="color: #6a8759;">"Debian"</span>
<span class="hljs-attr">  - name:</span> Add local linux user {{ username }}
    user:
      name: <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-template-variable" style="color: #629755;">{{ username }}</span>"</span>
      groups: <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-template-variable" style="color: #629755;">{{ super_group }}</span>"</span>
      append: <span class="hljs-literal" style="color: #6897bb;">true</span>
      password_lock: <span class="hljs-literal" style="color: #6897bb;">true</span>
      shell: /bin/bash
      create_home: <span class="hljs-literal" style="color: #6897bb;">true</span>
      generate_ssh_key: <span class="hljs-literal" style="color: #6897bb;">true</span>
      state: present</pre>
<p>Hier kann man sehen, das eine <em>when</em> Bedingung definiert ist und dort entschieden wird, ob die Variable <em><span class="hljs-attr">super_group:</span> sudo </em>oder<em> wheel</em> gesetzt wird, oder garnicht. Anschliessend wird ein neuer Linux User erstellt. Es handelt sich in offensichtlich insgesamt um eine imperative Operation, zuerst wird anhand der OS Family eine Variable gesetzt und dann der Benutzer erstellt. Aber damit nicht genug: das Resultat, dieser imerpativen Operation <strong>ist deklarativ.</strong> Damit versuchen wir den Irrtum nun aufzulösen: <strong>Pulumi und Ansible und wie die Tools alle heissen sind als solches, (als Tool) alle deklarativ. Die Sprache jedoch, in welcher man die Infrastruktur beschreibt wird bei Pulumi und Ansible in einer imperativen Form geschrieben.</strong></p>
<h2>Das Problem mit imperativen Anweisungen</h2>
<p>Das Problem bei manchen Ansible Playbooks ist, dass diese nicht idempotent geschrieben wurden. Was bitte schön ist <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Idempotenz? </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Idempotenz bezeichnet die Unveränderbarkeit des Ergebnisses bei einer mehrfachen Verknüpfung oder Funktionsanwendung. Idempotenz ist erreicht, wenn ein IaC-Task nach wiederholtem Ausführen immer dasselbe Resultat erzeugt. Erst durch idempotente Tasks wird ein Gesamtautomatisierungsprozess auch für mehrere Ausführungen robust und zuverlässig.</span></p>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Wenn man unsorgfältige Ansible Tasks verfasst, kann das dazu führen, dass diese bei wiederholtem ausführen nicht dieselben Resultate erzeugen, im Vergleich zu Terraform, wo dies aufgrund der strikten DSL nicht passieren kann.</span></p>
<h2>Das Problem mit deklarativen Anweisungen</h2>
<p>Im Gegensatz dazu gibt es bei Terraform keine wirklich ausgereifte Möglichkeit den Control-Flow zu bearbeiten. Es gibt zwar mechanismen wie das count argument oder ein for_each, das führt dann aber beispielsweise zu folgendem Code:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">count = var.enabled ? <span class="hljs-number" style="color: #6897bb;">1</span> : length([some list of resources or datasources])</pre>
<p>Diese Anweisung ist nichts anderes als die <span class="hljs-attr"><em>when</em> oder <em>state</em> Anweisung im oberen Ansible Beispielcode. Nur ist dieser Code hier deutlich schwerer lesbar und wenige verständlich.</span></p>
<h2 id="mcetoc_1g8sg1qh415h">Meine Ansicht</h2>
<p>Anstatt imperativ und deklarativ mit falsch, richtig, besser oder schlechter zu bewerten, sollten wir uns bewusst werden, das wir in den meisten Fällen im IaC Bereich immer mit beidem zu tun haben. Je nach Tool oder Configurations Sprache direkter oder indirekter. Letztendlich erlauben Tools wie Ansible und Pulumi aus meiner Sicht höchste flexibilität und Anpassbarkeit des Control-Flows. Tools wie Terraform hingegen sind ungeeignet für mofizierungen des Control-Flows. Deshalb macht es meiner Meinung nach am meisten Sinn, das Tool oder die Konfigurations-Sprache zu verwenden, welche für den jeweiligen Use-Case am besten geeignet ist. Grundsätzlich lässt sich jede Aufgabe mit entweder dem imperativen oder deklarativen Ansatz lösen. Es gibt aber Aufgaben, die deutlich einfacher mit dem einen oder dem anderen Ansatz gelöst werden können. Es gilt daher situativ zu entscheiden, welcher Ansatz sich für welche Aufgaben am besten eignet und diese dann geschickt zu kombinieren. Beispielsweise kann man Terraform einsetzen, um Basis-VMs direkt von einem Template ausgehend zu erstellen. Nachfolgend kann man dann z.b. je nach OS Familie Ansible einsetzen, um Software-Installationen und Konfigurationen auf dem VMs vorzunehmen.</p>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Monitor Proxmox mit Grafana und Prometheus</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/monitor-proxmox-mit-grafana-und-prometheus.html"/>
        <id>https://www.finecloud.ch/monitor-proxmox-mit-grafana-und-prometheus.html</id>
            <category term="virtualization"/>
            <category term="proxmox"/>
            <category term="prometheus"/>
            <category term="monitoring"/>
            <category term="lxc"/>
            <category term="linux"/>
            <category term="grafana"/>
            <category term="container"/>

        <updated>2022-07-24T18:00:23+02:00</updated>
            <summary>
                <![CDATA[
                    Obwohl Proxmox selbst ja sehr gute Monitoring Informationen direkt auf dem eigenen WebUI anzeigt werde ich um Grafana und Prometheus besser kennen zu lernen diese Tools nutzen um meinen Proxmox Host zu überwachen. Mit der Open-Source-Software von Grafana kann man Metriken, Protokolle und Ablaufverfolgungen, visualisieren,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g8ncv1m65n">Grafana</a>
<ul>
<li><a href="#mcetoc_1g8ncv1m65o">Was ist Grafana?</a></li>
<li><a href="#mcetoc_1g8oet5nkph">Installation</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g8ncv1m65p">Prometheus</a></li>
<li><a href="#mcetoc_1g8ncv1m65q">Was ist Prometheus?</a>
<ul>
<li><a href="#features">Features</a></li>
<li><a href="#mcetoc_1g8oet5nkpi">Installation</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g8oet5nkpj">Proxmox</a></li>
<li><a href="#mcetoc_1g8oet5nkpk">Konfiguration von Grafana und Prometheus</a></li>
</ul>
</div>
<p>Obwohl Proxmox selbst ja sehr gute Monitoring Informationen direkt auf dem eigenen WebUI anzeigt werde ich um Grafana und Prometheus besser kennen zu lernen diese Tools nutzen um meinen Proxmox Host zu überwachen.</p>
<h2 id="mcetoc_1g8ncv1m65n">Grafana</h2>
<h3 id="mcetoc_1g8ncv1m65o">Was ist Grafana?</h3>
<p>Mit der Open-Source-Software von <a href="https://grafana.com" target="_blank" rel="nofollow noopener noreferrer">Grafana</a> kann man Metriken, Protokolle und Ablaufverfolgungen, visualisieren, warnen und untersuchen. Grafana OSS stellt Tools zur Verfügung, mit denen man seine <em>time-series database</em> (TSDB) in aufschlussreiche Diagramme und Visualisierungen umwandeln kann.</p>
<h3 id="mcetoc_1g8oet5nkph">Installation</h3>
<p>Da ich Grafana selbst als Test in meinem Homelab ausprobieren will möchte ich möglichst wenig Zeit in das Setup investieren und das ganze auch so schlank als möglich halten. Deshalb habe ich mit dazu entschieden Grafana als LXC Container zu installieren. Dazu erstelle ich als erster Schritt einen neuen LXC Container mit den folgenden Specs:</p>
<ul>
<li>Template: Debian 11</li>
<li>Disk: 10GB (können wir jederzeit noch vergrössern)</li>
<li>Cores: 2</li>
<li>Memory: 1024 MiB</li>
<li>Swap: 1024 MiB</li>
</ul>
<p>Als nächster Schritt loggen wir uns in den LXC Container ein und fügen die Grafana Repos hinzu und installieren Grafana auch gleich:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo apt-get install -y apt-transport-https gnupg
sudo apt-get install -y software-properties-common wget
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
<span class="hljs-built_in">echo</span> <span class="hljs-string" style="color: #6a8759;">"deb https://packages.grafana.com/oss/deb stable main"</span> | sudo tee <span class="hljs-_">-a</span> /etc/apt/sources.list.d/grafana.list
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install grafana
sudo systemctl daemon-reload
sudo systemctl start grafana-server
sudo systemctl status grafana-server
sudo systemctl <span class="hljs-built_in">enable</span> grafana-server.service</pre>
<p>Wenn alles geklappt hat, sollte Grafana nun unter dieser URL erreichbar sein: <a href="http://LXC-Container-IP-Adresse:3000/login" rel="nofollow">http://&lt;<em>LXC-Container-IP-Adresse</em>&gt;:3000/login</a> Einloggen kann man mit dem default Login:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">username: admin
password: admin
</pre>
<h2 id="mcetoc_1g8ncv1m65p">Prometheus</h2>
<h2 id="mcetoc_1g8ncv1m65q">Was ist Prometheus?</h2>
<p>Prometheus ist ein Open-Source-Systems für Monitoring und Alerting, das ursprünglich bei SoundCloud entwickelt wurde. Seit seiner Gründung im Jahr 2012 haben viele Unternehmen und Organisationen Prometheus übernommen, und das Projekt hat eine sehr aktive Entwickler- und Benutzergemeinschaft. Es ist jetzt ein eigenständiges Open-Source-Projekt und wird unabhängig von einem Unternehmen gepflegt. Um dies zu betonen und die Governance-Struktur des Projekts zu verdeutlichen, trat Prometheus 2016 als zweites gehostetes Projekt nach Kubernetes der Cloud Native Computing Foundation bei.<br><br>Prometheus sammelt und speichert seine Metriken als Zeitreihendaten (time series data), d. h. Metrikinformationen werden mit dem Zeitstempel gespeichert, zu dem sie aufgezeichnet wurden, zusammen mit optionalen Schlüssel-Wert-Paaren, die als Labels bezeichnet werden.<br><br>Ausführlichere Übersichten über Prometheus finden Sie in den Ressourcen, die im Medienbereich verlinkt sind.</p>
<h3 id="features">Features<a class="header-anchor" href="https://prometheus.io/docs/introduction/overview/#features" name="features"></a></h3>
<p>Prometheus's Features sind:</p>
<ul>
<li>ein multi-dimensionales daten model mit Zeitreihendaten, die durch Metriknamen und Schlüssel/Wert-Paare identifiziert werden</li>
<li>PromQL, eine flexible Abfragesprache, um diese Dimensionalität zu nutzen<br>keine Abhängigkeit von verteilter Speicherung; einzelne Serverknoten sind autonom</li>
<li>Die Erfassung von Zeitreihen erfolgt über ein Pull-Modell über HTTP</li>
<li>Das Pushen von Zeitreihen wird über ein zwischengeschaltetes Gateway unterstützt</li>
<li>Ziele werden über die Diensterkennung oder die statische Konfiguration erkannt<br>mehrere Modi der Grafik- und Dashboard-Unterstützung</li>
</ul>
<h3 id="mcetoc_1g8oet5nkpi">Installation</h3>
<p>Wie zuvor Grafana installieren wir nun auch Prometheus als LXC Container:</p>
<ul>
<li>Template: Debian 11</li>
<li>Disk: 10GB (können wir jederzeit noch vergrössern)</li>
<li>Cores: 2</li>
<li>Memory: 2048 MiB</li>
<li>Swap: 2048 MiB</li>
</ul>
<p>Als nächster Schritt loggen wir uns in den LXC Container ein und fügen die Grafana Repos hinzu und installieren Grafana auch gleich:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">apt-get install -y curl sudo
mkdir -p /etc/prometheus
mkdir -p /var/lib/prometheus
wget https://github.com/prometheus/prometheus/releases/download/v2.37.0/prometheus-2.37.0.linux-amd64.tar.gz
tar -xvf prometheus-2.37.0.linux-amd64.tar.gz
<span class="hljs-built_in">cd</span> prometheus-2.37.0.linux-amd64
mv prometheus promtool /usr/<span class="hljs-built_in">local</span>/bin/
mv consoles/ console_libraries/ /etc/prometheus/
mv prometheus.yml /etc/prometheus/prometheus.yml</pre>
<p>Weiter erstellen wir den Prometheus Systemd Service und aktivieren diesen:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">service_path=<span class="hljs-string" style="color: #6a8759;">"/etc/systemd/system/prometheus.service"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string" style="color: #6a8759;">"[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=root
Restart=always
Type=simple
ExecStart=/usr/local/bin/prometheus \
    --config.file=/etc/prometheus/prometheus.yml \
    --storage.tsdb.path=/var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries \
    --web.listen-address=0.0.0.0:9090

[Install]
WantedBy=multi-user.target"</span> &gt; <span class="hljs-variable" style="color: #629755;">$service_path</span>
sudo systemctl <span class="hljs-built_in">enable</span> --now prometheus</pre>
<p>Wenn alles geklappt hat, sollte Prometheus nun unter dieser URL erreichbar sein: <a href="http://LXC-Container-IP-Adresse:9090" rel="nofollow">http://&lt;<em>LXC-Container-IP-Adresse</em>&gt;:9090</a></p>
<h2 id="mcetoc_1g8oet5nkpj">Proxmox</h2>
<p>Zuerst müssen wir auf Proxmox einen neuen User anlegen mit welchem wir von Prometheus her authentifizieren können. Damit wir den Service als deamon laufen lassen können, müssen wir den User zudem auf OS Ebene installieren, jedoch ohne Shell:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">pveum user add prometheus@pve
pveum aclmod / -user prometheus@pve -role PVEAuditor<br>pveum passwd <a href="mailto:prometheus@pve">prometheus@pve</a><br>useradd -c "pve exporter" -m -s /bin/false prometheus</pre>
<p>Damit wir nun den Proxmox mit Grafana und Prometheus Überwachen können, müssen wir auf dem Proxmox selbst den proxmox-pve-exporter installieren:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo apt install python3-pip
sudo pip install prometheus-pve-exporter</pre>
<p>auf dem Proxmox Host erstellen wir zudem eine neue Datei mit dem folgenden Inhalt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo vi /etc/prometheus/pve.yml<br>default:
    user: prometheus@pve
    password: your_password_here
    verify_ssl: <span class="hljs-literal" style="color: #6897bb;">false</span></pre>
<p>Weiter brauchen wir auf dem Proxmox Host ein Systemd Service Config File:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo tee /etc/systemd/system/prometheus-pve-exporter.service&lt;&lt;EOF
[Unit]
Description=Prometheus exporter <span class="hljs-keyword" style="color: #cc7832;">for</span> Proxmox VE
Documentation=https://github.com/znerol/prometheus-pve-exporter

[Service]
Restart=always
User=prometheus
ExecStart=/usr/<span class="hljs-built_in">local</span>/bin/pve_exporter /etc/prometheus/pve.yml

[Install]
WantedBy=multi-user.target
EOF</pre>
<p>Nun erstellen wir eine weitere Config Datei:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo vi /etc/prometheus/prometheus.yml
- job_name: <span class="hljs-string" style="color: #6a8759;">'proxmox'</span>
  metrics_path: /pve
  static_configs:
  - targets: [<span class="hljs-string" style="color: #6a8759;">'&lt;proxmox-ip&lt;:9221'</span>]</pre>
<p>und starten den Prometheus Service neu:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo systemctl restart prometheus</pre>
<h2 id="mcetoc_1g8oet5nkpk">Konfiguration von Grafana und Prometheus</h2>
<p>Dazu loggen wir uns nun auf Grafana ein und klicken auf "Add data source":</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-09.03.53.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-2xl.png 1600w"  alt="" width="3360" height="1766"></figure>
<p>und wir wählen Prometheus als Datenquelle aus:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-09.04.29.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-2xl.png 1600w"  alt="" width="3360" height="1766"></figure>
<p>und geben die Angaben unseres Prometheus LXC Containers an:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-16.35.52.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-2xl.png 1600w"  alt="" width="3360" height="1766"></figure>
<p>anschliessend klicken wir auf "Save &amp; Test". Nun importieren wir ein bereits bestehendes Grafana Dashboard. Dazu gehen wir auf Dashboards -&gt; + Import</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-17.01.18.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-2xl.png 1600w"  alt="" width="3360" height="1766"></figure>
<p>Dort geben wir die ID (10347) des existierenden Dashboards an und importieren es, indem wir auf Load klicken:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-17.04.08-2.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-2xl.png 1600w"  alt="" width="1794" height="1206"></figure>
<p>Anschliessend verändert sich die Ansicht. Die einzige Anpassung die wir hier benötigen die die Auswahl der Datenquelle (letzter Schritt), dort wählen wir unser Prometheus aus und klicken dann auf Import:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-17.05.53.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-2xl.png 1600w"  alt="" width="1860" height="1418"></figure>
<p>Anschliessend sollte unser Dashboard nach einer Weile die Daten des PVE Exporters wunderschön und detailliert aufbereitet anzeigen:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/screenshot.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/screenshot-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-2xl.png 1600w"  alt="" width="3676" height="1846"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Capture Groups in Java</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/capture-groups-in-java.html"/>
        <id>https://www.finecloud.ch/capture-groups-in-java.html</id>
            <category term="software development"/>
            <category term="regex"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-07-14T06:35:45+02:00</updated>
            <summary>
                <![CDATA[
                    Capture Groups Im letzten Post haben wir einen kleinen Einstieg in Regex mit Java gemacht. Nun sehen wir uns an, wie man Regex Pattern in Java mittels Capture Groups anwenden kann: String regex = "(1[-.\\s])?(\\d{3}[-.\\s]?)(\\d{3}[-.\\s]?)\\d{4}"; String phoneNumber = "12.523.231.4234"; Pattern pat = Pattern.compile(regex); Matcher mat =&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g7tfqiu92l">Capture Groups</a></li>
<li><a href="#mcetoc_1g7tfr24a2o">Not Capture Groups</a></li>
<li><a href="#mcetoc_1g7tfqiu92m">Named Capture Groups</a></li>
</ul>
</div>
<h2 id="mcetoc_1g7tfqiu92l">Capture Groups</h2>
<p><a href="https://www.finecloud.ch/einstieg-in-regex-mit-java.html" rel="nofollow">Im letzten Post</a> haben wir einen kleinen Einstieg in Regex mit Java gemacht. Nun sehen wir uns an, wie man Regex Pattern in Java mittels Capture Groups anwenden kann:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">        String regex = <span class="hljs-string" style="color: #6a8759;">"(1[-.\\s])?(\\d{3}[-.\\s]?)(\\d{3}[-.\\s]?)\\d{4}"</span>;
        String phoneNumber = <span class="hljs-string" style="color: #6a8759;">"12.523.231.4234"</span>;
        Pattern pat = Pattern.compile(regex);
        Matcher mat = pat.matcher(phoneNumber);

        <span class="hljs-keyword" style="color: #cc7832;">if</span> (mat.matches()){
            //System.out.format("entire String: %s\n", mat.group(0));
            System.out.format("Country Code: %s\n", mat.group(2));
            System.out.format("Area Code: %s\n", mat.group(4));
            System.out.format("Exchange Code: %s\n", mat.group(6));
            System.out.format("Line number Code: %s\n", mat.group(7));
        }</pre>
<p>Damit können wir nun die einzelnen Nummern-Teile extrahieren und separat behandeln:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Country Code: 12
Area Code: 523
Exchange Code: 231
Line number Code: 4234</pre>
<h2 id="mcetoc_1g7tfr24a2o">Not Capture Groups</h2>
<p>Im Beispiel oben werden die Klammern fortlaufend nummeriert, jede Klammer wird von links nach rechts aufsteigend nummeriert, dabei werden auch die embeded Gruppen mitgezählt. Das hat den Nachteil das es etwas unübersichtlich wird, welche Nummer hat nun die Klammer in der Mitte. Dabei interessieren uns ja eigentlich immer nur die embeded Gruppen. Das können wir optimieren, indem wir bei den Klammern welche uns nicht interessieren ein '?:' direkt nach dem Öffnen der Klammer angeben. Das bedeutet dann soviel wir <em>not Capture Group</em>. Damit wird für die Klammern keine Gruppennummer vergeben:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">        String regex = <span class="hljs-string" style="color: #6a8759;">"(?:(\\d{1,2})[-.\\s])?(?:(\\d{3})[-.\\s]?)(?:(\\d{3})[-.\\s]?)(\\d{4})"</span>;
        String phoneNumber = <span class="hljs-string" style="color: #6a8759;">"12.523.231.4234"</span>;

        Pattern pat = Pattern.compile(regex);
        Matcher mat = pat.matcher(phoneNumber);

        <span class="hljs-keyword" style="color: #cc7832;">if</span> (mat.matches()){
            <span class="hljs-comment" style="color: grey;">//System.out.format("entire String: %s\n", mat.group(0));</span>
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Country Code: %s\n"</span>, mat.group(<span class="hljs-number" style="color: #6897bb;">1</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Area Code: %s\n"</span>, mat.group(<span class="hljs-number" style="color: #6897bb;">2</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Exchange Code: %s\n"</span>, mat.group(<span class="hljs-number" style="color: #6897bb;">3</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Line number Code: %s\n"</span>, mat.group(<span class="hljs-number" style="color: #6897bb;">4</span>));
        }</pre>
<h2 id="mcetoc_1g7tfqiu92m">Named Capture Groups</h2>
<p>Noch mehr Optimieren können wir das mit Named Capture Groups:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">        String regex = <span class="hljs-string" style="color: #6a8759;">"(?:(?&lt;countryCode&gt;\\d{1,2})[-.\\s])?(?:(?&lt;areaCode&gt;\\d{3})[-.\\s]?)(?:(?&lt;exchangeCode&gt;\\d{3})[-.\\s]?)(?&lt;lineNumber&gt;\\d{4})"</span>;
        String phoneNumber = <span class="hljs-string" style="color: #6a8759;">"12.523.231.4234"</span>;

        Pattern pat = Pattern.compile(regex);
        Matcher mat = pat.matcher(phoneNumber);

        <span class="hljs-keyword" style="color: #cc7832;">if</span> (mat.matches()){
            <span class="hljs-comment" style="color: grey;">//System.out.format("entire String: %s\n", mat.group(0));</span>
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Country Code: %s\n"</span>, mat.group(<span class="hljs-string" style="color: #6a8759;">"countryCode"</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Area Code: %s\n"</span>, mat.group(<span class="hljs-string" style="color: #6a8759;">"areaCode"</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Exchange Code: %s\n"</span>, mat.group(<span class="hljs-string" style="color: #6a8759;">"exchangeCode"</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Line number Code: %s\n"</span>, mat.group(<span class="hljs-string" style="color: #6a8759;">"lineNumber"</span>));
        }</pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Einstieg in Regex mit Java</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/einstieg-in-regex-mit-java.html"/>
        <id>https://www.finecloud.ch/einstieg-in-regex-mit-java.html</id>
            <category term="software development"/>
            <category term="regex"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-07-14T05:55:53+02:00</updated>
            <summary>
                <![CDATA[
                    Was ist Regex? Regex steht für Regular expressions und ist eine Technik, Technologie und Sprache an und für sich, die verwendet werden kann zum Ausdrücken von Textmustern mit Symbolen. Und diese Symbole sind selbst Text. Damit lassen wir verschiedene Textteile und Zeichen andere Textfolgen darstellen. In&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g7qsl72t8a">Was ist Regex?</a></li>
<li><a href="#mcetoc_1g7qsl72t8b">Einfaches Beispiel</a></li>
<li><a href="#mcetoc_1g7qsl72t8c">Negieren</a></li>
<li><a href="#mcetoc_1g7qsl72t8d">Anzahl Buchstaben</a></li>
<li><a href="#mcetoc_1g7tdih5q2e">Anzahl Zahlen</a></li>
<li><a href="#mcetoc_1g7tdih5q2f">Buchstaben und Zahlenfolge</a></li>
</ul>
</div>
<h2 id="mcetoc_1g7qsl72t8a">Was ist Regex?</h2>
<p>Regex steht für Regular expressions und  ist eine Technik, Technologie und Sprache an und für sich, die verwendet werden kann zum Ausdrücken von Textmustern mit Symbolen. Und diese Symbole sind selbst Text. Damit lassen wir verschiedene Textteile und Zeichen andere Textfolgen darstellen.</p>
<h2 id="mcetoc_1g7qsl72t8b">Einfaches Beispiel</h2>
<p>In Java kann Regex Beispielsweise bei Strings angewendet werden, dazu verwenden wir die Methode <em>String.matches. </em>Das einfachste Beispiel, ist wenn wir mit Regex in einem String nach einem String suchen:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"cat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"cat"</span>));
    }
}</pre>
<p>Der Output ist ein Boolean Wert, in diesem Fall <em>true. </em>Was aber wenn wir nun eines der beiden cat gross schreiben? Der Boolean wird <em>false</em> sein, ausser wir passen den Regex Pattern so an, dass er Gross- und Kleinbuchstaben berücksichtigt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"Cat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"[Cc]at"</span>));
    }
}
</pre>
<p>mit den eckigen Klammern [ ] kann eine OR Verknüpfung zwischen Zeichen definiert werden.</p>
<p>Wenn wir ein Pattern wollen, um zu prüfen ob das Wort mit einem Buchstaben von a bis f startet könnten wir entweder alle Buchstaben in der eckigen Klammer ausschreiben. Dafür gibt es glücklicherweise eine schönere Möglichkeit, wir können Ranges angeben:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"Fat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"[a-fA-F]at"</span>));
    }
}</pre>
<h2 id="mcetoc_1g7qsl72t8c">Negieren</h2>
<p>Was wenn wir einen Pattern wollen der prüft ob etwas <strong>nicht</strong> zutrifft. Zum Beispiel ob der Erste Buchstaben des Wortes nicht ein Buchstabe von a bis f ist:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"Fat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"[^a-fA-F]at"</span>));
    }
}</pre>
<p>Das Ergebnis ist nun <em>false</em>. Das Zeichen am Anfang nennt sich "Caret".</p>
<h2 id="mcetoc_1g7qsl72t8d">Anzahl Buchstaben</h2>
<p>Wenn wir nun ein Pattern suchen, der prüft ob unser String aus nur drei latinischen Buchstaben besteht: </p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"Fat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\w\\w\\w"</span>));
    }
}</pre>
<p>Der reine Regex Pattern besteht nur aus einem \ (Backslash). Damit wir diesen in Java nutzen können, müssen wir jedoch den Backslash mit einem zweiten Backslash escapen, damit Java den Backslash nicht als Java, sondern als Regex Pattern erkennen kann.</p>
<p class="msg msg--highlight ">Der Regex-Pattern für Buchstaben (\w) wertet nicht nur Buchstaben von a bis z als Valid, sondern auch Zahlen und '_' (underscore).</p>
<h2 id="mcetoc_1g7tdih5q2e">Anzahl Zahlen</h2>
<p>Dasselbe geht auch, wenn wir einen Pattern für die Anzahl Zahlen definieren:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"521"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d\\d\\d"</span>));
    }
}</pre>
<h2 id="mcetoc_1g7tdih5q2f">Buchstaben und Zahlenfolge</h2>
<p>Was wenn wir nun eine Sammlung von Nummern auf das folgende Format prüfen müssen: <em>523-231-4444</em> (alle Zahlen sind erlaubt). Wir könnten dazu einfach aus Faulheit folgenden Pattern definieren:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523-231-4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\d\d\d-\d\d\d-\d\d\d\d"</span>));
    }
}</pre>
<p>Das ist ein Valider Pattern der die Problemstellung löst. Allerdings geht das schöner und einfacher mit dem Quantifier { }:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523-231-4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\d{3}-\d{3}-\d{4}"</span>));
    }
}</pre>
<p>Viel besser oder? Was wenn wir nun nicht nur die Bindestriche, sondern auch z.B. Punkte als Trennzeichen akzeptieren wollen? Dann können wir eine Or Verknüpfung machen anhand des oberen Beispiels:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523-231.4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\d{3}[-.]\d{3}[-.]\d{4}"</span>));
    }
}</pre>
<p>Was ist nun wenn wir Leerzeichen (523-231.4444) zwischen den Nummern als Valid behandeln wollen? Theoretisch können wir nun in der Or Verknüpfung (in den eckigen Klammern) einfach ein Leerzeichen einfügen. Das funktioniert, ist aber Optisch nicht ideal, da das Leerzeichen schnell übersehen wird. Expliziter geht das mit \s als Regex Zeichen für einen Leerschlag:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523 231.4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]\\d{3}[-.\\s]\\d{4}"</span>));
    }
}</pre>
<p>Wenn mehr als ein Leerschlag, Bindestrich oder Punkt erlaubt ist, kann hinter der "Or"-Klammer einfach ein Plus angefügt werden:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523 ..231  4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]+\\d{3}[-.\\s]+\\d{4}"</span>));
    }
}</pre>
<p>Was wenn keines, eines oder mehrere dieser "Or"-Verknüpften Zeichen erlaubt sein sollen? Wir verwenden '*' anstelle von '+':</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523231 .4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]*\\d{3}[-.\\s]*\\d{4}"</span>));
    }
}</pre>
<p>Was ist nun wenn wir genau nur eines oder keines dieser Zeichen erlauben wollen? Wir verwenden '?' anstelle von '*':</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523231-4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}"</span>));
    }
}</pre>
<p>Was, wenn wir in der letzten Zahlenfolge nur 3 oder 4 Zeichen erlauben wollen? </p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523231-4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{3,4}"</span>));
    }
}</pre>
<p>Wenn wir mindestens drei Stellen brauchen, aber es auch unbeschränkt mehr sein dürfen, können wir die zweite Zahl nach dem Komma einfach weglassen. Was wir weiter optimieren können ist, dass wir die Wiederholungen von Regex Statements zusammenfassen und nur einmal deklarieren. Dazu löschen wir eines der beiden "\d{3}[-.\s]?" Statements und setzen es im runde Klammern, gefolgt von Spitzen klammern, in der wir die Anzahl Wiederholungen angeben, in diesem Fall 2:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523 231 4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"(\\d{3}[-.\\s]?){2}\\d{3,}"</span>));
    }
}</pre>
<p>Genial, oder?</p>
            ]]>
        </content>
    </entry>
</feed>
