<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Finecloud</title>
    <link href="https://www.finecloud.ch/feed.xml" rel="self" />
    <link href="https://www.finecloud.ch" />
    <updated>2022-08-09T08:41:05+02:00</updated>
    <author>
        <name>Finecloud</name>
    </author>
    <id>https://www.finecloud.ch</id>

    <entry>
        <title>Visualisiere deine Strava Aktivitäten mit Grafana</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/visualisiere-deine-strava-aktivitaeten-mit-grafana.html"/>
        <id>https://www.finecloud.ch/visualisiere-deine-strava-aktivitaeten-mit-grafana.html</id>
            <category term="strava"/>
            <category term="grafana"/>
            <category term="api"/>

        <updated>2022-08-09T08:41:05+02:00</updated>
            <summary>
                <![CDATA[
                    Was ist Strava Strava ist das soziale Netzwerk für Sportler. Du kannst deine Sport Aktivitäten aufzeichnen und diese wird deinem Strava-Feed hinzugefügt - zusammen mit jenen, die deine Freunde und Followers mit dir teilen. Auf diese Weise könnt ihr eure Wettkampf- und Trainingsaktivitäten gegenseitig verfolgen,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1ga0fla9lcj">Was ist Strava</a></li>
<li><a href="#mcetoc_1ga0fla9lck">Was ist Grafana</a></li>
<li><a href="#mcetoc_1ga0fla9lcl">Wieso das ganze?</a></li>
<li><a href="#mcetoc_1ga0fla9lcm">Features</a></li>
<li><a href="#mcetoc_1ga0fla9lcn">Voraussetzungen</a></li>
<li><a href="#mcetoc_1ga0fla9lco">Setup</a>
<ul>
<li><a href="#mcetoc_1ga0fla9lcp">Strava Plugin</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1ga0fla9lcj">Was ist Strava</h2>
<p><a href="https://www.strava.com/" target="_blank" rel="nofollow noopener noreferrer">Strava</a> ist <strong>das</strong> soziale Netzwerk für Sportler. Du kannst deine Sport Aktivitäten aufzeichnen und diese wird deinem Strava-Feed hinzugefügt - zusammen mit jenen, die deine Freunde und Followers mit dir teilen. Auf diese Weise könnt ihr eure Wettkampf- und Trainingsaktivitäten gegenseitig verfolgen, kommentieren und bei tollen Leistungen Kudos geben.</p>
<h2 id="mcetoc_1ga0fla9lck">Was ist Grafana</h2>
<p>Mit der Open-Source-Software von <a href="https://grafana.com" target="_blank" rel="nofollow noopener noreferrer">Grafana</a> kann man Metriken, Protokolle und Ablaufverfolgungen, visualisieren, warnen und untersuchen. Grafana OSS stellt Tools zur Verfügung, mit denen man seine <em>time-series database</em> (TSDB) in aufschlussreiche Diagramme und Visualisierungen umwandeln kann.</p>
<h2 id="mcetoc_1ga0fla9lcl">Wieso das ganze?</h2>
<p>Weil man's kann. Natürlich hast du bereits bei Gramin wie auch Strava und anderen Portalen gute Dashboards um deine Trainings zu analysieren. Ich finde dieser Anwendungsfall aber doppelt interessant, da ich bei diesem Vorhaben mit Grafana vertrauter machen kann und zudem interessante Daten analysieren kann, welche ich selbst generiert habe.</p>
<h2 id="mcetoc_1ga0fla9lcm">Features</h2>
<p>Das <a href="http://192.168.100.13:3000/plugins/grafana-strava-datasource" target="_blank" rel="nofollow noopener noreferrer">Grafana Plugin für Strava</a> ermöglicht dir folgendes:</p>
<ul>
<li>Abfrage von Aktivitätsstatistiken und Darstellung als Zeitreihendaten</li>
<li>Tabellenformat</li>
<li>Anzeigen der Aktivitäten auf der ganzen Welt mit dem Worldmap-Panel</li>
<li>Visualisierung und Analyse von Aktivitätsdaten wie Herzfrequenz, Geschwindigkeit/Tempo, Leistung, etc.</li>
<li>Unterstützung von Template-Variablen</li>
</ul>
<h2 id="mcetoc_1ga0fla9lcn">Voraussetzungen</h2>
<ol>
<li>Du hast bereits eine fertig installierte Grafana Instanz. Falls du Grafana noch installieren musst, kannst du <a href="https://www.finecloud.ch/monitor-proxmox-mit-grafana-und-prometheus.html#mcetoc_1g8oet5nkph" target="_blank" rel="nofollow noopener noreferrer">hier</a> nachlesen wie das geht.</li>
<li>Du hast das <a href="http://192.168.100.13:3000/plugins/grafana-strava-datasource" target="_blank" rel="nofollow noopener noreferrer">Grafana Plugin für Strava</a> bereits installiert</li>
</ol>
<h2 id="mcetoc_1ga0fla9lco">Setup Strava Plugin</h2>
<p>Bevor wir Daten von Strava anziehen könnnen, musst du auf strava.com mit deinem Account einloggen und dir ein API App Secret erstellen:</p>
<ol>
<li>Nachdem du dich auf <a href="https://www.strava.com/settings/api">https://www.strava.com/settings/api</a> eingeloggt hast, erstelle eine App.</li>
<li>Du solltest nun die Seite "Meine API-Anwendung" sehen. Hier die Erklärung der Begriffe:
<ul>
<li>Category: Die Kategorie für deine Anwendung</li>
<li>Club: Zeigt an, ob du einen Club mit deiner Anwendung verknüpft hast</li>
<li>Client ID: Deine Anmelde-ID</li>
<li>Client Secret: Dein Kundengeheimnis (bitte behandle es vertraulich)</li>
<li>Authorization Token: Dein Autorisierungs-Token, der sich alle sechs Stunden ändert (bitte behandeln Sie dies vertraulich)</li>
<li>Your Refresh-Token: Das Token, das du verwenden kannst, um ein neues Autorisierungs-Token zu erhalten (bitte vertraulich behandeln)</li>
<li>Rate limits: Dein aktuelles Ratenlimit</li>
<li>Authorization Callback Domain: Ändern auf die exakte Grafana URL oder IP von welcher aus du Grafana verwendets, dass wird warscheinlich eine interne URL/IP sein. Füge die URL aber ohne Ports hinzu, also z.b. 192.168.0.10</li>
</ul>
</li>
</ol>
<p>Nun wechseln wir zurück in unser Grafana und erstellen eine neue Strava Data Source:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/55/strava.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/55/responsive/strava-xs.png 300w ,https://www.finecloud.ch/media/posts/55/responsive/strava-sm.png 480w ,https://www.finecloud.ch/media/posts/55/responsive/strava-md.png 768w ,https://www.finecloud.ch/media/posts/55/responsive/strava-lg.png 1024w ,https://www.finecloud.ch/media/posts/55/responsive/strava-xl.png 1360w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2xl.png 1600w"  alt="" width="1835" height="723"></figure>
<p>Wichtig ist das nun zuerst Connect with Strava angewählt wird, damit die OAuth stattfinden kann:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/55/config_2.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/55/responsive/config_2-xs.png 300w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-sm.png 480w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-md.png 768w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-lg.png 1024w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-xl.png 1360w ,https://www.finecloud.ch/media/posts/55/responsive/config_2-2xl.png 1600w"  alt="" width="1686" height="947"></figure>
<p>Anschliessend wirst du nochmals zurück auf den vorherigen Data Source Dialog redirected. Gib dort nochmals deine Client ID und Client Secret ein und klicke danach auf Save &amp; Test. Nun sollte die Meldung kommen "<em>Data source is working</em>".</p>
<p>Nun kannst du in Tab Dashboards noch die Dashboards importieren welche du dann unter Browse anschauen kannst:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/55/strava-2.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/55/responsive/strava-2-xs.png 300w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-sm.png 480w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-md.png 768w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-lg.png 1024w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-xl.png 1360w ,https://www.finecloud.ch/media/posts/55/responsive/strava-2-2xl.png 1600w"  alt="" width="2557" height="1341"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>ShellCheck</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/shellcheck.html"/>
        <id>https://www.finecloud.ch/shellcheck.html</id>
            <category term="vscode"/>
            <category term="tools"/>
            <category term="shell"/>
            <category term="linux"/>
            <category term="infrastructure as code"/>
            <category term="iac"/>
            <category term="bash"/>

        <updated>2022-08-05T19:22:39+02:00</updated>
            <summary>
                <![CDATA[
                    Beschreibung ShellCheck ist ein Tool, das Warnungen und Vorschläge für Bash/Sh-Shell-Skripte liefert. Das Tool kann verwendet werden für statische Code Analyse. Idealerweise wird das Tool in einer CI Pipeline integriert. Hier ein Beispiel einer Github Action Pipeline: name: Shellcheck on: pull_request: push: branches: - main&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Beschreibung</h2>
<p><a href="https://www.shellcheck.net/" target="_blank" rel="nofollow noopener noreferrer">ShellCheck</a> ist ein Tool, das Warnungen und Vorschläge für Bash/Sh-Shell-Skripte liefert. Das Tool kann verwendet werden für statische Code Analyse.</p>
<h2>CI Pipeline</h2>
<p>Idealerweise wird das Tool in einer CI Pipeline integriert. Hier ein Beispiel einer Github Action Pipeline:<code></code></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attribute" style="color: #6a8759;">name</span>: Shellcheck

<span class="less"><span class="hljs-attribute" style="color: #6a8759;">on</span>:
  <span class="hljs-attribute" style="color: #6a8759;">pull_request</span>:
  <span class="hljs-attribute" style="color: #6a8759;">push</span>:
    <span class="hljs-attribute" style="color: #6a8759;">branches</span>:
      - main

<span class="hljs-attribute" style="color: #6a8759;">jobs</span>:
  <span class="hljs-attribute" style="color: #6a8759;">shellcheck</span>:
    <span class="hljs-attribute" style="color: #6a8759;">name</span>: Github Actions
    <span class="hljs-attribute" style="color: #6a8759;">runs-on</span>: ubuntu-latest
    <span class="hljs-attribute" style="color: #6a8759;">steps</span>:
    - <span class="hljs-attribute" style="color: #6a8759;">uses</span>: actions/checkout<span class="hljs-variable" style="color: #629755;">@v3</span>
    - <span class="hljs-attribute" style="color: #6a8759;">name</span>: Run Shellcheck
      <span class="hljs-attribute" style="color: #6a8759;">uses</span>: ludeeus/action-shellcheck<span class="hljs-variable" style="color: #629755;">@master</span>
      <span class="hljs-attribute" style="color: #6a8759;">with</span>:
        <span class="hljs-attribute" style="color: #6a8759;">check_together</span>: <span class="hljs-string" style="color: #6a8759;">'yes'</span>
      <span class="hljs-attribute" style="color: #6a8759;">env</span>:
        <span class="hljs-attribute" style="color: #6a8759;">SHELLCHECK_OPTS</span>: --shell bash</span></pre>
<h2>IDE VSCode</h2>
<p>Zudem gibt es auch die Möglichkeit ShellChek direkt in der IDE VSCode zu integrieren: </p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/54//shellcheck.gif" alt="ShellChek" width="1920" height="948"></figure>
<p>Hier gehts zum Marketplace-Item für VSCode: <a href="https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck">https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Imperativ vs. Deklarativ</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/imperativ-vs-deklarativ.html"/>
        <id>https://www.finecloud.ch/imperativ-vs-deklarativ.html</id>
            <category term="tools"/>
            <category term="terraform"/>
            <category term="pulumi"/>
            <category term="infrastructure as code"/>
            <category term="imperativ"/>
            <category term="iac"/>
            <category term="deklarativ"/>
            <category term="ansible"/>

        <updated>2022-07-26T07:59:36+02:00</updated>
            <summary>
                <![CDATA[
                    Immer wieder stösst man im Bereich Infrastructure as Code (IaC) auf die Begriffe imperativ und deklarativ. Doch was bedeuten diese Begriffe? Ist Terraform wirklich deklarativ und Ansible nicht? Diese beiden Begriffe sind nicht einfach Buzzwords, sondern wesentliche Design-Patterns von IaC. Beim deklarativen Ansatz definiert der&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g8sg1qh415e">Glossar: Imperativ / Deklarativ</a></li>
<li><a href="#mcetoc_1g8sg1qh415f">Erwartung und Vorurteil</a></li>
<li><a href="#mcetoc_1g8sg1qh415g">Der Irrtum</a></li>
<li><a href="#mcetoc_1g8sg1qh415h">Meine Ansicht</a></li>
</ul>
</div>
<p>Immer wieder stösst man im Bereich Infrastructure as Code (IaC) auf die Begriffe imperativ und deklarativ. Doch was bedeuten diese Begriffe? Ist Terraform wirklich deklarativ und Ansible nicht? Diese beiden Begriffe sind nicht einfach Buzzwords, sondern wesentliche Design-Patterns von IaC.</p>
<h2 id="mcetoc_1g8sg1qh415e">Glossar: Imperativ / Deklarativ</h2>
<div class="page" title="Page 8">
<div class="layoutArea">
<div class="column">
<p>Beim deklarativen Ansatz definiert der Entwickler den Endzustand und lässt das IaC Tool ermitteln, wie dieser Zustand erreicht werden soll. Im Gegensatz dazu definiert beim imperativen Ansatz der Entwickler den Prozess, mit welchem vom Ist-Zustand aus der Soll-Zustand erreicht wird. <strong>Der Hauptunterschied ist, dass imperative Programme einen Control-Flow haben und deklarative nicht.</strong> Das lässt sich einfach herausfinden indem man die IaC Anweisungen. Verfügen diese über Error-Checks und Überprüfungen ob etwas korrekt ausgeführt wurde, dann handelt es sich um einen Control-Flow.</p>
<p>Ein einfaches Beispiel einer imperativen Anweisung:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">if</span> cluster_exists:
  echo <span class="hljs-string" style="color: #6a8759;">"you already created that cluster"</span>
<span class="hljs-keyword" style="color: #cc7832;">else</span>:
  echo <span class="hljs-string" style="color: #6a8759;">"I'm creating a cluster for you"</span></pre>
<p>Auf der anderen Seite verfügt der deklarative Ansatz über keinen Control-Flow, das braucht es dort gar nicht, weil sich Terraform selbst um die Logik und den Control-Flow kümmert, deshalb muss sich der Anwender keine Gedanken darüber machen wie der Soll-Zustand erreicht wird, er muss nur definieren wie der Soll-Zustand am Ende sein soll.</p>
<p>Ein einfaches Beispiel einer deklarativen Anweisung:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">terraform {
  required_providers {
    aws = {
      source  = <span class="hljs-string" style="color: #6a8759;">"hashicorp/aws"</span>
      version = <span class="hljs-string" style="color: #6a8759;">"~&gt; 4.16"</span>
    }
  }

  required_version = <span class="hljs-string" style="color: #6a8759;">"&gt;= 1.2.0"</span>
}

provider <span class="hljs-string" style="color: #6a8759;">"aws"</span> {
  region  = <span class="hljs-string" style="color: #6a8759;">"us-west-2"</span>
}

resource <span class="hljs-string" style="color: #6a8759;">"aws_instance"</span> <span class="hljs-string" style="color: #6a8759;">"app_server"</span> {
  ami           = <span class="hljs-string" style="color: #6a8759;">"ami-830c94e3"</span>
  instance_type = <span class="hljs-string" style="color: #6a8759;">"t2.micro"</span>

  tags = {
    Name = <span class="hljs-string" style="color: #6a8759;">"ExampleAppServerInstance"</span>
  }
}
</pre>
<p>Der deklarative Ansatz reduziert den Code Umfang erheblich und vermindert damit auch die Fehleranfälligkeit. Zudem muss man sich nicht selbst mit dauern ändernden Cloud APIs herumschlagen.</p>
<h2 id="mcetoc_1g8sg1qh415f">Erwartung und Vorurteil</h2>
<p>Die meisten Leute mit denen man über IaC spricht haben die Tendenz zu glauben das ein IaC Tool deklarativ sein muss. Was sehr komisch ist, sind aussagen wie:</p>
<blockquote>
<p>Terraform ist deklarativ, Pulumi, Ansible und AWS CDK nicht, deshalb ist Terraform besser als die anderen.</p>
</blockquote>
<p>Leute mit solchen Aussagen verraten das sie keine Ahnung haben wovon sie sprechen.</p>
<h2 id="mcetoc_1g8sg1qh415g">Der Irrtum</h2>
<p>Das Hauptproblem in der ganzen imperativ vs. deklarativ Debatte besteht darin, das die meisten Leute meinen, wenn man eine Configurations-Sprache, wie zum Beispiel die DSL Sprachen von Terraform, HCL verwendet das automatisch etwas deklarativ macht.</p>
<p>IaC Tools wie Terraform, Ansible, Pulumi, AWS CDK usw. machen sich alle DAG zu nutzen. DAG steht für <a href="https://www.bigdata-insider.de/was-ist-ein-directed-acyclic-graph-dag-a-1075296/" target="_blank" rel="nofollow noopener noreferrer">Directed acyclic graph:</a></p>
<blockquote>
<p>Ein Directed Acyclic Graph (DAG) ist eine abstrakte Struktur, die aus Knoten und Kanten besteht. Die Kanten bilden die Verbindungen zwischen den Knoten und besitzen eine Richtung. Schleifen sind in der Struktur ausgeschlossen. Folgt man der Richtung der Kanten, gelangt man von einem Startpunkt (Startknoten) zu einem Zielknoten und niemals zurück an den Ausgangsknoten. Es entsteht eine topologische Ordnung. Mit DAGs lassen sich beispielsweise kausale Zusammenhänge gut darstellen.  </p>
</blockquote>
<p>Pulumi, und Terraform erstellen nicht nur ein DAG, sondern ermöglichen es auch, das erstellte Diagramm zu untersuchen! Pulumi verfügt über den Pulumi-Stack-Graph-Befehl und Terraform über den Terraform-Graph-Befehl.<br><br>Dieses Diagramm wird erstellt, wenn man ein Terraform- oder Pulumi-Programm erstellt, und <strong>wird dann von den Engines des jeweiligen Tools ausgeführt, die dieses Diagramm bei jeder Tool-Instanziierung idempotent ausführen.</strong></p>
<p>Idempotent bedeutet, dass man dieselben Ergebnisse erwarten kann, wenn man immer wieder dasselbe ausführt. <strong>Jedes Infrastruktur als Code-Tool ist (wenn man es korrekt einsetzt) deklarativ und idempotent.</strong> Konfigurationsmanagement-Tools sind im Allgemeinen idempotent, aber nicht unbedingt deklarativ.</p>
<p>Wieso glauben aber so viele Leute das Pulumi, Ansible und CDK imperativ sind? Die Antwort ist, das die meisten Leute dabei nicht an das eigentliche Tool denken, sondern nur an die Sprache welche verwendet wird. Konfigurationssprachen machen deklarative Zustände leicht verständlich, da Sie keine Bedingungen in Konfigurationssprachen verwenden können, ohne eine Templating Sprache zu verwenden, oder grosse Änderungen an einer DSL vorzunehmen.<br><br>Mit Ansible, Pulumi und AWS CDK kann man jedoch Bedingungen nach Herzenslust verwenden, da sie imperative Sprachen als primäre Authoring-Erfahrung verwenden.</p>
<p>Nehmen wir das folgende Snippet von Ansible code als Beispiel:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">  - name: Set super_group variable for RedHat
    set_fact:
      super_group: wheel
    when: ansible_os_family == <span class="hljs-string" style="color: #6a8759;">"RedHat"</span>  
<span class="hljs-attr">  - name:</span> Set super_group variable for Debian
<span class="hljs-attr">    set_fact:</span>
<span class="hljs-attr">      super_group:</span> sudo
<span class="hljs-attr">    when:</span> ansible_os_family == <span class="hljs-string" style="color: #6a8759;">"Debian"</span>
<span class="hljs-attr">  - name:</span> Add local linux user {{ username }}
    user:
      name: <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-template-variable" style="color: #629755;">{{ username }}</span>"</span>
      groups: <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-template-variable" style="color: #629755;">{{ super_group }}</span>"</span>
      append: <span class="hljs-literal" style="color: #6897bb;">true</span>
      password_lock: <span class="hljs-literal" style="color: #6897bb;">true</span>
      shell: /bin/bash
      create_home: <span class="hljs-literal" style="color: #6897bb;">true</span>
      generate_ssh_key: <span class="hljs-literal" style="color: #6897bb;">true</span>
      state: present</pre>
<p>Hier kann man sehen, das eine <em>when</em> Bedingung definiert ist und dort entschieden wird, ob die Variable <em><span class="hljs-attr">super_group:</span> sudo </em>oder<em> wheel</em> gesetzt wird, oder garnicht. Anschliessend wird ein neuer Linux User erstellt. Es handelt sich in offensichtlich insgesamt um eine imperative Operation, zuerst wird anhand der OS Family eine Variable gesetzt und dann der Benutzer erstellt. Aber damit nicht genug: das Resultat, dieser imerpativen Operation <strong>ist deklarativ.</strong> Damit versuchen wir den Irrtum nun aufzulösen: <strong>Pulumi und Ansible und wie die Tools alle heissen sind als solches, (als Tool) alle deklarativ. Die Sprache jedoch, in welcher man die Infrastruktur beschreibt wird bei Pulumi und Ansible in einer imperativen Form geschrieben.</strong></p>
<h2>Das Problem mit imperativen Anweisungen</h2>
<p>Das Problem bei manchen Ansible Playbooks ist, dass diese nicht idempotent geschrieben wurden. Was bitte schön ist <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Idempotenz? </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Idempotenz bezeichnet die Unveränderbarkeit des Ergebnisses bei einer mehrfachen Verknüpfung oder Funktionsanwendung. Idempotenz ist erreicht, wenn ein IaC-Task nach wiederholtem Ausführen immer dasselbe Resultat erzeugt. Erst durch idempotente Tasks wird ein Gesamtautomatisierungsprozess auch für mehrere Ausführungen robust und zuverlässig.</span></p>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Wenn man unsorgfältige Ansible Tasks verfasst, kann das dazu führen, dass diese bei wiederholtem ausführen nicht dieselben Resultate erzeugen, im Vergleich zu Terraform, wo dies aufgrund der strikten DSL nicht passieren kann.</span></p>
<h2>Das Problem mit deklarativen Anweisungen</h2>
<p>Im Gegensatz dazu gibt es bei Terraform keine wirklich ausgereifte Möglichkeit den Control-Flow zu bearbeiten. Es gibt zwar mechanismen wie das count argument oder ein for_each, das führt dann aber beispielsweise zu folgendem Code:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">count = var.enabled ? <span class="hljs-number" style="color: #6897bb;">1</span> : length([some list of resources or datasources])</pre>
<p>Diese Anweisung ist nichts anderes als die <span class="hljs-attr"><em>when</em> oder <em>state</em> Anweisung im oberen Ansible Beispielcode. Nur ist dieser Code hier deutlich schwerer lesbar und wenige verständlich.</span></p>
<h2 id="mcetoc_1g8sg1qh415h">Meine Ansicht</h2>
<p>Anstatt imperativ und deklarativ mit falsch, richtig, besser oder schlechter zu bewerten, sollten wir uns bewusst werden, das wir in den meisten Fällen im IaC Bereich immer mit beidem zu tun haben. Je nach Tool oder Configurations Sprache direkter oder indirekter. Letztendlich erlauben Tools wie Ansible und Pulumi aus meiner Sicht höchste flexibilität und Anpassbarkeit des Control-Flows. Tools wie Terraform hingegen sind ungeeignet für mofizierungen des Control-Flows. Deshalb macht es meiner Meinung nach am meisten Sinn, das Tool oder die Konfigurations-Sprache zu verwenden, welche für den jeweiligen Use-Case am besten geeignet ist. Grundsätzlich lässt sich jede Aufgabe mit entweder dem imperativen oder deklarativen Ansatz lösen. Es gibt aber Aufgaben, die deutlich einfacher mit dem einen oder dem anderen Ansatz gelöst werden können. Es gilt daher situativ zu entscheiden, welcher Ansatz sich für welche Aufgaben am besten eignet und diese dann geschickt zu kombinieren. Beispielsweise kann man Terraform einsetzen, um Basis-VMs direkt von einem Template ausgehend zu erstellen. Nachfolgend kann man dann z.b. je nach OS Familie Ansible einsetzen, um Software-Installationen und Konfigurationen auf dem VMs vorzunehmen.</p>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Monitor Proxmox mit Grafana und Prometheus</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/monitor-proxmox-mit-grafana-und-prometheus.html"/>
        <id>https://www.finecloud.ch/monitor-proxmox-mit-grafana-und-prometheus.html</id>
            <category term="virtualisierung"/>
            <category term="proxmox"/>
            <category term="prometheus"/>
            <category term="monitoring"/>
            <category term="lxc"/>
            <category term="linux"/>
            <category term="grafana"/>
            <category term="container"/>

        <updated>2022-07-24T18:00:23+02:00</updated>
            <summary>
                <![CDATA[
                    Obwohl Proxmox selbst ja sehr gute Monitoring Informationen direkt auf dem eigenen WebUI anzeigt werde ich um Grafana und Prometheus besser kennen zu lernen diese Tools nutzen um meinen Proxmox Host zu überwachen. Mit der Open-Source-Software von Grafana kann man Metriken, Protokolle und Ablaufverfolgungen, visualisieren,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g8ncv1m65n">Grafana</a>
<ul>
<li><a href="#mcetoc_1g8ncv1m65o">Was ist Grafana?</a></li>
<li><a href="#mcetoc_1g8oet5nkph">Installation</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g8ncv1m65p">Prometheus</a></li>
<li><a href="#mcetoc_1g8ncv1m65q">Was ist Prometheus?</a>
<ul>
<li><a href="#features">Features</a></li>
<li><a href="#mcetoc_1g8oet5nkpi">Installation</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g8oet5nkpj">Proxmox</a></li>
<li><a href="#mcetoc_1g8oet5nkpk">Konfiguration von Grafana und Prometheus</a></li>
</ul>
</div>
<p>Obwohl Proxmox selbst ja sehr gute Monitoring Informationen direkt auf dem eigenen WebUI anzeigt werde ich um Grafana und Prometheus besser kennen zu lernen diese Tools nutzen um meinen Proxmox Host zu überwachen.</p>
<h2 id="mcetoc_1g8ncv1m65n">Grafana</h2>
<h3 id="mcetoc_1g8ncv1m65o">Was ist Grafana?</h3>
<p>Mit der Open-Source-Software von <a href="https://grafana.com" target="_blank" rel="nofollow noopener noreferrer">Grafana</a> kann man Metriken, Protokolle und Ablaufverfolgungen, visualisieren, warnen und untersuchen. Grafana OSS stellt Tools zur Verfügung, mit denen man seine <em>time-series database</em> (TSDB) in aufschlussreiche Diagramme und Visualisierungen umwandeln kann.</p>
<h3 id="mcetoc_1g8oet5nkph">Installation</h3>
<p>Da ich Grafana selbst als Test in meinem Homelab ausprobieren will möchte ich möglichst wenig Zeit in das Setup investieren und das ganze auch so schlank als möglich halten. Deshalb habe ich mit dazu entschieden Grafana als LXC Container zu installieren. Dazu erstelle ich als erster Schritt einen neuen LXC Container mit den folgenden Specs:</p>
<ul>
<li>Template: Debian 11</li>
<li>Disk: 10GB (können wir jederzeit noch vergrössern)</li>
<li>Cores: 2</li>
<li>Memory: 1024 MiB</li>
<li>Swap: 1024 MiB</li>
</ul>
<p>Als nächster Schritt loggen wir uns in den LXC Container ein und fügen die Grafana Repos hinzu und installieren Grafana auch gleich:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo apt-get install -y apt-transport-https gnupg
sudo apt-get install -y software-properties-common wget
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
<span class="hljs-built_in">echo</span> <span class="hljs-string" style="color: #6a8759;">"deb https://packages.grafana.com/oss/deb stable main"</span> | sudo tee <span class="hljs-_">-a</span> /etc/apt/sources.list.d/grafana.list
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install grafana
sudo systemctl daemon-reload
sudo systemctl start grafana-server
sudo systemctl status grafana-server
sudo systemctl <span class="hljs-built_in">enable</span> grafana-server.service</pre>
<p>Wenn alles geklappt hat, sollte Grafana nun unter dieser URL erreichbar sein: <a href="http://LXC-Container-IP-Adresse:3000/login" rel="nofollow">http://&lt;<em>LXC-Container-IP-Adresse</em>&gt;:3000/login</a> Einloggen kann man mit dem default Login:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">username: admin
password: admin
</pre>
<h2 id="mcetoc_1g8ncv1m65p">Prometheus</h2>
<h2 id="mcetoc_1g8ncv1m65q">Was ist Prometheus?</h2>
<p>Prometheus ist ein Open-Source-Systems für Monitoring und Alerting, das ursprünglich bei SoundCloud entwickelt wurde. Seit seiner Gründung im Jahr 2012 haben viele Unternehmen und Organisationen Prometheus übernommen, und das Projekt hat eine sehr aktive Entwickler- und Benutzergemeinschaft. Es ist jetzt ein eigenständiges Open-Source-Projekt und wird unabhängig von einem Unternehmen gepflegt. Um dies zu betonen und die Governance-Struktur des Projekts zu verdeutlichen, trat Prometheus 2016 als zweites gehostetes Projekt nach Kubernetes der Cloud Native Computing Foundation bei.<br><br>Prometheus sammelt und speichert seine Metriken als Zeitreihendaten (time series data), d. h. Metrikinformationen werden mit dem Zeitstempel gespeichert, zu dem sie aufgezeichnet wurden, zusammen mit optionalen Schlüssel-Wert-Paaren, die als Labels bezeichnet werden.<br><br>Ausführlichere Übersichten über Prometheus finden Sie in den Ressourcen, die im Medienbereich verlinkt sind.</p>
<h3 id="features">Features<a class="header-anchor" href="https://prometheus.io/docs/introduction/overview/#features" name="features"></a></h3>
<p>Prometheus's Features sind:</p>
<ul>
<li>ein multi-dimensionales daten model mit Zeitreihendaten, die durch Metriknamen und Schlüssel/Wert-Paare identifiziert werden</li>
<li>PromQL, eine flexible Abfragesprache, um diese Dimensionalität zu nutzen<br>keine Abhängigkeit von verteilter Speicherung; einzelne Serverknoten sind autonom</li>
<li>Die Erfassung von Zeitreihen erfolgt über ein Pull-Modell über HTTP</li>
<li>Das Pushen von Zeitreihen wird über ein zwischengeschaltetes Gateway unterstützt</li>
<li>Ziele werden über die Diensterkennung oder die statische Konfiguration erkannt<br>mehrere Modi der Grafik- und Dashboard-Unterstützung</li>
</ul>
<h3 id="mcetoc_1g8oet5nkpi">Installation</h3>
<p>Wie zuvor Grafana installieren wir nun auch Prometheus als LXC Container:</p>
<ul>
<li>Template: Debian 11</li>
<li>Disk: 10GB (können wir jederzeit noch vergrössern)</li>
<li>Cores: 2</li>
<li>Memory: 2048 MiB</li>
<li>Swap: 2048 MiB</li>
</ul>
<p>Als nächster Schritt loggen wir uns in den LXC Container ein und fügen die Grafana Repos hinzu und installieren Grafana auch gleich:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">apt-get install -y curl sudo
mkdir -p /etc/prometheus
mkdir -p /var/lib/prometheus
wget https://github.com/prometheus/prometheus/releases/download/v2.37.0/prometheus-2.37.0.linux-amd64.tar.gz
tar -xvf prometheus-2.37.0.linux-amd64.tar.gz
<span class="hljs-built_in">cd</span> prometheus-2.37.0.linux-amd64
mv prometheus promtool /usr/<span class="hljs-built_in">local</span>/bin/
mv consoles/ console_libraries/ /etc/prometheus/
mv prometheus.yml /etc/prometheus/prometheus.yml</pre>
<p>Weiter erstellen wir den Prometheus Systemd Service und aktivieren diesen:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">service_path=<span class="hljs-string" style="color: #6a8759;">"/etc/systemd/system/prometheus.service"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string" style="color: #6a8759;">"[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=root
Restart=always
Type=simple
ExecStart=/usr/local/bin/prometheus \
    --config.file=/etc/prometheus/prometheus.yml \
    --storage.tsdb.path=/var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries \
    --web.listen-address=0.0.0.0:9090

[Install]
WantedBy=multi-user.target"</span> &gt; <span class="hljs-variable" style="color: #629755;">$service_path</span>
sudo systemctl <span class="hljs-built_in">enable</span> --now prometheus</pre>
<p>Wenn alles geklappt hat, sollte Prometheus nun unter dieser URL erreichbar sein: <a href="http://LXC-Container-IP-Adresse:9090" rel="nofollow">http://&lt;<em>LXC-Container-IP-Adresse</em>&gt;:9090</a></p>
<h2 id="mcetoc_1g8oet5nkpj">Proxmox</h2>
<p>Zuerst müssen wir auf Proxmox einen neuen User anlegen mit welchem wir von Prometheus her authentifizieren können. Damit wir den Service als deamon laufen lassen können, müssen wir den User zudem auf OS Ebene installieren, jedoch ohne Shell:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">pveum user add prometheus@pve
pveum aclmod / -user prometheus@pve -role PVEAuditor<br>pveum passwd <a href="mailto:prometheus@pve">prometheus@pve</a><br>useradd -c "pve exporter" -m -s /bin/false prometheus</pre>
<p>Damit wir nun den Proxmox mit Grafana und Prometheus Überwachen können, müssen wir auf dem Proxmox selbst den proxmox-pve-exporter installieren:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo apt install python3-pip
sudo pip install prometheus-pve-exporter</pre>
<p>auf dem Proxmox Host erstellen wir zudem eine neue Datei mit dem folgenden Inhalt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo vi /etc/prometheus/pve.yml<br>default:
    user: prometheus@pve
    password: your_password_here
    verify_ssl: <span class="hljs-literal" style="color: #6897bb;">false</span></pre>
<p>Weiter brauchen wir auf dem Proxmox Host ein Systemd Service Config File:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo tee /etc/systemd/system/prometheus-pve-exporter.service&lt;&lt;EOF
[Unit]
Description=Prometheus exporter <span class="hljs-keyword" style="color: #cc7832;">for</span> Proxmox VE
Documentation=https://github.com/znerol/prometheus-pve-exporter

[Service]
Restart=always
User=prometheus
ExecStart=/usr/<span class="hljs-built_in">local</span>/bin/pve_exporter /etc/prometheus/pve.yml

[Install]
WantedBy=multi-user.target
EOF</pre>
<p>Nun erstellen wir eine weitere Config Datei:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo vi /etc/prometheus/prometheus.yml
- job_name: <span class="hljs-string" style="color: #6a8759;">'proxmox'</span>
  metrics_path: /pve
  static_configs:
  - targets: [<span class="hljs-string" style="color: #6a8759;">'&lt;proxmox-ip&lt;:9221'</span>]</pre>
<p>und starten den Prometheus Service neu:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">sudo systemctl restart prometheus</pre>
<h2 id="mcetoc_1g8oet5nkpk">Konfiguration von Grafana und Prometheus</h2>
<p>Dazu loggen wir uns nun auf Grafana ein und klicken auf "Add data source":</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-09.03.53.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.03.53-2xl.png 1600w"  alt="" width="3360" height="1766"></figure>
<p>und wir wählen Prometheus als Datenquelle aus:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-09.04.29.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-09.04.29-2xl.png 1600w"  alt="" width="3360" height="1766"></figure>
<p>und geben die Angaben unseres Prometheus LXC Containers an:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-16.35.52.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-16.35.52-2xl.png 1600w"  alt="" width="3360" height="1766"></figure>
<p>anschliessend klicken wir auf "Save &amp; Test". Nun importieren wir ein bereits bestehendes Grafana Dashboard. Dazu gehen wir auf Dashboards -&gt; + Import</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-17.01.18.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.01.18-2xl.png 1600w"  alt="" width="3360" height="1766"></figure>
<p>Dort geben wir die ID (10347) des existierenden Dashboards an und importieren es, indem wir auf Load klicken:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-17.04.08-2.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.04.08-2-2xl.png 1600w"  alt="" width="1794" height="1206"></figure>
<p>Anschliessend verändert sich die Ansicht. Die einzige Anpassung die wir hier benötigen die die Auswahl der Datenquelle (letzter Schritt), dort wählen wir unser Prometheus aus und klicken dann auf Import:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/Screenshot-2022-07-24-at-17.05.53.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/Screenshot-2022-07-24-at-17.05.53-2xl.png 1600w"  alt="" width="1860" height="1418"></figure>
<p>Anschliessend sollte unser Dashboard nach einer Weile die Daten des PVE Exporters wunderschön und detailliert aufbereitet anzeigen:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/52/screenshot.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/52/responsive/screenshot-xs.png 300w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-sm.png 480w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-md.png 768w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-lg.png 1024w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-xl.png 1360w ,https://www.finecloud.ch/media/posts/52/responsive/screenshot-2xl.png 1600w"  alt="" width="3676" height="1846"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Capture Groups in Java</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/capture-groups-in-java.html"/>
        <id>https://www.finecloud.ch/capture-groups-in-java.html</id>
            <category term="softwareentwicklung"/>
            <category term="regex"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-07-14T06:35:45+02:00</updated>
            <summary>
                <![CDATA[
                    Capture Groups Im letzten Post haben wir einen kleinen Einstieg in Regex mit Java gemacht. Nun sehen wir uns an, wie man Regex Pattern in Java mittels Capture Groups anwenden kann: String regex = "(1[-.\\s])?(\\d{3}[-.\\s]?)(\\d{3}[-.\\s]?)\\d{4}"; String phoneNumber = "12.523.231.4234"; Pattern pat = Pattern.compile(regex); Matcher mat =&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g7tfqiu92l">Capture Groups</a></li>
<li><a href="#mcetoc_1g7tfr24a2o">Not Capture Groups</a></li>
<li><a href="#mcetoc_1g7tfqiu92m">Named Capture Groups</a></li>
</ul>
</div>
<h2 id="mcetoc_1g7tfqiu92l">Capture Groups</h2>
<p><a href="https://www.finecloud.ch/einstieg-in-regex-mit-java.html" rel="nofollow">Im letzten Post</a> haben wir einen kleinen Einstieg in Regex mit Java gemacht. Nun sehen wir uns an, wie man Regex Pattern in Java mittels Capture Groups anwenden kann:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">        String regex = <span class="hljs-string" style="color: #6a8759;">"(1[-.\\s])?(\\d{3}[-.\\s]?)(\\d{3}[-.\\s]?)\\d{4}"</span>;
        String phoneNumber = <span class="hljs-string" style="color: #6a8759;">"12.523.231.4234"</span>;
        Pattern pat = Pattern.compile(regex);
        Matcher mat = pat.matcher(phoneNumber);

        <span class="hljs-keyword" style="color: #cc7832;">if</span> (mat.matches()){
            //System.out.format("entire String: %s\n", mat.group(0));
            System.out.format("Country Code: %s\n", mat.group(2));
            System.out.format("Area Code: %s\n", mat.group(4));
            System.out.format("Exchange Code: %s\n", mat.group(6));
            System.out.format("Line number Code: %s\n", mat.group(7));
        }</pre>
<p>Damit können wir nun die einzelnen Nummern-Teile extrahieren und separat behandeln:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">Country Code: 12
Area Code: 523
Exchange Code: 231
Line number Code: 4234</pre>
<h2 id="mcetoc_1g7tfr24a2o">Not Capture Groups</h2>
<p>Im Beispiel oben werden die Klammern fortlaufend nummeriert, jede Klammer wird von links nach rechts aufsteigend nummeriert, dabei werden auch die embeded Gruppen mitgezählt. Das hat den Nachteil das es etwas unübersichtlich wird, welche Nummer hat nun die Klammer in der Mitte. Dabei interessieren uns ja eigentlich immer nur die embeded Gruppen. Das können wir optimieren, indem wir bei den Klammern welche uns nicht interessieren ein '?:' direkt nach dem Öffnen der Klammer angeben. Das bedeutet dann soviel wir <em>not Capture Group</em>. Damit wird für die Klammern keine Gruppennummer vergeben:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">        String regex = <span class="hljs-string" style="color: #6a8759;">"(?:(\\d{1,2})[-.\\s])?(?:(\\d{3})[-.\\s]?)(?:(\\d{3})[-.\\s]?)(\\d{4})"</span>;
        String phoneNumber = <span class="hljs-string" style="color: #6a8759;">"12.523.231.4234"</span>;

        Pattern pat = Pattern.compile(regex);
        Matcher mat = pat.matcher(phoneNumber);

        <span class="hljs-keyword" style="color: #cc7832;">if</span> (mat.matches()){
            <span class="hljs-comment" style="color: grey;">//System.out.format("entire String: %s\n", mat.group(0));</span>
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Country Code: %s\n"</span>, mat.group(<span class="hljs-number" style="color: #6897bb;">1</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Area Code: %s\n"</span>, mat.group(<span class="hljs-number" style="color: #6897bb;">2</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Exchange Code: %s\n"</span>, mat.group(<span class="hljs-number" style="color: #6897bb;">3</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Line number Code: %s\n"</span>, mat.group(<span class="hljs-number" style="color: #6897bb;">4</span>));
        }</pre>
<h2 id="mcetoc_1g7tfqiu92m">Named Capture Groups</h2>
<p>Noch mehr Optimieren können wir das mit Named Capture Groups:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">        String regex = <span class="hljs-string" style="color: #6a8759;">"(?:(?&lt;countryCode&gt;\\d{1,2})[-.\\s])?(?:(?&lt;areaCode&gt;\\d{3})[-.\\s]?)(?:(?&lt;exchangeCode&gt;\\d{3})[-.\\s]?)(?&lt;lineNumber&gt;\\d{4})"</span>;
        String phoneNumber = <span class="hljs-string" style="color: #6a8759;">"12.523.231.4234"</span>;

        Pattern pat = Pattern.compile(regex);
        Matcher mat = pat.matcher(phoneNumber);

        <span class="hljs-keyword" style="color: #cc7832;">if</span> (mat.matches()){
            <span class="hljs-comment" style="color: grey;">//System.out.format("entire String: %s\n", mat.group(0));</span>
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Country Code: %s\n"</span>, mat.group(<span class="hljs-string" style="color: #6a8759;">"countryCode"</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Area Code: %s\n"</span>, mat.group(<span class="hljs-string" style="color: #6a8759;">"areaCode"</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Exchange Code: %s\n"</span>, mat.group(<span class="hljs-string" style="color: #6a8759;">"exchangeCode"</span>));
            System.out.format(<span class="hljs-string" style="color: #6a8759;">"Line number Code: %s\n"</span>, mat.group(<span class="hljs-string" style="color: #6a8759;">"lineNumber"</span>));
        }</pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Einstieg in Regex mit Java</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/einstieg-in-regex-mit-java.html"/>
        <id>https://www.finecloud.ch/einstieg-in-regex-mit-java.html</id>
            <category term="softwareentwicklung"/>
            <category term="regex"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-07-14T05:55:53+02:00</updated>
            <summary>
                <![CDATA[
                    Was ist Regex? Regex steht für Regular expressions und ist eine Technik, Technologie und Sprache an und für sich, die verwendet werden kann zum Ausdrücken von Textmustern mit Symbolen. Und diese Symbole sind selbst Text. Damit lassen wir verschiedene Textteile und Zeichen andere Textfolgen darstellen. In&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g7qsl72t8a">Was ist Regex?</a></li>
<li><a href="#mcetoc_1g7qsl72t8b">Einfaches Beispiel</a></li>
<li><a href="#mcetoc_1g7qsl72t8c">Negieren</a></li>
<li><a href="#mcetoc_1g7qsl72t8d">Anzahl Buchstaben</a></li>
<li><a href="#mcetoc_1g7tdih5q2e">Anzahl Zahlen</a></li>
<li><a href="#mcetoc_1g7tdih5q2f">Buchstaben und Zahlenfolge</a></li>
</ul>
</div>
<h2 id="mcetoc_1g7qsl72t8a">Was ist Regex?</h2>
<p>Regex steht für Regular expressions und  ist eine Technik, Technologie und Sprache an und für sich, die verwendet werden kann zum Ausdrücken von Textmustern mit Symbolen. Und diese Symbole sind selbst Text. Damit lassen wir verschiedene Textteile und Zeichen andere Textfolgen darstellen.</p>
<h2 id="mcetoc_1g7qsl72t8b">Einfaches Beispiel</h2>
<p>In Java kann Regex Beispielsweise bei Strings angewendet werden, dazu verwenden wir die Methode <em>String.matches. </em>Das einfachste Beispiel, ist wenn wir mit Regex in einem String nach einem String suchen:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"cat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"cat"</span>));
    }
}</pre>
<p>Der Output ist ein Boolean Wert, in diesem Fall <em>true. </em>Was aber wenn wir nun eines der beiden cat gross schreiben? Der Boolean wird <em>false</em> sein, ausser wir passen den Regex Pattern so an, dass er Gross- und Kleinbuchstaben berücksichtigt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"Cat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"[Cc]at"</span>));
    }
}
</pre>
<p>mit den eckigen Klammern [ ] kann eine OR Verknüpfung zwischen Zeichen definiert werden.</p>
<p>Wenn wir ein Pattern wollen, um zu prüfen ob das Wort mit einem Buchstaben von a bis f startet könnten wir entweder alle Buchstaben in der eckigen Klammer ausschreiben. Dafür gibt es glücklicherweise eine schönere Möglichkeit, wir können Ranges angeben:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"Fat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"[a-fA-F]at"</span>));
    }
}</pre>
<h2 id="mcetoc_1g7qsl72t8c">Negieren</h2>
<p>Was wenn wir einen Pattern wollen der prüft ob etwas <strong>nicht</strong> zutrifft. Zum Beispiel ob der Erste Buchstaben des Wortes nicht ein Buchstabe von a bis f ist:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"Fat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"[^a-fA-F]at"</span>));
    }
}</pre>
<p>Das Ergebnis ist nun <em>false</em>. Das Zeichen am Anfang nennt sich "Caret".</p>
<h2 id="mcetoc_1g7qsl72t8d">Anzahl Buchstaben</h2>
<p>Wenn wir nun ein Pattern suchen, der prüft ob unser String aus nur drei latinischen Buchstaben besteht: </p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"Fat"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\w\\w\\w"</span>));
    }
}</pre>
<p>Der reine Regex Pattern besteht nur aus einem \ (Backslash). Damit wir diesen in Java nutzen können, müssen wir jedoch den Backslash mit einem zweiten Backslash escapen, damit Java den Backslash nicht als Java, sondern als Regex Pattern erkennen kann.</p>
<p class="msg msg--highlight ">Der Regex-Pattern für Buchstaben (\w) wertet nicht nur Buchstaben von a bis z als Valid, sondern auch Zahlen und '_' (underscore).</p>
<h2 id="mcetoc_1g7tdih5q2e">Anzahl Zahlen</h2>
<p>Dasselbe geht auch, wenn wir einen Pattern für die Anzahl Zahlen definieren:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"521"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d\\d\\d"</span>));
    }
}</pre>
<h2 id="mcetoc_1g7tdih5q2f">Buchstaben und Zahlenfolge</h2>
<p>Was wenn wir nun eine Sammlung von Nummern auf das folgende Format prüfen müssen: <em>523-231-4444</em> (alle Zahlen sind erlaubt). Wir könnten dazu einfach aus Faulheit folgenden Pattern definieren:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523-231-4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\d\d\d-\d\d\d-\d\d\d\d"</span>));
    }
}</pre>
<p>Das ist ein Valider Pattern der die Problemstellung löst. Allerdings geht das schöner und einfacher mit dem Quantifier { }:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523-231-4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\d{3}-\d{3}-\d{4}"</span>));
    }
}</pre>
<p>Viel besser oder? Was wenn wir nun nicht nur die Bindestriche, sondern auch z.B. Punkte als Trennzeichen akzeptieren wollen? Dann können wir eine Or Verknüpfung machen anhand des oberen Beispiels:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523-231.4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\d{3}[-.]\d{3}[-.]\d{4}"</span>));
    }
}</pre>
<p>Was ist nun wenn wir Leerzeichen (523-231.4444) zwischen den Nummern als Valid behandeln wollen? Theoretisch können wir nun in der Or Verknüpfung (in den eckigen Klammern) einfach ein Leerzeichen einfügen. Das funktioniert, ist aber Optisch nicht ideal, da das Leerzeichen schnell übersehen wird. Expliziter geht das mit \s als Regex Zeichen für einen Leerschlag:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523 231.4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]\\d{3}[-.\\s]\\d{4}"</span>));
    }
}</pre>
<p>Wenn mehr als ein Leerschlag, Bindestrich oder Punkt erlaubt ist, kann hinter der "Or"-Klammer einfach ein Plus angefügt werden:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523 ..231  4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]+\\d{3}[-.\\s]+\\d{4}"</span>));
    }
}</pre>
<p>Was wenn keines, eines oder mehrere dieser "Or"-Verknüpften Zeichen erlaubt sein sollen? Wir verwenden '*' anstelle von '+':</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523231 .4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]*\\d{3}[-.\\s]*\\d{4}"</span>));
    }
}</pre>
<p>Was ist nun wenn wir genau nur eines oder keines dieser Zeichen erlauben wollen? Wir verwenden '?' anstelle von '*':</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523231-4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}"</span>));
    }
}</pre>
<p>Was, wenn wir in der letzten Zahlenfolge nur 3 oder 4 Zeichen erlauben wollen? </p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523231-4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{3,4}"</span>));
    }
}</pre>
<p>Wenn wir mindestens drei Stellen brauchen, aber es auch unbeschränkt mehr sein dürfen, können wir die zweite Zahl nach dem Komma einfach weglassen. Was wir weiter optimieren können ist, dass wir die Wiederholungen von Regex Statements zusammenfassen und nur einmal deklarieren. Dazu löschen wir eines der beiden "\d{3}[-.\s]?" Statements und setzen es im runde Klammern, gefolgt von Spitzen klammern, in der wir die Anzahl Wiederholungen angeben, in diesem Fall 2:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">RegexPractice</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">static</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">main</span><span class="hljs-params">(String[] args)</span> </span>{
        System.out.println(<span class="hljs-string" style="color: #6a8759;">"523 231 4444"</span>.matches(<span class="hljs-string" style="color: #6a8759;">"(\\d{3}[-.\\s]?){2}\\d{3,}"</span>));
    }
}</pre>
<p>Genial, oder?</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java Access-Modifier</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-access-modifier.html"/>
        <id>https://www.finecloud.ch/java-access-modifier.html</id>
            <category term="softwareentwicklung"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>
            <category term="access modifier"/>

        <updated>2022-07-10T06:31:08+02:00</updated>
            <summary>
                <![CDATA[
                    Sobald ein Feld sichtbar ist, bedeutet das auch, das es gelesen und beschrieben werden kann. Die Access-Modifier steuern, von wo auf Felder und Methoden eines Objekts zugegriffen werden kann: Modifier Wer darf zugreifen? public Auf public-Objekte/Felder und Methoden darf ohne Einschränkungen von überall aus zugegriffen&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Sobald ein Feld sichtbar ist, bedeutet das auch, das es gelesen und beschrieben werden kann. Die Access-Modifier steuern, von wo auf Felder und Methoden eines Objekts zugegriffen werden kann:</p>
<table style="border-collapse: collapse; width: 100%; height: 309.391px;" border="1">
<tbody>
<tr style="height: 50.3594px;">
<td style="width: 24.4301%; height: 50.3594px;"><strong>Modifier</strong></td>
<td style="width: 75.5699%; height: 50.3594px;"><strong>Wer darf zugreifen?</strong></td>
</tr>
<tr style="height: 107.953px;">
<td style="width: 24.4301%; height: 107.953px;">public</td>
<td style="width: 75.5699%; height: 107.953px;">Auf <em>public-Objekte/Felder und Methoden </em>darf ohne Einschränkungen von überall aus zugegriffen werden.</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 24.4301%; height: 50.3594px;">protected</td>
<td style="width: 75.5699%; height: 50.3594px;">Zugriff ist erlaubt für Klassen, die im gleichen Package liegen, sowie für Klassen, die von dieser Klasse erben.</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 24.4301%; height: 50.3594px;">- (nur Package)</td>
<td style="width: 75.5699%; height: 50.3594px;">Wenn keinen Access-Modifier definiert wird, dann ist das Feld oder die Methode für alle Klassen sichtbar, die im gleichen Package liegen.<br>Dies ist aber kein Schutz gegen Zugriffe von ausserhalb auf Ihre Klasse: Packages in Java sind offen, d. h. jeder kann eine weitere Klasse in Ihrem Package deklarieren und von dort auf diese Felder zugreifen.</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 24.4301%; height: 50.3594px;">private</td>
<td style="width: 75.5699%; height: 50.3594px;">Nur die Klasse selbst darf auf <em>private</em>-Felder zugreifen. Wie alle Access-Modifier wirkt auch <em>private</em> auf Klassenebene. Das bedeutet, dass ein Objekt auf <em>private</em>-Member eines anderen Objekts des gleichen Typs zugreifen kann.</td>
</tr>
</tbody>
</table>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java Namenskonventionen</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-namenskonventionen.html"/>
        <id>https://www.finecloud.ch/java-namenskonventionen.html</id>
            <category term="softwareentwicklung"/>
            <category term="java basics"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-07-09T15:53:17+02:00</updated>
            <summary>
                <![CDATA[
                    In diesem Blog fasse ich die Java Namenskonventionen kurz zusammen: Typ Namenskonvention Beispiele Class Sollte mit Grossbuchstaben beginnen und sollte ein Substantiv wie Farbe, Knopf, System, Faden usw. sein. Verwenden Sie geeignete Wörter anstelle von Akronymen. public class Employee { //code snippet } Interface Sollte&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In diesem Blog fasse ich die Java Namenskonventionen kurz zusammen:</p>
<table class="alt" style="border-collapse: collapse; border-color: #000000; border-style: solid; width: 100%; height: 1446.8px;" border="1">
<tbody>
<tr style="height: 79.1562px;">
<th style="width: 17.4037%; height: 79.1562px;"><strong>Typ</strong></th>
<th style="width: 55.3495%; height: 79.1562px;"><strong>Namenskonvention</strong></th>
<th style="width: 27.2468%; height: 79.1562px;"><strong>Beispiele</strong></th>
</tr>
<tr style="height: 165.547px;">
<td style="width: 17.4037%; height: 165.547px;">Class</td>
<td style="width: 55.3495%; height: 165.547px;">Sollte mit Grossbuchstaben beginnen und<br>sollte ein Substantiv wie Farbe, Knopf, System, Faden usw. sein. Verwenden Sie geeignete Wörter anstelle von Akronymen.</td>
<td style="width: 27.2468%; height: 165.547px;"><code>public class <strong>Employee</strong></code><br><code>{</code><br><code>//code snippet</code><br><code>}</code></td>
</tr>
<tr style="height: 165.547px;">
<td style="width: 17.4037%; height: 165.547px;">Interface</td>
<td style="width: 55.3495%; height: 165.547px;">Sollte mit dem Grossbuchstaben beginnen und sollte ein Adjektiv wie Runnable, Remote, ActionListener sein. Verwenden Sie geeignete Wörter anstelle von Akronymen.</td>
<td style="width: 27.2468%; height: 165.547px;"><code>interface <strong>Printable</strong>{//code snippet}</code></td>
</tr>
<tr style="height: 251.938px;">
<td style="width: 17.4037%; height: 251.938px;">Method</td>
<td style="width: 55.3495%; height: 251.938px;">Sollte mit Kleinbuchstaben beginnen und sollte ein Verb wie main(), print(), println() sein. Wenn der Name mehrere Wörter enthält, beginnen Sie ihn mit einem Kleinbuchstaben, gefolgt von einem Grossbuchstaben, z. B. actionPerformed().</td>
<td style="width: 27.2468%; height: 251.938px;"><code>class Employee</code><br><code>{</code><br><code>// method</code><br><code>void <strong>draw()</strong></code><br><code>{</code><br><code>//code snippet</code><br><code>}</code><br><code>}</code></td>
</tr>
<tr style="height: 338.328px;">
<td style="width: 17.4037%; height: 338.328px;">Variable</td>
<td style="width: 55.3495%; height: 338.328px;">Sollte mit einem Kleinbuchstaben beginnen, z. B. ID, Name und sollte nicht mit Sonderzeichen wie &amp; (kaufmännisches Und), $ (Dollar), _ (Unterstrich) beginnen. Wenn der Name mehrere Wörter enthält, beginnen Sie ihn mit dem Kleinbuchstaben, gefolgt von einem Grossbuchstaben, z. B. Vorname, Nachname. Vermeiden Sie die Verwendung von Ein-Zeichen-Variablen wie x, y, z.</td>
<td style="width: 27.2468%; height: 338.328px;"><code>class Employee</code><br><code>{</code><br><code>// variable</code><br><code>int <strong>id</strong>;</code><br><code>//code snippet</code><br><code>}</code></td>
</tr>
<tr style="height: 223.141px;">
<td style="width: 17.4037%; height: 223.141px;">Package</td>
<td style="width: 55.3495%; height: 223.141px;">Sollte ein Kleinbuchstabe sein, z. B. java, lang. Wenn der Name mehrere Wörter enthält, sollten sie durch Punkte (.) getrennt werden, z. B. java.util, java.lang.</td>
<td style="width: 27.2468%; height: 223.141px;"><code>//package</code><br><code>package <strong>com.javatpoint;</strong></code><br><code>class Employee</code><br><code>{</code><br><code>//code snippet</code><br><code>}</code></td>
</tr>
<tr style="height: 223.141px;">
<td style="width: 17.4037%; height: 223.141px;">Constant</td>
<td style="width: 55.3495%; height: 223.141px;">Sollte in Großbuchstaben wie ROT, GELB sein. Wenn der Name mehrere Wörter enthält, sollten sie durch einen Unterstrich (_) getrennt werden, z. B. MAX_PRIORITY.<br>Es darf Ziffern enthalten, jedoch nicht als erster Buchstabe.</td>
<td style="width: 27.2468%; height: 223.141px;"><code>class Employee</code><br><code>{</code><br><code>//constant</code><br><code>static final int <strong>MIN_AGE</strong> = 18;</code><br><code>//code snippet</code><br><code>}</code></td>
</tr>
</tbody>
</table>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Unterschiede zwischen Proxmox Containers und Docker</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/unterschiede-zwischen-proxmox-containers-und-docker.html"/>
        <id>https://www.finecloud.ch/unterschiede-zwischen-proxmox-containers-und-docker.html</id>
            <category term="virtualisierung"/>
            <category term="proxmox"/>
            <category term="lxc"/>
            <category term="linux"/>
            <category term="kvm"/>
            <category term="docker"/>
            <category term="container"/>

        <updated>2022-07-08T16:43:37+02:00</updated>
            <summary>
                <![CDATA[
                    LXC LXC ist ein Userspace Interface zur Eindämmung des Linux-Kernels und kann verwendet werden für Systemvirtualisierung. Durch eine mächtige API und einfache Tools ermöglicht es Linux Benutzern einfache Erstellung und Verwaltung von System Container. LXC ermöglicht ein komplettes OS in einem Container zu betreiben. LXD&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g7f40muo25">LXC</a></li>
<li><a href="#mcetoc_1g7f40muo26">LXD</a></li>
<li><a href="#mcetoc_1g7f40muo27">Proxmox Containers</a></li>
<li><a href="#mcetoc_1g7f40muo28">Docker</a></li>
</ul>
</div>
<h2 id="mcetoc_1g7f40muo25">LXC</h2>
<p>LXC ist ein Userspace Interface zur Eindämmung des Linux-Kernels und kann verwendet werden für Systemvirtualisierung. Durch eine mächtige API und einfache Tools ermöglicht es Linux Benutzern einfache Erstellung und Verwaltung von System Container. LXC ermöglicht ein komplettes OS in einem Container zu betreiben.</p>
<h2 id="mcetoc_1g7f40muo26">LXD</h2>
<p>LXD ist auf LXC Aufgebaut und bietet neue und bessere Benutzererfahrung. Unter der Haube verwendet LXD LXC durch liblxc und dessen Go binding für das Erstellen und Verwalten von Container. Es ist im Grunde eine Alternative zu den Tools und dem Verteilungsvorlagensystem von LXC mit den zusätzlichen Funktionen, die sich aus der Steuerbarkeit über das Netzwerk ergeben.</p>
<h2 id="mcetoc_1g7f40muo27">Proxmox Containers</h2>
<p>Als Proxmox Container werden Container bezeichnet, die mit dem Proxmox Container Toolkit (pct) erstellt und verwaltet werden. Sie zielen auch auf die Systemvirtualisierung ab und verwenden LXC als Grundlage des Containerangebots. Das Proxmox Container Toolkit (pct) ist eng mit Proxmox VE gekoppelt. Das bedeutet, dass es Cluster-Setups kennt und dieselben Netzwerk- und Speicherressourcen wie virtuelle QEMU-Maschinen (VMs) verwenden kann. Sie können sogar die Proxmox VE-Firewall verwenden, Backups erstellen und wiederherstellen oder Container mit dem HA-Framework verwalten. Mit der Proxmox VE API lässt sich alles über das Netzwerk steuern.</p>
<h2 id="mcetoc_1g7f40muo28">Docker</h2>
<p>Docker zielt darauf ab, eine einzelne Anwendung in einer isolierten, in sich geschlossenen Umgebung zu laufen. Diese werden im Allgemeinen als „Anwendungscontainer“ und nicht als „Systemcontainer“ bezeichnet. Sie verwalten eine Docker-Instanz über den Host mithilfe der Docker Engine-Befehlszeilenschnittstelle. Es wird nicht empfohlen, Docker direkt auf Ihrem Proxmox VE-Host auszuführen. <strong>Wenn man also einen Anwendungscontainer ausführen möchte mit z.B. Docker-Images, sollte man diese am besten in einer Proxmox Qemu-VM ausführen.</strong></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Citrix ADC (NetScaler) Backup mit Ansible</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/citrix-adc-backup-mit-ansible.html"/>
        <id>https://www.finecloud.ch/citrix-adc-backup-mit-ansible.html</id>
            <category term="tools"/>
            <category term="ssh"/>
            <category term="infrastructure as code"/>
            <category term="iac"/>
            <category term="citrix netscaler"/>
            <category term="citrix adc"/>
            <category term="ansible"/>

        <updated>2022-07-08T16:13:45+02:00</updated>
            <summary>
                <![CDATA[
                    Beschreibung Citrix ADC, bis vor einer Weile noch als Citrix NetScaler bekannt ist eine Netzwerk Appliance welche als Access Gateway und Proxy verwendet werden kann. In diesem Artikel werden wir ein kleines Ansible Playbook schreiben, mit welchem man einen Citrix ADC sichern kann. Als erster&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g7f244jrl8">Beschreibung</a></li>
<li><a href="#mcetoc_1g7f244jrl9">Ansible Config</a></li>
<li><a href="#mcetoc_1g7f244jrla">Inventar</a></li>
<li><a href="#mcetoc_1g7f244jrlb">Playbook</a></li>
<li><a href="#mcetoc_1g7f244jrlc">Rolle citrix_adc</a></li>
<li><a href="#mcetoc_1g7f244jrld">Secrets</a></li>
<li><a href="#mcetoc_1g7f244jrle">Run</a></li>
</ul>
</div>
<h2 id="mcetoc_1g7f244jrl8">Beschreibung</h2>
<p>Citrix ADC, bis vor einer Weile noch als Citrix NetScaler bekannt ist eine Netzwerk Appliance welche als Access Gateway und Proxy verwendet werden kann. In diesem Artikel werden wir ein kleines Ansible Playbook schreiben, mit welchem man einen Citrix ADC sichern kann.</p>
<h2 id="mcetoc_1g7f244jrl9">Ansible Config</h2>
<p>Als erster Schritt definieren wir die Ansible Konfiguration: <code>ansible.cfg</code></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-section" style="color: #ffc66d;">[defaults]</span>
<span class="hljs-attr">interpreter_python</span>=auto_silent
<span class="hljs-section" style="color: #ffc66d;">
[ssh_connection]</span>
<span class="hljs-comment" style="color: grey;"># allows new host keys once</span>
<span class="hljs-attr">ssh_args</span> = -o StrictHostKeyChecking=accept-new</pre>
<p>Dabei ist wichtig das du deine Secrets mit dem <span class="hljs-attr"><code>vault_password_file</code> verschlüsselst.</span></p>
<h2 id="mcetoc_1g7f244jrla">Inventar</h2>
<p>Nun erstellen wir uns eine Datei <code>inventory.yaml </code>mit dem folgenden Inhalt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-meta" style="color: #bbb529;">---</span>
<span class="hljs-comment" style="color: grey;"># yamllint disable rule:line-length</span>

<span class="hljs-attr">all:</span>
<span class="hljs-attr">  hosts:</span>
<span class="hljs-attr">  children:</span>
<span class="hljs-attr">    citrix_adc:</span>
<span class="hljs-attr">      hosts:</span>
        netscaler01
        netscaler02</pre>
<p>die Hosts müssen dabei natürlich den FQDN Namen deiner ADCs entsprechen.</p>
<h2 id="mcetoc_1g7f244jrlb">Playbook</h2>
<p>Auch das Playbook selbst ist nicht sehr spannend, von hier aus werden wir dann die Rolle mit dem eigentlich spannenden Inhalt anstossen: <code>playbook.yaml</code></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-meta" style="color: #bbb529;">---</span>

<span class="hljs-attr">- hosts:</span> citrix_adc
<span class="hljs-attr">  gather_facts:</span> <span class="hljs-literal" style="color: #6897bb;">false</span>
<span class="hljs-attr">  roles:</span>
<span class="hljs-bullet" style="color: #6897bb;">    -</span> citrix_adc</pre>
<h2 id="mcetoc_1g7f244jrlc">Rolle citrix_adc</h2>
<p>Nun kommt der Spannende Inhalt, wir erstellen nun folgende Ordnerstruktur und main.yaml Dateien:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">└── roles
    └── citrix_adc
        ├── tasks
        │   └── main.yaml
        └── vars
            └── main.yaml</pre>
<p>der Inhalt der <code>task/main.yaml</code> Datei ist wiefolgt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-meta" style="color: #bbb529;">---</span>
<span class="hljs-comment" style="color: grey;"># yamllint disable rule:line-length</span>

<span class="hljs-attr">- name:</span> Delete all old backups from local
<span class="hljs-attr">  delegate_to:</span> localhost
<span class="hljs-attr">  file:</span>
<span class="hljs-attr">    path:</span> <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-template-variable" style="color: #629755;">{{ dest_path }}</span>/<span class="hljs-template-variable" style="color: #629755;">{{ inventory_hostname }}</span>"</span>
<span class="hljs-attr">    state:</span> absent

<span class="hljs-attr">- name:</span> Generate new Citrix ADC system backup
<span class="hljs-attr">  delegate_to:</span> localhost
<span class="hljs-attr">  command:</span> ssh -l backuper {{ inventory_hostname }} <span class="hljs-string" style="color: #6a8759;">"create system backup -level full <span class="hljs-template-variable" style="color: #629755;">{{ backup_file }}</span>"</span>
<span class="hljs-attr">  register:</span> command_result
<span class="hljs-attr">  failed_when:</span> <span class="hljs-string" style="color: #6a8759;">"'Resource already exists' in command_result.stdout"</span>

<span class="hljs-attr">- name:</span> Create new empty directory
<span class="hljs-attr">  delegate_to:</span> localhost
<span class="hljs-attr">  file:</span>
<span class="hljs-attr">    path:</span> <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-template-variable" style="color: #629755;">{{ dest_path }}</span>/<span class="hljs-template-variable" style="color: #629755;">{{ inventory_hostname }}</span>"</span>
<span class="hljs-attr">    state:</span> directory
<span class="hljs-attr">    mode:</span> <span class="hljs-string" style="color: #6a8759;">'0755'</span>

<span class="hljs-attr">- name:</span> Download backup file from Citrix ADC to local folder
<span class="hljs-attr">  delegate_to:</span> localhost
<span class="hljs-attr">  command:</span> /bin/scp backuper@{{ inventory_hostname }}:/var/ns_sys_backup/{{ backup_file }}.tgz {{ dest_path }}/{{ inventory_hostname }}/{{ backup_file }}.tgz

<span class="hljs-attr">- name:</span> delete backup from ADC
<span class="hljs-attr">  delegate_to:</span> localhost
<span class="hljs-attr">  command:</span> ssh -l backuper {{ inventory_hostname }} <span class="hljs-string" style="color: #6a8759;">"rm backup <span class="hljs-template-variable" style="color: #629755;">{{ backup_file }}</span>.tgz"</span></pre>
<p>der Inhalt der <code>vars/main.yaml</code> Datei ist wiefolgt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-meta" style="color: #bbb529;">---</span>
<span class="hljs-comment" style="color: grey;"># yamllint disable rule:line-length</span>

<span class="hljs-attr">dest_path:</span> <span class="hljs-string" style="color: #6a8759;">"/var/git/ndcb-data"</span>
<span class="hljs-attr">backup_file:</span> <span class="hljs-string" style="color: #6a8759;">"backup_full_<span class="hljs-template-variable" style="color: #629755;">{{ inventory_hostname }}</span>_<span class="hljs-template-variable" style="color: #629755;">{{ lookup('pipe','date +%Y-%m-%d-%H') }}</span>"<br></span></pre>
<h2 id="mcetoc_1g7f244jrld">Secrets</h2>
<p>Was noch fehlt sind die Secrets. Wir werden jedoch in diesem Fall gar keine Secrets verwenden, sondern direkt mit SSH-Key Authentifizieren. Dazu mussst du auf deinem Gerät einen neues SSH-Key Pair generieren und anschliessend wie folgt auf den Citrix ADCs als <em>authorized keys</em> erlauben:</p>
<ol>
<li>Auf ADCs einloggen und unter diesem Pfad dein PublicKey eintragen: /nsconfig/ssh/authorized_keys :
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">ssh-rsa AAAAB3NzaC1.....</pre>
</li>
<li>Anschliessend kannst du den Citrix ADC Host neustarten (z.b. wenn er nur im Seconday Mode ist), noch einfacher ist, wenn du einfach den sshd Service neustartest, was auf dem Citrix ADC relativ brachial ist:
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-built_in">kill</span> -HUP `cat /var/run/sshd.pid`</pre>
</li>
</ol>
<h2 id="mcetoc_1g7f244jrle">Run</h2>
<p>Das Playbook kann nun wiefolgt ausgeführt werden:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">ansible-playbook playbook.yaml -i inventory.yaml</pre>
<p> </p>
            ]]>
        </content>
    </entry>
</feed>
