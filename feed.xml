<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Finecloud</title>
    <link href="https://www.finecloud.ch/feed.xml" rel="self" />
    <link href="https://www.finecloud.ch" />
    <updated>2023-05-05T19:16:26+02:00</updated>
    <author>
        <name>Finecloud</name>
    </author>
    <id>https://www.finecloud.ch</id>

    <entry>
        <title>Spring Boot on Kubernetes</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/spring-boot-on-kubernetes.html"/>
        <id>https://www.finecloud.ch/spring-boot-on-kubernetes.html</id>
            <category term="spring-framework"/>
            <category term="spring"/>
            <category term="software development"/>
            <category term="kubernetes"/>
            <category term="java"/>
            <category term="docker"/>
            <category term="dev"/>
            <category term="container"/>

        <updated>2023-05-05T19:16:26+02:00</updated>
            <summary>
                <![CDATA[
                    Enable Kubernetes in Docker Desktop We will use Docker Desktop to provide us a Test Kubernetes Environment. Open Docker Desktop Settings, go to Tab "Kubernetes". Select "Enable Kubernetes", then "Apply &amp; Restart". Now you should be able to see docker-desktop listed, if you run kubectl&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gvimt7cd1et">Enable Kubernetes in Docker Desktop</a></li>
<li><a href="#mcetoc_1gvimt7cd1eu">Create Deployment</a></li>
<li><a href="#mcetoc_1gvimt7cd1ev">Create Service</a></li>
<li><a href="#mcetoc_1gvimt7cd1f0">Port Forwarding</a></li>
</ul>
</div>
<h2 id="mcetoc_1gvimt7cd1et">Enable Kubernetes in Docker Desktop</h2>
<p>We will use Docker Desktop to provide us a Test Kubernetes Environment.</p>
<p>Open Docker Desktop Settings, go to Tab "Kubernetes". Select "Enable Kubernetes", then "Apply &amp; Restart".</p>
<p>Now you should be able to see docker-desktop listed, if you run <code>kubectl get nodes</code></p>
<h2 id="mcetoc_1gvimt7cd1eu">Create Deployment</h2>
<p>We will use the Docker Image we created in the last Post. Instead of directly deploying the Application we want to create a deployment.yml file:</p>
<p><code>kubectl create deployment myapp --image name/myapp --dry-run=client -o=yaml &gt; deployment.yml</code></p>
<p>the content looks like this:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attr">apiVersion:</span> apps/v1
<span class="hljs-attr">kind:</span> Deployment
<span class="hljs-attr">metadata:</span>
<span class="hljs-attr">  creationTimestamp:</span> <span class="hljs-literal" style="color: #6897bb;">null</span>
<span class="hljs-attr">  labels:</span>
<span class="hljs-attr">    app:</span> myapp
<span class="hljs-attr">  name:</span> myapp
<span class="hljs-attr">spec:</span>
<span class="hljs-attr">  replicas:</span> <span class="hljs-number" style="color: #6897bb;">1</span>
<span class="hljs-attr">  selector:</span>
<span class="hljs-attr">    matchLabels:</span>
<span class="hljs-attr">      app:</span> myapp
<span class="hljs-attr">  strategy:</span> {}
<span class="hljs-attr">  template:</span>
<span class="hljs-attr">    metadata:</span>
<span class="hljs-attr">      creationTimestamp:</span> <span class="hljs-literal" style="color: #6897bb;">null</span>
<span class="hljs-attr">      labels:</span>
<span class="hljs-attr">        app:</span> myapp
<span class="hljs-attr">    spec:</span>
<span class="hljs-attr">      containers:</span>
<span class="hljs-attr">      - image:</span> name/myapp
<span class="hljs-attr">        name:</span> myapp
<span class="hljs-attr">        resources:</span> {}
<span class="hljs-attr">status:</span> {}</pre>
<p>now we can apply this deployment with: <code>kubectl apply -f deployment.yml</code></p>
<h2 id="mcetoc_1gvimt7cd1ev">Create Service</h2>
<p>With the command </p>
<p><code>kubectl create service clusterip myapp --tcp=8080:8080 --dry-run=client -o=yaml &gt; service.yml</code></p>
<p>we can create the service definition file. And then apply it with: </p>
<p><code>kubectl apply -f service.yml</code></p>
<p>the content of the file:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attr">apiVersion:</span> v1
<span class="hljs-attr">kind:</span> Service
<span class="hljs-attr">metadata:</span>
<span class="hljs-attr">  creationTimestamp:</span> <span class="hljs-literal" style="color: #6897bb;">null</span>
<span class="hljs-attr">  labels:</span>
<span class="hljs-attr">    app:</span> myapp
<span class="hljs-attr">  name:</span> myapp
<span class="hljs-attr">spec:</span>
<span class="hljs-attr">  ports:</span>
<span class="hljs-attr">  - name:</span> <span class="hljs-number" style="color: #6897bb;">8080</span><span class="hljs-bullet" style="color: #6897bb;">-8080</span>
<span class="hljs-attr">    port:</span> <span class="hljs-number" style="color: #6897bb;">8080</span>
<span class="hljs-attr">    protocol:</span> TCP
<span class="hljs-attr">    targetPort:</span> <span class="hljs-number" style="color: #6897bb;">8080</span>
<span class="hljs-attr">  selector:</span>
<span class="hljs-attr">    app:</span> myapp
<span class="hljs-attr">  type:</span> ClusterIP
<span class="hljs-attr">status:</span>
<span class="hljs-attr">  loadBalancer:</span> {}</pre>
<p>with <code>kubectl get all</code> we can now see that the service has been created.</p>
<h2 id="mcetoc_1gvimt7cd1f0">Port Forwarding</h2>
<p>To be able to access the App, we need to create a Port Forwarding like so:</p>
<ol>
<li>get your local ip address, e.g.: <code>ipconfig getifaddr en0</code></li>
<li>configure port forwarding with: <code>kubectl port-forward service/myapp 8080:8080</code></li>
<li>Check if it works with: <code>curl localhost:8080/actuator/health</code></li>
<li>this should return: <code>{"status":"UP","groups":["liveness","readiness"]}</code></li>
</ol>
<h2>Terminate Service and Deployment</h2>
<p>If you want to stop a Service or a Deployment you can use these cmds:</p>
<p><code>kubectl delete service myapp</code></p>
<p><code>kubectl delete deployment myapp</code></p>
<h2>Exposing Services</h2>
<p>If you want to expose a Service permanent and not only with Port Forwarding you can go with this: </p>
<ol>
<li>Replace <em><span class="hljs-attr">type:</span> ClusterIP </em>in the service.yml file with <em><span class="hljs-attr">type:</span> NodePort</em></li>
<li>Reapply the deployment and service</li>
<li>Check what dynamic Port the service has been exposed on: <code>kubectl get all</code></li>
<li>Check access with curl: <code>curl localhost:31610/actuator/health</code></li>
</ol>
<h2>Accessing Logs</h2>
<p>One option is to check the logs on the docker containers directly with:</p>
<ol>
<li>docker ps -a</li>
<li>docker logs -f &lt;containername&gt;</li>
</ol>
<p>but in a Kubernetes context you probably cant access the docker logs directly, or docker is not used at all, thats why you need to go with this:</p>
<ol>
<li>kubectl get all</li>
<li>kubectl logs -f &lt;podname&gt;</li>
</ol>
<h2>Setting Environment Variables</h2>
<p>Example use case: overwrite log levels.</p>
<ol>
<li>Change your deployment.yml and add the env part to it:</li>
<li>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attr">apiVersion:</span> apps/v1
<span class="hljs-attr">kind:</span> Deployment
<span class="hljs-attr">metadata:</span>
<span class="hljs-attr">  creationTimestamp:</span> <span class="hljs-literal" style="color: #6897bb;">null</span>
<span class="hljs-attr">  labels:</span>
<span class="hljs-attr">    app:</span> myapp
<span class="hljs-attr">  name:</span> myapp
<span class="hljs-attr">spec:</span>
<span class="hljs-attr">  replicas:</span> <span class="hljs-number" style="color: #6897bb;">1</span>
<span class="hljs-attr">  selector:</span>
<span class="hljs-attr">    matchLabels:</span>
<span class="hljs-attr">      app:</span> myapp
<span class="hljs-attr">  strategy:</span> {}
<span class="hljs-attr">  template:</span>
<span class="hljs-attr">    metadata:</span>
<span class="hljs-attr">      creationTimestamp:</span> <span class="hljs-literal" style="color: #6897bb;">null</span>
<span class="hljs-attr">      labels:</span>
<span class="hljs-attr">        app:</span> myapp
<span class="hljs-attr">    spec:</span>
<span class="hljs-attr">      containers:</span>
<span class="hljs-attr">      - image:</span> jhyyhpp/kbe-rest-brewery
<span class="hljs-attr">        name:</span> kbe-rest-brewery
<span class="hljs-attr">        resources:</span> {}
<span class="hljs-attr">        env:</span>
<span class="hljs-attr">        - name:</span> LOGGING_LEVEL_MYAPP
<span class="hljs-attr">          value:</span> INFO
<span class="hljs-attr">status:</span> {}
</pre>
</li>
<li>kubectl apply -f deployment.yml</li>
<li>kubectl get all</li>
<li>kubectl logs -f &lt;podname&gt;</li>
</ol>
<h2>Readiness Probe</h2>
<div class="flex flex-grow flex-col gap-3">
<div class="min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap break-words">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>A readiness probe is an essential feature in Kubernetes that ensures the proper functioning of a deployed application. Here are some reasons why you should use a readiness probe:</p>
<ol>
<li>
<p>Prevents traffic to unhealthy pods: Kubernetes uses readiness probes to determine if a pod is ready to receive traffic or not. If a pod is not ready, Kubernetes will not route traffic to that pod. This ensures that traffic is only sent to healthy pods, preventing downtime and improving the overall availability of the application.</p>
</li>
<li>
<p>Allows for graceful scaling: When new pods are added to a deployment or replica set, Kubernetes uses readiness probes to determine when the new pods are ready to receive traffic. This allows for a more graceful scaling experience, as traffic is only routed to new pods once they are ready to handle it.</p>
</li>
<li>
<p>Helps with rolling updates: Kubernetes uses readiness probes to determine when a new version of an application is ready to receive traffic. This allows for rolling updates to be performed without causing downtime or disruption to users.</p>
</li>
<li>
<p>Provides insight into application health: Readiness probes can be used to provide insight into the health of an application. By monitoring the results of readiness probes, you can determine if your application is healthy and identify any issues that need to be addressed.</p>
</li>
</ol>
<p>Overall, readiness probes are a crucial feature in Kubernetes that help ensure the proper functioning of your application and improve its availability.</p>
</div>
</div>
</div>
<h2>Liveness Probe</h2>
<div class="flex flex-grow flex-col gap-3">
<div class="min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap break-words">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>A liveness probe is another important feature in Kubernetes that ensures the health of a deployed application. Here are some reasons why you should use a liveness probe:</p>
<ol>
<li>
<p>Restarts unhealthy pods: Kubernetes uses liveness probes to determine if a pod is healthy or not. If a pod fails the liveness probe, Kubernetes will automatically restart the pod, ensuring that the application remains available.</p>
</li>
<li>
<p>Prevents failed requests: Liveness probes help prevent failed requests by ensuring that only healthy pods are serving traffic. If a pod is not healthy, Kubernetes will not route traffic to that pod, preventing failed requests and improving the overall availability of the application.</p>
</li>
<li>
<p>Identifies application failures: Liveness probes can be used to identify application failures and help diagnose issues. By monitoring the results of liveness probes, you can determine if your application is healthy and identify any issues that need to be addressed.</p>
</li>
<li>
<p>Supports self-healing: By automatically restarting unhealthy pods, liveness probes support self-healing in Kubernetes. This ensures that your application remains available even in the face of failures.</p>
</li>
</ol>
<p>Overall, liveness probes are a crucial feature in Kubernetes that help ensure the health of your application and improve its availability. By using liveness probes, you can ensure that your application remains available, even in the face of failures, and identify and address any issues that may arise.</p>
<p>To add the readiness and liveness probles we need to add the following content to our deployment.yml file:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attr">apiVersion:</span> apps/v1
<span class="hljs-attr">kind:</span> Deployment
<span class="hljs-attr">metadata:</span>
<span class="hljs-attr">  creationTimestamp:</span> <span class="hljs-literal" style="color: #6897bb;">null</span>
<span class="hljs-attr">  labels:</span>
<span class="hljs-attr">    app:</span> myapp
<span class="hljs-attr">  name:</span> myapp
<span class="hljs-attr">spec:</span>
<span class="hljs-attr">  replicas:</span> <span class="hljs-number" style="color: #6897bb;">1</span>
<span class="hljs-attr">  selector:</span>
<span class="hljs-attr">    matchLabels:</span>
<span class="hljs-attr">      app:</span> myapp
<span class="hljs-attr">  strategy:</span> {}
<span class="hljs-attr">  template:</span>
<span class="hljs-attr">    metadata:</span>
<span class="hljs-attr">      creationTimestamp:</span> <span class="hljs-literal" style="color: #6897bb;">null</span>
<span class="hljs-attr">      labels:</span>
<span class="hljs-attr">        app:</span> myapp
<span class="hljs-attr">    spec:</span>
<span class="hljs-attr">      containers:</span>
<span class="hljs-attr">      - image:</span> jhyyhpp/kbe-rest-brewery
<span class="hljs-attr">        name:</span> kbe-rest-brewery
<span class="hljs-attr">        resources:</span> {}
<span class="hljs-attr">        env:</span>
<span class="hljs-attr">        - name:</span> LOGGING_LEVEL_CH_FINECLOUD_SFGRESTBREWERY
<span class="hljs-attr">          value:</span> INFO
<span class="hljs-attr">        - name:</span> MANAGEMENT_ENDPOINTS_HEALTH_PROBES_ENABLED
<span class="hljs-attr">          value:</span> <span class="hljs-string" style="color: #6a8759;">"true"</span>
<span class="hljs-attr">        - name:</span> MANAGEMENT_HEALTH_READINESSSTATE_ENABLED
<span class="hljs-attr">          value:</span> <span class="hljs-string" style="color: #6a8759;">"true"</span>
<span class="hljs-attr">        - name:</span> MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED
<span class="hljs-attr">          value:</span> <span class="hljs-string" style="color: #6a8759;">"true"</span>
<span class="hljs-attr">        livenessProbe:</span>
<span class="hljs-attr">            httpGet:</span>
<span class="hljs-attr">                path:</span> /actuator/health/liveness
<span class="hljs-attr">                port:</span> <span class="hljs-number" style="color: #6897bb;">8080</span>
<span class="hljs-attr">        readinessProbe:</span>
<span class="hljs-attr">          httpGet:</span>
<span class="hljs-attr">            path:</span> /actuator/health/readiness
<span class="hljs-attr">            port:</span> <span class="hljs-number" style="color: #6897bb;">8080</span>
<span class="hljs-attr">status:</span> {}
</pre>
</div>
</div>
</div>
<h2>Graceful Shutdown</h2>
<div class="flex flex-grow flex-col gap-3">
<div class="min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap break-words">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>Graceful shutdown is an important feature to consider when deploying an application on Kubernetes. Here are some reasons why you should use a graceful shutdown:</p>
<ol>
<li>
<p>Minimizes downtime: Graceful shutdown allows your application to shut down in a controlled manner, ensuring that any in-flight requests are completed before the application is terminated. This helps to minimize downtime and improve the overall availability of the application.</p>
</li>
<li>
<p>Avoids data loss: During a graceful shutdown, your application has the opportunity to save any data that needs to be persisted before shutting down. This helps to avoid data loss and ensures that your application can be restarted without losing any important data.</p>
</li>
<li>
<p>Prevents disruption to users: A graceful shutdown ensures that your application is shut down in a way that is transparent to users. By completing any in-flight requests and avoiding abrupt terminations, you can prevent disruption to users and provide a better user experience.</p>
</li>
<li>
<p>Supports scaling: When scaling down your application, a graceful shutdown ensures that any remaining requests are completed before the pod is terminated. This allows for more efficient scaling and helps to prevent any lost or interrupted requests.</p>
</li>
</ol>
<p>Overall, a graceful shutdown is an important feature to consider when deploying an application on Kubernetes. It helps to minimize downtime, avoid data loss, prevent disruption to users, and support efficient scaling. By using a graceful shutdown, you can ensure that your application is shut down in a way that is safe, controlled, and reliable.</p>
</div>
</div>
</div>
<p>To configure graceful shutdown we need to add the following content to our deployment.yml file:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attr">        - name:</span> SERVER_SHUTDOWN
<span class="hljs-attr">          value:</span> <span class="hljs-string" style="color: #6a8759;">"graceful"</span>
<span class="hljs-attr">        lifecycle:</span>
<span class="hljs-attr">          preStop:</span>
<span class="hljs-attr">            exec:</span>
<span class="hljs-attr">              command:</span> [<span class="hljs-string" style="color: #6a8759;">"/bin/sh"</span>, <span class="hljs-string" style="color: #6a8759;">"-c"</span>, <span class="hljs-string" style="color: #6a8759;">"sleep 10"</span>]</pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Building Spring Boot Docker Images</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/building-spring-boot-docker-images.html"/>
        <id>https://www.finecloud.ch/building-spring-boot-docker-images.html</id>
            <category term="spring-framework"/>
            <category term="spring"/>
            <category term="software development"/>
            <category term="java"/>
            <category term="docker"/>
            <category term="dev"/>
            <category term="container"/>

        <updated>2023-05-03T20:34:47+02:00</updated>
            <summary>
                <![CDATA[
                    Pre-Requirements Developer Environment ready with Docker, JDK, IDE A Java Spring Boot Project with a h2 in-memory DB Docker Hub account Create Docker File Create a Dockerfile with the following content: FROM openjdk:11-jre-slim ENV JAVA_OPTS " -Xms512m -Xmx512m -Djava.security.egd=file:///dev/./urandom" WORKDIR application COPY target/myapp-0.0.1-SNAPSHOT.jar ./ ENTRYPOINT&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gvhe7lit17h">Pre-Requirements</a></li>
<li><a href="#mcetoc_1gvhe7lit17i">Create Docker File</a></li>
<li><a href="#mcetoc_1gvhe7lit17j">Build and Run the Docker Image</a></li>
<li><a href="#mcetoc_1gvhe7lit17k">Add Layer Tool in Maven</a></li>
<li><a href="#mcetoc_1gvhe7lit17l">Enable Multi-Stage Dockerfile</a></li>
<li><a href="#mcetoc_1gvhe7lit17m">Build the Docker Image with Maven</a></li>
<li><a href="#mcetoc_1gvhe7lit17n">Push your Docker Image to Docker Hub</a></li>
</ul>
</div>
<h2 id="mcetoc_1gvhe7lit17h">Pre-Requirements</h2>
<ul>
<li>Developer Environment ready with Docker, JDK, IDE</li>
<li>A Java Spring Boot Project with a h2 in-memory DB</li>
<li>Docker Hub account</li>
</ul>
<h2 id="mcetoc_1gvhe7lit17i">Create Docker File</h2>
<p>Create a Dockerfile with the following content:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">FROM</span> openjdk:<span class="hljs-number" style="color: #6897bb;">11</span>-jre-slim
<span class="hljs-keyword" style="color: #cc7832;">ENV</span> JAVA_OPTS <span class="hljs-string" style="color: #6a8759;">" -Xms512m -Xmx512m -Djava.security.egd=file:///dev/./urandom"</span>
WORKDIR application
<span class="hljs-keyword" style="color: #cc7832;">COPY</span> <span class="bash">target/myapp-0.0.1-SNAPSHOT.jar ./
</span><span class="hljs-keyword" style="color: #cc7832;">ENTRYPOINT</span> <span class="bash">[<span class="hljs-string" style="color: #6a8759;">"java"</span>, <span class="hljs-string" style="color: #6a8759;">"-jar"</span>, <span class="hljs-string" style="color: #6a8759;">"myapp-0.0.1-SNAPSHOT.jar"</span>]</span></pre>
<div>make sure the Paths where the .jar files are stored matches with your environment.</div>
<h2 id="mcetoc_1gvhe7lit17j">Build and Run the Docker Image</h2>
<p>Build the image with this command:</p>
<p><code><span class="blob-code-inner blob-code-marker js-code-nav-pass " data-code-marker="+"><span class="pl-c1">docker build -f ./src/main/Dockerfile -t myapp .</span></span></code></p>
<p>Run the image with this command:</p>
<p><code><span class="blob-code-inner blob-code-marker js-code-nav-pass " data-code-marker="+"><span class="pl-c1">docker run -p 8080:8080 -d myapp</span></span></code></p>
<p>The Spring Application-Context should now be loaded and started inside the Container. You can verify this with the <code>docker ps -a</code> and <code>docker logs -f &lt;containername&gt;</code> commands.</p>
<h2 id="mcetoc_1gvhe7lit17k">Add Layer Tool in Maven</h2>
<p>Make sure that you have enabled the Layer Tool with having this content in the pom.xml file:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;">            <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">plugin</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">configuration</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">layers</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">enabled</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">includeLayerTools</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">includeLayerTools</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">layers</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">excludes</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">exclude</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>
                        <span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">exclude</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">excludes</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">configuration</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">plugin</span>&gt;</span></pre>
<div class="flex flex-grow flex-col gap-3">
<div class="min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap break-words">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>Enabling the layer tool in a Java Spring project that runs in a Docker container can help reduce the size of the Docker image, which can be especially important in a production environment. The layer tool feature allows the Spring Boot application to be broken down into layers, where each layer contains a subset of the application's dependencies and resources. This makes it possible to separate the application's core functionality from its dependencies, such as external libraries and resources.</p>
<p>By separating the application's dependencies into separate layers, Docker can cache each layer independently, making it easier to reuse existing layers when building new Docker images. This can significantly reduce the amount of time it takes to build and deploy new versions of the application.</p>
<p>Enabling the layer tool also allows you to take advantage of other features, such as layer analysis, which can help you optimize your Docker image even further by identifying potential areas for improvement.</p>
<p>In summary, enabling the layer tool in a Java Spring project that runs in a Docker container can help reduce the size of the Docker image, improve the speed of deployment, and optimize resource usage.</p>
<h2 id="mcetoc_1gvhe7lit17l">Enable Multi-Stage Dockerfile</h2>
<p>Now we want to create a example of a Multi-Stage Dockerfile, like so:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">FROM</span> openjdk:<span class="hljs-number" style="color: #6897bb;">11</span>-jre-slim as builder
<span class="hljs-keyword" style="color: #cc7832;">WORKDIR</span> <span class="bash">application
</span><span class="hljs-keyword" style="color: #cc7832;">ADD</span> <span class="bash">target/myapp-0.0.1-SNAPSHOT.jar ./
</span><span class="hljs-keyword" style="color: #cc7832;">RUN</span> <span class="bash">java -Djarmode=layertools -jar myapp-0.0.1-SNAPSHOT.jar extract
</span>
<span class="hljs-keyword" style="color: #cc7832;">FROM</span> openjdk:<span class="hljs-number" style="color: #6897bb;">11</span>-jre-slim

<span class="hljs-keyword" style="color: #cc7832;">WORKDIR</span> <span class="bash">application
</span><span class="hljs-keyword" style="color: #cc7832;">COPY</span> <span class="bash">--from=builder application/dependencies/ ./
</span><span class="hljs-keyword" style="color: #cc7832;">COPY</span> <span class="bash">--from=builder application/spring-boot-loader/ ./
</span><span class="hljs-keyword" style="color: #cc7832;">COPY</span> <span class="bash">--from=builder application/snapshot-dependencies/ ./
</span><span class="hljs-keyword" style="color: #cc7832;">COPY</span> <span class="bash">--from=builder application/application/ ./
</span><span class="hljs-keyword" style="color: #cc7832;">ENTRYPOINT</span> <span class="bash">[<span class="hljs-string" style="color: #6a8759;">"java"</span>, <span class="hljs-string" style="color: #6a8759;">"-Djava.security.egd=file:///dev/./urandom"</span>, <span class="hljs-string" style="color: #6a8759;">"org.springframework.boot.loader.JarLauncher"</span>]</span></pre>
<p>now we can recreate the image like so: <code><span class="blob-code-inner blob-code-marker js-code-nav-pass " data-code-marker="+"><span class="pl-c1">docker build -f ./src/main/docker/Dockerfile -t myapp .</span></span></code></p>
<h2 id="mcetoc_1gvhe7lit17m">Build the Docker Image with Maven</h2>
<p>So far it's very uncomfortable to have the Version of the .jar Artifact in the Dockerfile. This way we would need to change this after every new release. There is a better way: we can use the Docker Maven plugin. Add this dependency to your pom.xml:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">plugin</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>io.fabric8<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">groupId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">artifactId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">version</span>&gt;0.42.1</span><span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">version</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">configuration</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">verbose</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">images</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">image</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">name</span>&gt;</span>yourdockeraccount/myapp<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">name</span>&gt;</span>
                            <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">build</span>&gt;</span>
                                <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">assembly</span>&gt;</span>
                                    <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">descriptorRef</span>&gt;</span>artifact<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">descriptorRef</span>&gt;</span>
                                <span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">assembly</span>&gt;</span>
                                <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">dockerFile</span>&gt;</span>Dockerfile<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">dockerFile</span>&gt;</span>
                                <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">tags</span>&gt;</span>
                                    <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">tag</span>&gt;</span>latest<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">tag</span>&gt;</span>
                                    <span class="hljs-tag">&lt;<span class="hljs-name" style="color: #e8bf6a;">tag</span>&gt;</span>${project.version}<span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">tag</span>&gt;</span>
                                <span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">tags</span>&gt;</span>
                            <span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">build</span>&gt;</span>
                        <span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">image</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">images</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">configuration</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name" style="color: #e8bf6a;">plugin</span>&gt;</span></pre>
<p>make sure you add your image name!</p>
<p>Also you need to replace the Artifact Name of "<span class="bash">myapp-0.0.1-SNAPSHOT.jar</span>" with </p>
<div>"${project.build.finalName}.jar" in the Dockerfile.</div>
<div> </div>
<div>Now you can build the docker image with the maven plugin using a dynamic version.</div>
<h2 id="mcetoc_1gvhe7lit17n">Push your Docker Image to Docker Hub</h2>
<p>Last step is to push your Application to the docker hub. But first lets build the image with:</p>
<p><code>mvn clean package docker:build docker:push</code></p>
<p> </p>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Data Validation Overview</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/data-validation-overview.html"/>
        <id>https://www.finecloud.ch/data-validation-overview.html</id>
            <category term="spring-framework"/>
            <category term="spring"/>
            <category term="software development"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2023-05-02T21:45:22+02:00</updated>
            <summary>
                <![CDATA[
                    What is Validation? Validation is a process of making assertions against data to ensure data integrity Is a value required? How long is a phone number? Is it a good date? What is the maximum length of a string? Some refer to data validation as&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gvevuu5v9p">What is Validation?</a></li>
<li><a href="#mcetoc_1gvevuu5v9q">When to Validate?</a></li>
<li><a href="#mcetoc_1gvevuu5v9r">Java Bean Validation</a></li>
<li><a href="#mcetoc_1gvevuu5v9s">Jakarta Bean Validation 3.0</a></li>
<li><a href="#mcetoc_1gvevuu5v9t">Built In Constraint Definitions</a></li>
<li><a href="#mcetoc_1gvevuu5v9u">Hiberate Validator Constraints</a></li>
<li><a href="#mcetoc_1gvevuu5v9v">Validation and Spring Framework</a></li>
<li><a href="#mcetoc_1gvevuu5va0">Spring Boot and Validation</a></li>
</ul>
</div>
<h2 id="mcetoc_1gvevuu5v9p">What is Validation?</h2>
<ul>
<li>Validation is a process of making assertions against data to ensure data integrity</li>
<li>Is a value required? How long is a phone number?</li>
<li>Is it a good date? What is the maximum length of a string?</li>
<li>Some refer to data validation as defensive programming</li>
<li>Or a process of trust but verify</li>
<li>Validation is an important step, but easily overlooked</li>
</ul>
<h2 id="mcetoc_1gvevuu5v9q">When to Validate?</h2>
<ul>
<li>Validate data early and often!</li>
<li>Validation should occur with every exchange</li>
<li>User input data should be validated in the UI with rich user feedback</li>
<li>RESTful API data should be validated early in the controller, before the service layer</li>
<li>Data should be validated before persistence to the database</li>
<li>Database constraints will also enforce data validation</li>
<li>Best to validate early - Handling persistence errors is ugly</li>
</ul>
<h2 id="mcetoc_1gvevuu5v9r">Java Bean Validation</h2>
<ul>
<li>Java Bean Validation is a Java API standard</li>
<li>Provides for a standard way of performing validation and handling errors</li>
<li>Much more graceful than custom code blocks of if… then… throw Exception</li>
<li>Bean Validation is an API, like JPA or JDBC you need an implementation</li>
<li>Fun Fact - Gunnar Morling, founder of MapStruct is the spec lead for the Bean Validation API and contributor of the Hibernate Implementation of the Bean Validation API</li>
</ul>
<h2 id="mcetoc_1gvevuu5v9s">Jakarta Bean Validation 3.0</h2>
<ul>
<li>Released July of 2020</li>
<li>Name changed from Bean Validation to Jakarta Bean Validation</li>
<li>Only change from 2.0 to 3.0 is the API package changes</li>
<li>2.0 - javax.validation</li>
<li>3.0 - jakarta.validaton</li>
<li>Used in Spring Framework 6.x+</li>
<li>Hibernate Validator 7.x+ is the implementation</li>
</ul>
<h2 id="mcetoc_1gvevuu5v9t">Built In Constraint Definitions</h2>
<ul>
<li>@Null - Checks value is null</li>
<li>@NotNull - Checks value is not null</li>
<li>@AssertTrue - Value is true</li>
<li>@AssertFalse - Value is false</li>
<li>@Min - Number is equal or higher</li>
<li>@Max - Number is equal or less</li>
<li>@DecimalMin - Value is larger</li>
<li>@DecimalMax - Value is less than</li>
<li>@Negative - Value is less than zero. Zero invalid.</li>
<li>@NegativeOrZero - Value is zero or less than zero</li>
<li>@Positive - Value is greater than zero. Zero invalid.</li>
<li>@PositiveOrZero - Value is zero or greater than zero.</li>
<li>@Size - checks if string or collection is between a min and max</li>
<li>@Digits - check for integer digits and fraction digits</li>
<li>@Past - Checks if date is in past</li>
<li>@PastOrPresent - Checks if date is in past or present</li>
<li>@Future - Checks if date is in future</li>
<li>@FutureOrPresent - Checks if date is present or in future</li>
<li>@Pattern - checks against RegEx pattern</li>
<li>@NotEmpty - Checks if value is not null nor empty (whitespace characters or empty collection)</li>
<li>@NonBlank - Checks string is not null or not whitespace characters</li>
<li>@Email - Checks if string value is an email address</li>
</ul>
<h2 id="mcetoc_1gvevuu5v9u">Hiberate Validator Constraints</h2>
<ul>
<li>@ScriptAssert - Class level annotation, checks class against script</li>
<li>@CreditCardNumber - Verifies value is a credit card number</li>
<li>@Currency - Valid currency amount</li>
<li>@DurationMax - Duration less than given value</li>
<li>@DurationMin - Duration greater than given value</li>
<li>@EAN - Valid EAN barcode</li>
<li>@ISBN - Valid ISBN value</li>
<li>@Length - String length between given min and max</li>
<li>@CodePointLength - Validates that code point length of the annotated character sequence is between min and max included.</li>
<li>@LuhnCheck - Luhn check sum</li>
<li>@Mod10Check - Mod 10 check sum</li>
<li>@Mod11Check - Mod 11 check sum</li>
<li>@Range - checks if number is between given min and max (inclusive)</li>
<li>@SafeHtml - Checks for safe HTML</li>
<li>@UniqueElements - Checks if collection has unique elements</li>
<li>@Url - checks for valid URL</li>
<li>@CNPJ - Brazilian Corporate Tax Payer Registry Number</li>
<li>@CPF - Brazilian Individual Taxpayer Registry Number</li>
<li>@TituloEleitoral - Brazilian voter ID</li>
<li>@NIP - Polish VAR ID</li>
<li>@PESEL - Polish National Validation Number</li>
<li>@REGON - Polish Taxpayer ID</li>
</ul>
<h2 id="mcetoc_1gvevuu5v9v">Validation and Spring Framework</h2>
<ul>
<li>Spring Framework has robust support for bean validation</li>
<li>Validation support can be used in controllers, and services, and other Spring managed components</li>
<li>Spring MVC will return a 400 Bad Request Error for validation failures</li>
<li>Spring Data JPA with throw an exception for JPA constraint violations</li>
</ul>
<h2 id="mcetoc_1gvevuu5va0">Spring Boot and Validation</h2>
<ul>
<li>Spring Boot will auto-configure validation when the validation implementation is found on classpath</li>
<li>If API is only on classpath (with no implementation) you can use the annotations, BUT validation will NOT occur</li>
<li>Prior to Spring Boot 2.3, validation was included in starter dependencies</li>
<li>After Spring Boot 2.3, you must include the Spring Boot validation starter</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Data Transfer Objects</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/data-transfer-objects.html"/>
        <id>https://www.finecloud.ch/data-transfer-objects.html</id>
            <category term="software development"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2023-04-11T19:53:59+02:00</updated>
            <summary>
                <![CDATA[
                    Data Transfer Objects DTOs - Data Transfer Objects DTOs are simple Java POJOs DTOs are data structures, generally should NOT have behavior DTOs are objects used to transfer data between producers and consumers Controller models are typically DTOs Why Not Entities? Database Entities are also&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Data Transfer Objects</h2>
<ul>
<li>DTOs - Data Transfer Objects</li>
<li>DTOs are simple Java POJOs</li>
<li>DTOs are data structures, generally should NOT have behavior</li>
<li>DTOs are objects used to transfer data between producers and consumers</li>
<li>Controller models are typically DTOs</li>
</ul>
<h2>Why Not Entities?</h2>
<ul>
<li>Database Entities are also POJOs, why can’t we use those?</li>
<li>For simple applications you can</li>
<li>Spring Data REST exposes database entities directly</li>
<li>Database entities can “leak” data to client tier</li>
<li>As applications become more complex, having the separation becomes more  important</li>
<li>The needs of the consumers are different than the needs of persistence</li>
<li>DTOs can be optimized for JSON serialization and deserialization</li>
</ul>
<h2>Type Conversions</h2>
<ul>
<li>Type Conversions are often done within methods</li>
<li>Best practice is to use dedicated converters</li>
<li>Single Responsibility Principle</li>
<li>Spring Framework provides an Interface called “Converter” with generics</li>
<li>Can be used with conjunction with Conversion service</li>
<li>MapStruct is a code generator which automates generation of type converters</li>
</ul>
<h2>MapStruct</h2>
<ul>
<li>MapStruct is a code generator</li>
<li>You provide the interface, MapStruct generates the implementation</li>
<li>Works like Lombok via annotation processing during code compile</li>
<li>Has good Spring integration - can generate Spring Converters or Spring Components</li>
<li>You can use Mapstruct Components for injection into services<br><br><br></li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Spring Exception Handling</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/spring-exception-handling.html"/>
        <id>https://www.finecloud.ch/spring-exception-handling.html</id>
            <category term="spring-framework"/>
            <category term="spring"/>
            <category term="software development"/>
            <category term="java"/>
            <category term="exceptions"/>
            <category term="dev"/>

        <updated>2023-04-10T08:45:10+02:00</updated>
            <summary>
                <![CDATA[
                    HTTP Status Codes 100 Series - Informational Responses • 200 Series - Successful Responses 300 Series - Redirection Responses 400 Series - Client Error Responses 500 Series - Server Error Responses Use of HTTP Status Codes 200 Series are used when the request completes as&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3>HTTP Status Codes</h3>
<div class="page" title="Page 2">
<div class="section">
<div class="layoutArea">
<div class="column">
<ul>
<li>100 Series - Informational Responses • 200 Series - Successful Responses</li>
<li>300 Series - Redirection Responses</li>
<li>400 Series - Client Error Responses</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">500 Series - Server Error Responses</span></li>
</ul>
<h4>Use of HTTP Status Codes</h4>
<div class="page" title="Page 2">
<div class="section">
<div class="layoutArea">
<div class="column">
<div class="page" title="Page 3">
<div class="section">
<div class="layoutArea">
<div class="column">
<ul>
<li>200 Series are used when the request completes as expected
<ul>
<li>Common codes used: 200 Ok, 201 Created, 202 Accepted, 204 No Content</li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">400 Series are used when the request is understood but fails an expected condition</span>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">400 Bad Request - Invalid data received</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">401 Unauthorized - User authentication required</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">403 Forbidden - User authenticated, not authorized</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">404 Not Found - Requested Resource Not Found</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">405 Method Not Allowed - Method Not Supported</span></li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">500 Series are used when there is a server side error</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Typically from unexpected runtime errors</span></li>
<li>Null Pointer Errors, parse errors, database connection errors, etc</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Code should log relevant information</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Do not return stack trace to client</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Be careful to not “leak” information to internet</span></li>
</ul>
</li>
</ul>
<h3>Standard Spiring MVC Exceptions</h3>
<ul>
<li>Spring MVC does support a number of standard exceptions</li>
<li>Standard Exceptions are handled by the DefaultHandlerExceptionResolver</li>
<li>The DefaultHandlerExceptionResolver sets the appropriate HTTP status code</li>
<li>BUT does not write content to the body of the response</li>
<li>Spring MVC does have robust support for customizing error responses</li>
<li>BindException - 400 Bad Request</li>
<li>ConversionNotSupportedException - 500 Internal Server Error</li>
<li>HttpMediaTypeNotAcceptableException - 406 Not Acceptable</li>
<li>HttpMediaTypeNotSupportedException - 415 Unsupported Media Type</li>
<li>HttpMessageNotReadableException - 400 Bad Request</li>
<li>HttpMessageNotWritableException - 500 Internal Server Error</li>
<li>HttpRequestMethodNotSupportedException - 405 Method Not Allowed</li>
<li>MethodArgumentNotValidException - 400 Bad Request</li>
<li>MissingServletRequestParameterException - 400 Bad Request</li>
<li>MissingServletRequestPartException - 400 Bad Request</li>
<li>NoSuchRequestHandlingMethodException - 404 Not Found</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">TypeMismatchException - 400 Bad Request</span></li>
</ul>
</div>
<div class="column">
<h3>Spring Exception Handling</h3>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@ExceptionHandler on controller method to handle specific Exception types</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@ReponseStatus - annotation for custom exception classes to set desired HTTP status</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Implement AbstractHandlerException Resolver - full control over response (including body)</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@ControllerAdvice - used to implement a global exception handler</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">ResponseStatusException.class - (Spring 5+) Exception which can be thrown which allows setting the HTTP status and message in the constructor</span></li>
</ul>
<h3>Spring Boot ErrorController</h3>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Provides Whitelabel Error Page for HTML requests, or JSON response for RESTful requests</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Properties:</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">server.error.include-binding-errors - default: never</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">server.error.include-exception - default: false</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">server.error.include-message - default: never</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">server.error.include-stacktrace - default: never</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">server.error.path - default: /error</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">server.error.whitelabel.enabled - default: true</span></li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Spring Boot includes a BasicError Controller</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">This class can be extended for additional error response customization</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Allows for wide support of the needs of various clients and situations</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Rarely used, but important to know it is available for use when needed</span></li>
</ul>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Testing with MockMVC</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/mockmvc.html"/>
        <id>https://www.finecloud.ch/mockmvc.html</id>
            <category term="spring-framework"/>
            <category term="spring"/>
            <category term="software development"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2023-04-06T21:22:21+02:00</updated>
            <summary>
                <![CDATA[
                    Why use Spring MockMVC? Spring MockMVC allows you to test the controller interactions in a servlet context without the application running in an application server. Mockito is the most popular mocking framework for testing Java Mocks (aka Test Doubles) are alternate implementations of objects to&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gtc0a48v1bq">Why use Spring MockMVC?</a></li>
<li><a href="#mcetoc_1gtbugt571b8">Types of Tests</a>
<ul>
<li><a href="#mcetoc_1gtbugt571b9">Unit Tests / Unit Testing</a></li>
</ul>
</li>
<li><a href="#mcetoc_1gtbugt571ba">Integration Tests</a></li>
<li><a href="#mcetoc_1gtbugt571bb">Functional Tests</a></li>
<li><a href="#mcetoc_1gtbugt571bc">The major challenge with testing Servlets and Controllers</a></li>
<li><a href="#mcetoc_1gtbugt571bd">Spring Boot Test Splices</a></li>
<li><a href="#mcetoc_1gtbugt571be">Using Mocks</a></li>
<li><a href="#mcetoc_1gtbugt571bf">What is Mockito?</a></li>
<li><a href="#mcetoc_1gtbugt571bg">Types of Mocks</a></li>
<li><a href="#mcetoc_1gtbugt571bh">Testing Controllers</a></li>
</ul>
</div>
<div class="question--question--152Yi">
<div class="ud-text-bold question--title--2FD-U">
<div class="question--title-text--2kBEO rt-scaffolding" data-purpose="safely-set-inner-html:rich-text-viewer:html">
<h3 id="mcetoc_1gtc0a48v1bq">Why use Spring MockMVC?</h3>
</div>
</div>
<div class="question--answer--2ASXa">
<div data-purpose="safely-set-inner-html:submission:user-answer-body">
<p>Spring MockMVC allows you to test the controller interactions in a servlet context without the application running in an application server.</p>
</div>
</div>
</div>
<h3 id="mcetoc_1gtbugt571b8">Types of Tests</h3>
<div class="page" title="Page 2">
<div class="section">
<div class="layoutArea">
<div class="column">
<h4 id="mcetoc_1gtbugt571b9">Unit Tests / Unit Testing</h4>
<ul>
<li>Code written to test code under test</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Designed to test specific sections of code</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Percentage of lines of code tested is code coverage</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Ideal coverage is in the 70-80% range</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Should be ‘unity’ and execute very fast</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Should have no external dependencies </span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">ie no database, no Spring context, etc</span></li>
</ul>
<div class="page" title="Page 3">
<div class="section">
<div class="layoutArea">
<div class="column">
<h3 id="mcetoc_1gtbugt571ba">Integration Tests</h3>
<ul>
<li>Designed to test behaviors between objects and parts of the overall system</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Much larger scope</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Can include the Spring Context, database, and message brokers</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Will run much slower than unit tests</span></li>
</ul>
<h3 id="mcetoc_1gtbugt571bb">Functional Tests</h3>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Typically means you are testing the running application</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Application is live, likely deployed in a known environment</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Functional touch points are tested - (i.e. Using a web driver, calling web services, sending / receiving messages, etc)</span></li>
</ul>
<h3 id="mcetoc_1gtbugt571bc">The major challenge with testing Servlets and Controllers</h3>
<div class="page" title="Page 5">
<div class="section">
<div class="layoutArea">
<div class="column">
<ul>
<li>Spring MVC Controllers are tricky to test property</li>
<li>Controllers have a high degree of integration with the Spring MVC Framework</li>
<li>Request path and HTTP Method decides which method to invoke</li>
<li>Path variables are parsed from path</li>
<li>JSON is bound to POJOs</li>
<li>Response is expressed as a HTTP Response</li>
<li>JUnit tests are NOT sufficient to test the framework interaction</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Spring Mock MVC is a testing environment for the testing of Spring MVC controllers</span>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Provides mocks of the Servlet runtime environment</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">HTTP Request / Response, Dispatcher Servlet, etc</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Simulates the execution of controller as if it was running under Spring within Tomcat</span></li>
</ul>
</li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Can be run with or without the Spring Context</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">True unit test when run without the Spring Context</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Technically an Integration Test when used in conjunction with Spring Context</span></li>
</ul>
<div class="page" title="Page 7">
<div class="section">
<div class="layoutArea">
<div class="column">
<h3 id="mcetoc_1gtbugt571bd">Spring Boot Test Splices</h3>
<div class="page" title="Page 7">
<div class="section">
<div class="layoutArea">
<div class="column">
<ul>
<li>Spring Boot supports a concept of what is called Test Splices</li>
<li>Test Splices bring up a targeted segment of the Auto-Configured Spring Boot Environment
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">ie - Just the Database components; or just the web components</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">User defined Spring beans typically are NOT initialized</span></li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@WebMvcTest - is a Spring Boot test splice which creates a MockMVC environment for </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">the controller (or controllers) under test</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Dependencies of controllers are NOT included</span></li>
</ul>
</li>
</ul>
<h3 id="mcetoc_1gtbugt571be">Using Mocks</h3>
<div class="page" title="Page 8">
<div class="section">
<div class="layoutArea">
<div class="column">
<ul>
<li>Controller dependencies must be added to the Spring Context in the test environment</li>
<li>Dependencies can be any proper implementation
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Example of why we code to an interface, any implementation will work</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">We could easily use the hash map implementation we’ve been using in the course </span></li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">For testing, it is common to use mock objects</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Mocks allow you to supply a specific response for a given input</span>
<ul>
<li>ie - when method abcd is called, return foo...</li>
</ul>
</li>
</ul>
</div>
</div>
</div>
</div>
<p> </p>
<h3 id="mcetoc_1gtbugt571bf">What is Mockito?</h3>
<div class="page" title="Page 9">
<div class="section">
<div class="layoutArea">
<div class="column">
<ul>
<li>
<p>Mockito is the most popular mocking framework for testing Java</p>
</li>
<li>Mocks (aka Test Doubles) are alternate implementations of objects to replace real objects in tests</li>
<li>Works well with Dependency Injection</li>
<li>For the class under test, injected dependencies can be mocks</li>
</ul>
</div>
</div>
</div>
</div>
<h3 id="mcetoc_1gtbugt571bg">Types of Mocks</h3>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Dummy - Object used just to get the code to compile</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Fake - An object that has an implementation, but not production ready</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Stub - An object with pre-defined answers to method calls</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Mock - An object with pre-defined answers to method calls, and has expectations of executions. Can throw an exception if an unexpected invocation is detected</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Spy - In Mockito Spies are Mock like wrappers around the actual object</span></li>
</ul>
<h3 id="mcetoc_1gtbugt571bh">Testing Controllers</h3>
<div class="page" title="Page 12">
<div class="section">
<div class="layoutArea">
<div class="column">
<ul>
<li>Argument captors can be used to verify request data is properly being parsed and passed to service layer</li>
<li>Verify interactions can be used Mocked object was called</li>
<li>Mock return values supply data back to controller
<ul>
<li>ie - object returned when getById is called on service</li>
</ul>
</li>
<li>Mocks can also be instructed to throw exceptions to test exception handling</li>
</ul>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Project Lombok</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/project-lombok.html"/>
        <id>https://www.finecloud.ch/project-lombok.html</id>
            <category term="spring-framework"/>
            <category term="spring"/>
            <category term="software development"/>
            <category term="lombok"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2023-04-05T21:00:00+02:00</updated>
            <summary>
                <![CDATA[
                    Intro Project Lombok is a Java library that provides a set of annotations and utility classes that help to reduce boilerplate code in Java projects. It offers features such as automatic generation of getters, setters, equals, hashCode, toString, and constructors, as well as support for&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gt6q7uargb">Intro</a></li>
<li><a href="#mcetoc_1gt6q7uargc">How does it work?</a></li>
<li><a href="#mcetoc_1gt6q7uargd">Features</a></li>
</ul>
</div>
<h3 id="mcetoc_1gt6q7uargb">Intro</h3>
<div class="flex flex-grow flex-col gap-3">
<div class="min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>Project Lombok is a Java library that provides a set of annotations and utility classes that help to reduce boilerplate code in Java projects. It offers features such as automatic generation of getters, setters, equals, hashCode, toString, and constructors, as well as support for logging, fluent API creation, and more.</p>
<p>By using Lombok annotations, developers can focus on writing the core business logic of their code and let Lombok generate the repetitive, boilerplate code for them. This reduces code verbosity and can lead to improved code readability and maintainability.</p>
<p>Lombok is widely used in the Java community and can be integrated into popular IDEs such as Eclipse, IntelliJ, and NetBeans. It is also compatible with popular build tools such as Maven and Gradle.</p>
<p>Overall, Lombok is a powerful tool for Java developers who want to increase productivity and reduce the amount of repetitive code in their projects.</p>
<h3 id="mcetoc_1gt6q7uargc">How does it work?</h3>
<div class="page" title="Page 4">
<div class="section">
<div class="layoutArea">
<div class="column">
<ul>
<li>
<p>Hooks in via the Annotation processor API</p>
</li>
<li>The AST (raw source code) is passed to Lombok for code generation before java continues.</li>
<li>Thus, produces properly compiled Java code in conjunction with the Java compiler</li>
<li>NOTE: Code is generated and complied. No run-time performance penalty.</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">If you write an implantation of a method Project Lombok would generate, your code is used</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Make it easy to override Lombok generated code</span></li>
</ul>
<h3 id="mcetoc_1gt6q7uargd">Features</h3>
<ul>
<li>val - declares final local variable</li>
<li>var - declares mutable local variable</li>
<li>@Getter
<ul>
<li>Creates getter methods for all properties</li>
</ul>
</li>
<li>@Setter
<ul>
<li>Creates setter for all non-final properties</li>
</ul>
</li>
<li>@ToString
<ul>
<li>Generates String of classname, and each field separated by commas</li>
<li>Optional parameter to include field names</li>
<li>Optional parameter to include call to the super toString method</li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@EqualsAndHashCode</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Generates implementations of ‘equals(Object other) and hashCode()</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">By default will use all non-static, non-transient properties</span></li>
<li>Can optionally exclude specific properties</li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@NoArgsConstructor</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Generates no args constructor</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Will cause compiler error if there are final fields</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Can optionally force, which will initialize final fields with 0 / false / null</span></li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@RequiredArgsContructor</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Generates a constructor for all fields that are final or marked @NonNull</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Constructor will throw a NullPointerException if any @NonNull fields are null</span></li>
</ul>
</li>
<li>@Data
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Generates typical boilerplate code for POJOs</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Combines - @Getter, @Setter, @ToString, @EqualsAndHashCode, @RequiredArgsConstructor</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">No constructor is generated if constructors have been explicitly declared</span></li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@Value</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">The immutable variant of @Data</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">All fields are made private and final by default</span></li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@NonNull</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Set on parameter of method or constructor and a NullPointerException will be thrown if parameter is null</span></li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@Builder</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Implements the ‘builder’ pattern for object creation</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Person.builder().name("Adam Savage").city("San Francisco").job("Mythbusters").job("Unchained Reaction").build();</span></li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@SneakyThrows</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Throw checked exceptions without declaring in calling method’s throws clause</span></li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@Syncronized</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">A safer implementation of Java’s synchronized</span></li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@Log</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Creates a Java util logger • Java util loggers are awful</span></li>
</ul>
</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">@Slf4j</span><br>
<ul>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Creates a SLF4J logger.</span></li>
<li>Recommended - SLF4J is a generic logging facade</li>
<li>Spring Boot’s default logger is LogBack</li>
</ul>
</li>
</ul>
</div>
<div class="column"> </div>
</div>
</div>
</div>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Spring Bean Lifecycle</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/spring-bean-lifecycle.html"/>
        <id>https://www.finecloud.ch/spring-bean-lifecycle.html</id>
            <category term="spring-framework"/>
            <category term="spring"/>
            <category term="software development"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2023-04-28T22:33:45+02:00</updated>
            <summary>
                <![CDATA[
                    Part 1 Of course, instantiating the class will come first. The class will populate properties after it has been created. It will therefore set up any properties you may have. Then, if they exist, we do have some interfaces that we can implement. These methods&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gt66f14j8k">Part 1</a></li>
<li><a href="#mcetoc_1gt66f14j8l">Part 2</a></li>
<li><a href="#mcetoc_1gt66f14j8m">Callback Interfaces</a></li>
<li><a href="#mcetoc_1gt66f14j8n">Lifecycle Annotations</a></li>
<li><a href="#mcetoc_1gt66f14j8o">Bean Post Processors</a></li>
<li><a href="#mcetoc_1gt66f14j8p">Aware Interfaces</a></li>
</ul>
</div>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/83/lifecycle.png" alt="" width="1303" height="562" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/83/responsive/lifecycle-xs.png 300w ,https://www.finecloud.ch/media/posts/83/responsive/lifecycle-sm.png 480w ,https://www.finecloud.ch/media/posts/83/responsive/lifecycle-md.png 768w ,https://www.finecloud.ch/media/posts/83/responsive/lifecycle-lg.png 1024w ,https://www.finecloud.ch/media/posts/83/responsive/lifecycle-xl.png 1360w ,https://www.finecloud.ch/media/posts/83/responsive/lifecycle-2xl.png 1600w"></figure>
<h2 id="mcetoc_1gt66f14j8k">Part 1</h2>
<div id="ct-sidebar-scroll-container" class="sidebar--content---4z0-" data-purpose="sidebar-content">
<div class="transcript--transcript-panel--kfMxM" dir="auto" data-purpose="transcript-panel">
<div class="transcript--cue-container--wu3UY"><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Of course, instantiating the class will come first. The class will populate properties after it has been created. It will therefore set up any properties you may have. Then, if they exist, we do have some interfaces that we can implement. These methods will be executed by Spring if you've implemented these interfaces. As you can see, BeanNameAware's setBeanName method is called. Following that are BeanFactoryAware, ApplicationContextAware, and PreInitialization, which will be carried out using a post bean processor. As a result, we can hook into these callbacks before moving on to the initializing beans' afterPropertiesSetet. Additionally, we can offer special initialization techniques.  </span><span class="" style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);" data-purpose="cue-text">And then one of the last things is the post initialization. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">So these are all steps that the bean goes through before it is ready to use.</span></div>
<div class="transcript--cue-container--wu3UY">
<p class="transcript--underline-cue--3osdw" tabindex="-1" role="button" data-purpose="transcript-cue"><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Before the application is deemed ready for use, Spring will go through and carry out all these actions on each bean in the context.</span></p>
<p class="transcript--underline-cue--3osdw" tabindex="-1" role="button" data-purpose="transcript-cue"><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">This provides you with a variety of connections. You do have a great deal of flexibility and control over this. Sincerely speaking, you hardly ever need to hook into this. There are use cases that you encounter, but it's rare that you require this much control over the production of the beans. You're typically doing something a little complicated when you do it. But I believe that awareness is the most important lesson to learn. Use this when you need it; it is there and available for you.  </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">So here this is just the bean becoming ready for use.</span></p>
</div>
<div class="transcript--cue-container--wu3UY">
<h2 id="mcetoc_1gt66f14j8l" tabindex="-1" role="button" data-purpose="transcript-cue">Part 2</h2>
<p class="transcript--underline-cue--3osdw" tabindex="-1" role="button" data-purpose="transcript-cue"><span class="" data-purpose="cue-text">There is also a lifecycle for the beans to be terminated. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">So when the container is being shut down, the application receives some type of shutdown event. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">There is a lifecycle for the shutdown. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">So you can annotate a bean method with the annotation PreDestroy that will get annotated. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">And then you can also implement a disposable bean interface that provides a destroy method so that the </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">annotation will come first and then the destroy method. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">And at that point we call the bean terminated.</span></p>
<h2 id="mcetoc_1gt66f14j8m" tabindex="-1" role="button" data-purpose="transcript-cue">Callback Interfaces</h2>
</div>
<div class="transcript--cue-container--wu3UY">
<p class="transcript--underline-cue--3osdw" tabindex="-1" role="button" data-purpose="transcript-cue">Consequently, we did discuss a few of the interfaces. There are two interfaces in Spring that you can use to implement callback events. You have the afterPropertiesSet from the InitializingBean. So if you implement that interface, that method will be called. Finally, there is the DisposalBean. We discussed the fact that that is one of the last functions called before the bean is terminated. </p>
<h2 id="mcetoc_1gt66f14j8n" tabindex="-1" role="button" data-purpose="transcript-cue">Lifecycle Annotations</h2>
</div>
<div class="transcript--cue-container--wu3UY">
<p class="transcript--underline-cue--3osdw" tabindex="-1" role="button" data-purpose="transcript-cue"><span class="" data-purpose="cue-text">You do also have a couple annotations, and these were in that flowchart as well. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">We have <strong>PostConstruct</strong>, so the bean has been constructed, but it has not been returned to the requesting </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">object. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">And then we also have <strong>PreDestroy</strong>. </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">So if you remember in the termination workflow, this was called just before the interface method is </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">called.</span></p>
<h2 id="mcetoc_1gt66f14j8o" tabindex="-1" role="button" data-purpose="transcript-cue">Bean Post Processors</h2>
<p class="transcript--underline-cue--3osdw" tabindex="-1" role="button" data-purpose="transcript-cue">These can be useful if you're working with a third-party object of some kind that you need to create, put into your context, and update in some way. like configuring a component that is typically not managed by Spring. So, you now have some capabilities. The main point you should take away from this post is that bean processors are referred to as such internationally. In essence, you receive this event, and it will be examined. If you implement it, this will be called 100 times in the case where you have 100 beans and every object or bean. In order to implement this typically, you're probably searching for a particular bean, a kind of bean that </p>
</div>
<div class="transcript--cue-container--wu3UY">
<h2 id="mcetoc_1gt66f14j8p" tabindex="-1" role="button" data-purpose="transcript-cue">Aware Interfaces</h2>
<p class="transcript--underline-cue--3osdw" tabindex="-1" role="button" data-purpose="transcript-cue">Finally, Spring has over 14 aware interfaces as well. Therefore, these extend interface are also known as aware. Thus, they are a continuation of that. They number fourteen. The Spring framework largely makes use of these. Therefore, if you're creating Spring applications, you should be aware that you use these. Therefore, if you have a use case, you may encounter situations where you must use these. These might be very useful.</p>
</div>
<div class="transcript--cue-container--wu3UY">
<p class="transcript--underline-cue--3osdw" tabindex="-1" role="button" data-purpose="transcript-cue"><span class="" data-purpose="cue-text">These are some of the current ones:</span></p>
</div>
<div class="transcript--cue-container--wu3UY">
<table style="border-collapse: collapse; width: 100%;" border="1">
<tbody>
<tr>
<td style="width: 49.9288%;"><strong>Aware Interface</strong></td>
<td style="width: 49.9288%;"><strong>Description</strong></td>
</tr>
<tr>
<td style="width: 49.9288%;">ApplicationContextAware</td>
<td style="width: 49.9288%;">Interface to be implemented by any object that wishes to be notified of the ApplicationContext that it runs in.</td>
</tr>
<tr>
<td style="width: 49.9288%;">ApplicationEventPublisherAware</td>
<td style="width: 49.9288%;">Set the ApplicationEventPublisher that this object runs in.</td>
</tr>
<tr>
<td style="width: 49.9288%;">BeanClassLoaderAware</td>
<td style="width: 49.9288%;">Callback that supplies the bean class loader to a bean instance.</td>
</tr>
<tr>
<td style="width: 49.9288%;">BeanFactoryAware</td>
<td style="width: 49.9288%;">Callback that supplies the owning factory to a bean instance.</td>
</tr>
<tr>
<td style="width: 49.9288%;">BeanNameAware</td>
<td style="width: 49.9288%;">Set the name of the bean in the bean factory that created this bean.</td>
</tr>
<tr>
<td style="width: 49.9288%;">BootstrapContextAware</td>
<td style="width: 49.9288%;">Set the BootstrapContext that this object runs in.</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Spring Annotations</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/spring-annotations.html"/>
        <id>https://www.finecloud.ch/spring-annotations.html</id>
            <category term="spring-framework"/>
            <category term="spring"/>
            <category term="software development"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2023-04-04T16:15:16+02:00</updated>
            <summary>
                <![CDATA[
                    If you want to develop a Spring Application you need to know when to use which Annotation. Spring’s dependency injection capability includes the following annotations:
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>If you want to develop a Spring Application you need to know when to use which Annotation.</p>
<h2>Dependency Injection</h2>
<p>Spring’s dependency injection capability includes the following annotations:</p>
<table style="border-collapse: collapse; width: 100%; height: 417.344px;" border="1">
<tbody>
<tr style="height: 50.3594px;">
<td style="width: 49.9288%; height: 50.3594px;"><strong>Annotation</strong></td>
<td style="width: 49.9288%; height: 50.3594px;"><strong>Explanation</strong></td>
</tr>
<tr style="height: 136.75px;">
<td style="width: 49.9288%; height: 136.75px;"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-stereotype-annotations" target="_blank" rel="nofollow noopener noreferrer">@Component</a></td>
<td style="width: 49.9288%; height: 136.75px;">Generic stereotype for any Spring-managed component.</td>
</tr>
<tr style="height: 79.1562px;">
<td style="width: 49.9288%; height: 79.1562px;"><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Service.html" target="_blank" rel="nofollow noopener noreferrer">@Service </a></td>
<td style="width: 49.9288%; height: 79.1562px;">Indicates that an annotated class is a service.</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 49.9288%; height: 50.3594px;"><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Value.html" rel="nofollow">@Value</a></td>
<td style="width: 49.9288%; height: 50.3594px;">Injection mechanism for fields and methods that indicates a default value. Often used to get values from property files.</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 49.9288%; height: 50.3594px;"> </td>
<td style="width: 49.9288%; height: 50.3594px;"> </td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 49.9288%; height: 50.3594px;"> </td>
<td style="width: 49.9288%; height: 50.3594px;"> </td>
</tr>
</tbody>
</table>
<h2><br>Configuration</h2>
<table style="border-collapse: collapse; width: 100%; height: 417.344px;" border="1">
<tbody>
<tr style="height: 50.3594px;">
<td style="width: 49.9288%; height: 50.3594px;"><strong>Annotation</strong></td>
<td style="width: 49.9288%; height: 50.3594px;"><strong>Explanation</strong></td>
</tr>
<tr style="height: 136.75px;">
<td style="width: 49.9288%; height: 136.75px;"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-autowired-annotation-qualifiers" target="_blank" rel="nofollow noopener noreferrer">@Qualifier</a></td>
<td style="width: 49.9288%; height: 136.75px;">Associates a value with a particular argument. More finely tuned way than @Order and @Priority to control selection.</td>
</tr>
<tr style="height: 79.1562px;">
<td style="width: 49.9288%; height: 79.1562px;"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-definition-profiles" target="_blank" rel="nofollow noopener noreferrer">@Profile</a></td>
<td style="width: 49.9288%; height: 79.1562px;">Indicates that a component is eligible for registration when one or more specified profiles are active. You can also use @Profile({"default"}) to define a default profile, if no Profile is actively selected.</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 49.9288%; height: 50.3594px;"> </td>
<td style="width: 49.9288%; height: 50.3594px;"> </td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 49.9288%; height: 50.3594px;"> </td>
<td style="width: 49.9288%; height: 50.3594px;"> </td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 49.9288%; height: 50.3594px;"> </td>
<td style="width: 49.9288%; height: 50.3594px;"> </td>
</tr>
</tbody>
</table>
<p><br><br></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Conventional commits</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/conventional-commits.html"/>
        <id>https://www.finecloud.ch/conventional-commits.html</id>
            <category term="software development"/>
            <category term="git"/>
            <category term="dev"/>

        <updated>2023-02-14T09:20:08+01:00</updated>
            <summary>
                <![CDATA[
                    What are Conventional commits Conventional Commits is a convention for writing commit messages that provides structure and consistency to a project's version control history. It's based on the idea of defining a standard format for commit messages that makes it easier for developers to understand&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1gp7g3b0bbq">What are Conventional commits</a></li>
<li><a href="#mcetoc_1gp7g3b0bbr">Why should you use Conventional commits</a></li>
<li><a href="#mcetoc_1gp7g3b0bbs">Example</a>
<ul>
<li><a href="#mcetoc_1gp7g3b0bbt">multiline commit messages</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1gp7g3b0bbq">What are Conventional commits</h2>
<p>Conventional Commits is a convention for writing commit messages that provides structure and consistency to a project's version control history. It's based on the idea of defining a standard format for commit messages that makes it easier for developers to understand the changes made to a codebase over time.</p>
<p><a href="https://www.conventionalcommits.org/en/v1.0.0/#specification">https://www.conventionalcommits.org/en/v1.0.0/#specification</a></p>
<h2 id="mcetoc_1gp7g3b0bbr">Why should you use Conventional commits</h2>
<ul>
<li>Improving collaboration: Having a clear, concise and standardized way of writing commit messages helps everyone on the team understand what changes were made and why. This can improve collaboration and reduce the time spent discussing changes.</li>
<li>Better automated versioning: Conventional Commits provides a way to automate versioning and release management by using the commit messages to determine the type and scope of changes. This can save time and improve accuracy compared to manually managing versions.</li>
<li>Improved documentation: Commit messages can serve as a form of documentation, providing insight into the motivations and thought process behind changes. By using Conventional Commits, this documentation is more consistent and easier to understand.</li>
</ul>
<h2 id="mcetoc_1gp7g3b0bbs">Example</h2>
<p>Here's an example of a Conventional Commit message:<br><br><code>feat(parser): add ability to parse hexadecimal numbers</code><br><br><code>This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options.</code><br><br>In this example, "feat" is the type of change being made (a new feature), "parser" is the scope of the change (the parser component), and the rest of the message provides a brief description of the change. The Conventional Commits specification defines a number of different types (e.g. "feat", "fix", "docs") and provides guidelines for how to use them.</p>
<h3 id="mcetoc_1gp7g3b0bbt">multiline commit messages</h3>
<p>how do you make multiline commit messages like these? how do you add an optional body or optional footer in a conventional Commit message?<br><br>Multiline commit messages are written by adding a blank line between the subject (first line) and the body (or footer). The subject should be a single line of text that summarizes the change and should not exceed 50 characters. If a more detailed explanation is needed, it can be added in the body.<br><br>Here's an example of a multiline Conventional Commit message:<br><br><code>feat(parser): add ability to parse hexadecimal numbers</code><br><br><code>This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options. The new feature has been thoroughly tested and is now ready for use.</code><br><br>An optional footer can also be added to Conventional Commit messages for extra information, such as breaking changes, references to related issues, or other meta-information. The footer should start with a new line and should be separated from the body by a double line break. Here's an example with a footer:<br><br><code>feat(parser): add ability to parse hexadecimal numbers</code><br><br><code>This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options. The new feature has been thoroughly tested and is now ready for use.</code><br><br><code>BREAKING CHANGE: The previous version of the parser only supported decimal numbers, so this change may break compatibility with existing code that uses the parser.</code><br><br>It's worth noting that not all Conventional Commit tools and systems require or make use of the body or footer. The most important aspect is the subject line, as it provides a concise summary of the change. The body and footer are optional and should be used as needed to provide additional context and information.<br><br>Here's an example of a Conventional Commit message with a body and footer, using the git commit command with the -m option:<br><br><code>$ git commit -m "feat(parser): add ability to parse hexadecimal numbers</code><br><br><code>This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options. The new feature has been thoroughly tested and is now ready for use.</code><br><br><code>BREAKING CHANGE: The previous version of the parser only supported decimal numbers, so this change may break compatibility with existing code that uses the parser.</code><br><br><code>Closes #123"</code><br><br>In this example, the subject is "feat(parser): add ability to parse hexadecimal numbers", the body is "This commit adds the ability to parse hexadecimal numbers, allowing for a wider range of input options. The new feature has been thoroughly tested and is now ready for use.", and the footer is "BREAKING CHANGE: The previous version of the parser only supported decimal numbers, so this change may break compatibility with existing code that uses the parser. Closes #123". The "Closes #123" part of the footer is an example of a reference to a related issue, indicating that this commit resolves the issue with the given number.</p>
            ]]>
        </content>
    </entry>
</feed>
