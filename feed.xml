<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Finecloud</title>
    <link href="https://www.finecloud.ch/feed.xml" rel="self" />
    <link href="https://www.finecloud.ch" />
    <updated>2022-05-23T18:05:17+02:00</updated>
    <author>
        <name>Finecloud</name>
    </author>
    <id>https://www.finecloud.ch</id>

    <entry>
        <title>Utility-Methoden von Java Arrays</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/utility-methoden-von-java-arrays.html"/>
        <id>https://www.finecloud.ch/utility-methoden-von-java-arrays.html</id>
            <category term="utility-methoden"/>
            <category term="sort"/>
            <category term="softwareentwicklung"/>
            <category term="java"/>
            <category term="dev"/>
            <category term="comperable"/>
            <category term="comparator"/>
            <category term="array"/>

        <updated>2022-05-23T18:05:17+02:00</updated>
            <summary>
                <![CDATA[
                    Nachfolgend eine Auswahl an Werkzeugen von Arrays. Die Auswahl ist nicht abschliessend. Mit der Methode sort können Arrays sortiert werden, und mit der&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Nachfolgend eine Auswahl an Werkzeugen von Arrays. Die Auswahl ist nicht abschliessend.</p>
<h3>Suchen und sortieren</h3>
<p>Mit der Methode <code>sort</code> können Arrays sortiert werden, und mit der Methode <code>binarySeach</code> kann in Arrays gesucht werden. Es gilt zu beachten, dass <code>binarySearch</code> nur auf bereits sortierten Arrays funktioniert. Auf einem unsortierten Array ist das Suchresultat nicht definiert.</p>
<p>Das Sortieren von primitiven Arrays ist einfach, 1 ist immer kleiner als 41, a ist immer kleiner als z.</p>
<p>Bei Objekt-Arrays gibt es keine natürliche Ordnung und deshalb auch keine Möglichkeit auf einen Sortieralgorithmus zurückzugreifen. Um dennoch Objekt-Arrays sortieren zu können, kann der <em>Comparator</em> verwendet werden.</p>
<h3>Comparator</h3>
<p>Eine Implementierung des Interface Comparator muss eine compare-Methode enthalten. Diese muss zwei Objekte entgegennehmen und einen int-Wert zurückgeben. Die Bedeutung des int-Werts der zurück kommt ist gemäss <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html" target="_blank" rel="nofollow noopener noreferrer">JavaDocs</a> wie folgt definiert:</p>
<blockquote>
<p><span class="returnLabel">Returns:<br></span>a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.</p>
</blockquote>
<p>Im nachfolgenden Beispiel, wird ein Array von Büchern nach Namen des Autors sortiert. Die compareTo-Methode der Klasse String hat Rückgabewerte mit derselben Bedeutung wie Comparator.compare, deshalb kann der Rückgabewert nach aussen weitergereicht werden:<br><code>Buch[] buecher = …;</code><br><code>Arrays.sort(buecher, new Comparator(){</code><br><code>    public void compare(Object o1, Object o2){</code><br><code>        Buch b1 = (Buch) o1;</code><br><code>        Buch b2 = (Buch) o2;</code><br><code>        return b1.getAutor().compareTo(b2.getAutor());</code><br><code>    }</code><br><code>});</code></p>
<p>Es gibt auch die besser lesbare Möglichkeit, sortieren mit der Methodenreferenz:</p>
<p><code>Arrays.sort(buecher, Comparator.comparing(Buch::getAutor));</code></p>
<p>Nun kann nach einem Buch gesucht werden:</p>
<p><code>Buch[] buecher = …;</code><br><code>Comparator c = Comparator.comparing(Buch::getAutor);</code><br><code>Arrays.sort(buecher, c);</code><br><code>Arrays.binarySearch(buecher, suchBuch, c);</code></p>
<p><code>binarySearch</code> nimmt als Parameter das zu durchsuchende Array, den gesuchten Wert und – nur bei Objekt-Arrays – auch noch einen Comparator. Die Bedeutung des index Werts der zurück kommt ist gemäss <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Arrays.html#binarySearch(T%5B%5D,T,java.util.Comparator)" target="_blank" rel="nofollow noopener noreferrer">JavaDocs</a> wie folgt definiert:</p>
<blockquote>
<p><span class="returnLabel">Returns:<br></span>index of the search key, if it is contained in the array; otherwise, <code>(-(<i>insertion point</i>) - 1)</code>. The <i>insertion point</i> is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or <code>a.length</code> if all elements in the array are less than the specified key. Note that this guarantees that the return value will be &gt;= 0 if and only if the key is found.</p>
</blockquote>
<p>Wird der <em>search key</em> im Array nicht gefunden, bedeutet ein Rückgabewert von –1, dass das Objekt am Anfang des Arrays eingefügt werden müsste, –2 bedeutet zwischen dem ersten und zweiten Element usw.</p>
<h3>Comperable</h3>
<p>Eine weitere Möglichkeit zum Sortieren mit Comparator besteht darin, auch bei Objekten eine natürliche Ordnung zu etablieren. Das ist aber nicht bei allen Klassen sinnvoll. Bücher sind keine guten Kandidaten für eine natürliche Ordnung. Besser geeignet wäre eine Klasse Person. Für Personen ist es in den meisten Programmen üblich alphabetisch nach Namen zu sortieren. Dazu muss eine Klasse das Interface Comperable und seine Methode <code>compareTo</code> implementieren:</p>
<p><code>public class Person implements Comparable {</code><br><code>    private String vorname, nachname;</code><br><code>    public int compareTo(Object o){</code><br><code>        Person other = (Person) o;</code><br><code>        int vergleichNachname = nachname.compareTo(other.nachname);</code><br><code>        if (vergleichNachname == 0){</code><br><code>            return vorname.compareTo(other.vorname);</code><br><code>        } else {</code><br><code>            return vergleichNachname;</code><br><code>        }</code><br><code>    }</code><br><code>}</code></p>
<p>Eine negative Zahl bedeutet, dass this kleiner ist, eine positive, dass this grösser ist, eine 0, dass beide gleich sind. Ein Array von solchen Objekten können Sie nun vergleichen, ohne einen Comparator zu verwenden:<br><br><code>Person[] leute = …;</code><br><code>Arrays.sort(leute);</code></p>
<h3>Parallel sortieren</h3>
<p>Mit der Methode <code>Arrays.parallelSort</code> kann die Sortierung in mehreren Threads gleichzeitig verarbeitet werden. Das bringt bei den heutigen Multi-Prozessorkern Geräten einen wesentlichen Performance unterschied und ist deutlich schneller.</p>
<h3>Füllen und kopieren</h3>
<p>Weil Arrays zusammenhängende Speicherbereiche belegen kann man mit den Methoden <code>Arrays.copyOf</code> und <code>Arrays.fill</code> wesentlich effizienter kopieren und füllen, als mit einer Schleife im Java-Code:</p>
<p><code>int[] zahlen = …;</code><br><code>int[] kopie = Arrays.copyOf(zahlen, zahlen.length);</code></p>
<p>Parameter zwei und drei von fill geben den Bereich an, der vierte Parameter <br>den Füllwert: <br><code>Arrays.fill(zahlen, 0, 1000, 1);</code></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Mehrdimensionale Java Arrays</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/mehrdimensionale-java-arrays.html"/>
        <id>https://www.finecloud.ch/mehrdimensionale-java-arrays.html</id>
            <category term="softwareentwicklung"/>
            <category term="mehrdimensionales array"/>
            <category term="java"/>
            <category term="dev"/>
            <category term="array"/>

        <updated>2022-05-23T18:02:25+02:00</updated>
            <summary>
                <![CDATA[
                    Eindimensionales Array Nebst den eindimensionalen Java Arrays gibt es auch mehrdimensionale Arrays. Hier ein Beispiel eines eindimensionalen Java Arrays: int[] zahlen = new&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3>Eindimensionales Array</h3>
<p>Nebst den eindimensionalen Java Arrays gibt es auch mehrdimensionale Arrays. Hier ein Beispiel eines eindimensionalen Java Arrays:</p>
<p><code>int[] zahlen = new int[]{1, 2, 3, 4};</code></p>
<h3>Mehrdimensionales Array</h3>
<p>Ein mehrdimensionales Array könnte beispielsweise ein Schachfeld sein:</p>
<p><code>Schachfigur[][] schachbrett = new Schachfigur[8][8];</code></p>
<p>Mehrdimensionale Arrays sind nicht auf zwei Dimensionen limitiert, die Limite ist bei 255 Dimensionen, aber das wird wohl eher selten benötigt.</p>
<h3>Zugriff auf ein mehrdimensionales Array </h3>
<p>Auf den Wert eines mehrdimensionale Arrays kann man genau so einfach zugreifen wie auf den eines eindimensionalen, dazu muss man nur die Koordinaten angeben:</p>
<p><code>schachbrett[2][1] = new Schachfigur(Figur.BAUER, Farbe.WEISS);</code></p>
<p>Es ist zudem möglich auf eine ganze Zeile eines eindimensionalen Arrays zuzugreifen, so erhält man ein eindimensionales Array desselben Typs zurück:</p>
<p><code>int[] grundreiheWeiss = schachbrett[1];</code><br><code>int[] grundreiheSchwarz = schachbrett[6];</code></p>
<p>Die einfachste Hilfe um das zu veranschaulichen ist die Visualisierung eines solchen Arrays:</p>
<p><code>int[][] a = new int[3][3];</code></p>
<table style="border-collapse: collapse; width: 100%; height: 201.438px;" border="1">
<tbody>
<tr style="height: 50.3594px;">
<td style="width: 16.5478%; height: 50.3594px;"> </td>
<td class="align-center" style="width: 16.6904%; height: 50.3594px;"><strong>Column1</strong></td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;"><strong>Column2</strong></td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;"><strong>Column3</strong></td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 16.5478%; height: 50.3594px;"><strong>Row1</strong></td>
<td class="align-center" style="width: 16.6904%; height: 50.3594px;">a[0][0]</td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;">a[0][1]</td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;">a[0][2]</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 16.5478%; height: 50.3594px;"><strong>Row2</strong></td>
<td class="align-center" style="width: 16.6904%; height: 50.3594px;">a[1][0]</td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;">a[1][1]</td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;">a[1][2]</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 16.5478%; height: 50.3594px;"><strong>Row3</strong></td>
<td class="align-center" style="width: 16.6904%; height: 50.3594px;">a[2][0]</td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;">a[2][1]</td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;">a[2][2]</td>
</tr>
</tbody>
</table>
<h3>Nicht rechteckige, zweidimensionale Arrays</h3>
<p>Solche Arrays müssen nicht rechteckig sein, es ist möglich ein ungleichmässig Dimensionales Array zu erstellen:</p>
<p><code>int[][] b = new int[3][];</code><br><code>b[0] = new int[1];</code><br><code>b[1] = new int[2];</code><br><code>b[2] = new int[3];</code></p>
<p>Das würde dann wie folgt aussehen:</p>
<table style="border-collapse: collapse; width: 100%; height: 201.438px;" border="1">
<tbody>
<tr style="height: 50.3594px;">
<td style="width: 16.5478%; height: 50.3594px;"> </td>
<td class="align-center" style="width: 16.6904%; height: 50.3594px;"><strong>Column1</strong></td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;"><strong>Column2</strong></td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;"><strong>Column3</strong></td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 16.5478%; height: 50.3594px;"><strong>Row1</strong></td>
<td class="align-center" style="width: 16.6904%; height: 50.3594px;">b[0][0]</td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;"> </td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;"> </td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 16.5478%; height: 50.3594px;"><strong>Row2</strong></td>
<td class="align-center" style="width: 16.6904%; height: 50.3594px;">b[1][0]</td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;">b[1][1]</td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;"> </td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 16.5478%; height: 50.3594px;"><strong>Row3</strong></td>
<td class="align-center" style="width: 16.6904%; height: 50.3594px;">b[2][0]</td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;">b[2][1]</td>
<td class="align-center" style="width: 33.3809%; height: 50.3594px;">b[2][2]</td>
</tr>
</tbody>
</table>
<p> </p>
            ]]>
        </content>
    </entry>
</feed>
