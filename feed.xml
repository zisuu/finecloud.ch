<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Finecloud</title>
    <link href="https://www.finecloud.ch/feed.xml" rel="self" />
    <link href="https://www.finecloud.ch" />
    <updated>2022-07-02T17:34:53+02:00</updated>
    <author>
        <name>Finecloud</name>
    </author>
    <id>https://www.finecloud.ch</id>

    <entry>
        <title>Kubernetes auf Proxmox mit Ansible und Terraform (Teil 2)</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/kubernetes-auf-proxmox-mit-ansible-und-terraform-teil-2.html"/>
        <id>https://www.finecloud.ch/kubernetes-auf-proxmox-mit-ansible-und-terraform-teil-2.html</id>
            <category term="terraform"/>
            <category term="proxmox"/>
            <category term="openebs"/>
            <category term="minio"/>
            <category term="metallb"/>
            <category term="kubernetes"/>
            <category term="kubeadm"/>
            <category term="k8s"/>
            <category term="istio"/>
            <category term="containerd"/>
            <category term="container"/>
            <category term="calico"/>
            <category term="ansible"/>

        <updated>2022-07-02T17:34:53+02:00</updated>
            <summary>
                <![CDATA[
                    Weiter musst du die IPs deiner VMs in dieser Datei nachtragen: ansible/inventory.yaml Vor der Bereitstellung von Kubernetes selbst müssen die Cluster-Knoten zusätzlich konfiguriert und Software installiert werden: Es gibt ein dediziertes Playbook zum Bootstrapping der Knoten mit allen erforderlichen Konfigurationen und Abhängigkeiten, die unter ansible/bootstrap.yaml&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g6umq8onb0g">Einleitung</a></li>
<li><a href="#mcetoc_1g6umq8onb0h">Voraussetzungen</a></li>
<li><a href="#mcetoc_1g6umq8onb0i">Vorbereitungen</a></li>
<li><a href="#mcetoc_1g6uqq0ncb8i">Notwendige Software</a>
<ul>
<li><a href="#mcetoc_1g6uqq0ncb8j">Volume Provisioning mit OpenEBS</a></li>
<li><a href="#mcetoc_1g6uqq0ncb8k">LoadBalancer mit MetalLB</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g6uqq0ncb8l">Installation überprüfen</a></li>
<li><a href="#kubernetes-dashboard">Kubernetes Dashboard</a></li>
</ul>
</div>
<p>Dieser Post wurde aus dem Original (<a href="https://datastrophic.io/kubernetes-homelab-with-proxmox-kubeadm-calico-openebs-and-metallb/)">https://datastrophic.io/kubernetes-homelab-with-proxmox-kubeadm-calico-openebs-and-metallb/)</a> auf Deutsch übersetzt und leicht angepasst.</p>
<h2 id="mcetoc_1g6umq8onb0g">Einleitung</h2>
<p>Nachdem wir im ersten Teil mit Terraform die VMs für unseren K8s Cluster deployed haben, werden wir nun mit Ansible die folgenden K8s Komponenten in den worker Nodes und dem Controller installieren:</p>
<ul dir="auto">
<li><code>kubeadm</code> für das Kubernetes Cluster bootstrapping</li>
<li><code>containerd</code> als container runtime</li>
<li><code>Calico</code> für das Pod networking</li>
<li><code>MetalLB</code>  verwenden wir als <code>LoadBalancer</code> service type</li>
<li><code>OpenEBS</code> für das Volume provisioning</li>
<li><code>Istio</code> für ingress und traffic management</li>
</ul>
<p>Die Kubernetes-Distribution der Wahl ist in diesem Fall Vanilla Open Source Kubernetes, das mit dem kubeadm-Tool für Cluster-Bootstrapping geliefert wird. Vanilla Kubernetes hat einen grösseren Fussabdruck im Vergleich zu k3s und eignet sich deshalb nicht gut für Umgebungen mit eingeschränkten Ressourcen. Es ist jedoch herstellerunabhängig und vollständig Open-Source, hat keine Modifikationen und sowohl die API-Änderungen als auch die Tools haben die gleiche Release-Kadenz, sodass das Risiko von Inkompatibilitäten oder Verzögerungen geringer ist.</p>
<h2 id="mcetoc_1g6umq8onb0h">Voraussetzungen</h2>
<ul>
<li>Cluster VMs sollten bereits provisioniert und erreichbar sein via SSH</li>
<li>empfohlen ist Ubuntu 20.04 als Cluster OS zu verwenden</li>
<li>der Benutzer (in unserem Fall <em>ubuntu</em>) sollte Superuser Berechtigungen haben auf den Cluster Nodes</li>
<li>Ansible ist lokal bei dir installiert</li>
</ul>
<h2 id="mcetoc_1g6umq8onb0i">Vorbereitungen</h2>
<p class="msg--info msg">Lade dir die Terraform und Ansible Files von <a href="https://github.com/datastrophic/kubernetes-deployment/tree/master/proxmox/" rel="nofollow">diesem Git Repo</a> herunter.</p>
<p>Die Variablen in  <code>ansible/group_vars/all</code> sollten noch überprüft werden:</p>
<div>
<ul>
<li><code>pod_subnet</code></li>
<li><code>service_subnet</code></li>
<li><code>dns</code></li>
<li><code>metallb_address_range</code></li>
</ul>
</div>
<p>Weiter musst du die IPs deiner VMs in dieser Datei nachtragen: <code>ansible/inventory.yaml</code></p>
<p>Vor der Bereitstellung von Kubernetes selbst müssen die Cluster-Knoten zusätzlich konfiguriert und Software installiert werden:</p>
<ul>
<li>Knoten müssen Swap deaktiviert, iptables aktiviert haben und Weiterleitung und überbrückten Datenverkehr gemäss Bootstrapping-Clustern mit kubeadm zulassen.</li>
<li>Auf den Knoten muss die Containerlaufzeit installiert sein. Die gängigste Containerlaufzeit, die in verschiedenen Cloud- und Anbieter-Kubernetes-Distributionen verwendet wird, ist containerd, also werden wir sie verwenden.</li>
<li>Weitere Informationen darüber, warum wir Docker nicht verwenden werden, findest du in <a href="https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/" rel="nofollow">Don’t Panic: Kubernetes and Docker</a>.</li>
<li>Auf Knoten müssen die folgenden Pakete installiert sein: kubelet, kubectl und kubeadm. Diese können über den Standard-Paketmanager wie apt installiert werden.</li>
</ul>
<p>Es gibt ein dediziertes Playbook zum Bootstrapping der Knoten mit allen erforderlichen Konfigurationen und Abhängigkeiten, die unter ansible/bootstrap.yaml verfügbar sind. Überprüfe die Standardeinstellungen und führe das Playbook wie folgt aus:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-section" style="color: #ffc66d;">#~$ ansible-playbook -i ansible/inventory.yaml ansible/bootstrap.yaml -u ubuntu</span>
[<span class="hljs-symbol" style="color: #6897bb;">WARNING</span>]: <span class="hljs-link" style="color: #629755;">Invalid characters were found in group names but not replaced, use -vvvv to see details</span>

PLAY [Bootstrapping hosts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
ok: [control-plane-0.k8s.cluster]
ok: [worker-1.k8s.cluster]
ok: [worker-0.k8s.cluster]
ok: [worker-2.k8s.cluster]

TASK [commons : install common packages] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [worker-0.k8s.cluster]

TASK [commons : disable swap] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [control-plane-0.k8s.cluster]

TASK [commons : disable swap in fstab] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>*
ok: [worker-2.k8s.cluster]
ok: [control-plane-0.k8s.cluster]
ok: [worker-0.k8s.cluster]
ok: [worker-1.k8s.cluster]

TASK [commons : enable br_netfilter] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [control-plane-0.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]

TASK [commons : ensure iptables enabled] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [worker-1.k8s.cluster]
changed: [control-plane-0.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]

TASK [commons : enable port forward] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [control-plane-0.k8s.cluster]

TASK [container-runtime : create config and data dirs] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [worker-2.k8s.cluster] =&gt; (item=/etc/containerd)
changed: [control-plane-0.k8s.cluster] =&gt; (item=/etc/containerd)
changed: [worker-1.k8s.cluster] =&gt; (item=/etc/containerd)
changed: [worker-0.k8s.cluster] =&gt; (item=/etc/containerd)
changed: [control-plane-0.k8s.cluster] =&gt; (item=/tmp/containerd)
changed: [worker-2.k8s.cluster] =&gt; (item=/tmp/containerd)
changed: [worker-1.k8s.cluster] =&gt; (item=/tmp/containerd)
changed: [worker-0.k8s.cluster] =&gt; (item=/tmp/containerd)

TASK [container-runtime : download and install runc] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
changed: [worker-1.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [control-plane-0.k8s.cluster]
changed: [worker-0.k8s.cluster]

TASK [container-runtime : download and install crictl] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [worker-1.k8s.cluster]
changed: [control-plane-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-0.k8s.cluster]

TASK [container-runtime : download containerd] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [worker-0.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [control-plane-0.k8s.cluster]
changed: [worker-2.k8s.cluster]

TASK [container-runtime : copy containerd binaries] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [control-plane-0.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]

TASK [container-runtime : copy containerd config] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [control-plane-0.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]

TASK [container-runtime : create containerd systemd service] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [worker-2.k8s.cluster]

TASK [container-runtime : reload systemd] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
ok: [worker-1.k8s.cluster]
ok: [worker-0.k8s.cluster]
ok: [worker-2.k8s.cluster]
ok: [control-plane-0.k8s.cluster]

TASK [container-runtime : enable containerd systemd service] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]

TASK [container-runtime : start containerd service] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [worker-0.k8s.cluster]
changed: [control-plane-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]

TASK [kubernetes-packages : adding Kubernetes repository apt key] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [control-plane-0.k8s.cluster]

TASK [kubernetes-packages : adding Kubernetes deb repository] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [worker-1.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [control-plane-0.k8s.cluster]

TASK [kubernetes-packages : installing Kubernetes packages] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [control-plane-0.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-0.k8s.cluster]
changed: [worker-1.k8s.cluster]

TASK [kubernetes-packages : hold kubeadm, kubectl, kubelet] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [worker-0.k8s.cluster] =&gt; (item=kubeadm)
changed: [worker-1.k8s.cluster] =&gt; (item=kubeadm)
changed: [control-plane-0.k8s.cluster] =&gt; (item=kubeadm)
changed: [worker-2.k8s.cluster] =&gt; (item=kubeadm)
changed: [worker-0.k8s.cluster] =&gt; (item=kubectl)
changed: [worker-1.k8s.cluster] =&gt; (item=kubectl)
changed: [worker-2.k8s.cluster] =&gt; (item=kubectl)
changed: [control-plane-0.k8s.cluster] =&gt; (item=kubectl)
changed: [worker-0.k8s.cluster] =&gt; (item=kubelet)
changed: [worker-1.k8s.cluster] =&gt; (item=kubelet)
changed: [worker-2.k8s.cluster] =&gt; (item=kubelet)
changed: [control-plane-0.k8s.cluster] =&gt; (item=kubelet)

PLAY RECAP <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
control-plane-0.k8s.cluster : ok=21  changed=18  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 
worker-0.k8s.cluster    : ok=21  changed=18  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 
worker-1.k8s.cluster    : ok=21  changed=18  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 
worker-2.k8s.cluster    : ok=21  changed=18  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 </pre>
<p>Sobald alle Voraussetzungen erfüllt sind, können wir kubeadm für das Cluster-Bootstrapping verwenden. Die Installation des Kubernetes-Clusters besteht aus zwei Hauptschritten: Bootstrapping der Steuerungsebene und Joining zu den Worker-Knoten. Wir können dies tun, indem wir das Playbook ansible/kubernetes-install.yaml ausführen:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-section" style="color: #ffc66d;">#~$ ansible-playbook -i ansible/inventory.yaml ansible/kubernetes-install.yaml -u ubuntu</span>
[<span class="hljs-symbol" style="color: #6897bb;">WARNING</span>]: <span class="hljs-link" style="color: #629755;">Invalid characters were found in group names but not replaced, use -vvvv to see details</span>

PLAY [Bootstrap Kubernetes Control Plane] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
ok: [control-plane-0.k8s.cluster]

TASK [kubeadm-init : copy kubeadm init config] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [control-plane-0.k8s.cluster]

TASK [kubeadm-init : running kubeadm init] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
changed: [control-plane-0.k8s.cluster]

TASK [calico : copy Calico manifests] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
changed: [control-plane-0.k8s.cluster]

TASK [calico : install Calico] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster]

PLAY [Retrieve join token and certificate hash] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
ok: [control-plane-0.k8s.cluster]

TASK [kubeadm-join-config : create local dir for token and cert hash] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [control-plane-0.k8s.cluster -&gt; localhost]

TASK [kubeadm-join-config : kubeadm token generate] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [control-plane-0.k8s.cluster]

TASK [kubeadm-join-config : generate cert hash] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
changed: [control-plane-0.k8s.cluster]

TASK [kubeadm-join-config : persist token locally] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster -&gt; localhost]

TASK [kubeadm-join-config : persist cert hash locally] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [control-plane-0.k8s.cluster -&gt; localhost]

PLAY [Join Kubernetes worker nodes] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
ok: [worker-1.k8s.cluster]
ok: [worker-2.k8s.cluster]
ok: [worker-0.k8s.cluster]

TASK [kubeadm-join : copy kubeadm join config] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [worker-0.k8s.cluster]
changed: [worker-1.k8s.cluster]
changed: [worker-2.k8s.cluster]

TASK [kubeadm-join : running kubeadm join] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
changed: [worker-1.k8s.cluster]
changed: [worker-2.k8s.cluster]
changed: [worker-0.k8s.cluster]

PLAY [Copy kubeconfig from remote] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
ok: [control-plane-0.k8s.cluster]

TASK [fetching] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster]

PLAY RECAP <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
control-plane-0.k8s.cluster : ok=13  changed=10  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 
worker-0.k8s.cluster    : ok=3  changed=2  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 
worker-1.k8s.cluster    : ok=3  changed=2  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 
worker-2.k8s.cluster    : ok=3  changed=2  unreachable=0  failed=0  skipped=0  rescued=0  ignored=0 </pre>
<p>Das Playbook führt kubeadm init auf den Knoten der Steuerungsebene aus und verwendet eine deklarative Clusterkonfiguration, die die bevorzugte Methode zum Konfigurieren von kubeadm ist. Die Konfigurationsvorlage ist unter ansible/roles/kubeadm-init/templates/kubeadm.yaml verfügbar. Sobald der Bootstrap der Steuerungsebene abgeschlossen ist, ruft Ansible ein Token und einen Zertifikat-Hash ab, die für die Authentifizierung der Worker-Knoten beim API-Server erforderlich sind, und führt kubeadm join auf den Worker-Knoten aus.<br><br>Das Playbook stellt Calico für die Clusternetzwerke bereit. Die Wahl von Calico ist motiviert, weil es die am weitesten verbreitete Netzwerk- und Sicherheitslösung für Kubernetes ist (zum Zeitpunkt des Schreibens).<br><br>Sobald die Playbook-Ausführung abgeschlossen ist, wird eine kubeconfig-Datei admin.conf in das aktuelle Verzeichnis geholt. Um zu überprüfen, ob der Cluster gebootet und verbunden ist, führe Folgendes aus:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">#~$  kubectl --kubeconfig=admin.conf get nodes</span>
NAME                          STATUS   ROLES                  AGE     VERSION
control-plane-0.k8s.cluster   Ready    control-plane,master   3m30s   v1.21.6
worker-0                      Ready    &lt;none&gt;                 2m54s   v1.21.6
worker-1                      Ready    &lt;none&gt;                 2m55s   v1.21.6
worker-2                      Ready    &lt;none&gt;                 2m55s   v1.21.6</pre>
<blockquote>
<p>es ist empfohlen die Location der admin.conf Datei als env. Variabel zu exportieren, damit man die Datei nicht jedesmal mit --kubeconfig mitgeben muss:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">export KUBECONFIG=<span class="hljs-variable" style="color: #629755;">$(pwd)</span>/<span class="hljs-literal" style="color: #6897bb;">admin</span>.conf</pre>
</blockquote>
<h2 id="mcetoc_1g6uqq0ncb8i">Notwendige Software</h2>
<p>Wenn der Kubernetes-Cluster eingerichtet und ausgeführt wird, können wir jetzt Container darauf bereitstellen und ausführen. Ein paar wesentliche Teile des voll funktionsfähigen Clusters fehlen jedoch noch: die dynamische Volume-Bereitstellung und die Unterstützung für Dienste welche einen LoadBalancer benötigen.</p>
<h3 id="mcetoc_1g6uqq0ncb8j">Volume Provisioning mit OpenEBS</h3>
<p>Die Volume Provisioner-Lösung ist sowohl in Situationen nützlich, in denen Anwendungen von Drittanbietern eine Standard-StorageClass zum Bereitstellen von PersistentVolumes benötigen, als auch in Situationen, in denen eine Datenreplikation für Hochverfügbarkeitsgarantien erforderlich ist.<br><br>Die Verwendung von OpenEBS für das Home-Lab-Setup erscheint vernünftig, da es lokale Engines für die Bereitstellung von PersistentVolumes bereitstellt, die direkt von den lokalen Festplatten auf Hosts unterstützt werden. Wenn eine Datenreplikation erforderlich ist, verfügt OpenEBS über mehrere Replicated Engines, deren Leistung jedoch unterschiedlich ist.<br><br>Um eine minimale Installation mit hostlokalen PersistentVolumes bereitzustellen, bietet OpenEBS eine „Lite“-Version:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-comment" style="color: grey;">#~$ kubectl apply -f https://openebs.github.io/charts/openebs-operator-lite.yaml</span>
namespace/openebs created
serviceaccount/openebs-maya-operator created
clusterrole.rbac.authorization.k8s.io/openebs-maya-operator created
clusterrolebinding.rbac.authorization.k8s.io/openebs-maya-operator created
customresourcedefinition.apiextensions.k8s.io/blockdevices.openebs.io created
customresourcedefinition.apiextensions.k8s.io/blockdeviceclaims.openebs.io created
configmap/openebs-ndm-config created
daemonset.apps/openebs-ndm created
deployment.apps/openebs-ndm-operator created
deployment.apps/openebs-ndm-cluster-exporter created
service/openebs-ndm-cluster-exporter-service created
daemonset.apps/openebs-ndm-node-exporter created
service/openebs-ndm-node-exporter-service created
deployment.apps/openebs-localpv-provisioner created</pre>
<p>Sobald der Operator installiert ist, erstellen wir eine StorageClass und setzen diese als Standard. Das ermöglicht die Verwendung von OpenEBS für die Volume-Bereitstellung, ohne dass jedes Mal die StorageClass für PersistentVolumes angegeben werden muss:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl apply <span class="hljs-_">-f</span> https://openebs.github.io/charts/openebs-operator-lite.yaml
namespace/openebs created
serviceaccount/openebs-maya-operator created
clusterrole.rbac.authorization.k8s.io/openebs-maya-operator created
clusterrolebinding.rbac.authorization.k8s.io/openebs-maya-operator created
customresourcedefinition.apiextensions.k8s.io/blockdevices.openebs.io created
customresourcedefinition.apiextensions.k8s.io/blockdeviceclaims.openebs.io created
configmap/openebs-ndm-config created
daemonset.apps/openebs-ndm created
deployment.apps/openebs-ndm-operator created
deployment.apps/openebs-ndm-cluster-exporter created
service/openebs-ndm-cluster-exporter-service created
daemonset.apps/openebs-ndm-node-exporter created
service/openebs-ndm-node-exporter-service created
deployment.apps/openebs-localpv-provisioner created
Dave@ChuckNorris[08:37:02]~/github/homelab$ kubectl apply <span class="hljs-_">-f</span> - &lt;&lt;EOF
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: openebs-hostpath
  annotations:
    storageclass.kubernetes.io/is-default-class: <span class="hljs-string" style="color: #6a8759;">"true"</span>
    openebs.io/cas-type: <span class="hljs-built_in">local</span>
    cas.openebs.io/config: |
      - name: StorageType
        value: <span class="hljs-string" style="color: #6a8759;">"hostpath"</span>
      - name: BasePath
        value: <span class="hljs-string" style="color: #6a8759;">"/var/openebs/local/"</span>
provisioner: openebs.io/<span class="hljs-built_in">local</span>
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete
EOF
storageclass.storage.k8s.io/openebs-hostpath created</pre>
<h3 id="mcetoc_1g6uqq0ncb8k">LoadBalancer mit MetalLB</h3>
<p>Eine letzte fehlende Funktionalität im bereitgestellten Cluster ist die Möglichkeit, Dienste vom Typ LoadBalancer für das lokale Netzwerk verfügbar zu machen. Bei der Ausführung in der Cloud wird diese Funktionalität von den Kubernetes-Integrationen mit Cloud-Anbietern bereitgestellt, und entsprechende netzwerkseitige Load Balancer werden über den Infrastrukturanbieter bereitgestellt. Bei der Ausführung auf Bare Metal ist eine solche Integration in Kubernetes standardmässig nicht verfügbar.<br><br>MetalLB ist die am weitesten verbreitete Lösung für den NetzwerkLB.<br><br>Die MetalLB-Installation wird über eine ConfigMap konfiguriert und kann mehrere Adresspools enthalten:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attr">apiVersion:</span> v1
<span class="hljs-attr">kind:</span> ConfigMap
<span class="hljs-attr">metadata:</span>
<span class="hljs-attr">  namespace:</span> metallb-system
<span class="hljs-attr">  name:</span> config
<span class="hljs-attr">data:</span>
<span class="hljs-attr">  config:</span> <span class="hljs-string" style="color: #6a8759;">|
</span><span class="hljs-attr">    address-pools:</span>
<span class="hljs-attr">    - name:</span> default
<span class="hljs-attr">      protocol:</span> layer2
<span class="hljs-attr">      addresses:</span>
<span class="hljs-bullet" style="color: #6897bb;">      -</span> <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-template-variable" style="color: #629755;">{{ lab.metallb_address_range }}</span>"</span> </pre>
<p>Die obere Vorlage ist Teil des Ansible-Playbooks <code>ansible/metallb.yaml</code>, das die MetalLB installiert und konfiguriert, um Adressen aus der in <code>group_vars</code> angegebenen Variable <code>lab.metallb_address_range</code> zuzuweisen. Der Adressbereich muss für die Zielumgebung relevant sein (Teil des reservierten statischen Adressbereichs, der im Abschnitt zum Bereitstellungslayout beschrieben ist, damit die Adressen zugewiesen werden können. Um MetalLB zu installieren, führe Folgendes aus:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ ansible-playbook -i ansible/inventory.yaml ansible/metallb.yaml -u ubuntu
[<span class="hljs-symbol" style="color: #6897bb;">WARNING</span>]: <span class="hljs-link" style="color: #629755;">Invalid characters were found in group names but not replaced, use -vvvv to see details</span>

PLAY [Install MetalLB] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>

TASK [Gathering Facts] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
ok: [control-plane-0.k8s.cluster]

TASK [metallb : copy MetalLB manifests] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [control-plane-0.k8s.cluster]

TASK [metallb : copy MetalLB config] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>*
changed: [control-plane-0.k8s.cluster]

TASK [metallb : create namespace] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>*
changed: [control-plane-0.k8s.cluster]

TASK [metallb : install MetalLB config] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-emphasis" style="font-style: italic;">***</span>
changed: [control-plane-0.k8s.cluster]

TASK [metallb : install MetalLB] <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>
changed: [control-plane-0.k8s.cluster]

PLAY RECAP <span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span><span class="hljs-strong" style="font-weight: bold;">*****</span>**
control-plane-0.k8s.cluster : ok=6    changed=5    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  </pre>
<h2 id="mcetoc_1g6uqq0ncb8l">Installation überprüfen</h2>
<p>Um die Installation zu überprüfen, erstellen wir eine MinIO-Bereitstellung mit einem PersistentVolume für die Speicherung und stellen die Bereitstellung dem lokalen Netzwerk über den LoadBalancer-Diensttyp zur Verfügung. Das Beispiel basiert auf den Kubernetes-Speicherbeispielen.</p>
<ol>
<li>Erstellen ein PersistentVolumeClaim:<br>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl apply <span class="hljs-_">-f</span> - &lt;&lt;EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
EOF
persistentvolumeclaim/minio-pv-claim created</pre>
</li>
<li>Erstelle ein Deployment:<br>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl apply <span class="hljs-_">-f</span> - &lt;&lt;EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio-deployment
spec:
  selector:
    matchLabels:
      app: minio
  strategy:
    <span class="hljs-built_in">type</span>: Recreate
  template:
    metadata:
      labels:
        app: minio
    spec:
      volumes:
      - name: storage
EOF       mountPath: <span class="hljs-string" style="color: #6a8759;">"/storage"</span>Ytim
deployment.apps/minio-deployment created</pre>
</li>
<li>Überprüfe ob der PersistentVolumeClaim an das PersistentVolume gebunden ist und dies erstellt wurde:<br>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl get pvc
NAME             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS       AGE
minio-pv-claim   Bound    pvc-8cb55047-43b6-4ab8<span class="hljs-_">-a</span>8cb-20dc1ecf1979   1Gi        RWO            openebs-hostpath   3m4s</pre>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl get pv
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                    STORAGECLASS       REASON   AGE
pvc-8cb55047-43b6-4ab8<span class="hljs-_">-a</span>8cb-20dc1ecf1979   1Gi        RWO            Delete           Bound    default/minio-pv-claim   openebs-hostpath            28s</pre>
</li>
<li>Überprüfe, ob das Deployment erfolgreich war:<br>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl describe deployment minio-deployment
Name:               minio-deployment
Namespace:          default
CreationTimestamp:  Sat, 02 Jul 2022 08:54:36 +0200
Labels:             &lt;none&gt;
Annotations:        deployment.kubernetes.io/revision: 1
Selector:           app=minio
Replicas:           1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:       Recreate
M<span class="hljs-keyword" style="color: #cc7832;">in</span>ReadySeconds:    0
Pod Template:
  Labels:  app=minio
  Containers:
   minio:
    Image:       minio/minio:latest
    Ports:       9000/TCP, 9001/TCP
    Host Ports:  9000/TCP, 9001/TCP
    Args:
      server
      /storage
      --console-address
      :9001
    Environment:
      MINIO_ACCESS_KEY:  minio
      MINIO_SECRET_KEY:  minio123
    Mounts:
      /storage from storage (rw)
  Volumes:
   storage:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim <span class="hljs-keyword" style="color: #cc7832;">in</span> the same namespace)
    ClaimName:  minio-pv-claim
    ReadOnly:   <span class="hljs-literal" style="color: #6897bb;">false</span>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  &lt;none&gt;
NewReplicaSet:   minio-deployment-59659f9655 (1/1 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  56s   deployment-controller  Scaled up replica <span class="hljs-built_in">set</span> minio-deployment-59659f9655 to 1</pre>
</li>
<li>Stelle das Deployment via Service vom Typ LoadBalancer zur Verfügung:<br>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl apply <span class="hljs-_">-f</span> - &lt;&lt;EOF
apiVersion: v1
kind: Service
metadata:
  name: minio
spec:
  ports:
  - name: http
    port: 9000
    protocol: TCP
    targetPort: 9000
  - name: http-ui
    port: 9001
    protocol: TCP
    targetPort: 9001
  selector:
    app: minio
  <span class="hljs-built_in">type</span>: LoadBalancer
EOF</pre>
</li>
<li>Überprüfe, ob der Service erstellt wurde und eine Externe IP erhalten hat:<br>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl get service minio
NAME    TYPE           CLUSTER-IP      EXTERNAL-IP      PORT(S)                         AGE
minio   LoadBalancer   10.97.129.247   192.168.30.150   9000:31713/TCP,9001:32327/TCP   10s</pre>
</li>
</ol>
<p>Die externe IP Adresse sollte in dem Anfangs definierten lokalen Subnetz Range sein. Du kannst nun via Browser die MinIO Konsole öffnen (in meinem Fall war die URL: <a href="http://192.168.30.150:9001/login">http://192.168.30.150:9001/login</a>) und dich mit Benutzer <em>minio</em> und Passwort <em>minio123</em> einloggen. Erstelle anschliessend ein Test Bucket, damit wir später auch überprüfen können ob die Daten persistent im Volume gespeichert werden:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/44/Screenshot-2022-07-02-at-17.03.04.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-xs.png 300w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-sm.png 480w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-md.png 768w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-lg.png 1024w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-xl.png 1360w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.03.04-2xl.png 1600w"  alt="" width="680" height="637"></figure>
<p>Nun können wir direkt überprüfen, ob das Test-Bucket (testsetsetsgsdgfsdgagbadfg) im PersistentVolume gespeichert wurde:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl <span class="hljs-built_in">exec</span> deploy/minio-deployment -- bash -c <span class="hljs-string" style="color: #6a8759;">"ls -la /storage"</span>
drwxrwxrwx 4 root root 4096 Jul  2 06:59 .
drwxr-xr-x 1 root root 4096 Jul  2 06:54 ..
drwxr-xr-x 8 root root 4096 Jul  2 06:54 .minio.sys
drwxr-xr-x 5 root root 4096 Jul  2 15:06 testsetsetsgsdgfsdgagbadfg</pre>
<p>Damit können wir sicher sein, dass die Daten im Testbucket im PersistentVolume landen.</p>
<p>Als letzter Schritt werden wir das Kubernetes Dashboard deployen, damit kann man den Gesamten K8s Cluster als WebUI bedienen.</p>
<h2 id="kubernetes-dashboard">Kubernetes Dashboard</h2>
<p>Das Kubernetes-Dashboard ist die unverzichtbare Mindestlösung für die Beobachtbarkeit. Das Kubernetes-Dashboard verfügt über eine entsprechende Installationsanleitung, und hier konzentrieren wir uns auf die entsprechenden RBAC-Berechtigungen für den verwendeten ServiceAccount.<br><br>Zuerst installieren wir das Kubernetes Dashboard:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~$ kubectl apply <span class="hljs-_">-f</span> https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml
namespace/kubernetes-dashboard created
serviceaccount/kubernetes-dashboard created
service/kubernetes-dashboard created
secret/kubernetes-dashboard-certs created
secret/kubernetes-dashboard-csrf created
secret/kubernetes-dashboard-key-holder created
configmap/kubernetes-dashboard-settings created
role.rbac.authorization.k8s.io/kubernetes-dashboard created
clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created
rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
deployment.apps/kubernetes-dashboard created
service/dashboard-metrics-scraper created
deployment.apps/dashboard-metrics-scraper created</pre>
<p>Während das Kubernetes-Dashboard das Erstellen neuer Ressourcen und das Bearbeiten vorhandener Ressourcen ermöglicht, ist die Verwendung im schreibgeschützten Modus sicherer und würde keine Sicherheitsrisiken mit sich bringen, falls jemand Zugriff auf die Benutzeroberfläche erhält. Der Sichtbarkeitsbereich des Dashboards wird über RBAC der darauf zugreifenden Benutzer gesteuert.<br><br>Der konservativste Ansatz wäre, eine Aggregated ClusterRole basierend auf der Standard-Viewer-Rolle zu verwenden und sie bei Bedarf mit zusätzlichen Regeln zu erweitern:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">kubectl apply <span class="hljs-_">-f</span> - &lt;&lt;EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dashboard-viewer
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.authorization.k8s.io/aggregate-to-view: <span class="hljs-string" style="color: #6a8759;">"true"</span>
  - matchLabels:
      rbac.homelab.k8s.io/aggregate-to-view: <span class="hljs-string" style="color: #6a8759;">"true"</span>
rules: []

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dashboard-extended-view
  labels:
    rbac.homelab.k8s.io/aggregate-to-view: <span class="hljs-string" style="color: #6a8759;">"true"</span>
rules:
- apiGroups:
  - <span class="hljs-string" style="color: #6a8759;">""</span>
  resources:
  - nodes
  - extensions
  - apps
  - batch
  - storage
  - networking
  verbs:
  - get
  - list
  - watch
EOF</pre>
<p>Die ClusterRole bietet erweiterte Anzeigeberechtigungen, erlaubt aber immer noch nicht das Anzeigen von Secrets und Ressourcen aus der API-Gruppe rbac.authorization.k8s.io. Wir erstellen uns nun ein dedizierter ServiceAccount und binden den Account an die erstellte ClusterRole:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">kubectl apply <span class="hljs-_">-f</span> - &lt;&lt;EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dashboard-viewer
  namespace: kubernetes-dashboard

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dashboard-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dashboard-viewer
subjects:
- kind: ServiceAccount
  name: dashboard-viewer
  namespace: kubernetes-dashboard
EOF
</pre>
<p>Auf das Dashboard kann entweder über den kubectl-Proxy oder über die Portweiterleitung zugegriffen werden:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">kubectl -n kubernetes-dashboard port-forward service/kubernetes-dashboard 8443:443</pre>
<p>Das Dashboard kann nun unter dieser URL erreicht werden: <a href="https://localhost:8443/">https://localhost:8443/</a> :</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/44/Screenshot-2022-07-02-at-17.25.57.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-xs.png 300w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-sm.png 480w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-md.png 768w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-lg.png 1024w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-xl.png 1360w ,https://www.finecloud.ch/media/posts/44/responsive/Screenshot-2022-07-02-at-17.25.57-2xl.png 1600w"  alt="" width="1474" height="380"></figure>
<p>Um das ServiceAccount-Token für den Zugriff auf das Dashboard zu ermitteln, führen wir Folgendes aus:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/dashboard-viewer -o jsonpath=<span class="hljs-string" style="color: #6a8759;">"{.secrets[0].name}"</span>) -o go-template=<span class="hljs-string" style="color: #6a8759;">"{{.data.token | base64decode}}"</span></pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Kubernetes auf Proxmox mit Ansible und Terraform (Teil 1)</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/kubernetes-auf-proxmox-mit-ansible-und-terraform.html"/>
        <id>https://www.finecloud.ch/kubernetes-auf-proxmox-mit-ansible-und-terraform.html</id>
            <category term="virtualization"/>
            <category term="unix"/>
            <category term="tools"/>
            <category term="terraform"/>
            <category term="ssh"/>
            <category term="shell"/>
            <category term="proxmox"/>
            <category term="network"/>
            <category term="linux"/>
            <category term="kvm"/>
            <category term="kubernetes"/>
            <category term="k8s"/>
            <category term="iac"/>
            <category term="ansible"/>

        <updated>2022-07-01T21:57:04+02:00</updated>
            <summary>
                <![CDATA[
                    Einleitung In ersten Teil werden wir ein cloud-init Template erstellen, welches wir dann mit Terraform nutzen um die K8S VMs zu erzeugen. Damit wir mit Terraform unsere Kubernetes Nodes deployen können, brauchen wir ein Template. Das kann man entweder bereits mit Ansible machen, sieh dir&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g6tl57b7ar2">Einleitung</a></li>
<li><a href="#mcetoc_1g6tb05kfaqf">Template Erstellen</a></li>
<li><a href="#mcetoc_1g6tb05kfaqg">Terraform IaC</a>
<ul>
<li><a href="#mcetoc_1g6tb05kfaqh">Proxmox vorbereiten für Terraform</a></li>
<li><a href="#mcetoc_1g6tb05kfaqi">Terraform ausführen</a></li>
</ul>
</li>
</ul>
</div>
<h2 id="mcetoc_1g6tl57b7ar2">Einleitung</h2>
<p>In ersten Teil werden wir ein cloud-init Template erstellen, welches wir dann mit Terraform nutzen um die K8S VMs zu erzeugen.</p>
<h2 id="mcetoc_1g6tb05kfaqf">Template Erstellen</h2>
<p>Damit wir mit Terraform unsere Kubernetes Nodes deployen können, brauchen wir ein Template. Das kann man entweder bereits mit Ansible machen, sieh dir <a href="https://github.com/datastrophic/kubernetes-deployment/blob/master/proxmox/README.md" rel="nofollow">diesen Blog Artikel</a> an. Was mit daran aber nicht gefällt ist folgendes:</p>
<blockquote>
<p>The playbook should be run as root on the PVE host itself.</p>
</blockquote>
<p>Echt jetzt? als root direkt auf dem Proxmox Host - d.h. zuerst noch Ansible auf Proxmox installieren? mhhh, nee danke.</p>
<p>Deshalb habe ich mich entschieden das Template lieber von Hand zu erstellen, da ich will den <strong>Ansible overhead nicht auf meinem Proxmox will und schon gar nicht als root ein Playboook ausführen.</strong></p>
<p>Logge dich mit deinem Admin User <strong>(nicht root - man arbeitet nie mit root)</strong> auf einer deiner Proxmox Hosts ein und führe folgende Befehle aus, um das Ubuntu Template für unsere K8s Nodes zu erstellen:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">wget https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img -P /tmp/
mv /tmp/focal-server-cloudimg-amd64.img /tmp/ubuntu-2004-server-amd64.qcow2
qm create 1001 --name ubuntu-2004-cloudinit-template --memory 4096 --net0 virtio,bridge=vmbr0
qm importdisk 1001 /tmp/ubuntu-2004-server-amd64.qcow2 <span class="hljs-built_in">local</span>-zfs
qm <span class="hljs-built_in">set</span> 1001 --scsihw virtio-scsi-pci --scsi0 <span class="hljs-built_in">local</span>-zfs:vm-1001-disk-0
qm <span class="hljs-built_in">set</span> 1001 --ide2 <span class="hljs-built_in">local</span>-zfs:cloudinit
qm <span class="hljs-built_in">set</span> 1001 --boot c --bootdisk scsi0
qm <span class="hljs-built_in">set</span> 1001 --serial0 socket --vga serial0
qm template 1001
</pre>
<h2 id="mcetoc_1g6tb05kfaqg">Terraform IaC</h2>
<p>Nun bereiten wir den Terraform Infrastructure-as-Code vor. Dazu erstellen wir zuerst eine neue Datei Namens <code>main.tf</code> mit dem folgenden Inhalt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">resource <span class="hljs-string" style="color: #6a8759;">"proxmox_vm_qemu"</span> <span class="hljs-string" style="color: #6a8759;">"control_plane"</span> {
  <span class="hljs-attr">count</span>             = <span class="hljs-number" style="color: #6897bb;">1</span>
  <span class="hljs-attr">name</span>              = <span class="hljs-string" style="color: #6a8759;">"control-plane-<span class="hljs-subst">${count.index}</span>.k8s.cluster"</span>
  <span class="hljs-attr">target_node</span>       = <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-subst">${var.pm_node}</span>"</span>

  <span class="hljs-attr">clone</span>             = <span class="hljs-string" style="color: #6a8759;">"ubuntu-2004-cloudinit-template"</span>

  <span class="hljs-attr">os_type</span>           = <span class="hljs-string" style="color: #6a8759;">"cloud-init"</span>
  <span class="hljs-attr">cores</span>             = <span class="hljs-number" style="color: #6897bb;">4</span>
  <span class="hljs-attr">sockets</span>           = <span class="hljs-string" style="color: #6a8759;">"1"</span>
  <span class="hljs-attr">cpu</span>               = <span class="hljs-string" style="color: #6a8759;">"host"</span>
  <span class="hljs-attr">memory</span>            = <span class="hljs-number" style="color: #6897bb;">2048</span>
  <span class="hljs-attr">scsihw</span>            = <span class="hljs-string" style="color: #6a8759;">"virtio-scsi-pci"</span>
  <span class="hljs-attr">bootdisk</span>          = <span class="hljs-string" style="color: #6a8759;">"scsi0"</span>

  disk {
    <span class="hljs-attr">size</span>            = <span class="hljs-string" style="color: #6a8759;">"20G"</span>
    <span class="hljs-attr">type</span>            = <span class="hljs-string" style="color: #6a8759;">"scsi"</span>
    <span class="hljs-attr">storage</span>         = <span class="hljs-string" style="color: #6a8759;">"local-lvm"</span>
    <span class="hljs-attr">iothread</span>        = <span class="hljs-number" style="color: #6897bb;">1</span>
  }

  network {
    <span class="hljs-attr">model</span>           = <span class="hljs-string" style="color: #6a8759;">"virtio"</span>
    <span class="hljs-attr">bridge</span>          = <span class="hljs-string" style="color: #6a8759;">"vmbr0"</span>
  }

  <span class="hljs-comment" style="color: grey;"># cloud-init settings</span>
  <span class="hljs-comment" style="color: grey;"># adjust the ip and gateway addresses as needed</span>
  <span class="hljs-attr">ipconfig0</span>         = <span class="hljs-string" style="color: #6a8759;">"ip=192.168.0.11<span class="hljs-subst">${count.index}</span>/24,gw=192.168.0.1"</span>
  <span class="hljs-attr">sshkeys</span> = file(<span class="hljs-string" style="color: #6a8759;">"<span class="hljs-subst">${var.ssh_key_file}</span>"</span>)
}

resource <span class="hljs-string" style="color: #6a8759;">"proxmox_vm_qemu"</span> <span class="hljs-string" style="color: #6a8759;">"worker_nodes"</span> {
  <span class="hljs-attr">count</span>             = <span class="hljs-number" style="color: #6897bb;">3</span>
  <span class="hljs-attr">name</span>              = <span class="hljs-string" style="color: #6a8759;">"worker-<span class="hljs-subst">${count.index}</span>.k8s.cluster"</span>
  <span class="hljs-attr">target_node</span>       = <span class="hljs-string" style="color: #6a8759;">"<span class="hljs-subst">${var.pm_node}</span>"</span>

  <span class="hljs-attr">clone</span>             = <span class="hljs-string" style="color: #6a8759;">"ubuntu-2004-cloudinit-template"</span>

  <span class="hljs-attr">os_type</span>           = <span class="hljs-string" style="color: #6a8759;">"cloud-init"</span>
  <span class="hljs-attr">cores</span>             = <span class="hljs-number" style="color: #6897bb;">4</span>
  <span class="hljs-attr">sockets</span>           = <span class="hljs-string" style="color: #6a8759;">"1"</span>
  <span class="hljs-attr">cpu</span>               = <span class="hljs-string" style="color: #6a8759;">"host"</span>
  <span class="hljs-attr">memory</span>            = <span class="hljs-number" style="color: #6897bb;">4098</span>
  <span class="hljs-attr">scsihw</span>            = <span class="hljs-string" style="color: #6a8759;">"virtio-scsi-pci"</span>
  <span class="hljs-attr">bootdisk</span>          = <span class="hljs-string" style="color: #6a8759;">"scsi0"</span>

  disk {
    <span class="hljs-attr">size</span>            = <span class="hljs-string" style="color: #6a8759;">"20G"</span>
    <span class="hljs-attr">type</span>            = <span class="hljs-string" style="color: #6a8759;">"scsi"</span>
    <span class="hljs-attr">storage</span>         = <span class="hljs-string" style="color: #6a8759;">"local-lvm"</span>
    <span class="hljs-attr">iothread</span>        = <span class="hljs-number" style="color: #6897bb;">1</span>
  }

  network {
    <span class="hljs-attr">model</span>           = <span class="hljs-string" style="color: #6a8759;">"virtio"</span>
    <span class="hljs-attr">bridge</span>          = <span class="hljs-string" style="color: #6a8759;">"vmbr0"</span>
  }

  <span class="hljs-comment" style="color: grey;"># cloud-init settings</span>
  <span class="hljs-comment" style="color: grey;"># adjust the ip and gateway addresses as needed</span>
  <span class="hljs-attr">ipconfig0</span>         = <span class="hljs-string" style="color: #6a8759;">"ip=192.168.0.12<span class="hljs-subst">${count.index}</span>/24,gw=192.168.0.1"</span>
  <span class="hljs-attr">sshkeys</span> = file(<span class="hljs-string" style="color: #6a8759;">"<span class="hljs-subst">${var.ssh_key_file}</span>"</span>)
}
</pre>
<ul>
<li><code>clone</code> muss der eindeutige Name der Template VM sein, welche wir im letzten Schritt erstellen haben</li>
<li><code>ipconfig0</code> muss das Subnetz sein in welchem die VMs laufen sollen. In diesem Fall weisen wir den VMs statische IPs zu in einem realen, externen Netzwerk, sodass diese Hosts ohne NAT Routing auskommen und aus Sicht der anderen Hosts "ganz normal" aussehen.</li>
<li><span class="hljs-attr"><code>storage</code> musst du evt. anpassen, je nachdem was du bei dir für ein Dateisystem hast. Bei ZFS musst du local-zfs angeben usw.</span></li>
</ul>
<p>Weiter benötigen wir eine Datei mit den Variabeln, <code>variables.tf</code> mit dem Folgenden Inhalt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">variable <span class="hljs-string" style="color: #6a8759;">"pm_api_url"</span> {
  default = <span class="hljs-string" style="color: #6a8759;">"https://proxmox.lab.local/api2/json"</span>
}

variable <span class="hljs-string" style="color: #6a8759;">"pm_node"</span> {
  default = <span class="hljs-string" style="color: #6a8759;">"pve"</span>
}

<span class="hljs-comment" style="color: grey;"># variable "pm_user" {</span>
<span class="hljs-comment" style="color: grey;">#   default = ""</span>
<span class="hljs-comment" style="color: grey;"># }</span>

<span class="hljs-comment" style="color: grey;"># variable "pm_password" {</span>
<span class="hljs-comment" style="color: grey;">#   default = ""</span>
<span class="hljs-comment" style="color: grey;"># }</span>

variable <span class="hljs-string" style="color: #6a8759;">"ssh_key_file"</span> {
  default = <span class="hljs-string" style="color: #6a8759;">"~/.ssh/id_rsa.pub"</span>
}</pre>
<ul>
<li><code>pm_api_url</code> muss deine Proxmox URL sein, wenn du kein DNS und kein reverse proxy hast, muss du die IP verwenden und Port 8006.</li>
<li><code>pm_node</code> ist der Node deines Proxmox Clusters, auf welchem du dieses Terrafrom plan ausführen willst.</li>
<li><code>ssh_key_file</code> dein ssh key mit welchem du dann auf die K8S VMs verbinden kannst.</li>
</ul>
<p>Die letzte Datei welche wir noch brauchen ist die provider.tf mit diesem Inhalt:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">terraform {
  required_providers {
    proxmox = {
      <span class="hljs-built_in">source</span> = <span class="hljs-string" style="color: #6a8759;">"Telmate/proxmox"</span>
      version = <span class="hljs-string" style="color: #6a8759;">"2.9.10"</span>
    }
  }
}

provider <span class="hljs-string" style="color: #6a8759;">"proxmox"</span> {
  pm_parallel       = 1
  pm_tls_insecure   = <span class="hljs-literal" style="color: #6897bb;">false</span>
  pm_api_url        = var.pm_api_url
<span class="hljs-comment" style="color: grey;">#   pm_password       = var.pm_password</span>
<span class="hljs-comment" style="color: grey;">#   pm_user           = var.pm_user</span>
}</pre>
<h3 id="mcetoc_1g6tb05kfaqh">Proxmox vorbereiten für Terraform</h3>
<p>Damit wir Proxmox mit Terraform steuern können, müssen wir zuerst noch ein paar Anpassungen machen. Dazu gehört folgendes (direkt auf dem Poxmox Host via CLI ausführen):</p>
<ul>
<li>Neue Rolle erstellen für den zukünftigen Terraform-Benutzer</li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Benutzer „terraform-prov@pve“ erstellen</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Dem Benutzer terraform-prov die Rolle TERRAFORM-PROV hinzufügen</span></li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">pveum role add TerraformProv -privs <span class="hljs-string" style="color: #6a8759;">"VM.Allocate VM.Clone VM.Config.CDROM VM.Config.CPU VM.Config.Cloudinit VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network VM.Config.Options VM.Monitor VM.Audit VM.PowerMgmt Datastore.AllocateSpace Datastore.Audit"</span>
pveum user add terraform-prov@pve
pveum aclmod / -user terraform-prov@pve -role TerraformProv
pveum passwd terraform-prov@pve</pre>
<h3 id="mcetoc_1g6tb05kfaqi">Terraform ausführen</h3>
<p>Wenn du dich fragst, wieso ich beim Letzten Schritt <code style="font-weight: var(--font-weight-normal);">pm_user</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> und </span><code style="font-weight: var(--font-weight-normal);">pm_password</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> auskommentiert habe: man sollte nie Secrets nie in eine Datei schreiben! Wir lösen das, indem wir die folgenden env. Variabeln definieren (lokal auf deinem Gerät ausführen, auf welchem du Terraform verwenden willst):</span><span class="pl-k"><br></span></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-built_in">#~/github/homelab/terraform$ export</span> PM_USER=<span class="hljs-string" style="color: #6a8759;">"terraform-prov@pve"</span>
<span class="hljs-built_in">#~/github/homelab/terraform$ export</span> PM_PASS=<span class="hljs-string" style="color: #6a8759;">"password"</span></pre>
<p>Zuerst machen wir ein terraform init, um alle benötigten Komponenten zu installieren und das neue Terraform Repo zu initieren<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> (lokal auf deinem Gerät ausführen, auf welchem du Terraform verwenden willst):</span></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~/github/homelab/terraform$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding telmate/proxmox versions matching <span class="hljs-string" style="color: #6a8759;">"2.9.10"</span>...
- Installing telmate/proxmox v2.<span class="hljs-number" style="color: #6897bb;">9</span>.<span class="hljs-number" style="color: #6897bb;">10</span>...
- Installed telmate/proxmox v2.<span class="hljs-number" style="color: #6897bb;">9</span>.<span class="hljs-number" style="color: #6897bb;">10</span> (self-signed, key ID xxxx)

Partner and community providers are signed by their developers.
If youd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run <span class="hljs-string" style="color: #6a8759;">"terraform init"</span> in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running <span class="hljs-string" style="color: #6a8759;">"terraform plan"</span> to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.</pre>
<p>Als nächster Schritt erstellen mit terraform plan, einen terraform Plan und schreiben diese in eine Datei,<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> (lokal auf deinem Gerät ausführen, auf welchem du Terraform verwenden willst)</span>:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~/github/homelab/terraform$ terraform plan -out plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  <span class="hljs-comment" style="color: grey;"># proxmox_vm_qemu.control_plane[0] will be created</span>
  + resource <span class="hljs-string" style="color: #6a8759;">"proxmox_vm_qemu"</span> <span class="hljs-string" style="color: #6a8759;">"control_plane"</span> {
      + additional_<span class="hljs-built_in">wait</span>           = 0
      + agent                     = 0
      + automatic_reboot          = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + balloon                   = 0
      + bios                      = <span class="hljs-string" style="color: #6a8759;">"seabios"</span>
      + boot                      = <span class="hljs-string" style="color: #6a8759;">"c"</span>
      + bootdisk                  = <span class="hljs-string" style="color: #6a8759;">"scsi0"</span>
      + <span class="hljs-built_in">clone</span>                     = <span class="hljs-string" style="color: #6a8759;">"ubuntu-2004-cloudinit-template"</span>
      + <span class="hljs-built_in">clone</span>_<span class="hljs-built_in">wait</span>                = 0
      + cores                     = 4
      + cpu                       = <span class="hljs-string" style="color: #6a8759;">"host"</span>
      + default_ipv4_address      = (known after apply)
      + define_connection_info    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + force_create              = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + full_<span class="hljs-built_in">clone</span>                = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + guest_agent_ready_timeout = 100
      + hotplug                   = <span class="hljs-string" style="color: #6a8759;">"network,disk,usb"</span>
      + id                        = (known after apply)
      + ipconfig0                 = <span class="hljs-string" style="color: #6a8759;">"ip=192.168.0.0/24,gw=192.168.0.254"</span>
      + kvm                       = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + memory                    = 2048
      + name                      = <span class="hljs-string" style="color: #6a8759;">"control-plane-0.k8s.cluster"</span>
      + nameserver                = (known after apply)
      + numa                      = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + onboot                    = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + oncreate                  = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + os_<span class="hljs-built_in">type</span>                   = <span class="hljs-string" style="color: #6a8759;">"cloud-init"</span>
      + preprovision              = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + reboot_required           = (known after apply)
      + scsihw                    = <span class="hljs-string" style="color: #6a8759;">"virtio-scsi-pci"</span>
      + searchdomain              = (known after apply)
      + sockets                   = 1
      + ssh_host                  = (known after apply)
      + ssh_port                  = (known after apply)
      + sshkeys                   = &lt;&lt;-EOT
            ssh-rsa xxxx
        EOT
      + tablet                    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + target_node               = <span class="hljs-string" style="color: #6a8759;">"pve"</span>
      + unused_disk               = (known after apply)
      + vcpus                     = 0
      + vlan                      = -1
      + vmid                      = (known after apply)

      + disk {
          + backup       = 0
          + cache        = <span class="hljs-string" style="color: #6a8759;">"none"</span>
          + file         = (known after apply)
          + format       = (known after apply)
          + iothread     = 1
          + mbps         = 0
          + mbps_rd      = 0
          + mbps_rd_max  = 0
          + mbps_wr      = 0
          + mbps_wr_max  = 0
          + media        = (known after apply)
          + replicate    = 0
          + size         = <span class="hljs-string" style="color: #6a8759;">"20G"</span>
          + slot         = (known after apply)
          + ssd          = 0
          + storage      = <span class="hljs-string" style="color: #6a8759;">"local-zfs"</span>
          + storage_<span class="hljs-built_in">type</span> = (known after apply)
          + <span class="hljs-built_in">type</span>         = <span class="hljs-string" style="color: #6a8759;">"scsi"</span>
          + volume       = (known after apply)
        }

      + network {
          + bridge    = <span class="hljs-string" style="color: #6a8759;">"vmbr0"</span>
          + firewall  = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + link_down = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + macaddr   = (known after apply)
          + model     = <span class="hljs-string" style="color: #6a8759;">"virtio"</span>
          + queues    = (known after apply)
          + rate      = (known after apply)
          + tag       = 30
        }
    }

  <span class="hljs-comment" style="color: grey;"># proxmox_vm_qemu.worker_nodes[0] will be created</span>
  + resource <span class="hljs-string" style="color: #6a8759;">"proxmox_vm_qemu"</span> <span class="hljs-string" style="color: #6a8759;">"worker_nodes"</span> {
      + additional_<span class="hljs-built_in">wait</span>           = 0
      + agent                     = 0
      + automatic_reboot          = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + balloon                   = 0
      + bios                      = <span class="hljs-string" style="color: #6a8759;">"seabios"</span>
      + boot                      = <span class="hljs-string" style="color: #6a8759;">"c"</span>
      + bootdisk                  = <span class="hljs-string" style="color: #6a8759;">"scsi0"</span>
      + <span class="hljs-built_in">clone</span>                     = <span class="hljs-string" style="color: #6a8759;">"ubuntu-2004-cloudinit-template"</span>
      + <span class="hljs-built_in">clone</span>_<span class="hljs-built_in">wait</span>                = 0
      + cores                     = 4
      + cpu                       = <span class="hljs-string" style="color: #6a8759;">"host"</span>
      + default_ipv4_address      = (known after apply)
      + define_connection_info    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + force_create              = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + full_<span class="hljs-built_in">clone</span>                = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + guest_agent_ready_timeout = 100
      + hotplug                   = <span class="hljs-string" style="color: #6a8759;">"network,disk,usb"</span>
      + id                        = (known after apply)
      + ipconfig0                 = <span class="hljs-string" style="color: #6a8759;">"ip=192.168.0.0/24,gw=192.168.0.254"</span>
      + kvm                       = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + memory                    = 4098
      + name                      = <span class="hljs-string" style="color: #6a8759;">"worker-0.k8s.cluster"</span>
      + nameserver                = (known after apply)
      + numa                      = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + onboot                    = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + oncreate                  = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + os_<span class="hljs-built_in">type</span>                   = <span class="hljs-string" style="color: #6a8759;">"cloud-init"</span>
      + preprovision              = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + reboot_required           = (known after apply)
      + scsihw                    = <span class="hljs-string" style="color: #6a8759;">"virtio-scsi-pci"</span>
      + searchdomain              = (known after apply)
      + sockets                   = 1
      + ssh_host                  = (known after apply)
      + ssh_port                  = (known after apply)
      + sshkeys                   = &lt;&lt;-EOT
            ssh-rsa xxx
        EOT
      + tablet                    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + target_node               = <span class="hljs-string" style="color: #6a8759;">"pve"</span>
      + unused_disk               = (known after apply)
      + vcpus                     = 0
      + vlan                      = -1
      + vmid                      = (known after apply)

      + disk {
          + backup       = 0
          + cache        = <span class="hljs-string" style="color: #6a8759;">"none"</span>
          + file         = (known after apply)
          + format       = (known after apply)
          + iothread     = 1
          + mbps         = 0
          + mbps_rd      = 0
          + mbps_rd_max  = 0
          + mbps_wr      = 0
          + mbps_wr_max  = 0
          + media        = (known after apply)
          + replicate    = 0
          + size         = <span class="hljs-string" style="color: #6a8759;">"20G"</span>
          + slot         = (known after apply)
          + ssd          = 0
          + storage      = <span class="hljs-string" style="color: #6a8759;">"local-zfs"</span>
          + storage_<span class="hljs-built_in">type</span> = (known after apply)
          + <span class="hljs-built_in">type</span>         = <span class="hljs-string" style="color: #6a8759;">"scsi"</span>
          + volume       = (known after apply)
        }

      + network {
          + bridge    = <span class="hljs-string" style="color: #6a8759;">"vmbr0"</span>
          + firewall  = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + link_down = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + macaddr   = (known after apply)
          + model     = <span class="hljs-string" style="color: #6a8759;">"virtio"</span>
          + queues    = (known after apply)
          + rate      = (known after apply)
          + tag       = 30
        }
    }

  <span class="hljs-comment" style="color: grey;"># proxmox_vm_qemu.worker_nodes[1] will be created</span>
  + resource <span class="hljs-string" style="color: #6a8759;">"proxmox_vm_qemu"</span> <span class="hljs-string" style="color: #6a8759;">"worker_nodes"</span> {
      + additional_<span class="hljs-built_in">wait</span>           = 0
      + agent                     = 0
      + automatic_reboot          = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + balloon                   = 0
      + bios                      = <span class="hljs-string" style="color: #6a8759;">"seabios"</span>
      + boot                      = <span class="hljs-string" style="color: #6a8759;">"c"</span>
      + bootdisk                  = <span class="hljs-string" style="color: #6a8759;">"scsi0"</span>
      + <span class="hljs-built_in">clone</span>                     = <span class="hljs-string" style="color: #6a8759;">"ubuntu-2004-cloudinit-template"</span>
      + <span class="hljs-built_in">clone</span>_<span class="hljs-built_in">wait</span>                = 0
      + cores                     = 4
      + cpu                       = <span class="hljs-string" style="color: #6a8759;">"host"</span>
      + default_ipv4_address      = (known after apply)
      + define_connection_info    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + force_create              = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + full_<span class="hljs-built_in">clone</span>                = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + guest_agent_ready_timeout = 100
      + hotplug                   = <span class="hljs-string" style="color: #6a8759;">"network,disk,usb"</span>
      + id                        = (known after apply)
      + ipconfig0                 = <span class="hljs-string" style="color: #6a8759;">"ip=192.168.0.1/24,gw=192.168.0.254"</span>
      + kvm                       = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + memory                    = 4098
      + name                      = <span class="hljs-string" style="color: #6a8759;">"worker-1.k8s.cluster"</span>
      + nameserver                = (known after apply)
      + numa                      = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + onboot                    = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + oncreate                  = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + os_<span class="hljs-built_in">type</span>                   = <span class="hljs-string" style="color: #6a8759;">"cloud-init"</span>
      + preprovision              = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + reboot_required           = (known after apply)
      + scsihw                    = <span class="hljs-string" style="color: #6a8759;">"virtio-scsi-pci"</span>
      + searchdomain              = (known after apply)
      + sockets                   = 1
      + ssh_host                  = (known after apply)
      + ssh_port                  = (known after apply)
      + sshkeys                   = &lt;&lt;-EOT
            ssh-rsa xxx
        EOT
      + tablet                    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + target_node               = <span class="hljs-string" style="color: #6a8759;">"pve"</span>
      + unused_disk               = (known after apply)
      + vcpus                     = 0
      + vlan                      = -1
      + vmid                      = (known after apply)

      + disk {
          + backup       = 0
          + cache        = <span class="hljs-string" style="color: #6a8759;">"none"</span>
          + file         = (known after apply)
          + format       = (known after apply)
          + iothread     = 1
          + mbps         = 0
          + mbps_rd      = 0
          + mbps_rd_max  = 0
          + mbps_wr      = 0
          + mbps_wr_max  = 0
          + media        = (known after apply)
          + replicate    = 0
          + size         = <span class="hljs-string" style="color: #6a8759;">"20G"</span>
          + slot         = (known after apply)
          + ssd          = 0
          + storage      = <span class="hljs-string" style="color: #6a8759;">"local-zfs"</span>
          + storage_<span class="hljs-built_in">type</span> = (known after apply)
          + <span class="hljs-built_in">type</span>         = <span class="hljs-string" style="color: #6a8759;">"scsi"</span>
          + volume       = (known after apply)
        }

      + network {
          + bridge    = <span class="hljs-string" style="color: #6a8759;">"vmbr0"</span>
          + firewall  = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + link_down = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + macaddr   = (known after apply)
          + model     = <span class="hljs-string" style="color: #6a8759;">"virtio"</span>
          + queues    = (known after apply)
          + rate      = (known after apply)
          + tag       = 30
        }
    }

  <span class="hljs-comment" style="color: grey;"># proxmox_vm_qemu.worker_nodes[2] will be created</span>
  + resource <span class="hljs-string" style="color: #6a8759;">"proxmox_vm_qemu"</span> <span class="hljs-string" style="color: #6a8759;">"worker_nodes"</span> {
      + additional_<span class="hljs-built_in">wait</span>           = 0
      + agent                     = 0
      + automatic_reboot          = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + balloon                   = 0
      + bios                      = <span class="hljs-string" style="color: #6a8759;">"seabios"</span>
      + boot                      = <span class="hljs-string" style="color: #6a8759;">"c"</span>
      + bootdisk                  = <span class="hljs-string" style="color: #6a8759;">"scsi0"</span>
      + <span class="hljs-built_in">clone</span>                     = <span class="hljs-string" style="color: #6a8759;">"ubuntu-2004-cloudinit-template"</span>
      + <span class="hljs-built_in">clone</span>_<span class="hljs-built_in">wait</span>                = 0
      + cores                     = 4
      + cpu                       = <span class="hljs-string" style="color: #6a8759;">"host"</span>
      + default_ipv4_address      = (known after apply)
      + define_connection_info    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + force_create              = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + full_<span class="hljs-built_in">clone</span>                = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + guest_agent_ready_timeout = 100
      + hotplug                   = <span class="hljs-string" style="color: #6a8759;">"network,disk,usb"</span>
      + id                        = (known after apply)
      + ipconfig0                 = <span class="hljs-string" style="color: #6a8759;">"ip=192.168.0.2/24,gw=192.168.0.254"</span>
      + kvm                       = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + memory                    = 4098
      + name                      = <span class="hljs-string" style="color: #6a8759;">"worker-2.k8s.cluster"</span>
      + nameserver                = (known after apply)
      + numa                      = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + onboot                    = <span class="hljs-literal" style="color: #6897bb;">false</span>
      + oncreate                  = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + os_<span class="hljs-built_in">type</span>                   = <span class="hljs-string" style="color: #6a8759;">"cloud-init"</span>
      + preprovision              = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + reboot_required           = (known after apply)
      + scsihw                    = <span class="hljs-string" style="color: #6a8759;">"virtio-scsi-pci"</span>
      + searchdomain              = (known after apply)
      + sockets                   = 1
      + ssh_host                  = (known after apply)
      + ssh_port                  = (known after apply)
      + sshkeys                   = &lt;&lt;-EOT
            ssh-rsa xxx
        EOT
      + tablet                    = <span class="hljs-literal" style="color: #6897bb;">true</span>
      + target_node               = <span class="hljs-string" style="color: #6a8759;">"pve"</span>
      + unused_disk               = (known after apply)
      + vcpus                     = 0
      + vlan                      = -1
      + vmid                      = (known after apply)

      + disk {
          + backup       = 0
          + cache        = <span class="hljs-string" style="color: #6a8759;">"none"</span>
          + file         = (known after apply)
          + format       = (known after apply)
          + iothread     = 1
          + mbps         = 0
          + mbps_rd      = 0
          + mbps_rd_max  = 0
          + mbps_wr      = 0
          + mbps_wr_max  = 0
          + media        = (known after apply)
          + replicate    = 0
          + size         = <span class="hljs-string" style="color: #6a8759;">"20G"</span>
          + slot         = (known after apply)
          + ssd          = 0
          + storage      = <span class="hljs-string" style="color: #6a8759;">"local-zfs"</span>
          + storage_<span class="hljs-built_in">type</span> = (known after apply)
          + <span class="hljs-built_in">type</span>         = <span class="hljs-string" style="color: #6a8759;">"scsi"</span>
          + volume       = (known after apply)
        }

      + network {
          + bridge    = <span class="hljs-string" style="color: #6a8759;">"vmbr0"</span>
          + firewall  = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + link_down = <span class="hljs-literal" style="color: #6897bb;">false</span>
          + macaddr   = (known after apply)
          + model     = <span class="hljs-string" style="color: #6a8759;">"virtio"</span>
          + queues    = (known after apply)
          + rate      = (known after apply)
          + tag       = 30
        }
    }

Plan: 4 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: plan

To perform exactly these actions, run the following <span class="hljs-built_in">command</span> to apply:
    terraform apply <span class="hljs-string" style="color: #6a8759;">"plan"</span></pre>
<p>Wir führen nun den Plan aus, dabei werden die Ressourcen wie geplant angelegt, <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> (lokal auf deinem Gerät ausführen, auf welchem du Terraform verwenden willst)</span>:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">#~/github/homelab/terraform$ terraform apply <span class="hljs-string" style="color: #6a8759;">"plan"</span>
proxmox_vm_qemu.worker_nodes[2]: Creating...
proxmox_vm_qemu.worker_nodes[1]: Creating...
proxmox_vm_qemu.worker_nodes[0]: Creating...
proxmox_vm_qemu.control_plane[0]: Creating...
proxmox_vm_qemu.worker_nodes[0]: Still creating... [10s elapsed]
proxmox_vm_qemu.worker_nodes[1]: Still creating... [10s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [10s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [10s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [20s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [20s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [20s elapsed]
proxmox_vm_qemu.worker_nodes[1]: Still creating... [20s elapsed]
proxmox_vm_qemu.worker_nodes[1]: Still creating... [30s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [30s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [30s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [30s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [40s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [40s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [40s elapsed]
proxmox_vm_qemu.worker_nodes[1]: Still creating... [40s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [50s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [50s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [50s elapsed]
proxmox_vm_qemu.worker_nodes[1]: Still creating... [50s elapsed]
proxmox_vm_qemu.worker_nodes[1]: Creation complete after 59s [id=mrprmx/qemu/105]
proxmox_vm_qemu.control_plane[0]: Still creating... [1m0s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [1m0s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [1m0s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [1m10s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [1m10s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [1m10s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [1m20s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [1m20s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [1m20s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [1m30s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [1m30s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [1m30s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [1m40s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [1m40s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [1m40s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Still creating... [1m50s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [1m50s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [1m50s elapsed]
proxmox_vm_qemu.worker_nodes[0]: Creation complete after 1m57s [id=mrprmx/qemu/106]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [2m0s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [2m0s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [2m10s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [2m10s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [2m20s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [2m20s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [2m30s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [2m30s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [2m40s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [2m40s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Still creating... [2m50s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [2m50s elapsed]
proxmox_vm_qemu.worker_nodes[2]: Creation complete after 2m56s [id=mrprmx/qemu/107]
proxmox_vm_qemu.control_plane[0]: Still creating... [3m0s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [3m10s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [3m20s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [3m30s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [3m40s elapsed]
proxmox_vm_qemu.control_plane[0]: Still creating... [3m50s elapsed]
proxmox_vm_qemu.control_plane[0]: Creation complete after 3m54s [id=mrprmx/qemu/108]

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.</pre>
<p> </p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java und DBs</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/die-java-db.html"/>
        <id>https://www.finecloud.ch/die-java-db.html</id>
            <category term="sql"/>
            <category term="softwareentwicklung"/>
            <category term="jpa"/>
            <category term="jdbc"/>
            <category term="java"/>
            <category term="dev"/>
            <category term="database"/>
            <category term="acid"/>

        <updated>2022-06-28T12:08:33+02:00</updated>
            <summary>
                <![CDATA[
                    Java kommt von Haus aus mit einer relationalen Open-Source-Datenbank, der Apache-Derby-Datenbank, welche in reinem Java geschrieben ist und sich dadurch nicht nur als eigener Prozess betreiben lässt, sondern auch als Embeded Bestandteil einer Java Anwendung betrieben werden kann. Das ist jedoch für den produktiven Betrieb&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g6kqqqii9tr">DDL</a></li>
<li><a href="#mcetoc_1g6kqqqii9ts">SQL</a></li>
<li><a href="#mcetoc_1g6kqqqii9tt">Transaktionen</a>
<ul>
<li><a href="#mcetoc_1g6kqqqii9tu">ACID-Kriterien</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g6kr8o3v9u1">JDBC</a></li>
<li><a href="#mcetoc_1g6ks69ho9u3">JPA</a></li>
</ul>
</div>
<p>Java kommt von Haus aus mit einer relationalen Open-Source-Datenbank, der Apache-Derby-Datenbank, welche in reinem Java geschrieben ist und sich dadurch nicht nur als eigener Prozess betreiben lässt, sondern auch als Embeded Bestandteil einer Java Anwendung betrieben werden kann.</p>
<p>Das ist jedoch für den produktiven Betrieb nicht empfohlen. Für testgetriebene Entwicklung ist es jedoch sehr praktisch.</p>
<p>Eine relationale Datenbank zeichnet sich dadurch aus, das Sie eine strenge Struktur vorgibt, wie die Daten aussehen müssen. Die grösste Dateneinheit ist die Tabelle. Jede Tabelle besteht aus Spalten. Eine Spalte hat jeweils einen Namen und einen Datentyp. Der Datentyp einer Spalte kann nur aus einer vorgegebenen Liste von primitiven Datentypen gewählt werden.</p>
<p>Genauso wichtig wie die Tabellen selbst, sind die Beziehungen zwischen ihnen. Da eine Tabelle keine komplexen Datentypen als Spalten enthalten kann, werden Beziehungen zwischen Datenbankeinträgen durch Schlüsselbezeichnungen (Fremdschlüssel) von einer Tabelle zur anderen dargestellt.  Ein Eintrag in einer Tabelle, deren Inhalt von einer anderen Tabelle abhängt, enthält dabei einen Verweis auf den Eintrag der Ursprungs-Tabelle. Dafür muss ein eindeutiger Schlüssel des übergeordneten Eintrags verwendet werden, meist ein ID-Feld, dessen einziger Zweck es ist, ein eindeutiger Schlüssel zu sein, der primary key (Primärschlüssel).</p>
<p>Die Datenbank kann sicherstellen, dass für diese Art von Beziehung keine fehlerhaften Werte eingetragen werden können. Wenn im Feld Kunde_ID ein Schlüssel steht, zu dem kein passender Eintrag in der Tabelle Kunde existiert, kann die Transaktion nicht abgeschlossen werden, weil die Konsistenz der Daten verletzt würde. Genauso kann ein Kunde nicht gelöscht werden, ohne dass gleichzeitig seine Bestellungen gelöscht würden, denn sonst würde zu dem nun herrenlosen Bestellungen kein Kunde existieren und wieder wäre die Konsistenz nicht mehr vorhanden. Diese Art von Beschränkungen auf den Daten einer Datenbank nennt man einen Constraint.</p>
<h2 id="mcetoc_1g6kqqqii9tr">DDL</h2>
<p>Die <em>Data Definition Language</em> wird verwendet, um die Struktur einer Datenbank anzulegen, also Tabellen, Spalten, Constraints und mehr.</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">CREATE</span> <span class="hljs-keyword" style="color: #cc7832;">TABLE</span> Kunde (
    <span class="hljs-keyword" style="color: #cc7832;">id</span>            <span class="hljs-built_in">INTEGER</span>      PRIMARY <span class="hljs-keyword" style="color: #cc7832;">KEY</span>,
    vorname       <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number" style="color: #6897bb;">50</span>) <span class="hljs-keyword" style="color: #cc7832;">NOT</span> <span class="hljs-literal" style="color: #6897bb;">NULL</span>,
    nachname      <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number" style="color: #6897bb;">75</span>) <span class="hljs-keyword" style="color: #cc7832;">NOT</span> <span class="hljs-literal" style="color: #6897bb;">NULL</span>,
    strasse       <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number" style="color: #6897bb;">50</span>) <span class="hljs-keyword" style="color: #cc7832;">NOT</span> <span class="hljs-literal" style="color: #6897bb;">NULL</span>,
    …
);</pre>
<h2 id="mcetoc_1g6kqqqii9ts">SQL</h2>
<p>Die Structured Query Language, dient dazu, Daten in einer Datenbank zu bearbeiten und wiederzufinden. SQL ist ein extrem mächtiges Werkzeug, denn Datenbanken sind so auf das Durchsuchen grosser Datenbestände optimiert, dass sie gerade komplexe Anfragen oft schneller verarbeiten können, als eine Anwendung eine Liste im Speicher nach denselben Kriterien durchsuchen kann.</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">SELECT</span> <span class="hljs-keyword" style="color: #cc7832;">SUM</span>(best.gesamtpreis) 
  <span class="hljs-keyword" style="color: #cc7832;">FROM</span> Bestellung best
  <span class="hljs-keyword" style="color: #cc7832;">JOIN</span> Kunde k <span class="hljs-keyword" style="color: #cc7832;">ON</span> (best.kunde_id = k.id)
 <span class="hljs-keyword" style="color: #cc7832;">WHERE</span> k.id = <span class="hljs-number" style="color: #6897bb;">1</span>
   <span class="hljs-keyword" style="color: #cc7832;">AND</span> best.datum <span class="hljs-keyword" style="color: #cc7832;">BETWEEN</span> <span class="hljs-string" style="color: #6a8759;">'01/01/2016'</span> <span class="hljs-keyword" style="color: #cc7832;">AND</span> <span class="hljs-string" style="color: #6a8759;">'12/31/2016'</span></pre>
<h2 id="mcetoc_1g6kqqqii9tt">Transaktionen</h2>
<p>Änderungen an relationalen Datenbanken werden als Transaktionen gruppiert und müssen die ACID Kriterien erfüllen.</p>
<h3 id="mcetoc_1g6kqqqii9tu">ACID-Kriterien</h3>
<ul>
<li><strong>A</strong>tomicity: Jede Transaktion muss atomar sein, es werden entweder alle dazugehörigen Schreibvorgänge ausgeführt, oder keiner. Zudem ist sichergestellt, dass die von einer Transaktion betroffenen Datensätze nicht zwischenzeitlich von einer anderen Transaktion manipuliert wurden.</li>
<li><strong>C</strong>onsistency: Am Ende einer Transaktion ist sichergestellt, dass bestimmte Konsistenzregeln, die Sie auf der Datenbank konfigurieren können, eingehalten werden. Man kann durch diese Regeln nicht alle logischen Einschränkungen einer Anwendung abbilden, aber man kann verhindern, dass zu einem Benutzer mehrere Einkaufswagen existieren, oder umgekehrt.</li>
<li><strong>I</strong>solation: Jede Transaktion wird isoliert von allen anderen Transaktionen ausgeführt, so dass der Effekt für das Gesamtsystem so ist, als würden die Transaktionen nacheinander verarbeitet.</li>
<li><strong>D</strong>urability: Für alle abgeschlossenen Transaktionen ist garantiert, dass die Daten dauerhaft gespeichert sind, auch wenn die Datenbank abstürzt.</li>
</ul>
<h2 id="mcetoc_1g6kr8o3v9u1">JDBC</h2>
<p>Der Zugriff mit Java auf eine Datenbank erfolgt durch die JDBC (Java Database Connectivity)-API. Die API sorgt dafür, dass der Java Entwickler auf alle DBs, egal welchen Hersteller auf die exakt gleiche Weise zugreifen kann. Das ermöglicht dass die Datenbank ausgetauscht wird, ohne das dafür der Java Code angepasst werden muss. Alle verbreiteten Datenbanken werden direkt mit JDBC-Treiber ausgeliefert.</p>
<p>JDBC ermöglicht es, aus einer Java Anwendung heraus direkt DDL- und SQL-Anweisungen auf die DB auszuführen. Das Einzige was man wissen muss, ist, wie man die Verbindung zum DB-Server konfiguriert. Dazu wird ein URL-Format verwendet:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attribute" style="color: #6a8759;">jdbc</span>:<span class="hljs-attribute" style="color: #6a8759;">mysql</span>:<span class="hljs-comment" style="color: grey;">//192.168.1.1:3306/meineDatenbank</span></pre>
<p>Der erste Teil der URL, das Protokoll, ist immer gleich (jdbc). Der zweite Teil identifiziert den zu verwendenden Treiber und die Verbindungsinformationen zur Datenbank.</p>
<h2 id="mcetoc_1g6ks69ho9u3">JPA</h2>
<p>Die Java Persistence API setzt auf JDBC auf und ist heute der standard Weg, aus einer Java-Anwendung auf eine DB zuzugreifen. Die JPA ist Bestandteil von JEE. Sie ermöglicht nicht nur die Kommunikation mit einer DB, sie nimmt auch noch den Arbeitsschritt ORM (Object Relational Mapping) ab, also die Abbildung von Tabellenzeilen auf Java-Objekte. Für den Datenbankzugriff durch die JPA schreibt man eine ganz normale Java Klasse, die man durch eine Reihe von Annotationen zu einer JPA-Entität macht (eine Klasse, die mit der DB-Tabelle verbunden ist):</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-meta" style="color: #bbb529;">@Entity</span>
<span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">Kunde</span> </span>{
    <span class="hljs-meta" style="color: #bbb529;">@Id</span>
    <span class="hljs-meta" style="color: #bbb529;">@GeneratedValue</span>(strategy = GenerationType.TABLE)
    <span class="hljs-keyword" style="color: #cc7832;">private</span> <span class="hljs-keyword" style="color: #cc7832;">int</span> id;
    <span class="hljs-keyword" style="color: #cc7832;">private</span> String vorname;
    <span class="hljs-keyword" style="color: #cc7832;">private</span> String nachname;
    …

    <span class="hljs-meta" style="color: #bbb529;">@OneToMany</span>()
    <span class="hljs-keyword" style="color: #cc7832;">private</span> <span class="hljs-keyword" style="color: #cc7832;">final</span> List&lt;Kunde&gt; freunde = <span class="hljs-keyword" style="color: #cc7832;">new</span> ArrayList&lt;Kunde&gt;();

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">int</span> <span class="hljs-title" style="color: #ffc66d;">getId</span><span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword" style="color: #cc7832;">return</span> id;
    }

    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">setId</span><span class="hljs-params">(<span class="hljs-keyword" style="color: #cc7832;">int</span> id)</span> </span>{
      <span class="hljs-keyword" style="color: #cc7832;">this</span>.id = id;
    }
    …
}</pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>HTTP Response Status Codes</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/http-response-status-codes.html"/>
        <id>https://www.finecloud.ch/http-response-status-codes.html</id>
            <category term="statuscode"/>
            <category term="softwareentwicklung"/>
            <category term="rfc9110"/>
            <category term="network"/>
            <category term="java"/>
            <category term="http"/>
            <category term="dev"/>

        <updated>2022-06-27T06:35:21+02:00</updated>
            <summary>
                <![CDATA[
                    Die erste Ziffer des Status-Codes definiert die Klasse der Response. Die letzten zwei Ziffern haben keine Bedeutung für die Kategorisierung. Es gibt fünf unterschiedliche Response Klassen: Nachfolgend eine Zusammenstellung der häufigsten HTTP-Codes denen man im Alltag begegnet: HTTP-Statuscode Bedeutung 200 OK Der Request wurde ohne&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Die erste Ziffer des Status-Codes definiert die Klasse der Response. Die letzten zwei Ziffern haben keine Bedeutung für die Kategorisierung.</p>
<p>Es gibt fünf unterschiedliche Response Klassen:</p>
<ul>
<li id="section-15-3.1" class="normal"><strong>1xx (Informational)</strong>: Der Request wurde entgegengenommen, der Prozess geht weiter.</li>
<li><strong>2xx (Successful)</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: Der Request ist angekommen und wurde korrekt interpretiert und ist damit akzeptiert.</span></li>
<li><strong>3xx (Redirection)</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: Weitere Schritte sind notwendig um den Request abzuschliessen.</span></li>
<li><strong>4xx (Client Error)</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: Der Request hat Syntaxfehler oder kann aus anderen Gründen nicht angenommen werden.</span></li>
<li><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> </span><strong>5xx (Server Error)</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: Der Server hatte ein Fehler beim Versuch den Request zu beantworten.</span></li>
</ul>
<p>Nachfolgend eine Zusammenstellung der häufigsten HTTP-Codes denen man im Alltag begegnet:</p>
<table id="t14.1">
<thead>
<tr>
<th>
<p><strong>HTTP-Statuscode</strong></p>
</th>
<th>
<p><strong>Bedeutung</strong></p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<p>200 OK</p>
</td>
<td>
<p>Der Request wurde ohne Fehler verarbeitet.</p>
</td>
</tr>
<tr>
<td>
<p>400 Bad Request</p>
</td>
<td>
<p>Der empfangene Request war fehlerhaft. Wenn du aus einem Browser zugreifst, solltest du diese Meldung nicht sehen.</p>
</td>
</tr>
<tr>
<td>
<p>401 Unauthorized</p>
</td>
<td>
<p>Die angefragte Ressource ist nur für angemeldete Benutzer freigegeben, aber der Anfragende ist nicht angemeldet.</p>
</td>
</tr>
<tr>
<td>
<p>403 Forbidden</p>
</td>
<td>
<p>Die Ressource ist nur für angemeldete Benutzer mit bestimmten Rechten freigegeben. Der Benutzer ist zwar angemeldet, besitzt aber nicht die notwendigen Rechte.</p>
</td>
</tr>
<tr>
<td>
<p>404 Not Found</p>
</td>
<td>
<p>Die angefragte Ressource konnte nicht gefunden werden.</p>
</td>
</tr>
<tr>
<td>
<p>405 Method Not Allowed</p>
</td>
<td>
<p>Die verwendete HTTP-Methode wird von dieser Ressource nicht unterstützt. Im Servlet bedeutet das, dass die do…-Methode nicht implementiert ist.</p>
</td>
</tr>
<tr>
<td>
<p>500 Internal Server Error</p>
</td>
<td>
<p>Bei der Verarbeitung des Requests ist im Server ein Fehler aufgetreten. Diesen Fehler bekommen Sie zu sehen, wenn Ihr Servlet eine Exception wirft.</p>
</td>
</tr>
</tbody>
</table>
<p>Ausführlichere Angaben zu den HTTP Status Codes findest du im <a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-status-codes" rel="nofollow">RFC9110</a>.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>HTTP Methoden - RFC9110</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/http-methoden-rfc9110.html"/>
        <id>https://www.finecloud.ch/http-methoden-rfc9110.html</id>
            <category term="softwareentwicklung"/>
            <category term="servlet"/>
            <category term="rfc9110"/>
            <category term="java"/>
            <category term="http"/>
            <category term="dev"/>

        <updated>2022-06-25T10:55:55+02:00</updated>
            <summary>
                <![CDATA[
                    Was geschieht eigentlich wenn ich eine Webseite aufrufe? Wir überspringen den Ersten Teil mit DNS und gehen davon aus, dass die URL bereits im DNS Cache ist. Um diese Frage zu beantworten, müssen wir uns mit den Grundlagen des HTTP-Protokolls befassen. Der Aufruf der Webseite&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>Was geschieht eigentlich wenn ich eine Webseite aufrufe?</h2>
<p>Wir überspringen den Ersten Teil mit DNS und gehen davon aus, dass die URL bereits im DNS Cache ist. Um diese Frage zu beantworten, müssen wir uns mit den Grundlagen des HTTP-Protokolls befassen.</p>
<h3>Der Standard HTTP-Request</h3>
<p>Der Aufruf der Webseite beginnt im Browser. Dieser öffnet eine Netzwerkverbindung zur eingegebenen Adresse. Für diesen Schritt ist aber noch nicht die gesamte URL relevant, nur Servername (oder die IP-Adresse) und Port werden benötigt. Über diese Netzwerkverbindung wird ein HTTP-Request gesendet. HTTP ist ein textbasiertes Protokoll, deswegen kann man einfach einsehen, wie dieser Request aussieht:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">GET <span class="hljs-regexp">/servlet-1.0-SNAPSHOT/</span> HTTP/<span class="hljs-number" style="color: #6897bb;">1.1</span>
<span class="hljs-string" style="color: #6a8759;">Host:</span> <span class="hljs-string" style="color: #6a8759;">localhost:</span><span class="hljs-number" style="color: #6897bb;">8080</span>
User-<span class="hljs-string" style="color: #6a8759;">Agent:</span> Mozilla<span class="hljs-regexp">/5.0 (Macintosh; Intel Mac OS X 10.15; rv:101.0) Gecko/</span><span class="hljs-number" style="color: #6897bb;">20100101</span> Firefox/<span class="hljs-number" style="color: #6897bb;">101.0</span>
<span class="hljs-string" style="color: #6a8759;">Accept:</span> text<span class="hljs-regexp">/html,application/</span>xhtml+xml,application<span class="hljs-regexp">/xml;q=0.9,image/</span>avif,image<span class="hljs-regexp">/webp,*/</span>*;q=<span class="hljs-number" style="color: #6897bb;">0.8</span>
Accept-<span class="hljs-string" style="color: #6a8759;">Language:</span> en-US,en;q=<span class="hljs-number" style="color: #6897bb;">0.5</span>
Accept-<span class="hljs-string" style="color: #6a8759;">Encoding:</span> gzip, deflate, br
<span class="hljs-string" style="color: #6a8759;">Connection:</span> keep-alive</pre>
<p>Die erste Zeile des Requests enthält die wichtigsten Informationen:</p>
<ul>
<li>die relative Adresse der angesprochenen Ressource auf dem Server: /servlet-1.0-SNAPSHOT. Anhand dieses Pfades bestimmt der Server, welche Datei er ausliefern oder welches Servlet er ansprechen soll.</li>
<li>was mit dieser Ressource passieren soll. GET bedeutet, sie soll an den Anfragenden gesendet werden.</li>
<li>die verwendete Version des HTTP-Protokolls: HTTP/1.1. Diese Information ist für  eine funktionierende Kommunikation zwischen Client und Server wesentlich.</li>
</ul>
<p>Alle weiteren Zeilen des Requests sind sogenannte Header. Sie transportieren zusätzliche Informationen, die der Server bei seiner Arbeit berücksichtigen sollte, aber nicht unbedingt muss. So enthält zum Beispiel der Header Accept-Language die Vorliebe des Benutzers, in welcher Sprache er den angefragten Inhalt sehen möchte. Der Server kann diese Information aber ignorieren und den Inhalt in einer völlig anderen Sprache zurückliefern.<br><br>In den Headern werden auch Cookies übertragen, kleine Textstücke, die ein Server im Browser hinterlegen kann und die bei weiteren Anfragen an denselben Server vom Browser an den Server zurückgesendet werden. Cookies sind die verbreitete Möglichkeit für den Server, zu bestimmen, ob zwei Anfragen vom selben Client stammen. Das HTTP-Protokoll ist zustandslos, jede Anfrage ist völlig unabhängig von allen anderen Anfragen. Wenn der Server also Informationen zwischen zwei Requests speichern muss, dann geschieht das üblicherweise durch Cookies. Im Servlet-Container werden diese durch das Session-Objekt abgebildet.</p>
<h3>Weitere HTTP-Methoden</h3>
<p>Alle server müssen zwingend die GET und HEAD Methoden unterstützen, alle anderen Methoden sind Optional:</p>
<table id="table-4" class="left" style="width: 100%; height: 539.625px;">
<thead>
<tr style="height: 79.1562px;">
<th class="text-left" style="width: 20.6007%; height: 79.1562px;"><strong>Method Name</strong></th>
<th class="text-left" style="width: 79.2568%; height: 79.1562px;"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">GET</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Transfer a current representation of the target resource.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">HEAD</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Same as GET, but do not transfer the response content.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">POST</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Perform resource-specific processing on the request content.</td>
</tr>
<tr style="height: 79.1562px;">
<td class="text-left" style="width: 20.6007%; height: 79.1562px;">PUT</td>
<td class="text-left" style="width: 79.2568%; height: 79.1562px;">Replace all current representations of the target resource with the request content.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">DELETE</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Remove all current representations of the target resource.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">CONNECT</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Establish a tunnel to the server identified by the target resource.</td>
</tr>
<tr style="height: 50.3594px;">
<td class="text-left" style="width: 20.6007%; height: 50.3594px;">OPTIONS</td>
<td class="text-left" style="width: 79.2568%; height: 50.3594px;">Describe the communication options for the target resource.</td>
</tr>
<tr style="height: 79.1562px;">
<td class="text-left" style="width: 20.6007%; height: 79.1562px;">TRACE</td>
<td class="text-left" style="width: 79.2568%; height: 79.1562px;">Perform a message loop-back test along the path to the target resource.</td>
</tr>
</tbody>
</table>
<p>Quelle: <a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-methods" rel="nofollow">RFC9110</a></p>
<p>Von diesen Methoden sind GET, HEAD und POST die mit grossem Abstand häufiger verwendeten. Die meisten Anwendungen kommen ohne PUT und DELETE aus, und wenn diese Methoden doch verwendet werden, dann nur unter starken Sicherheitsvorkehrungen. Es bedarf nicht viel Fantasie, das Missbrauchspotenzial zu erkennen, wenn jeder Dateien auf Ihrem Server anlegen und löschen könnte.</p>
<h3>Verarbeitung im Servlet-Container</h3>
<p>Der Servlet-Container empfängt diesen HTTP-Request und erzeugt daraus ein Objekt der Klasse <em>HttpServletRequest</em>. Durch dieses Objekt sind alle Daten zugänglich, die im Request gesendet wurden.</p>
<p>Als Nächstes ermittelt der Servlet-Container anhand der Adresse in der ersten Request-Zeile, an welche Anwendung und welche Ressource der Request adressiert ist. Die Anwendung wird durch den ersten Teil der Adresse identifiziert, der Teil /servlet-1.0-SNAPSHOT, identifiziert die Ressource. Das kann ein Servlet sein, dessen <em>urlPatterns-Attribut</em> passt, oder bei einem GET-Request eine statische Ressource dieses Namens, die im Wurzelverzeichnis des WARs liegt.<br><br>Unter /servlet-1.0-SNAPSHOT antwortet ein Servlet. Falls noch keine Instanz dieses Servlets erzeugt wurde, erzeugt der Container nun eine. Es wird nicht für jeden Request eine neue Servlet-Instanz erzeugt, deshalb sollten man niemals Daten, die zu einem Request gehören, in Instanzvariablen speichern, denn diese könnten in einem anderen Request weiterverwendet werden.<br><br>Nun endlich so weit: Das Servlet wird aufgerufen.</p>
<p id="table.of.methods"></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>TOC in README.md erstellen mit VSCode</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/toc-in-readmemd-erstellen.html"/>
        <id>https://www.finecloud.ch/toc-in-readmemd-erstellen.html</id>
            <category term="vscode"/>
            <category term="markdown"/>
            <category term="git"/>

        <updated>2022-06-25T08:31:16+02:00</updated>
            <summary>
                <![CDATA[
                    TOC steht für Table of Contents (aka Inhaltsverzeichnis). Jedes grössere README Markdown File in einem git Repo sollte über ein TOC verfügen. Doch die Pflege eines TOC sowie die initiale Erstellung ist nicht sehr handlich, du musst für jeden einzelnen Titel in der richtigen Einrückung&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><em>TOC</em> steht für <em>Table of Contents</em> (aka Inhaltsverzeichnis). Jedes grössere README Markdown File in einem git Repo sollte über ein TOC verfügen.</p>
<p>Doch die Pflege eines TOC sowie die initiale Erstellung ist nicht sehr handlich, du musst für jeden einzelnen Titel in der richtigen Einrückung (damit die Titelanordnung stimmt) folgender Inhalt eintippen, obwohl du diese ja bereits als Titel in der Markdown Datei definiert hast:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-bullet" style="color: #6897bb;">- </span>[<span class="hljs-string" style="color: #6a8759;">Table of Contents</span>](<span class="hljs-link" style="color: #629755;">#table-of-contents</span>)
<span class="hljs-bullet" style="color: #6897bb;">- </span>[<span class="hljs-string" style="color: #6a8759;">Verbesserungen</span>](<span class="hljs-link" style="color: #629755;">#verbesserungen</span>)
<span class="hljs-bullet" style="color: #6897bb;">- </span>[<span class="hljs-string" style="color: #6a8759;">Anpassungen innerhalb dieses Repositories</span>](<span class="hljs-link" style="color: #629755;">#anpassungen-innerhalb-dieses-repositories</span>)
<span class="hljs-code">    - [CI Pipeline](#ci-pipeline)</span>
</pre>
<p>damit dann dieses schöne Inhaltsverzeichnis entsteht:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/39/Screenshot-2022-06-25-at-08.21.47.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/39/responsive/Screenshot-2022-06-25-at-08.21.47-xs.png 300w ,https://www.finecloud.ch/media/posts/39/responsive/Screenshot-2022-06-25-at-08.21.47-sm.png 480w ,https://www.finecloud.ch/media/posts/39/responsive/Screenshot-2022-06-25-at-08.21.47-md.png 768w ,https://www.finecloud.ch/media/posts/39/responsive/Screenshot-2022-06-25-at-08.21.47-lg.png 1024w ,https://www.finecloud.ch/media/posts/39/responsive/Screenshot-2022-06-25-at-08.21.47-xl.png 1360w ,https://www.finecloud.ch/media/posts/39/responsive/Screenshot-2022-06-25-at-08.21.47-2xl.png 1600w"  alt="" width="366" height="115"></figure>
<p>Doch es gibt einen Weg, wie du ohne die Arbeit doppelt zu machen (jeden Titel zweimal schreiben 😒), einfach und schnell aus deinem Markdown ein TOC erstellen und später auch einfach wieder aktualisieren kannst. </p>
<p>In der IDE VSCode kannst du dazu die Extension <a href="https://marketplace.visualstudio.com/items?itemName=huntertran.auto-markdown-toc" target="_blank" rel="nofollow noopener noreferrer">Auto Markdown TOC</a> installieren. Es gibt duzende solche Extensions, lass mich wissen wenn du ein besseres findest. 😃</p>
<p>Wenn du die Extension installiert hast, kannst du anschliessend direkt aus VSCode in deinem Markdown File ein TOC generieren lassen:</p>
<figure class="AnimatedImagePlayer-animatedImage"><img loading="lazy"  style="display: block; opacity: 1;" src="https://github.com/huntertran/markdown-toc/raw/master/img/insert-toc.gif" data-is-external-image="true"  alt="Insert TOC" data-target="animated-image.replacedImage"></figure>
<p>Viel Spass damit!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java Serverlet mit Tomcat und Maven in VSCode</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-serverlet-entwickeln-mit-vscode.html"/>
        <id>https://www.finecloud.ch/java-serverlet-entwickeln-mit-vscode.html</id>
            <category term="vscode"/>
            <category term="tomcat"/>
            <category term="softwareentwicklung"/>
            <category term="servlet"/>
            <category term="network"/>
            <category term="maven"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-06-25T09:54:05+02:00</updated>
            <summary>
                <![CDATA[
                    In diesem Artikel ist beschrieben, wie man Apache Tomcat direkt in VSCode nutzen kann. Voraussetzung ist, dass du auf deinem Gerät bereits eine Java JRE und Apache Maven installiert hast. Weiter brauchen wir in VSCode das Extension Pack for Java, du kannst dire in VSCode&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In <a href="https://www.finecloud.ch/java-serverlet-entwickeln-mit-vscode.html" rel="nofollow">diesem Artikel</a> ist beschrieben, wie man Apache Tomcat direkt in VSCode nutzen kann.<a href="https://www.finecloud.ch/java-serverlet-entwickeln-mit-vscode.html" rel="nofollow"></a></p>
<p>Voraussetzung ist, dass du auf deinem Gerät bereits eine Java JRE und Apache Maven installiert hast. Weiter brauchen wir in VSCode das <em>Extension Pack for Java</em>, du kannst dire in VSCode installieren, wenn du  <em>CTRL + SHIFT + X</em> und dann <code>vscode:extension/vscjava.vscode-java-pack</code> eingibst.</p>
<h2>Maven Projekt anlegen</h2>
<p>Als erster Schritt legen wir ein neues Maven Projekt an:</p>
<ul>
<li>Aus VSCode mit <em>Strg+Shift+P</em>, dann</li>
<li>Wählen Sie <code>Maven: Create Maven-Procekt</code></li>
<li>Wählen Sie <code>maven-archetype-quickstart</code></li>
<li>Wählen Sie die aktuelle Vision wie <code>1.4</code></li>
<li>Geben Sie Ihre Gruppen-ID wie <code>com.testservlet</code> ein</li>
<li>Geben Sie Ihre Artefakt-ID wie <code>servlet</code> ein</li>
<li>Suchen Sie Ihren Zielordner, den Sie zuvor erstellt haben, und generieren Sie dort das Projekt.</li>
</ul>
<h2>Task File anlegen</h2>
<p>Wir müssen nun ein tasks file konfigurieren das besagt wie das Maven Projekt zu kompilieren ist.</p>
<ul>
<li>Aus VSCode mit <em>Strg+Shift+P</em>, dann</li>
<li><code style="font-weight: var(--font-weight-normal);">Tasks: Configure task</code></li>
<li><code style="font-weight: var(--font-weight-normal);">Create tasks.json from template</code></li>
<li><code style="font-weight: var(--font-weight-normal);">maven: executes common maven command</code></li>
</ul>
<p>Anschliessen wir ein leeres default <strong>tasks.json</strong> file generiert. Das passen wir nun so an:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">{
    <span class="hljs-attr">"version"</span>: <span class="hljs-string" style="color: #6a8759;">"2.0.0"</span>,
    <span class="hljs-attr">"tasks"</span>: [
        {
            <span class="hljs-attr">"label"</span>: <span class="hljs-string" style="color: #6a8759;">"compile"</span>,
            <span class="hljs-attr">"type"</span>: <span class="hljs-string" style="color: #6a8759;">"shell"</span>,
            <span class="hljs-attr">"command"</span>: <span class="hljs-string" style="color: #6a8759;">"mvn -B compile"</span>,
            <span class="hljs-attr">"group"</span>: <span class="hljs-string" style="color: #6a8759;">"build"</span>
        },
        {
            <span class="hljs-attr">"label"</span>: <span class="hljs-string" style="color: #6a8759;">"test"</span>,
            <span class="hljs-attr">"type"</span>: <span class="hljs-string" style="color: #6a8759;">"shell"</span>,
            <span class="hljs-attr">"command"</span>: <span class="hljs-string" style="color: #6a8759;">"mvn -B test"</span>,
            <span class="hljs-attr">"group"</span>: <span class="hljs-string" style="color: #6a8759;">"test"</span>
        }
    ]
}
</pre>
<p>Nun kompilieren wir unser maven Projekt, dazu in VSCode in der top bar auf <code>Terminal</code>, <code>Run Build Task</code><em> </em>und dann <code>compile</code>.</p>
<h2>Dependencies hinzufügen</h2>
<p>Bevor wir loslegen können, müssen wir für unser Servlet noch wesentliche Dependencies deklarieren, ansonsten kann das Servlet nicht erstellt werden. Dazu fügen wir im <code>pom.xml </code>File folgenden Inhalt hinzu:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-attribute" style="color: #6a8759;">&lt;dependency&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;groupId&gt;</span>javax.servlet<span class="hljs-attribute" style="color: #6a8759;">&lt;/groupId&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;artifactId&gt;</span>javax.servlet-api<span class="hljs-attribute" style="color: #6a8759;">&lt;/artifactId&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;version&gt;</span>4.0.1<span class="hljs-attribute" style="color: #6a8759;">&lt;/version&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;scope&gt;</span>provided<span class="hljs-attribute" style="color: #6a8759;">&lt;/scope&gt;</span>
<span class="hljs-attribute" style="color: #6a8759;">&lt;/dependency&gt;</span>
<span class="hljs-attribute" style="color: #6a8759;">&lt;dependency&gt;</span>
     <span class="hljs-attribute" style="color: #6a8759;">&lt;groupId&gt;</span>javax.servlet<span class="hljs-attribute" style="color: #6a8759;">&lt;/groupId&gt;</span>
     <span class="hljs-attribute" style="color: #6a8759;">&lt;artifactId&gt;</span>jstl<span class="hljs-attribute" style="color: #6a8759;">&lt;/artifactId&gt;</span>
     <span class="hljs-attribute" style="color: #6a8759;">&lt;version&gt;</span>1.2<span class="hljs-attribute" style="color: #6a8759;">&lt;/version&gt;</span>
<span class="hljs-attribute" style="color: #6a8759;">&lt;/dependency&gt;</span>
<span class="hljs-attribute" style="color: #6a8759;">&lt;dependency&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;groupId&gt;</span>javax<span class="hljs-attribute" style="color: #6a8759;">&lt;/groupId&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;artifactId&gt;</span>javaee-web-api<span class="hljs-attribute" style="color: #6a8759;">&lt;/artifactId&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;version&gt;</span>8.0<span class="hljs-attribute" style="color: #6a8759;">&lt;/version&gt;</span>
    <span class="hljs-attribute" style="color: #6a8759;">&lt;scope&gt;</span>provided<span class="hljs-attribute" style="color: #6a8759;">&lt;/scope&gt;</span>
<span class="hljs-attribute" style="color: #6a8759;">&lt;/dependency&gt;</span></pre>
<h2>Servlet erstellen</h2>
<p>Wir löschen die default Klasse App.java und erstellen folgende neue NewServlet.java Klasse unter diesem Pfad: <code>src\main\java\com\myservlet\NewServlet.java</code></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"><span class="hljs-keyword" style="color: #cc7832;">package</span> com.myservlet;

<span class="hljs-keyword" style="color: #cc7832;">import</span> java.io.IOException;
<span class="hljs-keyword" style="color: #cc7832;">import</span> java.io.PrintWriter;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javax.servlet.ServletException;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javax.servlet.http.HttpServlet;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword" style="color: #cc7832;">import</span> javax.servlet.http.HttpServletResponse;

<span class="hljs-comment" style="color: grey;">/**
 * NewServlet
 */</span>
<span class="hljs-meta" style="color: #bbb529;">@WebServlet</span>(urlPatterns = <span class="hljs-string" style="color: #6a8759;">"/mambo.do"</span>)
<span class="hljs-keyword" style="color: #cc7832;">public</span> <span class="hljs-class"><span class="hljs-keyword" style="color: #cc7832;">class</span> <span class="hljs-title" style="color: #ffc66d;">NewServlet</span> <span class="hljs-keyword" style="color: #cc7832;">extends</span> <span class="hljs-title" style="color: #ffc66d;">HttpServlet</span> </span>{

    <span class="hljs-comment" style="color: grey;">/**
     * Processes requests for both HTTP &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;
     * methods.
     *
     * <span class="hljs-doctag">@param</span> request servlet request
     * <span class="hljs-doctag">@param</span> response servlet response
     * <span class="hljs-doctag">@throws</span> ServletException if a servlet-specific error occurs
     * <span class="hljs-doctag">@throws</span> IOException if an I/O error occurs
     */</span>
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">protected</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">processRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span>
            <span class="hljs-keyword" style="color: #cc7832;">throws</span> ServletException, IOException </span>{
        response.setContentType(<span class="hljs-string" style="color: #6a8759;">"text/html;charset=UTF-8"</span>);
        <span class="hljs-keyword" style="color: #cc7832;">try</span> ( PrintWriter out = response.getWriter()) {
            <span class="hljs-comment" style="color: grey;">/* TODO output your page here. You may use following sample code. */</span>
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;!DOCTYPE html&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;html&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;head&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;title&gt;Servlet NewServlet&lt;/title&gt;"</span>);            
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;/head&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;body&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;h1&gt;Servlet NewServlet at "</span> + request.getContextPath() + <span class="hljs-string" style="color: #6a8759;">"&lt;/h1&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;/body&gt;"</span>);
            out.println(<span class="hljs-string" style="color: #6a8759;">"&lt;/html&gt;"</span>);
        }
    }

    <span class="hljs-comment" style="color: grey;">// &lt;editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code."&gt;</span>
    <span class="hljs-comment" style="color: grey;">/**
     * Handles the HTTP &lt;code&gt;GET&lt;/code&gt; method.
     *
     * <span class="hljs-doctag">@param</span> request servlet request
     * <span class="hljs-doctag">@param</span> response servlet response
     * <span class="hljs-doctag">@throws</span> ServletException if a servlet-specific error occurs
     * <span class="hljs-doctag">@throws</span> IOException if an I/O error occurs
     */</span>
    <span class="hljs-meta" style="color: #bbb529;">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">protected</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span>
            <span class="hljs-keyword" style="color: #cc7832;">throws</span> ServletException, IOException </span>{
        processRequest(request, response);
    }

    <span class="hljs-comment" style="color: grey;">/**
     * Handles the HTTP &lt;code&gt;POST&lt;/code&gt; method.
     *
     * <span class="hljs-doctag">@param</span> request servlet request
     * <span class="hljs-doctag">@param</span> response servlet response
     * <span class="hljs-doctag">@throws</span> ServletException if a servlet-specific error occurs
     * <span class="hljs-doctag">@throws</span> IOException if an I/O error occurs
     */</span>
    <span class="hljs-meta" style="color: #bbb529;">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">protected</span> <span class="hljs-keyword" style="color: #cc7832;">void</span> <span class="hljs-title" style="color: #ffc66d;">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span>
            <span class="hljs-keyword" style="color: #cc7832;">throws</span> ServletException, IOException </span>{
        processRequest(request, response);
    }

    <span class="hljs-comment" style="color: grey;">/**
     * Returns a short description of the servlet.
     *
     * <span class="hljs-doctag">@return</span> a String containing servlet description
     */</span>
    <span class="hljs-meta" style="color: #bbb529;">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword" style="color: #cc7832;">public</span> String <span class="hljs-title" style="color: #ffc66d;">getServletInfo</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword" style="color: #cc7832;">return</span> <span class="hljs-string" style="color: #6a8759;">"Short description"</span>;
    }<span class="hljs-comment" style="color: grey;">// &lt;/editor-fold&gt;</span>

}

</pre>
<h2>web.xml File anlegen</h2>
<ul>
<li>Erstelle unter dem Pfad "src/main/" den Ordner webapp (wenn nicht bereits vorhanden).</li>
<li>Erstelle unter dem Pfad "src/main/webapp" den Ordner "WEB-INF" und die Datei web.xml mit dem folgenden Inhalt:</li>
</ul>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">&lt;web-<span class="hljs-keyword" style="color: #cc7832;">app</span> xmlns=<span class="hljs-string" style="color: #6a8759;">"http://java.sun.com/xml/ns/javaee"</span> xmlns:xsi=<span class="hljs-string" style="color: #6a8759;">"http://www.w3.org/2001/XMLSchema-instance"</span>
    xsi:schemaLocation=<span class="hljs-string" style="color: #6a8759;">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>
    <span class="hljs-keyword" style="color: #cc7832;">version</span>=<span class="hljs-string" style="color: #6a8759;">"3.0"</span>&gt;
    &lt;<span class="hljs-keyword" style="color: #cc7832;">display</span>-name&gt;To <span class="hljs-keyword" style="color: #cc7832;">do</span> <span class="hljs-keyword" style="color: #cc7832;">List</span>&lt;/<span class="hljs-keyword" style="color: #cc7832;">display</span>-name&gt;
    &lt;welcome-<span class="hljs-keyword" style="color: #cc7832;">file</span>-<span class="hljs-keyword" style="color: #cc7832;">list</span>&gt;
        &lt;welcome-<span class="hljs-keyword" style="color: #cc7832;">file</span>&gt;mambo.<span class="hljs-keyword" style="color: #cc7832;">do</span>&lt;/welcome-<span class="hljs-keyword" style="color: #cc7832;">file</span>&gt;
    &lt;/welcome-<span class="hljs-keyword" style="color: #cc7832;">file</span>-<span class="hljs-keyword" style="color: #cc7832;">list</span>&gt;
&lt;/web-<span class="hljs-keyword" style="color: #cc7832;">app</span>&gt;
</pre>
<h2>war File erstellen</h2>
<p>Bevor wir die war Datei erstellen können, müssen wir sicherstellen, dass in der pom.xml Datei nicht ein jar erstellt wird, sondern ein war:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"> <span class="hljs-attribute" style="color: #6a8759;">&lt;groupId&gt;</span>com.myservlet<span class="hljs-attribute" style="color: #6a8759;">&lt;/groupId&gt;</span>
 <span class="hljs-attribute" style="color: #6a8759;">&lt;artifactId&gt;</span>servlet<span class="hljs-attribute" style="color: #6a8759;">&lt;/artifactId&gt;</span>
 <span class="hljs-attribute" style="color: #6a8759;">&lt;version&gt;</span>1.0-SNAPSHOT<span class="hljs-attribute" style="color: #6a8759;">&lt;/version&gt;</span>
 <span class="hljs-attribute" style="color: #6a8759;">&lt;packaging&gt;</span>war<span class="hljs-attribute" style="color: #6a8759;">&lt;/packaging&gt;</span></pre>
<p>Nun können wir die war Datei kompilieren, dazu im Menu von VSCode auf Terminal -&gt; Run Build Task -&gt; compile klicken. Nachdem die war Datei kompiliert wurde, muss auf der Konsole, im Projektverzeichnis noch   </p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;"># mvn clean package</pre>
<p>ausgeführt werden. Sofern die war Datei nun erfolgreich erstellt wurde, können wir diese nun auf den Tomcat deployen.</p>
<h2>War File auf lokalen Tomcat deployen</h2>
<p>In <a href="https://www.finecloud.ch/java-serverlets.html" rel="nofollow">diesem Artikel</a> steht, wie du ein Tomcat direkt in VSCode verwenden kannst.</p>
<p>Starte den Tomcat Server, und mache ein Rechtsklick auf den Server und wähle "Add Deployment", wähle "File". Anschliessend lade das zuvor erstellte war File hoch. Das war File wird in der Regel im Projektordner unter "target" abgelegt. Bei der Frage "Do you want to edit optional deployment parameters", wähle "no". Nun musst du noch mit einem Rechtsklick auf den Server "Publish Server (Full)" auswählen, damit die war Datei aktiv wird.</p>
<p>Endlich kannst du in deinem Browser unter dieser URL dein servlet aufrufen: <a href="http://localhost:8080/servlet-1.0-SNAPSHOT/">http://localhost:8080/servlet-1.0-SNAPSHOT/</a></p>
<p>Alternativ kannst du mit Rechtsklick auf den Server "Server Actions", "Show in Browser" auswählen.</p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java Serverlet Container installieren</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/java-serverlets.html"/>
        <id>https://www.finecloud.ch/java-serverlets.html</id>
            <category term="vscode"/>
            <category term="tomcat"/>
            <category term="softwareentwicklung"/>
            <category term="socket"/>
            <category term="servlet"/>
            <category term="network"/>
            <category term="java.io"/>
            <category term="java"/>
            <category term="dev"/>

        <updated>2022-06-27T09:22:53+02:00</updated>
            <summary>
                <![CDATA[
                    Einleitung Das Serverlet-Framework Jakarta EE ermöglicht die Entwicklung von Anwendungen für eine grosse Anzahl paralleler Benutzer die über einen Web-Browser zugreifen. Dazu ist besonders die Serverlet-API von JEE von Interesse. Diese API-Klasse wartet auf eingehende Netzwerkverbindungen und reagiert mit einer entsprechenden Antwort. Für die übertragenen&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g62lllju8df">Einleitung</a></li>
<li><a href="#mcetoc_1g62lllju8dg">Serverlet-Container installieren</a>
<ul>
<li><a href="#mcetoc_1g62lllju8dh">Option 1: Manuelle Installation des Tomcat-Servers auf dem eigenen Gerät</a></li>
<li><a href="#mcetoc_1g62lllju8di">Option 2: Installation des Tomcat-Servers via VSCode</a></li>
<li><a href="#mcetoc_1g62lllju8dj">(Option 3: Tomcat Docker Image)</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g62lllju8dk">Tomcat mit VSCode einrichten</a></li>
</ul>
</div>
<h2 id="mcetoc_1g62lllju8de"></h2>
<h2 id="mcetoc_1g62lllju8df">Einleitung</h2>
<p>Das Serverlet-Framework Jakarta EE ermöglicht die Entwicklung von Anwendungen für eine grosse Anzahl paralleler Benutzer die über einen Web-Browser zugreifen. Dazu ist besonders die Serverlet-API von JEE von Interesse.</p>
<p>Diese API-Klasse wartet auf eingehende Netzwerkverbindungen und reagiert mit einer entsprechenden Antwort. Für die übertragenen Daten wird fast immer das HTTP (Hypertext Transfer Protocol) verwendet.</p>
<p>Die Hauptaufgabe eines Serverlets ist von einem Serverprozess aufgerufen zu werden, um in eine Netzwerkverbindung einen Datenstrom zu schreiben, den es auf irgendeine Weise erzeugt hat. Damit ein Serverlet ausgeführt werden kann, braucht es den Serverlet-Container. Das ist ein Programm, das man fertig installiert. Dieses Programm stellt anschliessend ein oder mehrere Serverlets zur Verfügung, die vom Container aufgerufen werden. Ein Serverlet verfügt nicht über eine main-Methode und ist allein nicht funktionsfähig, es kann also auch nicht einfach von der Kommandozeile aus ausgerufen werden.</p>
<p>Die Aufgaben des Containers sind alle Aufgaben, die nicht mit der Logik der Anwendung zu tun haben. Beispielsweise die Verwaltung der Netzwerkverbindungen, Benutzerberechtigungen und des Speichers. Dazu kann das Serverlet auf die Schnittstellen des Containers zugreifen. Das ermöglicht dem Entwickler sich auf die Anwendung zu konzentrieren. Der Hauptvorteil von Serverlets ist, das diese bereits out-of-the-Box sicherer, performanter und stabiler sind, als wenn man diese Funktionen und Methoden selbst noch neu entwickeln müsste.</p>
<h2 id="mcetoc_1g62lllju8dg">Serverlet-Container installieren</h2>
<p>Es gibt eine Vielzahl von Serverlet-Containern. Nicht alle eigenen sich für jeden Anwendungsfall. Wir werden Testeshalber den Apache Tomcat verwenden. Dieser Server, wie auch alle anderen Serverlet-Container sind selbst ein Java-Programm und dadurch unabhängig vom Betriebssystem. <strong>Die Anweisungen hier gelten nur für eine Testumgebung und sind nicht für den produktiven Einsatz als Webserver gedacht.</strong></p>
<h3 id="mcetoc_1g62lllju8dh">Option 1: Manuelle Installation des Tomcat-Servers auf dem eigenen Gerät</h3>
<p>Wer sich den manuellen overhead der Installation des Tomcat-Servers antun will, der kann die aktuellste Version des Tomcat hier heruntergeladen werden: <a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p>
<p>Die Installationsanweisungen befinden sich hier: <a href="https://tomcat.apache.org/tomcat-9.0-doc/setup.html">https://tomcat.apache.org/tomcat-9.0-doc/setup.html</a></p>
<p>Da ich mich nicht mit manuellen Installationen herumschlagen will, ist Option 2 mein Favorit.</p>
<h3 id="mcetoc_1g62lllju8di">Option 2: Installation des Tomcat-Servers via VSCode</h3>
<p>Falls man für die Entwicklung in der IDE VSCode arbeitet, kann man dort direkt Tomcat als AddOn installieren und muss sich so garnicht mit der Installation des Tomcat befassen. Link zum Add-On: <a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-community-server-connector">https://marketplace.visualstudio.com/items?itemName=redhat.vscode-community-server-connector</a></p>
<h3 id="mcetoc_1g62lllju8dj">(Option 3: Tomcat Docker Image)</h3>
<p>Fortgeschrittene Java Entwickler können theoretisch auch direkt das Docker Tomcat Image nutzen. Da ich jedoch Java sowie Tomcat Anfänger bin, verzichte ich vorerst auf den Docker Container, und werde Option 2 weiter erläutern.</p>
<h2 id="mcetoc_1g62lllju8dk">Tomcat mit VSCode einrichten</h2>
<p>Nach der Installation erscheint links im Explorer von VSCode ein neuer Tab "SERVERS", wenn man diesen öffnet erscheint der "Cummunity Server Connector". Mit rechtsklick darauf kann man einen neuen Server erstellen. Wir beantworten "Download Server?" mit Yes. und wählen "Apache Tomcat 9.0.41" als nächstes müssen wir die Lizenz akzeptieren. That's it. Nun sollte ein Apache Tomcat aufgelistet sein.</p>
<p>Es fehlt lediglich ein Benutzer, der die Administrationskonsole des Servers bedienen darf. Einen solchen Nutzer sollte aber eingerichtet werden, damit man die Administrationskonsole verwalten kann. Dazu öffnen wir folgende Datei (gilt nur für MacOS):  <span class="s1">/Users/&lt;deinuser&gt;/.rsp/redhat-community-server-connector/runtimes/installations/tomcat-9.0.41/apache-tomcat-9.0.41/conf/t</span><span class="s1">omcat-users.xml und fügen folgende Zeile hinzu:</span></p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">&lt;<span class="hljs-literal" style="color: #6897bb;">user</span> username=<span class="hljs-string" style="color: #6a8759;">"tomcat"</span> password=<span class="hljs-string" style="color: #6a8759;">"tomcat"</span> roles=<span class="hljs-string" style="color: #6a8759;">"manager,manager-gui"</span>/&gt;</pre>
<p>Natürlich sollte ein anderes Kennwort verwendet werden, idealerweise lässt man eines generieren. Der Server ist jetzt fertig konfiguriert. Der Server kann nun mit einem Rechtsklick auf dem TomCat Server gestartet werden.</p>
<h2>Installation verifizieren</h2>
<p>Um zu überprüfen, ob der Server wirklich funktioniert, kann man nun die Administrationskonsole unter <a href="http://localhost:8080/manager">http://localhost:8080/manager</a> aufrufen. Nun sollte eine Loginmaske erscheinen, in welchem wir den zuvor definieren User und PW eingeben. Nach der Anmeldung sollte man die Tomcat-Manager-Anwendung zu sehen bekommen:</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/36/Screenshot-2022-06-21-at-10.59.45.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/36/responsive/Screenshot-2022-06-21-at-10.59.45-xs.png 300w ,https://www.finecloud.ch/media/posts/36/responsive/Screenshot-2022-06-21-at-10.59.45-sm.png 480w ,https://www.finecloud.ch/media/posts/36/responsive/Screenshot-2022-06-21-at-10.59.45-md.png 768w ,https://www.finecloud.ch/media/posts/36/responsive/Screenshot-2022-06-21-at-10.59.45-lg.png 1024w ,https://www.finecloud.ch/media/posts/36/responsive/Screenshot-2022-06-21-at-10.59.45-xl.png 1360w ,https://www.finecloud.ch/media/posts/36/responsive/Screenshot-2022-06-21-at-10.59.45-2xl.png 1600w"  alt="" width="1912" height="926"></figure>
<p>Wenn man diese Ansicht zu sehen bekommt kann man sicher sein, das die Installation erfolgreich war und der Tomcat Server funktioniert.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Tabby Config-Sync auf Nextcloud einrichten</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/tabby.html"/>
        <id>https://www.finecloud.ch/tabby.html</id>
            <category term="unix"/>
            <category term="tools"/>
            <category term="tabby"/>
            <category term="ssh"/>
            <category term="shell"/>
            <category term="nextcloud"/>
            <category term="linux"/>
            <category term="container"/>

        <updated>2022-06-17T06:44:36+02:00</updated>
            <summary>
                <![CDATA[
                    A terminal for the modern age Tabby ist ein anpassbares, Platform-Übergreifendes Terminal App für die Arbeit mit Lokalen Shells sowie Serial, SSH und Telnet Verbindungen. Aus diesen Gründen ist Tabby viel praktischer und moderner als Putty: Link zum App: https://tabby.sh/ Link zum Projekt auf GitHub:&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3>A terminal for the modern age</h3>
<p><a href="https://tabby.sh/" rel="nofollow">Tabby</a> ist ein anpassbares, Platform-Übergreifendes Terminal App für die Arbeit mit Lokalen Shells sowie Serial, SSH und Telnet Verbindungen.</p>
<figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/33/readme-terminal.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/33/responsive/readme-terminal-xs.png 300w ,https://www.finecloud.ch/media/posts/33/responsive/readme-terminal-sm.png 480w ,https://www.finecloud.ch/media/posts/33/responsive/readme-terminal-md.png 768w ,https://www.finecloud.ch/media/posts/33/responsive/readme-terminal-lg.png 1024w ,https://www.finecloud.ch/media/posts/33/responsive/readme-terminal-xl.png 1360w ,https://www.finecloud.ch/media/posts/33/responsive/readme-terminal-2xl.png 1600w"  alt="" width="2724" height="1810"></figure>
<p>Aus diesen Gründen ist Tabby viel praktischer und moderner als <a href="https://www.putty.org/" target="_blank" rel="nofollow noopener noreferrer">Putty</a>:</p>
<ul>
<li>Läuft auf Windows, Mac und Linux</li>
<li>Integrierter SSH-Client mit Verbindungsmanager</li>
<li>Integriertes serielles Terminal</li>
<li>Unterstützung für PowerShell, PS Core, WSL, Git-Bash, Cygwin, Cmder und CMD</li>
<li>Volle Unicode-Unterstützung, einschließlich Zeichen mit doppelter Breite</li>
<li>Dateiübertragung von/zu SSH-Sitzungen über SFTP und Zmodem</li>
<li>Thematisierung und Farbschemata</li>
<li>Vollständig konfigurierbare Shortcuts und Multi-Chord-Shortcuts</li>
<li>Erinnert sich an Ihre Registerkarten und geteilten Fenster</li>
<li>Shell-Funktionen wie unter Windows, einschließlich Tab-Vervollständigung</li>
<li>Integrierter verschlüsselter Container für SSH-Secrets und -Konfiguration</li>
</ul>
<p>Link zum App: <a href="https://tabby.sh/">https://tabby.sh/</a></p>
<p>Link zum Projekt auf GitHub: <a href="https://github.com/eugeny/tabby">https://github.com/eugeny/tabby</a> </p>
<h3>Tabby Config Sync mit Nextcloud</h3>
<p class="msg msg--warning">Achtung: So schön das alles klingt, der WebDav Sync mit Nextcloud scheint nicht zu funktionieren. Beim Anlegen der Konfigdatei via WebDav erscheint ein unspezifischer Fehler. Solange das Problem noch nicht behoben ist, muss man wohl mit alternativen auskommen wie FTPS oder manuelles kopieren der Datei auf einen Nextcloud-Share.</p>
<p>Doch was bringt das alles ohne Config Sync zwischen deinen einzelnen Geräten, Windows, MacOS und Linux. Dafür kannst du entweder den Server von Tabby verwenden, oder andere 3rd Party Backends. Noch toller ist aber, dass du deine eigene Nextcloud mittels DAV Protokoll verwenden kannst, um die Konfiguration zwischen deinen Geräten zu synchronisieren:</p>
<h5>Vorbereitungen auf Nextcloud</h5>
<ol>
<li>Aus Sicherheitsgründen empfehle ich für den ConfigSync einen separaten Benutzer Account explizit nur für diesen ConfigSync zu erstellen.</li>
<li>Melde dich mit dem neuen Benutzer an deiner Nextcloud an und erstelle einen neuen leeren Ordner "TabbyConfigSync".</li>
<li>Optional kannst du unter den Security Einstellungen des Benutzers noch ein App Passwort generieren - damit kannst du den Zugriff auf das DAV Protokoll beschränken. Mit dem App Passwort ist eine Anmeldung am Nextcloud WebInterface nicht möglich.</li>
</ol>
<h5>Einstellungen in der Tabby App</h5>
<ol>
<li>Installiere das Tabby Plugin "cloud-settings-sync" Quelle: <a href="https://tabby-cloud.tranit.co/">https://tabby-cloud.tranit.co/</a> <br><figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/33/Screenshot-2022-06-14-at-22.13.16.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.13.16-xs.png 300w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.13.16-sm.png 480w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.13.16-md.png 768w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.13.16-lg.png 1024w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.13.16-xl.png 1360w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.13.16-2xl.png 1600w"  alt="" width="1754" height="1094"></figure></li>
<li>Klicke auf "Get" um das Plugin zu installieren:<br><figure class="post__image"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/33/Screenshot-2022-06-14-at-22.15.00.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.15.00-xs.png 300w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.15.00-sm.png 480w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.15.00-md.png 768w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.15.00-lg.png 1024w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.15.00-xl.png 1360w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.15.00-2xl.png 1600w"  alt="" width="1754" height="1094"></figure></li>
<li>Beende die App und starte sie neu, damit das Plugin aktiv wird</li>
<li>Nun ist ein neuer Reiter in den Einstellungen "Settings Sync", gib hier die folgenden Einstellungen an:
<ul>
<li>URL: <a href="https://nextcloud.domain.com">https://nextcloud.domain.com</a></li>
<li>User: useraccount</li>
<li>Password: dein App-Passwort</li>
<li>Port: 443</li>
<li>Pfad: /remote.php/dav/files/useraccount/TabbyConfigSync<br><figure class="post__image post__image--wide"><img loading="lazy"  src="https://www.finecloud.ch/media/posts/33/Screenshot-2022-06-14-at-22.57.05.png" sizes="100vw" srcset="https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.57.05-xs.png 300w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.57.05-sm.png 480w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.57.05-md.png 768w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.57.05-lg.png 1024w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.57.05-xl.png 1360w ,https://www.finecloud.ch/media/posts/33/responsive/Screenshot-2022-06-14-at-22.57.05-2xl.png 1600w"  alt="" width="1913" height="693"></figure></li>
<li>Klicke anschliessend auf den Button "Test Connection"</li>
</ul>
</li>
<li>Sofern deine Einstellungen korrekt sind, Klicke auf "Save This Setting". Nun kannst du nun auf der rechten Seite noch den Sync aktivieren.</li>
<li>Richte diese Konfiguration auf allen deinen Geräten so ein und deine Config ist auf allen Geräten immer aktuell.</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Netzwerkkommunikation mit Java</title>
        <author>
            <name>Finecloud</name>
        </author>
        <link href="https://www.finecloud.ch/netzwerkkommunikation-mit-java.html"/>
        <id>https://www.finecloud.ch/netzwerkkommunikation-mit-java.html</id>
            <category term="writer"/>
            <category term="softwareentwicklung"/>
            <category term="socket"/>
            <category term="reader"/>
            <category term="network"/>
            <category term="java.io"/>
            <category term="java"/>
            <category term="dev"/>
            <category term="bufferedwriter"/>

        <updated>2022-06-21T10:11:31+02:00</updated>
            <summary>
                <![CDATA[
                    In Java gibt es keinen nennenswerten Unterschied wischen I/O mit Daten und I/O mit Netzwerkverbindungen. In beiden Fällen basiert die Ein- und Ausgabe auf InputStream und OutputStream, der Unterschied liegt nur darin, wo diese Datenströme herkommen. Bei der Netzwerkkommunikation mit dem TCP-Protokoll kommen sie aus&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In Java gibt es keinen nennenswerten Unterschied wischen I/O mit Daten und I/O mit Netzwerkverbindungen. In beiden Fällen basiert die Ein- und Ausgabe auf InputStream und OutputStream, der Unterschied liegt nur darin, wo diese Datenströme herkommen. Bei der Netzwerkkommunikation mit dem TCP-Protokoll kommen sie aus einem Socket. Bei UDP wird die Klasse DatagramSocket verwendet, welche nicht auf Streams basiert.</p>
<p>Socket hat zwar eine lange Liste von Methoden, aber bei der grundlegenden Verwendung kann man die meisten davon ignorieren.</p>
<h3>Client-Seite</h3>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">String nachricht = in.readLine();
<span class="hljs-keyword" style="color: #cc7832;">try</span> (Socket verbindung = <span class="hljs-keyword" style="color: #cc7832;">new</span> Socket(<span class="hljs-string" style="color: #6a8759;">"localhost"</span>, <span class="hljs-number" style="color: #6897bb;">23456</span>)){
    BufferedReader reader = <span class="hljs-keyword" style="color: #cc7832;">new</span> BufferedReader(
     <span class="hljs-keyword" style="color: #cc7832;">new</span> InputStreamReader(verbindung.getInputStream())); 
    BufferedWriter writer = <span class="hljs-keyword" style="color: #cc7832;">new</span> BufferedWriter(
     <span class="hljs-keyword" style="color: #cc7832;">new</span> OutputStreamWriter(verbindung.getOutputStream()));
    writer.write(nachricht);
    writer.newLine();
    writer.flush();
    String antwort = reader.readLine();
}</pre>
<p>Im Beispiel wird dem Socket im Konstruktor Adresse (IP oder Hostname) und Port des Servers angegeben, mit dem eine Verbindung hergestellt werden soll. Die Verbindung wird automatisch hergestellt und mit den Methoden getInputStream und getOutputStream kann man Daten vom Server empfangen und zum Server senden.</p>
<p>Einen kleinen Unterschied zwischen Netzwerk I/O und Datei I/O gibt es mit der flush-Methode. Sie sorgt dafür, dass der Schreibpuffer sofort weiterverarbeitet wird, auch wenn er noch nicht voll ist. Dabei wird der Strom aber nicht sofort geschlossen, denn es sollen nicht nur Daten in eine Richtung versendet werden, es soll echte Kommunikation in beide Richtungen stattfinden. Damit der Server eine Antwort schicken kann, die dann mit readLine gelesen werden kann, muss er zunächst die Nachricht vom Client erhalten und dazu muss der Client den Puffer leeren.</p>
<p>Ausserdem wird weder InputStream noch OutputStream geschlossen. Beide sind fest mit dem Socket verbunden, aus dem sie hergestellt wurden und wenn man einen der Ströme schliesst, wird auch der Socket geschlossen. Andersherum werden die Datenströme aber auch geschlossen, wenn man den Socket schliesst, deswegen reicht es, diesen als Ressource für den try-Block anzugeben.</p>
<h3>Server-Seite</h3>
<p>Ein einfaches Serverprogramm in Java zu schreiben, ist kaum anders als beim Client, nur die Herkunft des Sockets ändert sich:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">ServerSocket server = <span class="hljs-keyword" style="color: #cc7832;">new</span> ServerSocket(<span class="hljs-number" style="color: #6897bb;">23456</span>);
<span class="hljs-keyword" style="color: #cc7832;">try</span> (Socket verbindung = server.accept()){
    BufferedReader reader = <span class="hljs-keyword" style="color: #cc7832;">new</span> BufferedReader(
     <span class="hljs-keyword" style="color: #cc7832;">new</span> InputStreamReader(verbindung.getInputStream())); 
    BufferedWriter writer = <span class="hljs-keyword" style="color: #cc7832;">new</span> BufferedWriter(
     <span class="hljs-keyword" style="color: #cc7832;">new</span> OutputStreamWriter(verbindung.getOutputStream()));
    String nachricht = reader.readLine();
    writer.write(antwort);
    writer.flush();
}</pre>
<p>Ein ServerSocket dient nicht direkt der Kommunikation, er wartet nur auf eingehende Verbindungen. Der Konstruktor-Parameter gibt den Port an, auf dem Verbindungen akzeptiert werden sollen; die Methode accept wartet, bis auf diesem Port eine Verbindung hergestellt wird. Und warten heisst hier wirklich warten: accept blockiert so lange, bis eine Verbindung zustande kommt. Wenn dies der Fall ist, gibt accept einen Socket zurück, mit dem man genauso verfahren kann, wie mit einem Socket auf der Client-Seite.</p>
<p>Wie demonstriert, wird nur eine Verbindung akzeptiert und verarbeitet. Für ein Beispiel ausreichend, werden für einen echten Serverprozess dagegen üblicherweise Verbindungen in einer Schleife akzeptiert und die Verarbeiten wird in einem neuen Thread durchgeführt, so dass dieser Thread erneut mit accept auf Verbindungen warten kann.</p>
<p>Hier ein Beispiel-Code für ServerSocket mit Threads:</p>
<pre class="hljs" style="color: #a9b7c6; background: #282b2e none repeat scroll 0% 0%; display: block; overflow-x: auto; padding: 0.5em;">ServerSocket server = <span class="hljs-keyword" style="color: #cc7832;">new</span> ServerSocket(<span class="hljs-number" style="color: #6897bb;">23456</span>);
<span class="hljs-keyword" style="color: #cc7832;">while</span>(!beendet){
    <span class="hljs-keyword" style="color: #cc7832;">try</span> (Socket verbindung = server.accept()){
        <span class="hljs-keyword" style="color: #cc7832;">new</span> Thread(() -&gt; verarbeiteVerbidnung(verbindung));
    }
}</pre>
            ]]>
        </content>
    </entry>
</feed>
